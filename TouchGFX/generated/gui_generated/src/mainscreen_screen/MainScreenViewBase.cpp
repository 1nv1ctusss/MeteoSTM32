/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/MainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

MainScreenViewBase::MainScreenViewBase() :
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &MainScreenViewBase::sliderValueChangedCallbackHandler)
{

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_MAINSCREEN1_ID));

    co2Value.setPosition(333, 395, 140, 50);
    co2Value.setColor(touchgfx::Color::getColorFrom24BitRGB(19, 77, 102));
    co2Value.setLinespacing(0);
    co2ValueBuffer[0] = 0;
    co2Value.setWildcard(co2ValueBuffer);
    co2Value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));

    TempValue.setPosition(565, 89, 144, 114);
    TempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(41, 41, 41));
    TempValue.setLinespacing(0);
    TempValueBuffer[0] = 0;
    TempValue.setWildcard(TempValueBuffer);
    TempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));

    humValue.setPosition(563, 298, 144, 114);
    humValue.setColor(touchgfx::Color::getColorFrom24BitRGB(41, 41, 41));
    humValue.setLinespacing(0);
    humValueBuffer[0] = 0;
    humValue.setWildcard(humValueBuffer);
    humValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));

    outTempValue.setPosition(30, 89, 144, 114);
    outTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(41, 41, 41));
    outTempValue.setLinespacing(0);
    outTempValueBuffer[0] = 0;
    outTempValue.setWildcard(outTempValueBuffer);
    outTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID25));

    outHumValue.setPosition(30, 298, 144, 114);
    outHumValue.setColor(touchgfx::Color::getColorFrom24BitRGB(41, 41, 41));
    outHumValue.setLinespacing(0);
    outHumValueBuffer[0] = 0;
    outHumValue.setWildcard(outHumValueBuffer);
    outHumValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));

    digitalClock1.setPosition(319, 324, 166, 54);
    digitalClock1.setColor(touchgfx::Color::getColorFrom24BitRGB(19, 77, 102));
    digitalClock1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
    digitalClock1.displayLeadingZeroForHourIndicator(true);
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
    digitalClock1.setTime24Hour(12, 0, 0);

    Sunny.setXY(267, 18);
    Sunny.setVisible(false);
    Sunny.setBitmap(touchgfx::Bitmap(BITMAP_SUNNY_ID));

    Rain.setXY(267, 18);
    Rain.setVisible(false);
    Rain.setBitmap(touchgfx::Bitmap(BITMAP_RAIN_ID));

    Cloudy.setXY(267, 18);
    Cloudy.setVisible(false);
    Cloudy.setBitmap(touchgfx::Bitmap(BITMAP_CLOUDY_ID));

    Thunder.setXY(267, 18);
    Thunder.setVisible(false);
    Thunder.setBitmap(touchgfx::Bitmap(BITMAP_THUNDER_ID));

    Snow.setXY(267, 18);
    Snow.setVisible(false);
    Snow.setBitmap(touchgfx::Bitmap(BITMAP_SNOW_ID));

    Moon.setXY(267, 18);
    Moon.setVisible(false);
    Moon.setBitmap(touchgfx::Bitmap(BITMAP_MOON_ID));

    slideMenu.setup(touchgfx::SlideMenu::SOUTH,
        touchgfx::Bitmap(BITMAP_SLIDEMENU_ID),
        0, 0);
    slideMenu.setState(touchgfx::SlideMenu::COLLAPSED);
    slideMenu.setVisiblePixelsWhenCollapsed(0);
    slideMenu.setHiddenPixelsWhenExpanded(0);
    slideMenu.setAnimationEasingEquation(touchgfx::EasingEquations::circEaseInOut);
    slideMenu.setAnimationDuration(36);
    slideMenu.setExpandedStateTimeout(1200);
    slideMenu.setXY(0, 10);

    WiFiButton.setXY(605, 20);
    WiFiButton.setBitmaps(touchgfx::Bitmap(BITMAP_WIFIBUTTONON_ID), touchgfx::Bitmap(BITMAP_WIFIBUTTONOFF_ID));
    slideMenu.add(WiFiButton);

    EmulatorButton.setXY(20, 20);
    EmulatorButton.setBitmaps(touchgfx::Bitmap(BITMAP_EMULATORBUTTONOFF_ID), touchgfx::Bitmap(BITMAP_EMULATORBUTTONON_ID));
    EmulatorButton.setAction(buttonCallback);
    slideMenu.add(EmulatorButton);

    HAButton.setXY(215, 20);
    HAButton.setBitmaps(touchgfx::Bitmap(BITMAP_HAOFF_ID), touchgfx::Bitmap(BITMAP_HAON_ID));
    HAButton.setAction(buttonCallback);
    slideMenu.add(HAButton);

    BrightnessPic.setBitmap(touchgfx::Bitmap(BITMAP_ICONSUN_ID));
    BrightnessPic.setPosition(26, 80, 64, 70);
    BrightnessPic.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    slideMenu.add(BrightnessPic);

    brightnessSlider.setXY(110, 100);
    brightnessSlider.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDERDARK_ID), touchgfx::Bitmap(BITMAP_SLIDERLIGHT_ID), touchgfx::Bitmap(BITMAP_SLIDERPIN_ID));
    brightnessSlider.setupHorizontalSlider(0, 10, 0, 0, 645);
    brightnessSlider.setValueRange(0, 25000);
    brightnessSlider.setValue(25000);
    brightnessSlider.setNewValueCallback(sliderValueChangedCallback);
    slideMenu.add(brightnessSlider);

    SlideMenuCloseButton.setXY(220, 142);
    SlideMenuCloseButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_LARGE_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_LARGE_ID));
    SlideMenuCloseButton.setAction(buttonCallback);
    SlideMenuCloseButton.setAlpha(0);
    slideMenu.add(SlideMenuCloseButton);

    MenuButton.setXY(410, 20);
    MenuButton.setBitmaps(touchgfx::Bitmap(BITMAP_MENUBUTTONOFF_ID), touchgfx::Bitmap(BITMAP_MENUBUTTONON_ID));
    MenuButton.setAction(buttonCallback);
    slideMenu.add(MenuButton);

    SlideMenuButton.setXY(220, -1);
    SlideMenuButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_LARGE_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_LARGE_ID));
    SlideMenuButton.setAction(buttonCallback);
    SlideMenuButton.setAlpha(0);

    add(__background);
    add(image1);
    add(co2Value);
    add(TempValue);
    add(humValue);
    add(outTempValue);
    add(outHumValue);
    add(digitalClock1);
    add(Sunny);
    add(Rain);
    add(Cloudy);
    add(Thunder);
    add(Snow);
    add(Moon);
    add(slideMenu);
    add(SlideMenuButton);
}

void MainScreenViewBase::setupScreen()
{

}

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &EmulatorButton)
    {
        //EmulatorTurn
        //When EmulatorButton clicked call virtual function
        //Call toggleEmulation
        toggleEmulation();
    }
    else if (&src == &HAButton)
    {
        //ToHAScreen
        //When HAButton clicked change screen to HA_screen
        //Go to HA_screen with no screen transition
        application().gotoHA_screenScreenNoTransition();
    }
    else if (&src == &SlideMenuCloseButton)
    {
        //CloseSlideMenu
        //When SlideMenuCloseButton clicked animateToState slideMenu
        //Set State on slideMenu to Collapsed
        slideMenu.animateToState(SlideMenu::COLLAPSED);
    }
    else if (&src == &MenuButton)
    {
        //ShowMenu
        //When MenuButton clicked change screen to MenuScreen
        //Go to MenuScreen with no screen transition
        application().gotoMenuScreenScreenNoTransition();
    }
    else if (&src == &SlideMenuButton)
    {
        //OpenSlideMenu
        //When SlideMenuButton clicked animateToState slideMenu
        //Set State on slideMenu to Expanded
        slideMenu.animateToState(SlideMenu::EXPANDED);
    }
}

void MainScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &brightnessSlider)
    {
        //SetBrightness
        //When brightnessSlider value changed call virtual function
        //Call SetBrightness
        SetBrightness(value);
    }
}
