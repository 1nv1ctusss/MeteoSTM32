/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINSCREENVIEWBASE_HPP
#define MAINSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/mainscreen_screen/MainScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/containers/SlideMenu.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/Slider.hpp>

class MainScreenViewBase : public touchgfx::View<MainScreenPresenter>
{
public:
    MainScreenViewBase();
    virtual ~MainScreenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SetBrightness(int value)
    {
        // Override and implement this function in MainScreen
    }

    virtual void toggleEmulation()
    {
        // Override and implement this function in MainScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::TextAreaWithOneWildcard co2Value;
    touchgfx::TextAreaWithOneWildcard TempValue;
    touchgfx::TextAreaWithOneWildcard humValue;
    touchgfx::TextAreaWithOneWildcard outTempValue;
    touchgfx::TextAreaWithOneWildcard outHumValue;
    touchgfx::DigitalClock digitalClock1;
    touchgfx::Image Sunny;
    touchgfx::Image Rain;
    touchgfx::Image Cloudy;
    touchgfx::Image Thunder;
    touchgfx::Image Snow;
    touchgfx::Image Moon;
    touchgfx::SlideMenu slideMenu;
    touchgfx::Button WiFiButton;
    touchgfx::ToggleButton EmulatorButton;
    touchgfx::Button HAButton;
    touchgfx::ScalableImage BrightnessPic;
    touchgfx::Slider brightnessSlider;
    touchgfx::Button SlideMenuCloseButton;
    touchgfx::Button MenuButton;
    touchgfx::Button SlideMenuButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t CO2VALUE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar co2ValueBuffer[CO2VALUE_SIZE];
    static const uint16_t TEMPVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar TempValueBuffer[TEMPVALUE_SIZE];
    static const uint16_t HUMVALUE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar humValueBuffer[HUMVALUE_SIZE];
    static const uint16_t OUTTEMPVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar outTempValueBuffer[OUTTEMPVALUE_SIZE];
    static const uint16_t OUTHUMVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar outHumValueBuffer[OUTHUMVALUE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<MainScreenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // MAINSCREENVIEWBASE_HPP
