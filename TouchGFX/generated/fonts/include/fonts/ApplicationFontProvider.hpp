/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#ifndef APPLICATIONFONTPROVIDER_HPP
#define APPLICATIONFONTPROVIDER_HPP

#include <touchgfx/FontManager.hpp>

namespace touchgfx
{
    class FlashDataReader;
}

struct Typography
{
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
    static const touchgfx::FontId ABOVEDEFAULT = 3;
    static const touchgfx::FontId DISPLAY = 4;
    static const touchgfx::FontId KEYBOARD = 5;
    static const touchgfx::FontId MODE = 6;
    static const touchgfx::FontId DIGITALTHIN = 7;
    static const touchgfx::FontId DIGITAL_50 = 8;
    static const touchgfx::FontId THINDIG30 = 9;
};

struct TypographyFontIndex
{
    static const touchgfx::FontId DEFAULT = 0;      // verdana_20_4bpp
    static const touchgfx::FontId LARGE = 1;        // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;        // verdana_10_4bpp
    static const touchgfx::FontId ABOVEDEFAULT = 3; // verdana_30_4bpp
    static const touchgfx::FontId DISPLAY = 4;      // arial_28_4bpp
    static const touchgfx::FontId KEYBOARD = 5;     // arial_20_4bpp
    static const touchgfx::FontId MODE = 6;         // arial_10_4bpp
    static const touchgfx::FontId DIGITALTHIN = 7;  // digitalicg_90_4bpp
    static const touchgfx::FontId DIGITAL_50 = 8;   // digital_50_4bpp
    static const touchgfx::FontId THINDIG30 = 9;    // digitalicg_40_4bpp
    static const uint16_t NUMBER_OF_FONTS = 10;
};

class ApplicationFontProvider : public touchgfx::FontProvider
{
public:
    virtual touchgfx::Font* getFont(touchgfx::FontId typography);

    static void setFlashReader(touchgfx::FlashDataReader* /* flashReader */) { }
    static touchgfx::FlashDataReader* getFlashReader() { return 0; }
};

#endif // APPLICATIONFONTPROVIDER_HPP
