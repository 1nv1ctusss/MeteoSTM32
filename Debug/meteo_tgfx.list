
meteo_tgfx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028e88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004688  08029128  08029128  00039128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002de8  0802d7b0  0802d7b0  0003d7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000010  08030598  08030598  00040598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 00091e1c  080305a8  080305a8  000405a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000007c  080c23c4  080c23c4  000d23c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  080c2440  080c2440  000d2440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  080c2448  080c2448  000d2448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  080c245c  080c245c  000d245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000e0  20000000  080c2464  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006c84  200000e0  080c2544  000e00e0  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  20006d64  080c2544  000e6d64  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00209400  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 00119400  c0500000  c0500000  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   000de573  00000000  00000000  0020942e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00016260  00000000  00000000  002e79a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000042e8  00000000  00000000  002fdc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003d40  00000000  00000000  00301ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00048874  00000000  00000000  00305c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004f614  00000000  00000000  0034e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001973de  00000000  00000000  0039dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000d2  00000000  00000000  00534e96  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001233c  00000000  00000000  00534f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200000e0 	.word	0x200000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08029110 	.word	0x08029110

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200000e4 	.word	0x200000e4
 80002dc:	08029110 	.word	0x08029110

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96e 	b.w	80009ec <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <StartClimateTask>:
};

extern osMessageQueueId_t climateQueueHandle;

void StartClimateTask(void *argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  srand(10);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f027 fecd 	bl	8028798 <srand>
  climateData climate;
  for(;;)
  {
    climate.co2 = (rand() % 1500 + 500);
 80009fe:	f027 fef9 	bl	80287f4 <rand>
 8000a02:	4602      	mov	r2, r0
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <StartClimateTask+0x84>)
 8000a06:	fb83 1302 	smull	r1, r3, r3, r2
 8000a0a:	1159      	asrs	r1, r3, #5
 8000a0c:	17d3      	asrs	r3, r2, #31
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000a14:	fb01 f303 	mul.w	r3, r1, r3
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000a1e:	613b      	str	r3, [r7, #16]
    climate.temperature = (rand() % 50 );
 8000a20:	f027 fee8 	bl	80287f4 <rand>
 8000a24:	4602      	mov	r2, r0
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <StartClimateTask+0x88>)
 8000a28:	fb83 1302 	smull	r1, r3, r3, r2
 8000a2c:	1119      	asrs	r1, r3, #4
 8000a2e:	17d3      	asrs	r3, r2, #31
 8000a30:	1acb      	subs	r3, r1, r3
 8000a32:	2132      	movs	r1, #50	; 0x32
 8000a34:	fb01 f303 	mul.w	r3, r1, r3
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	60bb      	str	r3, [r7, #8]
    climate.humidity = (rand() % 80 );
 8000a3c:	f027 feda 	bl	80287f4 <rand>
 8000a40:	4601      	mov	r1, r0
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <StartClimateTask+0x8c>)
 8000a44:	fb83 2301 	smull	r2, r3, r3, r1
 8000a48:	115a      	asrs	r2, r3, #5
 8000a4a:	17cb      	asrs	r3, r1, #31
 8000a4c:	1ad2      	subs	r2, r2, r3
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	1aca      	subs	r2, r1, r3
 8000a58:	60fa      	str	r2, [r7, #12]
    osMessageQueuePut(climateQueueHandle, &climate, 0, 0);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <StartClimateTask+0x90>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	f107 0108 	add.w	r1, r7, #8
 8000a62:	2300      	movs	r3, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	f00b fff9 	bl	800ca5c <osMessageQueuePut>

    osDelay(9000);
 8000a6a:	f242 3028 	movw	r0, #9000	; 0x2328
 8000a6e:	f00b fe46 	bl	800c6fe <osDelay>
    climate.co2 = (rand() % 1500 + 500);
 8000a72:	e7c4      	b.n	80009fe <StartClimateTask+0xe>
 8000a74:	057619f1 	.word	0x057619f1
 8000a78:	51eb851f 	.word	0x51eb851f
 8000a7c:	66666667 	.word	0x66666667
 8000a80:	200066a4 	.word	0x200066a4

08000a84 <SDRAM_Initialization_Sequence>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	__IO uint32_t tmpmrd =0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
	/* Step 1:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aae:	6839      	ldr	r1, [r7, #0]
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f008 f9ad 	bl	8008e10 <HAL_SDRAM_SendCommand>

	  /* Step 2: Insert 100 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f001 fe76 	bl	80027a8 <HAL_Delay>

	  /* Step 3: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2201      	movs	r2, #1
 8000acc:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad8:	6839      	ldr	r1, [r7, #0]
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f008 f998 	bl	8008e10 <HAL_SDRAM_SendCommand>

	  /* Step 4 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2210      	movs	r2, #16
 8000aea:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 16;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2210      	movs	r2, #16
 8000af0:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afc:	6839      	ldr	r1, [r7, #0]
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f008 f986 	bl	8008e10 <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000b04:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b08:	60fb      	str	r3, [r7, #12]
			  	  	  	  SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_2           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2210      	movs	r2, #16
 8000b14:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b26:	6839      	ldr	r1, [r7, #0]
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f008 f971 	bl	8008e10 <HAL_SDRAM_SendCommand>

	  /* Step 6: Set the refresh rate counter */
	  /* Set the device refresh rate */
	  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8000b2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f008 f9a1 	bl	8008e7a <HAL_SDRAM_ProgramRefreshRate>
}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b46:	4b66      	ldr	r3, [pc, #408]	; (8000ce0 <main+0x1a0>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d11b      	bne.n	8000b8a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b52:	f3bf 8f4f 	dsb	sy
}
 8000b56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b58:	f3bf 8f6f 	isb	sy
}
 8000b5c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b5e:	4b60      	ldr	r3, [pc, #384]	; (8000ce0 <main+0x1a0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b66:	f3bf 8f4f 	dsb	sy
}
 8000b6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b6c:	f3bf 8f6f 	isb	sy
}
 8000b70:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b72:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <main+0x1a0>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a5a      	ldr	r2, [pc, #360]	; (8000ce0 <main+0x1a0>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7e:	f3bf 8f4f 	dsb	sy
}
 8000b82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b84:	f3bf 8f6f 	isb	sy
}
 8000b88:	e000      	b.n	8000b8c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b8a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b8c:	4b54      	ldr	r3, [pc, #336]	; (8000ce0 <main+0x1a0>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d138      	bne.n	8000c0a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b98:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <main+0x1a0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba0:	f3bf 8f4f 	dsb	sy
}
 8000ba4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ba6:	4b4e      	ldr	r3, [pc, #312]	; (8000ce0 <main+0x1a0>)
 8000ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bac:	61fb      	str	r3, [r7, #28]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	0b5b      	lsrs	r3, r3, #13
 8000bb2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bb6:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bc0:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	015a      	lsls	r2, r3, #5
 8000bc6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bca:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bd0:	4943      	ldr	r1, [pc, #268]	; (8000ce0 <main+0x1a0>)
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	617a      	str	r2, [r7, #20]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1ef      	bne.n	8000bc2 <main+0x82>
    } while(sets-- != 0U);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	61ba      	str	r2, [r7, #24]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1e5      	bne.n	8000bb8 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bec:	f3bf 8f4f 	dsb	sy
}
 8000bf0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bf2:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <main+0x1a0>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <main+0x1a0>)
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfe:	f3bf 8f4f 	dsb	sy
}
 8000c02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c04:	f3bf 8f6f 	isb	sy
}
 8000c08:	e000      	b.n	8000c0c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c0a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f001 fd70 	bl	80026f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f888 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 fc72 	bl	80014fc <MX_GPIO_Init>
  MX_FMC_Init();
 8000c18:	f000 fc20 	bl	800145c <MX_FMC_Init>
  MX_LTDC_Init();
 8000c1c:	f000 f9e2 	bl	8000fe4 <MX_LTDC_Init>
  MX_USART3_UART_Init();
 8000c20:	f000 fbd0 	bl	80013c4 <MX_USART3_UART_Init>
  MX_DMA2D_Init();
 8000c24:	f000 f924 	bl	8000e70 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 8000c28:	f000 fa62 	bl	80010f0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000c2c:	f00b f9a8 	bl	800bf80 <MX_FATFS_Init>
  MX_CRC_Init();
 8000c30:	f000 f8fc 	bl	8000e2c <MX_CRC_Init>
  MX_I2C3_Init();
 8000c34:	f000 f956 	bl	8000ee4 <MX_I2C3_Init>
  MX_I2C4_Init();
 8000c38:	f000 f994 	bl	8000f64 <MX_I2C4_Init>
  MX_UART5_Init();
 8000c3c:	f000 fb2a 	bl	8001294 <MX_UART5_Init>
  MX_UART8_Init();
 8000c40:	f000 fb74 	bl	800132c <MX_UART8_Init>
  MX_TIM1_Init();
 8000c44:	f000 fa76 	bl	8001134 <MX_TIM1_Init>
  MX_TouchGFX_Init();
 8000c48:	f00f f850 	bl	800fcec <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FMC_SDRAM_CommandTypeDef command;
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4824      	ldr	r0, [pc, #144]	; (8000ce4 <main+0x1a4>)
 8000c52:	f7ff ff17 	bl	8000a84 <SDRAM_Initialization_Sequence>
    //HAL_SDRAM_WriteProtection_Disable(&hsdram1);
   HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2108      	movs	r1, #8
 8000c5a:	4823      	ldr	r0, [pc, #140]	; (8000ce8 <main+0x1a8>)
 8000c5c:	f002 fb76 	bl	800334c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EN_LCD_GPIO_Port, EN_LCD_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c66:	4821      	ldr	r0, [pc, #132]	; (8000cec <main+0x1ac>)
 8000c68:	f002 fb70 	bl	800334c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(TS_nRST_GPIO_Port, TS_nRST_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <main+0x1a8>)
 8000c74:	f002 fb6a 	bl	800334c <HAL_GPIO_WritePin>
   HAL_Delay(10);
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f001 fd95 	bl	80027a8 <HAL_Delay>
   gt911_TS_Start(GT911_ADDR);
 8000c7e:	20ba      	movs	r0, #186	; 0xba
 8000c80:	f014 fbe2 	bl	8015448 <gt911_TS_Start>
   //HAL_GPIO_WritePin(EN_PWM_GPIO_Port, EN_PWM_Pin, GPIO_PIN_SET);
   //memset(sdram_addr, 0x00FFFFFF,1000000);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c84:	f00b fc28 	bl	800c4d8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <main+0x1b0>)
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	2010      	movs	r0, #16
 8000c8e:	f00b fe71 	bl	800c974 <osMessageQueueNew>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <main+0x1b4>)
 8000c96:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <main+0x1b8>)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4817      	ldr	r0, [pc, #92]	; (8000cfc <main+0x1bc>)
 8000c9e:	f00b fc9c 	bl	800c5da <osThreadNew>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <main+0x1c0>)
 8000ca6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  climateQueueHandle = osMessageQueueNew(1, sizeof(climateData), &climateQueue_attributes);
 8000ca8:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <main+0x1c4>)
 8000caa:	2110      	movs	r1, #16
 8000cac:	2001      	movs	r0, #1
 8000cae:	f00b fe61 	bl	800c974 <osMessageQueueNew>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <main+0x1c8>)
 8000cb6:	6013      	str	r3, [r2, #0]
  touchgfxTaskHandle = osThreadNew(StartTouchgfxTask, NULL, &TouchgfxTask_attributes);
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <main+0x1cc>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4814      	ldr	r0, [pc, #80]	; (8000d10 <main+0x1d0>)
 8000cbe:	f00b fc8c 	bl	800c5da <osThreadNew>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <main+0x1d4>)
 8000cc6:	6013      	str	r3, [r2, #0]
  climateTaskHandle = osThreadNew(StartClimateTask, NULL, &ClimateTask_attributes);
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <main+0x1d8>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <main+0x1dc>)
 8000cce:	f00b fc84 	bl	800c5da <osThreadNew>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <main+0x1e0>)
 8000cd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cd8:	f00b fc44 	bl	800c564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0x19c>
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	200067f0 	.word	0x200067f0
 8000ce8:	58021800 	.word	0x58021800
 8000cec:	58020400 	.word	0x58020400
 8000cf0:	08029d8c 	.word	0x08029d8c
 8000cf4:	200067ec 	.word	0x200067ec
 8000cf8:	08029d68 	.word	0x08029d68
 8000cfc:	080017ed 	.word	0x080017ed
 8000d00:	20006398 	.word	0x20006398
 8000d04:	08029dc8 	.word	0x08029dc8
 8000d08:	200066a4 	.word	0x200066a4
 8000d0c:	08029da4 	.word	0x08029da4
 8000d10:	080017d9 	.word	0x080017d9
 8000d14:	200064e8 	.word	0x200064e8
 8000d18:	08029d44 	.word	0x08029d44
 8000d1c:	080009f1 	.word	0x080009f1
 8000d20:	20006394 	.word	0x20006394

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09c      	sub	sp, #112	; 0x70
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	224c      	movs	r2, #76	; 0x4c
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f027 f990 	bl	8028058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f027 f98a 	bl	8028058 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d44:	2002      	movs	r0, #2
 8000d46:	f003 fc25 	bl	8004594 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <SystemClock_Config+0xfc>)
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <SystemClock_Config+0xfc>)
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <SystemClock_Config+0xfc>)
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <SystemClock_Config+0x100>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a2e      	ldr	r2, [pc, #184]	; (8000e24 <SystemClock_Config+0x100>)
 8000d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <SystemClock_Config+0x100>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d7c:	bf00      	nop
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <SystemClock_Config+0x100>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d8a:	d1f8      	bne.n	8000d7e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <SystemClock_Config+0x104>)
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	f023 0303 	bic.w	r3, r3, #3
 8000d94:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <SystemClock_Config+0x104>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	2302      	movs	r3, #2
 8000dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000db2:	2350      	movs	r3, #80	; 0x50
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fc18 	bl	8004608 <HAL_RCC_OscConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000dde:	f000 fd1c 	bl	800181a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	233f      	movs	r3, #63	; 0x3f
 8000de4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de6:	2303      	movs	r3, #3
 8000de8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dee:	2308      	movs	r3, #8
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 f80d 	bl	8004e28 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000e14:	f000 fd01 	bl	800181a <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3770      	adds	r7, #112	; 0x70
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58000400 	.word	0x58000400
 8000e24:	58024800 	.word	0x58024800
 8000e28:	58024400 	.word	0x58024400

08000e2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <MX_CRC_Init+0x3c>)
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <MX_CRC_Init+0x40>)
 8000e34:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_CRC_Init+0x3c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_CRC_Init+0x3c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_CRC_Init+0x3c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_CRC_Init+0x3c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_CRC_Init+0x3c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_CRC_Init+0x3c>)
 8000e56:	f001 fdb7 	bl	80029c8 <HAL_CRC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e60:	f000 fcdb 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200064c4 	.word	0x200064c4
 8000e6c:	58024c00 	.word	0x58024c00

08000e70 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000e76:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <MX_DMA2D_Init+0x70>)
 8000e78:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000eb8:	f001 fe70 	bl	8002b9c <HAL_DMA2D_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ec2:	f000 fcaa 	bl	800181a <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <MX_DMA2D_Init+0x6c>)
 8000eca:	f001 ffdb 	bl	8002e84 <HAL_DMA2D_ConfigLayer>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000ed4:	f000 fca1 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20006784 	.word	0x20006784
 8000ee0:	52001000 	.word	0x52001000

08000ee4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_I2C3_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x009034B6;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_I2C3_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f20:	f002 fa2e 	bl	8003380 <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f000 fc76 	bl	800181a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f32:	f002 feff 	bl	8003d34 <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 fc6d 	bl	800181a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f44:	f002 ff41 	bl	8003dca <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 fc64 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000639c 	.word	0x2000639c
 8000f5c:	40005c00 	.word	0x40005c00
 8000f60:	009034b6 	.word	0x009034b6

08000f64 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_I2C4_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x009034B6;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <MX_I2C4_Init+0x7c>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000fa0:	f002 f9ee 	bl	8003380 <HAL_I2C_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000faa:	f000 fc36 	bl	800181a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000fb2:	f002 febf 	bl	8003d34 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 fc2d 	bl	800181a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_I2C4_Init+0x74>)
 8000fc4:	f002 ff01 	bl	8003dca <HAL_I2CEx_ConfigDigitalFilter>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 fc24 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200063e8 	.word	0x200063e8
 8000fdc:	58001c00 	.word	0x58001c00
 8000fe0:	009034b6 	.word	0x009034b6

08000fe4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2234      	movs	r2, #52	; 0x34
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f027 f831 	bl	8028058 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <MX_LTDC_Init+0x104>)
 8000ff8:	4a3c      	ldr	r2, [pc, #240]	; (80010ec <MX_LTDC_Init+0x108>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <MX_LTDC_Init+0x104>)
 8000ffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001002:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_LTDC_Init+0x104>)
 8001006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_LTDC_Init+0x104>)
 800100e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001012:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <MX_LTDC_Init+0x104>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 17;
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_LTDC_Init+0x104>)
 800101c:	2211      	movs	r2, #17
 800101e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <MX_LTDC_Init+0x104>)
 8001022:	2202      	movs	r2, #2
 8001024:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 27;
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_LTDC_Init+0x104>)
 8001028:	221b      	movs	r2, #27
 800102a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 25;
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <MX_LTDC_Init+0x104>)
 800102e:	2219      	movs	r2, #25
 8001030:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 865;
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_LTDC_Init+0x104>)
 8001034:	f240 3261 	movw	r2, #865	; 0x361
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 505;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_LTDC_Init+0x104>)
 800103c:	f240 12f9 	movw	r2, #505	; 0x1f9
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1055;
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_LTDC_Init+0x104>)
 8001044:	f240 421f 	movw	r2, #1055	; 0x41f
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 524;
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_LTDC_Init+0x104>)
 800104c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_LTDC_Init+0x104>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_LTDC_Init+0x104>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_LTDC_Init+0x104>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800106a:	481f      	ldr	r0, [pc, #124]	; (80010e8 <MX_LTDC_Init+0x104>)
 800106c:	f002 fefa 	bl	8003e64 <HAL_LTDC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8001076:	f000 fbd0 	bl	800181a <Error_Handler>
  }
  pLayerCfg.WindowX0 = 36;
 800107a:	2324      	movs	r3, #36	; 0x24
 800107c:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 836;
 800107e:	f44f 7351 	mov.w	r3, #836	; 0x344
 8001082:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 23;
 8001084:	2317      	movs	r3, #23
 8001086:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 503;
 8001088:	f240 13f7 	movw	r3, #503	; 0x1f7
 800108c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001092:	23ff      	movs	r3, #255	; 0xff
 8001094:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800109a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800109e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010a0:	2307      	movs	r3, #7
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010a4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80010aa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 80010b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_LTDC_Init+0x104>)
 80010d0:	f003 f850 	bl	8004174 <HAL_LTDC_ConfigLayer>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80010da:	f000 fb9e 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3738      	adds	r7, #56	; 0x38
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000656c 	.word	0x2000656c
 80010ec:	50001000 	.word	0x50001000

080010f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <MX_SDMMC1_SD_Init+0x3c>)
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 80010f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SDMMC1_SD_Init+0x3c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_SDMMC1_SD_Init+0x3c>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SDMMC1_SD_Init+0x3c>)
 8001108:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_SDMMC1_SD_Init+0x3c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <MX_SDMMC1_SD_Init+0x3c>)
 8001116:	220a      	movs	r2, #10
 8001118:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <MX_SDMMC1_SD_Init+0x3c>)
 800111c:	2201      	movs	r2, #1
 800111e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200064ec 	.word	0x200064ec
 8001130:	52007000 	.word	0x52007000

08001134 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09a      	sub	sp, #104	; 0x68
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	222c      	movs	r2, #44	; 0x2c
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f026 ff72 	bl	8028058 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001174:	4b45      	ldr	r3, [pc, #276]	; (800128c <MX_TIM1_Init+0x158>)
 8001176:	4a46      	ldr	r2, [pc, #280]	; (8001290 <MX_TIM1_Init+0x15c>)
 8001178:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 800117a:	4b44      	ldr	r3, [pc, #272]	; (800128c <MX_TIM1_Init+0x158>)
 800117c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001180:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b42      	ldr	r3, [pc, #264]	; (800128c <MX_TIM1_Init+0x158>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <MX_TIM1_Init+0x158>)
 800118a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800118e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001190:	4b3e      	ldr	r3, [pc, #248]	; (800128c <MX_TIM1_Init+0x158>)
 8001192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001196:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001198:	4b3c      	ldr	r3, [pc, #240]	; (800128c <MX_TIM1_Init+0x158>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b3b      	ldr	r3, [pc, #236]	; (800128c <MX_TIM1_Init+0x158>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011a4:	4839      	ldr	r0, [pc, #228]	; (800128c <MX_TIM1_Init+0x158>)
 80011a6:	f007 fe90 	bl	8008eca <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80011b0:	f000 fb33 	bl	800181a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011be:	4619      	mov	r1, r3
 80011c0:	4832      	ldr	r0, [pc, #200]	; (800128c <MX_TIM1_Init+0x158>)
 80011c2:	f008 f9d9 	bl	8009578 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80011cc:	f000 fb25 	bl	800181a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d0:	482e      	ldr	r0, [pc, #184]	; (800128c <MX_TIM1_Init+0x158>)
 80011d2:	f007 ff41 	bl	8009058 <HAL_TIM_PWM_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80011dc:	f000 fb1d 	bl	800181a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011f0:	4619      	mov	r1, r3
 80011f2:	4826      	ldr	r0, [pc, #152]	; (800128c <MX_TIM1_Init+0x158>)
 80011f4:	f008 fee2 	bl	8009fbc <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80011fe:	f000 fb0c 	bl	800181a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001202:	2360      	movs	r3, #96	; 0x60
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 30000;
 8001206:	f247 5330 	movw	r3, #30000	; 0x7530
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120c:	2300      	movs	r3, #0
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001210:	2300      	movs	r3, #0
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	4818      	ldr	r0, [pc, #96]	; (800128c <MX_TIM1_Init+0x158>)
 800122a:	f008 f895 	bl	8009358 <HAL_TIM_PWM_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001234:	f000 faf1 	bl	800181a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800124c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001250:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800125a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_TIM1_Init+0x158>)
 800126e:	f008 ff2d 	bl	800a0cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001278:	f000 facf 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <MX_TIM1_Init+0x158>)
 800127e:	f000 fe15 	bl	8001eac <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3768      	adds	r7, #104	; 0x68
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200066a8 	.word	0x200066a8
 8001290:	40010000 	.word	0x40010000

08001294 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <MX_UART5_Init+0x90>)
 800129a:	4a23      	ldr	r2, [pc, #140]	; (8001328 <MX_UART5_Init+0x94>)
 800129c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_UART5_Init+0x90>)
 80012a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_UART5_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_UART5_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_UART5_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_UART5_Init+0x90>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_UART5_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_UART5_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_UART5_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_UART5_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_UART5_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012dc:	4811      	ldr	r0, [pc, #68]	; (8001324 <MX_UART5_Init+0x90>)
 80012de:	f008 ff91 	bl	800a204 <HAL_UART_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80012e8:	f000 fa97 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ec:	2100      	movs	r1, #0
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_UART5_Init+0x90>)
 80012f0:	f009 fede 	bl	800b0b0 <HAL_UARTEx_SetTxFifoThreshold>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80012fa:	f000 fa8e 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <MX_UART5_Init+0x90>)
 8001302:	f009 ff13 	bl	800b12c <HAL_UARTEx_SetRxFifoThreshold>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800130c:	f000 fa85 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_UART5_Init+0x90>)
 8001312:	f009 fe94 	bl	800b03e <HAL_UARTEx_DisableFifoMode>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800131c:	f000 fa7d 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20006614 	.word	0x20006614
 8001328:	40005000 	.word	0x40005000

0800132c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_UART8_Init+0x90>)
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <MX_UART8_Init+0x94>)
 8001334:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_UART8_Init+0x90>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_UART8_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_UART8_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_UART8_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_UART8_Init+0x90>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_UART8_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_UART8_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_UART8_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_UART8_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_UART8_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_UART8_Init+0x90>)
 8001376:	f008 ff45 	bl	800a204 <HAL_UART_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001380:	f000 fa4b 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <MX_UART8_Init+0x90>)
 8001388:	f009 fe92 	bl	800b0b0 <HAL_UARTEx_SetTxFifoThreshold>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001392:	f000 fa42 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_UART8_Init+0x90>)
 800139a:	f009 fec7 	bl	800b12c <HAL_UARTEx_SetRxFifoThreshold>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f000 fa39 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_UART8_Init+0x90>)
 80013aa:	f009 fe48 	bl	800b03e <HAL_UARTEx_DisableFifoMode>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80013b4:	f000 fa31 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200066f4 	.word	0x200066f4
 80013c0:	40007c00 	.word	0x40007c00

080013c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <MX_USART3_UART_Init+0x94>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_USART3_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_USART3_UART_Init+0x90>)
 800140e:	f008 fef9 	bl	800a204 <HAL_UART_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001418:	f000 f9ff 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001420:	f009 fe46 	bl	800b0b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800142a:	f000 f9f6 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001432:	f009 fe7b 	bl	800b12c <HAL_UARTEx_SetRxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800143c:	f000 f9ed 	bl	800181a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_USART3_UART_Init+0x90>)
 8001442:	f009 fdfc 	bl	800b03e <HAL_UARTEx_DisableFifoMode>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800144c:	f000 f9e5 	bl	800181a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20006434 	.word	0x20006434
 8001458:	40004800 	.word	0x40004800

0800145c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_FMC_Init+0x98>)
 8001476:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <MX_FMC_Init+0x9c>)
 8001478:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_FMC_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_FMC_Init+0x98>)
 8001482:	2201      	movs	r2, #1
 8001484:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_FMC_Init+0x98>)
 8001488:	2204      	movs	r2, #4
 800148a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_FMC_Init+0x98>)
 800148e:	2210      	movs	r2, #16
 8001490:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_FMC_Init+0x98>)
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_FMC_Init+0x98>)
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_FMC_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_FMC_Init+0x98>)
 80014a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_FMC_Init+0x98>)
 80014b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_FMC_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80014c0:	2306      	movs	r3, #6
 80014c2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80014c4:	2304      	movs	r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80014c8:	2306      	movs	r3, #6
 80014ca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_FMC_Init+0x98>)
 80014de:	f007 fc5b 	bl	8008d98 <HAL_SDRAM_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80014e8:	f000 f997 	bl	800181a <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200067f0 	.word	0x200067f0
 80014f8:	52004140 	.word	0x52004140

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b090      	sub	sp, #64	; 0x40
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001512:	4ba8      	ldr	r3, [pc, #672]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	4aa6      	ldr	r2, [pc, #664]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 800151a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001522:	4ba4      	ldr	r3, [pc, #656]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4ba0      	ldr	r3, [pc, #640]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	4a9f      	ldr	r2, [pc, #636]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001540:	4b9c      	ldr	r3, [pc, #624]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800154e:	4b99      	ldr	r3, [pc, #612]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001554:	4a97      	ldr	r2, [pc, #604]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800155a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155e:	4b95      	ldr	r3, [pc, #596]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	4b91      	ldr	r3, [pc, #580]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	4a90      	ldr	r2, [pc, #576]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157c:	4b8d      	ldr	r3, [pc, #564]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	4b8a      	ldr	r3, [pc, #552]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	4a88      	ldr	r2, [pc, #544]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159a:	4b86      	ldr	r3, [pc, #536]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a8:	4b82      	ldr	r3, [pc, #520]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	4a81      	ldr	r2, [pc, #516]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b8:	4b7e      	ldr	r3, [pc, #504]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015c6:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	4a79      	ldr	r2, [pc, #484]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d6:	4b77      	ldr	r3, [pc, #476]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	4a72      	ldr	r2, [pc, #456]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f4:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a6a      	ldr	r2, [pc, #424]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 800160a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001620:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4a63      	ldr	r2, [pc, #396]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163e:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	4a5b      	ldr	r2, [pc, #364]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001646:	f043 0320 	orr.w	r3, r3, #32
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164e:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <MX_GPIO_Init+0x2b8>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|TS_nRST_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8001662:	4855      	ldr	r0, [pc, #340]	; (80017b8 <MX_GPIO_Init+0x2bc>)
 8001664:	f001 fe72 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2138      	movs	r1, #56	; 0x38
 800166c:	4853      	ldr	r0, [pc, #332]	; (80017bc <MX_GPIO_Init+0x2c0>)
 800166e:	f001 fe6d 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_RESET_Pin|LCD_LR_Pin, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	210c      	movs	r1, #12
 8001676:	4850      	ldr	r0, [pc, #320]	; (80017b8 <MX_GPIO_Init+0x2bc>)
 8001678:	f001 fe68 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_UD_GPIO_Port, LCD_UD_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2104      	movs	r1, #4
 8001680:	484f      	ldr	r0, [pc, #316]	; (80017c0 <MX_GPIO_Init+0x2c4>)
 8001682:	f001 fe63 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_nRST_GPIO_Port, ESP_nRST_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800168c:	484d      	ldr	r0, [pc, #308]	; (80017c4 <MX_GPIO_Init+0x2c8>)
 800168e:	f001 fe5d 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_LCD_GPIO_Port, EN_LCD_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001698:	484b      	ldr	r0, [pc, #300]	; (80017c8 <MX_GPIO_Init+0x2cc>)
 800169a:	f001 fe57 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG9 TS_nRST_Pin LCD_RESET_Pin LCD_LR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|TS_nRST_Pin|LCD_RESET_Pin|LCD_LR_Pin;
 800169e:	f244 230c 	movw	r3, #16908	; 0x420c
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b4:	4619      	mov	r1, r3
 80016b6:	4840      	ldr	r0, [pc, #256]	; (80017b8 <MX_GPIO_Init+0x2bc>)
 80016b8:	f001 fc98 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD4 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 80016bc:	2338      	movs	r3, #56	; 0x38
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d0:	4619      	mov	r1, r3
 80016d2:	483a      	ldr	r0, [pc, #232]	; (80017bc <MX_GPIO_Init+0x2c0>)
 80016d4:	f001 fc8a 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : TS_INT_Pin */
  GPIO_InitStruct.Pin = TS_INT_Pin;
 80016d8:	2308      	movs	r3, #8
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <MX_GPIO_Init+0x2d0>)
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016e0:	2302      	movs	r3, #2
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TS_INT_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e8:	4619      	mov	r1, r3
 80016ea:	4835      	ldr	r0, [pc, #212]	; (80017c0 <MX_GPIO_Init+0x2c4>)
 80016ec:	f001 fc7e 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_UD_Pin */
  GPIO_InitStruct.Pin = LCD_UD_Pin;
 80016f0:	2304      	movs	r3, #4
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_UD_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001704:	4619      	mov	r1, r3
 8001706:	482e      	ldr	r0, [pc, #184]	; (80017c0 <MX_GPIO_Init+0x2c4>)
 8001708:	f001 fc70 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001710:	2303      	movs	r3, #3
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	482c      	ldr	r0, [pc, #176]	; (80017d0 <MX_GPIO_Init+0x2d4>)
 8001720:	f001 fc64 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_nRST_Pin */
  GPIO_InitStruct.Pin = ESP_nRST_Pin;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(ESP_nRST_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	4821      	ldr	r0, [pc, #132]	; (80017c4 <MX_GPIO_Init+0x2c8>)
 800173e:	f001 fc55 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B1_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B1_Pin;
 8001742:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800174c:	2302      	movs	r3, #2
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4619      	mov	r1, r3
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <MX_GPIO_Init+0x2c0>)
 8001758:	f001 fc48 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : B4_Pin B3_Pin */
  GPIO_InitStruct.Pin = B4_Pin|B3_Pin;
 800175c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001766:	2302      	movs	r3, #2
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	4815      	ldr	r0, [pc, #84]	; (80017c8 <MX_GPIO_Init+0x2cc>)
 8001772:	f001 fc3b 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001776:	2310      	movs	r3, #16
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	2303      	movs	r3, #3
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001786:	4619      	mov	r1, r3
 8001788:	4812      	ldr	r0, [pc, #72]	; (80017d4 <MX_GPIO_Init+0x2d8>)
 800178a:	f001 fc2f 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_LCD_Pin */
  GPIO_InitStruct.Pin = EN_LCD_Pin;
 800178e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EN_LCD_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a4:	4619      	mov	r1, r3
 80017a6:	4808      	ldr	r0, [pc, #32]	; (80017c8 <MX_GPIO_Init+0x2cc>)
 80017a8:	f001 fc20 	bl	8002fec <HAL_GPIO_Init>

}
 80017ac:	bf00      	nop
 80017ae:	3740      	adds	r7, #64	; 0x40
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58021800 	.word	0x58021800
 80017bc:	58020c00 	.word	0x58020c00
 80017c0:	58022800 	.word	0x58022800
 80017c4:	58021c00 	.word	0x58021c00
 80017c8:	58020400 	.word	0x58020400
 80017cc:	11110000 	.word	0x11110000
 80017d0:	58021400 	.word	0x58021400
 80017d4:	58020000 	.word	0x58020000

080017d8 <StartTouchgfxTask>:

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
void StartTouchgfxTask(void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  MX_TouchGFX_Process();
 80017e0:	f00e fa8a 	bl	800fcf8 <MX_TouchGFX_Process>
  for(;;)
  {
    osDelay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f00a ff8a 	bl	800c6fe <osDelay>
 80017ea:	e7fb      	b.n	80017e4 <StartTouchgfxTask+0xc>

080017ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f00a ff82 	bl	800c6fe <osDelay>
 80017fa:	e7fb      	b.n	80017f4 <StartDefaultTask+0x8>

080017fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d101      	bne.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800180e:	f000 ffab 	bl	8002768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800181e:	b672      	cpsid	i
}
 8001820:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001822:	e7fe      	b.n	8001822 <Error_Handler+0x8>

08001824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x38>)
 800182c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_MspInit+0x38>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_MspInit+0x38>)
 800183c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	210f      	movs	r1, #15
 800184c:	f06f 0001 	mvn.w	r0, #1
 8001850:	f001 f892 	bl	8002978 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58024400 	.word	0x58024400

08001860 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_CRC_MspInit+0x3c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10e      	bne.n	8001890 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_CRC_MspInit+0x40>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <HAL_CRC_MspInit+0x40>)
 800187a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800187e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_CRC_MspInit+0x40>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	58024c00 	.word	0x58024c00
 80018a0:	58024400 	.word	0x58024400

080018a4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_DMA2D_MspInit+0x48>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d116      	bne.n	80018e4 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_DMA2D_MspInit+0x4c>)
 80018b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_DMA2D_MspInit+0x4c>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_DMA2D_MspInit+0x4c>)
 80018c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2105      	movs	r1, #5
 80018d8:	205a      	movs	r0, #90	; 0x5a
 80018da:	f001 f84d 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80018de:	205a      	movs	r0, #90	; 0x5a
 80018e0:	f001 f864 	bl	80029ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	52001000 	.word	0x52001000
 80018f0:	58024400 	.word	0x58024400

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0ba      	sub	sp, #232	; 0xe8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	22bc      	movs	r2, #188	; 0xbc
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f026 fb9f 	bl	8028058 <memset>
  if(hi2c->Instance==I2C3)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <HAL_I2C_MspInit+0x150>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d143      	bne.n	80019ac <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001924:	2308      	movs	r3, #8
 8001926:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fe46 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800193e:	f7ff ff6c 	bl	800181a <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	4a3f      	ldr	r2, [pc, #252]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 800194a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
    /**I2C3 GPIO Configuration
    PH8     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001960:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001968:	2312      	movs	r3, #18
 800196a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800197a:	2304      	movs	r3, #4
 800197c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001980:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001984:	4619      	mov	r1, r3
 8001986:	4831      	ldr	r0, [pc, #196]	; (8001a4c <HAL_I2C_MspInit+0x158>)
 8001988:	f001 fb30 	bl	8002fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 800198e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001992:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 8001994:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001998:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 800199e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80019aa:	e047      	b.n	8001a3c <HAL_I2C_MspInit+0x148>
  else if(hi2c->Instance==I2C4)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <HAL_I2C_MspInit+0x15c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d142      	bne.n	8001a3c <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80019b6:	2310      	movs	r3, #16
 80019b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fdfd 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 80019d0:	f7ff ff23 	bl	800181a <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80019f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fa:	2312      	movs	r3, #18
 80019fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001a0c:	2306      	movs	r3, #6
 8001a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a16:	4619      	mov	r1, r3
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <HAL_I2C_MspInit+0x160>)
 8001a1a:	f001 fae7 	bl	8002fec <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 8001a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a24:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 8001a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_I2C_MspInit+0x154>)
 8001a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	37e8      	adds	r7, #232	; 0xe8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40005c00 	.word	0x40005c00
 8001a48:	58024400 	.word	0x58024400
 8001a4c:	58021c00 	.word	0x58021c00
 8001a50:	58001c00 	.word	0x58001c00
 8001a54:	58020400 	.word	0x58020400

08001a58 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b0be      	sub	sp, #248	; 0xf8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a74:	22bc      	movs	r2, #188	; 0xbc
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f026 faed 	bl	8028058 <memset>
  if(hltdc->Instance==LTDC)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4aaa      	ldr	r2, [pc, #680]	; (8001d2c <HAL_LTDC_MspInit+0x2d4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	f040 814c 	bne.w	8001d22 <HAL_LTDC_MspInit+0x2ca>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8001a94:	230a      	movs	r3, #10
 8001a96:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 6;
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001aa4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aa8:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fd84 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8001ac2:	f7ff feaa 	bl	800181a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ac6:	4b9a      	ldr	r3, [pc, #616]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001ac8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001acc:	4a98      	ldr	r2, [pc, #608]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001ad6:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001ad8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ae4:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	4a91      	ldr	r2, [pc, #580]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af4:	4b8e      	ldr	r3, [pc, #568]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b02:	4b8b      	ldr	r3, [pc, #556]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	4a89      	ldr	r2, [pc, #548]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b12:	4b87      	ldr	r3, [pc, #540]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b20:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	4a82      	ldr	r2, [pc, #520]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b30:	4b7f      	ldr	r3, [pc, #508]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3e:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b44:	4a7a      	ldr	r2, [pc, #488]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5c:	4b74      	ldr	r3, [pc, #464]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b62:	4a73      	ldr	r2, [pc, #460]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6c:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b69      	ldr	r3, [pc, #420]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	4a64      	ldr	r2, [pc, #400]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba8:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_LTDC_MspInit+0x2d8>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    PG6     ------> LTDC_R7
    PA2     ------> LTDC_R1
    PA1     ------> LTDC_R2
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001bb6:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8001bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_9
                          |GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bd0:	230e      	movs	r3, #14
 8001bd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bd6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4855      	ldr	r0, [pc, #340]	; (8001d34 <HAL_LTDC_MspInit+0x2dc>)
 8001bde:	f001 fa05 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_7
 8001be2:	f44f 5353 	mov.w	r3, #13504	; 0x34c0
 8001be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bfc:	230e      	movs	r3, #14
 8001bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c06:	4619      	mov	r1, r3
 8001c08:	484b      	ldr	r0, [pc, #300]	; (8001d38 <HAL_LTDC_MspInit+0x2e0>)
 8001c0a:	f001 f9ef 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c28:	230e      	movs	r3, #14
 8001c2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4841      	ldr	r0, [pc, #260]	; (8001d3c <HAL_LTDC_MspInit+0x2e4>)
 8001c36:	f001 f9d9 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8001c3a:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8001c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c54:	230e      	movs	r3, #14
 8001c56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4837      	ldr	r0, [pc, #220]	; (8001d40 <HAL_LTDC_MspInit+0x2e8>)
 8001c62:	f001 f9c3 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6;
 8001c66:	2370      	movs	r3, #112	; 0x70
 8001c68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c7e:	230e      	movs	r3, #14
 8001c80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	482e      	ldr	r0, [pc, #184]	; (8001d44 <HAL_LTDC_MspInit+0x2ec>)
 8001c8c:	f001 f9ae 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ca8:	230e      	movs	r3, #14
 8001caa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001cae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4824      	ldr	r0, [pc, #144]	; (8001d48 <HAL_LTDC_MspInit+0x2f0>)
 8001cb6:	f001 f999 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cd4:	2309      	movs	r3, #9
 8001cd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001cda:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4816      	ldr	r0, [pc, #88]	; (8001d3c <HAL_LTDC_MspInit+0x2e4>)
 8001ce2:	f001 f983 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_2
 8001ce6:	f641 1306 	movw	r3, #6406	; 0x1906
 8001cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d00:	230e      	movs	r3, #14
 8001d02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480f      	ldr	r0, [pc, #60]	; (8001d4c <HAL_LTDC_MspInit+0x2f4>)
 8001d0e:	f001 f96d 	bl	8002fec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2105      	movs	r1, #5
 8001d16:	2058      	movs	r0, #88	; 0x58
 8001d18:	f000 fe2e 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d1c:	2058      	movs	r0, #88	; 0x58
 8001d1e:	f000 fe45 	bl	80029ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	37f8      	adds	r7, #248	; 0xf8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	50001000 	.word	0x50001000
 8001d30:	58024400 	.word	0x58024400
 8001d34:	58022000 	.word	0x58022000
 8001d38:	58021800 	.word	0x58021800
 8001d3c:	58022400 	.word	0x58022400
 8001d40:	58021c00 	.word	0x58021c00
 8001d44:	58021000 	.word	0x58021000
 8001d48:	58022800 	.word	0x58022800
 8001d4c:	58020000 	.word	0x58020000

08001d50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ba      	sub	sp, #232	; 0xe8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	22bc      	movs	r2, #188	; 0xbc
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f026 f971 	bl	8028058 <memset>
  if(hsd->Instance==SDMMC1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a37      	ldr	r2, [pc, #220]	; (8001e58 <HAL_SD_MspInit+0x108>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d166      	bne.n	8001e4e <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fc18 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8001d9a:	f7ff fd3e 	bl	800181a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001da0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001da4:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001daa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001dae:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001db0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_SD_MspInit+0x10c>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8001df8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001dfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001e12:	230c      	movs	r3, #12
 8001e14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4810      	ldr	r0, [pc, #64]	; (8001e60 <HAL_SD_MspInit+0x110>)
 8001e20:	f001 f8e4 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e24:	2304      	movs	r3, #4
 8001e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4806      	ldr	r0, [pc, #24]	; (8001e64 <HAL_SD_MspInit+0x114>)
 8001e4a:	f001 f8cf 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	37e8      	adds	r7, #232	; 0xe8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	52007000 	.word	0x52007000
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	58020800 	.word	0x58020800
 8001e64:	58020c00 	.word	0x58020c00

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <HAL_TIM_Base_MspInit+0x3c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_TIM_Base_MspInit+0x40>)
 8001e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_TIM_Base_MspInit+0x40>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_TIM_Base_MspInit+0x40>)
 8001e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	58024400 	.word	0x58024400

08001eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_TIM_MspPostInit+0x6c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d11f      	bne.n	8001f0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_TIM_MspPostInit+0x70>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_TIM_MspPostInit+0x70>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_TIM_MspPostInit+0x70>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	; (8001f20 <HAL_TIM_MspPostInit+0x74>)
 8001f0a:	f001 f86f 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	58020400 	.word	0x58020400

08001f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b0bc      	sub	sp, #240	; 0xf0
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f3c:	f107 0320 	add.w	r3, r7, #32
 8001f40:	22bc      	movs	r2, #188	; 0xbc
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f026 f887 	bl	8028058 <memset>
  if(huart->Instance==UART5)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6d      	ldr	r2, [pc, #436]	; (8002104 <HAL_UART_MspInit+0x1e0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d142      	bne.n	8001fda <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fb2e 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f6e:	f7ff fc54 	bl	800181a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f72:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8001f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f78:	4a63      	ldr	r2, [pc, #396]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8001f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f82:	4b61      	ldr	r3, [pc, #388]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8001f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f90:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	4a5c      	ldr	r2, [pc, #368]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8001fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fae:	2360      	movs	r3, #96	; 0x60
 8001fb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001fc6:	230e      	movs	r3, #14
 8001fc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	484e      	ldr	r0, [pc, #312]	; (800210c <HAL_UART_MspInit+0x1e8>)
 8001fd4:	f001 f80a 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fd8:	e090      	b.n	80020fc <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==UART8)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <HAL_UART_MspInit+0x1ec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d143      	bne.n	800206c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fee:	f107 0320 	add.w	r3, r7, #32
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fae6 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001ffe:	f7ff fc0c 	bl	800181a <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002008:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 800200a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800200e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002020:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002026:	4a38      	ldr	r2, [pc, #224]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8002028:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800203e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002058:	2308      	movs	r3, #8
 800205a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800205e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002062:	4619      	mov	r1, r3
 8002064:	482b      	ldr	r0, [pc, #172]	; (8002114 <HAL_UART_MspInit+0x1f0>)
 8002066:	f000 ffc1 	bl	8002fec <HAL_GPIO_Init>
}
 800206a:	e047      	b.n	80020fc <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_UART_MspInit+0x1f4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d142      	bne.n	80020fc <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002076:	2302      	movs	r3, #2
 8002078:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002080:	f107 0320 	add.w	r3, r7, #32
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fa9d 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002090:	f7ff fbc3 	bl	800181a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 8002096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800209a:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 800209c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 80020a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_UART_MspInit+0x1e4>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ea:	2307      	movs	r3, #7
 80020ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020f4:	4619      	mov	r1, r3
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <HAL_UART_MspInit+0x1e8>)
 80020f8:	f000 ff78 	bl	8002fec <HAL_GPIO_Init>
}
 80020fc:	bf00      	nop
 80020fe:	37f0      	adds	r7, #240	; 0xf0
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40005000 	.word	0x40005000
 8002108:	58024400 	.word	0x58024400
 800210c:	58020400 	.word	0x58020400
 8002110:	40007c00 	.word	0x40007c00
 8002114:	58022400 	.word	0x58022400
 8002118:	40004800 	.word	0x40004800

0800211c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	b0b6      	sub	sp, #216	; 0xd8
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002122:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002132:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_FMC_MspInit+0x170>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 80a4 	bne.w	8002284 <HAL_FMC_MspInit+0x168>
    return;
  }
  FMC_Initialized = 1;
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_FMC_MspInit+0x170>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	22bc      	movs	r2, #188	; 0xbc
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f025 ff84 	bl	8028058 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002154:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 20;
 8002156:	2314      	movs	r3, #20
 8002158:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 800215a:	23c8      	movs	r3, #200	; 0xc8
 800215c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800215e:	2302      	movs	r3, #2
 8002160:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8002166:	2301      	movs	r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8002172:	2302      	movs	r3, #2
 8002174:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	4618      	mov	r0, r3
 800217c:	f003 fa22 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_FMC_MspInit+0x6e>
    {
      Error_Handler();
 8002186:	f7ff fb48 	bl	800181a <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_FMC_MspInit+0x174>)
 800218c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002190:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <HAL_FMC_MspInit+0x174>)
 8002192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002196:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_FMC_MspInit+0x174>)
 800219c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
  PG1   ------> FMC_A11
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80021a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021c2:	230c      	movs	r3, #12
 80021c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4831      	ldr	r0, [pc, #196]	; (8002294 <HAL_FMC_MspInit+0x178>)
 80021d0:	f000 ff0c 	bl	8002fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80021d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80021d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021ee:	230c      	movs	r3, #12
 80021f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4827      	ldr	r0, [pc, #156]	; (8002298 <HAL_FMC_MspInit+0x17c>)
 80021fc:	f000 fef6 	bl	8002fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002200:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800221a:	230c      	movs	r3, #12
 800221c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002220:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002224:	4619      	mov	r1, r3
 8002226:	481d      	ldr	r0, [pc, #116]	; (800229c <HAL_FMC_MspInit+0x180>)
 8002228:	f000 fee0 	bl	8002fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800222c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002230:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002246:	230c      	movs	r3, #12
 8002248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800224c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002250:	4619      	mov	r1, r3
 8002252:	4813      	ldr	r0, [pc, #76]	; (80022a0 <HAL_FMC_MspInit+0x184>)
 8002254:	f000 feca 	bl	8002fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002258:	230d      	movs	r3, #13
 800225a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002270:	230c      	movs	r3, #12
 8002272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002276:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800227a:	4619      	mov	r1, r3
 800227c:	4809      	ldr	r0, [pc, #36]	; (80022a4 <HAL_FMC_MspInit+0x188>)
 800227e:	f000 feb5 	bl	8002fec <HAL_GPIO_Init>
 8002282:	e000      	b.n	8002286 <HAL_FMC_MspInit+0x16a>
    return;
 8002284:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002286:	37d8      	adds	r7, #216	; 0xd8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200000fc 	.word	0x200000fc
 8002290:	58024400 	.word	0x58024400
 8002294:	58021000 	.word	0x58021000
 8002298:	58021800 	.word	0x58021800
 800229c:	58020c00 	.word	0x58020c00
 80022a0:	58021400 	.word	0x58021400
 80022a4:	58020800 	.word	0x58020800

080022a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80022b0:	f7ff ff34 	bl	800211c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b090      	sub	sp, #64	; 0x40
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	d827      	bhi.n	800231a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 80022ca:	2200      	movs	r2, #0
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	201c      	movs	r0, #28
 80022d0:	f000 fb52 	bl	8002978 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022d4:	201c      	movs	r0, #28
 80022d6:	f000 fb69 	bl	80029ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_InitTick+0xc4>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80022e0:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_InitTick+0xc8>)
 80022e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e6:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_InitTick+0xc8>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_InitTick+0xc8>)
 80022f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022fe:	f107 0210 	add.w	r2, r7, #16
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f003 f919 	bl	8005540 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <HAL_InitTick+0x6a>
 8002318:	e001      	b.n	800231e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e02c      	b.n	8002378 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800231e:	f003 f8e3 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8002322:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002324:	e004      	b.n	8002330 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002326:	f003 f8df 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 800232a:	4603      	mov	r3, r0
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002332:	4a15      	ldr	r2, [pc, #84]	; (8002388 <HAL_InitTick+0xcc>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	3b01      	subs	r3, #1
 800233c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_InitTick+0xd0>)
 8002340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002344:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_InitTick+0xd0>)
 8002348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800234c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800234e:	4a0f      	ldr	r2, [pc, #60]	; (800238c <HAL_InitTick+0xd0>)
 8002350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002352:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_InitTick+0xd0>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_InitTick+0xd0>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002360:	480a      	ldr	r0, [pc, #40]	; (800238c <HAL_InitTick+0xd0>)
 8002362:	f006 fdb2 	bl	8008eca <HAL_TIM_Base_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <HAL_InitTick+0xd0>)
 800236e:	f006 fe03 	bl	8008f78 <HAL_TIM_Base_Start_IT>
 8002372:	4603      	mov	r3, r0
 8002374:	e000      	b.n	8002378 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	3740      	adds	r7, #64	; 0x40
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	2000000c 	.word	0x2000000c
 8002384:	58024400 	.word	0x58024400
 8002388:	431bde83 	.word	0x431bde83
 800238c:	20006824 	.word	0x20006824

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <NMI_Handler+0x4>

08002396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <MemManage_Handler+0x4>

080023a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <BusFault_Handler+0x4>

080023a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <UsageFault_Handler+0x4>

080023ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <TIM2_IRQHandler+0x10>)
 80023c2:	f006 feaa 	bl	800911a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20006824 	.word	0x20006824

080023d0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <LTDC_IRQHandler+0x10>)
 80023d6:	f001 fe15 	bl	8004004 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000656c 	.word	0x2000656c

080023e4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <DMA2D_IRQHandler+0x10>)
 80023ea:	f000 fc3b 	bl	8002c64 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20006784 	.word	0x20006784

080023f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
	return 1;
 80023fc:	2301      	movs	r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_kill>:

int _kill(int pid, int sig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002412:	f025 fdc7 	bl	8027fa4 <__errno>
 8002416:	4603      	mov	r3, r0
 8002418:	2216      	movs	r2, #22
 800241a:	601a      	str	r2, [r3, #0]
	return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_exit>:

void _exit (int status)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ffe7 	bl	8002408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800243a:	e7fe      	b.n	800243a <_exit+0x12>

0800243c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	e00a      	b.n	8002464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800244e:	f3af 8000 	nop.w
 8002452:	4601      	mov	r1, r0
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	60ba      	str	r2, [r7, #8]
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	dbf0      	blt.n	800244e <_read+0x12>
	}

return len;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e009      	b.n	800249c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	60ba      	str	r2, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf1      	blt.n	8002488 <_write+0x12>
	}
	return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_close>:

int _close(int file)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
	return -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d6:	605a      	str	r2, [r3, #4]
	return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_isatty>:

int _isatty(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return 1;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
	return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f025 fd2c 	bl	8027fa4 <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	220c      	movs	r2, #12
 8002550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20020000 	.word	0x20020000
 8002578:	00004000 	.word	0x00004000
 800257c:	20000100 	.word	0x20000100
 8002580:	20006d68 	.word	0x20006d68

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002588:	4b39      	ldr	r3, [pc, #228]	; (8002670 <SystemInit+0xec>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	4a38      	ldr	r2, [pc, #224]	; (8002670 <SystemInit+0xec>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <SystemInit+0xf0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	2b06      	cmp	r3, #6
 80025a2:	d807      	bhi.n	80025b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025a4:	4b33      	ldr	r3, [pc, #204]	; (8002674 <SystemInit+0xf0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 030f 	bic.w	r3, r3, #15
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <SystemInit+0xf0>)
 80025ae:	f043 0307 	orr.w	r3, r3, #7
 80025b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <SystemInit+0xf4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2f      	ldr	r2, [pc, #188]	; (8002678 <SystemInit+0xf4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <SystemInit+0xf4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <SystemInit+0xf4>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	492b      	ldr	r1, [pc, #172]	; (8002678 <SystemInit+0xf4>)
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <SystemInit+0xf8>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <SystemInit+0xf0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <SystemInit+0xf0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 030f 	bic.w	r3, r3, #15
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <SystemInit+0xf0>)
 80025e8:	f043 0307 	orr.w	r3, r3, #7
 80025ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <SystemInit+0xf4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <SystemInit+0xf4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <SystemInit+0xf4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <SystemInit+0xf4>)
 8002602:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <SystemInit+0xfc>)
 8002604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <SystemInit+0xf4>)
 8002608:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <SystemInit+0x100>)
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <SystemInit+0xf4>)
 800260e:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <SystemInit+0x104>)
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <SystemInit+0xf4>)
 8002614:	2200      	movs	r2, #0
 8002616:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <SystemInit+0xf4>)
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <SystemInit+0x104>)
 800261c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <SystemInit+0xf4>)
 8002620:	2200      	movs	r2, #0
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <SystemInit+0xf4>)
 8002626:	4a18      	ldr	r2, [pc, #96]	; (8002688 <SystemInit+0x104>)
 8002628:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <SystemInit+0xf4>)
 800262c:	2200      	movs	r2, #0
 800262e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <SystemInit+0xf4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a10      	ldr	r2, [pc, #64]	; (8002678 <SystemInit+0xf4>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <SystemInit+0xf4>)
 800263e:	2200      	movs	r2, #0
 8002640:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <SystemInit+0x108>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <SystemInit+0x10c>)
 8002648:	4013      	ands	r3, r2
 800264a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800264e:	d202      	bcs.n	8002656 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <SystemInit+0x110>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <SystemInit+0x114>)
 8002658:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800265c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SystemInit+0xec>)
 8002660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002664:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	52002000 	.word	0x52002000
 8002678:	58024400 	.word	0x58024400
 800267c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002680:	02020200 	.word	0x02020200
 8002684:	01ff0000 	.word	0x01ff0000
 8002688:	01010280 	.word	0x01010280
 800268c:	5c001000 	.word	0x5c001000
 8002690:	ffff0000 	.word	0xffff0000
 8002694:	51008108 	.word	0x51008108
 8002698:	52004000 	.word	0x52004000

0800269c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800269c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026a0:	f7ff ff70 	bl	8002584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a4:	480c      	ldr	r0, [pc, #48]	; (80026d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a6:	490d      	ldr	r1, [pc, #52]	; (80026dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026bc:	4c0a      	ldr	r4, [pc, #40]	; (80026e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ca:	f025 fc83 	bl	8027fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ce:	f7fe fa37 	bl	8000b40 <main>
  bx  lr
 80026d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80026e0:	080c2464 	.word	0x080c2464
  ldr r2, =_sbss
 80026e4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80026e8:	20006d64 	.word	0x20006d64

080026ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC3_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f6:	2003      	movs	r0, #3
 80026f8:	f000 f933 	bl	8002962 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026fc:	f002 fd4a 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_Init+0x68>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	4913      	ldr	r1, [pc, #76]	; (800275c <HAL_Init+0x6c>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_Init+0x68>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_Init+0x6c>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_Init+0x70>)
 8002732:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002734:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_Init+0x74>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800273a:	2000      	movs	r0, #0
 800273c:	f7ff fdbe 	bl	80022bc <HAL_InitTick>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e002      	b.n	8002750 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800274a:	f7ff f86b 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	58024400 	.word	0x58024400
 800275c:	08029de0 	.word	0x08029de0
 8002760:	20000008 	.word	0x20000008
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x20>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x24>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4413      	add	r3, r2
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_IncTick+0x24>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000010 	.word	0x20000010
 800278c:	20006870 	.word	0x20006870

08002790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return uwTick;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_GetTick+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20006870 	.word	0x20006870

080027a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff ffee 	bl	8002790 <HAL_GetTick>
 80027b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d005      	beq.n	80027ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_Delay+0x44>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ce:	bf00      	nop
 80027d0:	f7ff ffde 	bl	8002790 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d8f7      	bhi.n	80027d0 <HAL_Delay+0x28>
  {
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000010 	.word	0x20000010

080027f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_GetREVID+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0c1b      	lsrs	r3, r3, #16
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	5c001000 	.word	0x5c001000

08002808 <__NVIC_SetPriorityGrouping>:
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <__NVIC_SetPriorityGrouping+0x40>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	4313      	orrs	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x40>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00
 800284c:	05fa0000 	.word	0x05fa0000

08002850 <__NVIC_GetPriorityGrouping>:
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	; (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	; (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ff4c 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002986:	f7ff ff63 	bl	8002850 <__NVIC_GetPriorityGrouping>
 800298a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f7ff ffb3 	bl	80028fc <NVIC_EncodePriority>
 8002996:	4602      	mov	r2, r0
 8002998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff82 	bl	80028a8 <__NVIC_SetPriority>
}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff56 	bl	800286c <__NVIC_EnableIRQ>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e054      	b.n	8002a84 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7f5b      	ldrb	r3, [r3, #29]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe ff38 	bl	8001860 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	791b      	ldrb	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <HAL_CRC_Init+0xc4>)
 8002a04:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0218 	bic.w	r2, r2, #24
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	e00c      	b.n	8002a32 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	461a      	mov	r2, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f834 	bl	8002a90 <HAL_CRCEx_Polynomial_Set>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e028      	b.n	8002a84 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	795b      	ldrb	r3, [r3, #5]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	e004      	b.n	8002a50 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6912      	ldr	r2, [r2, #16]
 8002a4e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	04c11db7 	.word	0x04c11db7

08002a90 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002aa0:	231f      	movs	r3, #31
 8002aa2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002aa4:	bf00      	nop
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	613a      	str	r2, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_CRCEx_Polynomial_Set+0x16>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b18      	cmp	r3, #24
 8002ac8:	d846      	bhi.n	8002b58 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002b5f 	.word	0x08002b5f
 8002ad4:	08002b59 	.word	0x08002b59
 8002ad8:	08002b59 	.word	0x08002b59
 8002adc:	08002b59 	.word	0x08002b59
 8002ae0:	08002b59 	.word	0x08002b59
 8002ae4:	08002b59 	.word	0x08002b59
 8002ae8:	08002b59 	.word	0x08002b59
 8002aec:	08002b59 	.word	0x08002b59
 8002af0:	08002b4d 	.word	0x08002b4d
 8002af4:	08002b59 	.word	0x08002b59
 8002af8:	08002b59 	.word	0x08002b59
 8002afc:	08002b59 	.word	0x08002b59
 8002b00:	08002b59 	.word	0x08002b59
 8002b04:	08002b59 	.word	0x08002b59
 8002b08:	08002b59 	.word	0x08002b59
 8002b0c:	08002b59 	.word	0x08002b59
 8002b10:	08002b41 	.word	0x08002b41
 8002b14:	08002b59 	.word	0x08002b59
 8002b18:	08002b59 	.word	0x08002b59
 8002b1c:	08002b59 	.word	0x08002b59
 8002b20:	08002b59 	.word	0x08002b59
 8002b24:	08002b59 	.word	0x08002b59
 8002b28:	08002b59 	.word	0x08002b59
 8002b2c:	08002b59 	.word	0x08002b59
 8002b30:	08002b35 	.word	0x08002b35
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d913      	bls.n	8002b62 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b3e:	e010      	b.n	8002b62 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	d90f      	bls.n	8002b66 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b4a:	e00c      	b.n	8002b66 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	d90b      	bls.n	8002b6a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b56:	e008      	b.n	8002b6a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5c:	e006      	b.n	8002b6c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e004      	b.n	8002b6c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b62:	bf00      	nop
 8002b64:	e002      	b.n	8002b6c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b6a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10d      	bne.n	8002b8e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 0118 	bic.w	r1, r3, #24
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e04f      	b.n	8002c4e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe fe6e 	bl	80018a4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_DMA2D_Init+0xbc>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6851      	ldr	r1, [r2, #4]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	69d2      	ldr	r2, [r2, #28]
 8002be2:	4311      	orrs	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_DMA2D_Init+0xc0>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6891      	ldr	r1, [r2, #8]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6992      	ldr	r2, [r2, #24]
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_DMA2D_Init+0xc4>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68d1      	ldr	r1, [r2, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	051a      	lsls	r2, r3, #20
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	055b      	lsls	r3, r3, #21
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	fff8ffbf 	.word	0xfff8ffbf
 8002c5c:	fffffef8 	.word	0xfffffef8
 8002c60:	ffff0000 	.word	0xffff0000

08002c64 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d026      	beq.n	8002cd4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d021      	beq.n	8002cd4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d026      	beq.n	8002d2c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d021      	beq.n	8002d2c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d04:	f043 0202 	orr.w	r2, r3, #2
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d026      	beq.n	8002d84 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d021      	beq.n	8002d84 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2208      	movs	r2, #8
 8002d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2204      	movs	r2, #4
 8002d68:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d013      	beq.n	8002db6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2204      	movs	r2, #4
 8002dae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f853 	bl	8002e5c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d024      	beq.n	8002e0a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01f      	beq.n	8002e0a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2202      	movs	r2, #2
 8002de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01f      	beq.n	8002e54 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01a      	beq.n	8002e54 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f80e 	bl	8002e70 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d104      	bne.n	8002ea6 <HAL_DMA2D_ConfigLayer+0x22>
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_DMA2D_ConfigLayer+0x30>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e092      	b.n	8002fda <HAL_DMA2D_ConfigLayer+0x156>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	3328      	adds	r3, #40	; 0x28
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ee8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	; (8002fe8 <HAL_DMA2D_ConfigLayer+0x164>)
 8002ef6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b0a      	cmp	r3, #10
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA2D_ConfigLayer+0x84>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d107      	bne.n	8002f18 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	e005      	b.n	8002f24 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d120      	bne.n	8002f6c <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	ea02 0103 	and.w	r1, r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b0a      	cmp	r3, #10
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA2D_ConfigLayer+0xd8>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d135      	bne.n	8002fc8 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
 8002f6a:	e02d      	b.n	8002fc8 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b0b      	cmp	r3, #11
 8002f72:	d109      	bne.n	8002f88 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	049b      	lsls	r3, r3, #18
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002f86:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	ea02 0103 	and.w	r1, r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b0a      	cmp	r3, #10
 8002fb0:	d003      	beq.n	8002fba <HAL_DMA2D_ConfigLayer+0x136>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	d106      	bne.n	8002fc8 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002fc6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	ff33000f 	.word	0xff33000f

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ffa:	4b89      	ldr	r3, [pc, #548]	; (8003220 <HAL_GPIO_Init+0x234>)
 8002ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ffe:	e194      	b.n	800332a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8186 	beq.w	8003324 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d00b      	beq.n	8003038 <HAL_GPIO_Init+0x4c>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d007      	beq.n	8003038 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800302c:	2b11      	cmp	r3, #17
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b12      	cmp	r3, #18
 8003036:	d130      	bne.n	800309a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800306e:	2201      	movs	r2, #1
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 0201 	and.w	r2, r3, #1
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2203      	movs	r2, #3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0xee>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b12      	cmp	r3, #18
 80030d8:	d123      	bne.n	8003122 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	08da      	lsrs	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3208      	adds	r2, #8
 800311c:	69b9      	ldr	r1, [r7, #24]
 800311e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	2203      	movs	r2, #3
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0203 	and.w	r2, r3, #3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80e0 	beq.w	8003324 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003164:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <HAL_GPIO_Init+0x238>)
 8003166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800316a:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <HAL_GPIO_Init+0x238>)
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003174:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <HAL_GPIO_Init+0x238>)
 8003176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003182:	4a29      	ldr	r2, [pc, #164]	; (8003228 <HAL_GPIO_Init+0x23c>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a20      	ldr	r2, [pc, #128]	; (800322c <HAL_GPIO_Init+0x240>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d052      	beq.n	8003254 <HAL_GPIO_Init+0x268>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <HAL_GPIO_Init+0x244>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_GPIO_Init+0x22e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_GPIO_Init+0x248>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02b      	beq.n	8003216 <HAL_GPIO_Init+0x22a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_GPIO_Init+0x24c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d025      	beq.n	8003212 <HAL_GPIO_Init+0x226>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1c      	ldr	r2, [pc, #112]	; (800323c <HAL_GPIO_Init+0x250>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01f      	beq.n	800320e <HAL_GPIO_Init+0x222>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <HAL_GPIO_Init+0x254>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d019      	beq.n	800320a <HAL_GPIO_Init+0x21e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1a      	ldr	r2, [pc, #104]	; (8003244 <HAL_GPIO_Init+0x258>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0x21a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <HAL_GPIO_Init+0x25c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_GPIO_Init+0x216>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a18      	ldr	r2, [pc, #96]	; (800324c <HAL_GPIO_Init+0x260>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x212>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a17      	ldr	r2, [pc, #92]	; (8003250 <HAL_GPIO_Init+0x264>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_GPIO_Init+0x20e>
 80031f6:	2309      	movs	r3, #9
 80031f8:	e02d      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 80031fa:	230a      	movs	r3, #10
 80031fc:	e02b      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 80031fe:	2308      	movs	r3, #8
 8003200:	e029      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 8003202:	2307      	movs	r3, #7
 8003204:	e027      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 8003206:	2306      	movs	r3, #6
 8003208:	e025      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 800320a:	2305      	movs	r3, #5
 800320c:	e023      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 800320e:	2304      	movs	r3, #4
 8003210:	e021      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 8003212:	2303      	movs	r3, #3
 8003214:	e01f      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 8003216:	2302      	movs	r3, #2
 8003218:	e01d      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 800321a:	2301      	movs	r3, #1
 800321c:	e01b      	b.n	8003256 <HAL_GPIO_Init+0x26a>
 800321e:	bf00      	nop
 8003220:	58000080 	.word	0x58000080
 8003224:	58024400 	.word	0x58024400
 8003228:	58000400 	.word	0x58000400
 800322c:	58020000 	.word	0x58020000
 8003230:	58020400 	.word	0x58020400
 8003234:	58020800 	.word	0x58020800
 8003238:	58020c00 	.word	0x58020c00
 800323c:	58021000 	.word	0x58021000
 8003240:	58021400 	.word	0x58021400
 8003244:	58021800 	.word	0x58021800
 8003248:	58021c00 	.word	0x58021c00
 800324c:	58022000 	.word	0x58022000
 8003250:	58022400 	.word	0x58022400
 8003254:	2300      	movs	r3, #0
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	f002 0203 	and.w	r2, r2, #3
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	4093      	lsls	r3, r2
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003266:	4938      	ldr	r1, [pc, #224]	; (8003348 <HAL_GPIO_Init+0x35c>)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800331c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	3301      	adds	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	f47f ae63 	bne.w	8003000 <HAL_GPIO_Init+0x14>
  }
}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	3724      	adds	r7, #36	; 0x24
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	58000400 	.word	0x58000400

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003368:	e003      	b.n	8003372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	619a      	str	r2, [r3, #24]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07f      	b.n	8003492 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe faa4 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d107      	bne.n	80033fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	e006      	b.n	8003408 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003406:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d104      	bne.n	800341a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003418:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_I2C_Init+0x11c>)
 8003426:	430b      	orrs	r3, r1
 8003428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	ea42 0103 	orr.w	r1, r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69d9      	ldr	r1, [r3, #28]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	02008000 	.word	0x02008000

080034a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	817b      	strh	r3, [r7, #10]
 80034b2:	460b      	mov	r3, r1
 80034b4:	813b      	strh	r3, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	f040 80f9 	bne.w	80036ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x34>
 80034ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0ed      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_I2C_Mem_Write+0x4e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0e6      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f6:	f7ff f94b 	bl	8002790 <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fac3 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d1      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2221      	movs	r2, #33	; 0x21
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2240      	movs	r2, #64	; 0x40
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003540:	88f8      	ldrh	r0, [r7, #6]
 8003542:	893a      	ldrh	r2, [r7, #8]
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4603      	mov	r3, r0
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f9d3 	bl	80038fc <I2C_RequestMemoryWrite>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0a9      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d90e      	bls.n	8003590 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	b2da      	uxtb	r2, r3
 800357e:	8979      	ldrh	r1, [r7, #10]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fba5 	bl	8003cd8 <I2C_TransferConfig>
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fb94 	bl	8003cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 faad 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e07b      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d034      	beq.n	8003668 <HAL_I2C_Mem_Write+0x1c8>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b00      	cmp	r3, #0
 8003604:	d130      	bne.n	8003668 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fa3f 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e04d      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	2bff      	cmp	r3, #255	; 0xff
 8003628:	d90e      	bls.n	8003648 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	b2da      	uxtb	r2, r3
 8003636:	8979      	ldrh	r1, [r7, #10]
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fb49 	bl	8003cd8 <I2C_TransferConfig>
 8003646:	e00f      	b.n	8003668 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	b2da      	uxtb	r2, r3
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fb38 	bl	8003cd8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d19e      	bne.n	80035b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fa8c 	bl	8003b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01a      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2220      	movs	r2, #32
 800368c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_I2C_Mem_Write+0x224>)
 800369a:	400b      	ands	r3, r1
 800369c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	fe00e800 	.word	0xfe00e800

080036c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	817b      	strh	r3, [r7, #10]
 80036da:	460b      	mov	r3, r1
 80036dc:	813b      	strh	r3, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	f040 80fd 	bne.w	80038ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_I2C_Mem_Read+0x34>
 80036f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0f1      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_I2C_Mem_Read+0x4e>
 8003712:	2302      	movs	r3, #2
 8003714:	e0ea      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800371e:	f7ff f837 	bl	8002790 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2319      	movs	r3, #25
 800372a:	2201      	movs	r2, #1
 800372c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f9af 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0d5      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2222      	movs	r2, #34	; 0x22
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a3a      	ldr	r2, [r7, #32]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003768:	88f8      	ldrh	r0, [r7, #6]
 800376a:	893a      	ldrh	r2, [r7, #8]
 800376c:	8979      	ldrh	r1, [r7, #10]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	4603      	mov	r3, r0
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f913 	bl	80039a4 <I2C_RequestMemoryRead>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0ad      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2bff      	cmp	r3, #255	; 0xff
 8003798:	d90e      	bls.n	80037b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	8979      	ldrh	r1, [r7, #10]
 80037a8:	4b52      	ldr	r3, [pc, #328]	; (80038f4 <HAL_I2C_Mem_Read+0x22c>)
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fa91 	bl	8003cd8 <I2C_TransferConfig>
 80037b6:	e00f      	b.n	80037d8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	8979      	ldrh	r1, [r7, #10]
 80037ca:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_I2C_Mem_Read+0x22c>)
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fa80 	bl	8003cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	2200      	movs	r2, #0
 80037e0:	2104      	movs	r1, #4
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f956 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07c      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d034      	beq.n	8003898 <HAL_I2C_Mem_Read+0x1d0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d130      	bne.n	8003898 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2200      	movs	r2, #0
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f927 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e04d      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	2bff      	cmp	r3, #255	; 0xff
 8003858:	d90e      	bls.n	8003878 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	22ff      	movs	r2, #255	; 0xff
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	b2da      	uxtb	r2, r3
 8003866:	8979      	ldrh	r1, [r7, #10]
 8003868:	2300      	movs	r3, #0
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fa31 	bl	8003cd8 <I2C_TransferConfig>
 8003876:	e00f      	b.n	8003898 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	b2da      	uxtb	r2, r3
 8003888:	8979      	ldrh	r1, [r7, #10]
 800388a:	2300      	movs	r3, #0
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fa20 	bl	8003cd8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d19a      	bne.n	80037d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f974 	bl	8003b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e01a      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2220      	movs	r2, #32
 80038bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_I2C_Mem_Read+0x230>)
 80038ca:	400b      	ands	r3, r1
 80038cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	80002400 	.word	0x80002400
 80038f8:	fe00e800 	.word	0xfe00e800

080038fc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	461a      	mov	r2, r3
 800390a:	4603      	mov	r3, r0
 800390c:	817b      	strh	r3, [r7, #10]
 800390e:	460b      	mov	r3, r1
 8003910:	813b      	strh	r3, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	8979      	ldrh	r1, [r7, #10]
 800391c:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <I2C_RequestMemoryWrite+0xa4>)
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f9d7 	bl	8003cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f8f0 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e02c      	b.n	8003998 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003944:	893b      	ldrh	r3, [r7, #8]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
 800394e:	e015      	b.n	800397c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	69b9      	ldr	r1, [r7, #24]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f8d6 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e012      	b.n	8003998 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003972:	893b      	ldrh	r3, [r7, #8]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2200      	movs	r2, #0
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f884 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	80002000 	.word	0x80002000

080039a4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	8979      	ldrh	r1, [r7, #10]
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <I2C_RequestMemoryRead+0xa4>)
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2300      	movs	r3, #0
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f984 	bl	8003cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f89d 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e02c      	b.n	8003a3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039ea:	893b      	ldrh	r3, [r7, #8]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
 80039f4:	e015      	b.n	8003a22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039f6:	893b      	ldrh	r3, [r7, #8]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f883 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e012      	b.n	8003a3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a18:	893b      	ldrh	r3, [r7, #8]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2140      	movs	r1, #64	; 0x40
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f831 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	80002000 	.word	0x80002000

08003a4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d103      	bne.n	8003a6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d007      	beq.n	8003a88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	619a      	str	r2, [r3, #24]
  }
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa4:	e022      	b.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d01e      	beq.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aae:	f7fe fe6f 	bl	8002790 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d302      	bcc.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d113      	bne.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e00f      	b.n	8003b0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d0cd      	beq.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b20:	e02c      	b.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f870 	bl	8003c0c <I2C_IsAcknowledgeFailed>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e02a      	b.n	8003b8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d01e      	beq.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe fe27 	bl	8002790 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d113      	bne.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e007      	b.n	8003b8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d1cb      	bne.n	8003b22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba0:	e028      	b.n	8003bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f830 	bl	8003c0c <I2C_IsAcknowledgeFailed>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e026      	b.n	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7fe fdeb 	bl	8002790 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e007      	b.n	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d1cf      	bne.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d151      	bne.n	8003cca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c26:	e022      	b.n	8003c6e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d01e      	beq.n	8003c6e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c30:	f7fe fdae 	bl	8002790 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d302      	bcc.n	8003c46 <I2C_IsAcknowledgeFailed+0x3a>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e02e      	b.n	8003ccc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d1d5      	bne.n	8003c28 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2210      	movs	r2, #16
 8003c82:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fedd 	bl	8003a4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	fe00e800 	.word	0xfe00e800

08003cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	0d5b      	lsrs	r3, r3, #21
 8003cf4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <I2C_TransferConfig+0x58>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	ea02 0103 	and.w	r1, r2, r3
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d08:	7a7b      	ldrb	r3, [r7, #9]
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	03ff63ff 	.word	0x03ff63ff

08003d34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d138      	bne.n	8003dbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e032      	b.n	8003dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d139      	bne.n	8003e54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e033      	b.n	8003e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2224      	movs	r2, #36	; 0x24
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0bf      	b.n	8003ff6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd fde4 	bl	8001a58 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003ea6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6999      	ldr	r1, [r3, #24]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ebc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6899      	ldr	r1, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	; (8004000 <HAL_LTDC_Init+0x19c>)
 8003ed8:	400b      	ands	r3, r1
 8003eda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6899      	ldr	r1, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68d9      	ldr	r1, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <HAL_LTDC_Init+0x19c>)
 8003f06:	400b      	ands	r3, r1
 8003f08:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68d9      	ldr	r1, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <HAL_LTDC_Init+0x19c>)
 8003f34:	400b      	ands	r3, r1
 8003f36:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6919      	ldr	r1, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6959      	ldr	r1, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_LTDC_Init+0x19c>)
 8003f62:	400b      	ands	r3, r1
 8003f64:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6959      	ldr	r1, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0206 	orr.w	r2, r2, #6
 8003fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	f000f800 	.word	0xf000f800

08004004 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d023      	beq.n	800406e <HAL_LTDC_IRQHandler+0x6a>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01e      	beq.n	800406e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0204 	bic.w	r2, r2, #4
 800403e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2204      	movs	r2, #4
 8004046:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2204      	movs	r2, #4
 800405c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f86f 	bl	800414c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d023      	beq.n	80040c0 <HAL_LTDC_IRQHandler+0xbc>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01e      	beq.n	80040c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0202 	bic.w	r2, r2, #2
 8004090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2202      	movs	r2, #2
 8004098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040a0:	f043 0202 	orr.w	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2204      	movs	r2, #4
 80040ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f846 	bl	800414c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01b      	beq.n	8004102 <HAL_LTDC_IRQHandler+0xfe>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d016      	beq.n	8004102 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f011 f8d7 	bl	80152b0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01b      	beq.n	8004144 <HAL_LTDC_IRQHandler+0x140>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2208      	movs	r2, #8
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f80e 	bl	8004160 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004174:	b5b0      	push	{r4, r5, r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_LTDC_ConfigLayer+0x1a>
 800418a:	2302      	movs	r3, #2
 800418c:	e02c      	b.n	80041e8 <HAL_LTDC_ConfigLayer+0x74>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2134      	movs	r1, #52	; 0x34
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f849 	bl	8004260 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bdb0      	pop	{r4, r5, r7, pc}

080041f0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_LTDC_ProgramLineEvent+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e023      	b.n	8004250 <HAL_LTDC_ProgramLineEvent+0x60>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	50001000 	.word	0x50001000

08004260 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	; 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427c:	4413      	add	r3, r2
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	4413      	add	r3, r2
 800428e:	3384      	adds	r3, #132	; 0x84
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	4611      	mov	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	01d2      	lsls	r2, r2, #7
 800429c:	440a      	add	r2, r1
 800429e:	3284      	adds	r2, #132	; 0x84
 80042a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b6:	4413      	add	r3, r2
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4619      	mov	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	440b      	add	r3, r1
 80042c6:	3384      	adds	r3, #132	; 0x84
 80042c8:	4619      	mov	r1, r3
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042de:	4413      	add	r3, r2
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	01db      	lsls	r3, r3, #7
 80042ee:	4413      	add	r3, r2
 80042f0:	3384      	adds	r3, #132	; 0x84
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	4611      	mov	r1, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	01d2      	lsls	r2, r2, #7
 80042fe:	440a      	add	r2, r1
 8004300:	3284      	adds	r2, #132	; 0x84
 8004302:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004306:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004316:	4413      	add	r3, r2
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	01db      	lsls	r3, r3, #7
 8004324:	440b      	add	r3, r1
 8004326:	3384      	adds	r3, #132	; 0x84
 8004328:	4619      	mov	r1, r3
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	01db      	lsls	r3, r3, #7
 800433a:	4413      	add	r3, r2
 800433c:	3384      	adds	r3, #132	; 0x84
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	4611      	mov	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	01d2      	lsls	r2, r2, #7
 800434a:	440a      	add	r2, r1
 800434c:	3284      	adds	r2, #132	; 0x84
 800434e:	f023 0307 	bic.w	r3, r3, #7
 8004352:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	01db      	lsls	r3, r3, #7
 800435e:	4413      	add	r3, r2
 8004360:	3384      	adds	r3, #132	; 0x84
 8004362:	461a      	mov	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	01db      	lsls	r3, r3, #7
 8004390:	4413      	add	r3, r2
 8004392:	3384      	adds	r3, #132	; 0x84
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	01db      	lsls	r3, r3, #7
 80043a0:	4413      	add	r3, r2
 80043a2:	3384      	adds	r3, #132	; 0x84
 80043a4:	461a      	mov	r2, r3
 80043a6:	2300      	movs	r3, #0
 80043a8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043b0:	461a      	mov	r2, r3
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	440b      	add	r3, r1
 80043c6:	3384      	adds	r3, #132	; 0x84
 80043c8:	4619      	mov	r1, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	01db      	lsls	r3, r3, #7
 80043da:	4413      	add	r3, r2
 80043dc:	3384      	adds	r3, #132	; 0x84
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	4611      	mov	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	01d2      	lsls	r2, r2, #7
 80043ea:	440a      	add	r2, r1
 80043ec:	3284      	adds	r2, #132	; 0x84
 80043ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	01db      	lsls	r3, r3, #7
 80043fe:	4413      	add	r3, r2
 8004400:	3384      	adds	r3, #132	; 0x84
 8004402:	461a      	mov	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	01db      	lsls	r3, r3, #7
 8004414:	4413      	add	r3, r2
 8004416:	3384      	adds	r3, #132	; 0x84
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4619      	mov	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	01db      	lsls	r3, r3, #7
 8004424:	440b      	add	r3, r1
 8004426:	3384      	adds	r3, #132	; 0x84
 8004428:	4619      	mov	r1, r3
 800442a:	4b58      	ldr	r3, [pc, #352]	; (800458c <LTDC_SetConfig+0x32c>)
 800442c:	4013      	ands	r3, r2
 800442e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	6809      	ldr	r1, [r1, #0]
 800443c:	4608      	mov	r0, r1
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	01c9      	lsls	r1, r1, #7
 8004442:	4401      	add	r1, r0
 8004444:	3184      	adds	r1, #132	; 0x84
 8004446:	4313      	orrs	r3, r2
 8004448:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	01db      	lsls	r3, r3, #7
 8004454:	4413      	add	r3, r2
 8004456:	3384      	adds	r3, #132	; 0x84
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	01db      	lsls	r3, r3, #7
 8004464:	4413      	add	r3, r2
 8004466:	3384      	adds	r3, #132	; 0x84
 8004468:	461a      	mov	r2, r3
 800446a:	2300      	movs	r3, #0
 800446c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	01db      	lsls	r3, r3, #7
 8004478:	4413      	add	r3, r2
 800447a:	3384      	adds	r3, #132	; 0x84
 800447c:	461a      	mov	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d102      	bne.n	8004492 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800448c:	2304      	movs	r3, #4
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e01b      	b.n	80044ca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d102      	bne.n	80044a0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800449a:	2303      	movs	r3, #3
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	e014      	b.n	80044ca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d00b      	beq.n	80044c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d007      	beq.n	80044c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d003      	beq.n	80044c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044bc:	2b07      	cmp	r3, #7
 80044be:	d102      	bne.n	80044c6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80044c0:	2302      	movs	r3, #2
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	e001      	b.n	80044ca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	01db      	lsls	r3, r3, #7
 80044d4:	4413      	add	r3, r2
 80044d6:	3384      	adds	r3, #132	; 0x84
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	4611      	mov	r1, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	01d2      	lsls	r2, r2, #7
 80044e4:	440a      	add	r2, r1
 80044e6:	3284      	adds	r2, #132	; 0x84
 80044e8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80044ec:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	041a      	lsls	r2, r3, #16
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6859      	ldr	r1, [r3, #4]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1acb      	subs	r3, r1, r3
 8004504:	69f9      	ldr	r1, [r7, #28]
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	3307      	adds	r3, #7
 800450c:	68f9      	ldr	r1, [r7, #12]
 800450e:	6809      	ldr	r1, [r1, #0]
 8004510:	4608      	mov	r0, r1
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	01c9      	lsls	r1, r1, #7
 8004516:	4401      	add	r1, r0
 8004518:	3184      	adds	r1, #132	; 0x84
 800451a:	4313      	orrs	r3, r2
 800451c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	01db      	lsls	r3, r3, #7
 8004528:	4413      	add	r3, r2
 800452a:	3384      	adds	r3, #132	; 0x84
 800452c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4619      	mov	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	01db      	lsls	r3, r3, #7
 8004538:	440b      	add	r3, r1
 800453a:	3384      	adds	r3, #132	; 0x84
 800453c:	4619      	mov	r1, r3
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <LTDC_SetConfig+0x330>)
 8004540:	4013      	ands	r3, r2
 8004542:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	01db      	lsls	r3, r3, #7
 800454e:	4413      	add	r3, r2
 8004550:	3384      	adds	r3, #132	; 0x84
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	4413      	add	r3, r2
 8004566:	3384      	adds	r3, #132	; 0x84
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	4611      	mov	r1, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	01d2      	lsls	r2, r2, #7
 8004574:	440a      	add	r2, r1
 8004576:	3284      	adds	r2, #132	; 0x84
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6013      	str	r3, [r2, #0]
}
 800457e:	bf00      	nop
 8004580:	3724      	adds	r7, #36	; 0x24
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	fffff8f8 	.word	0xfffff8f8
 8004590:	fffff800 	.word	0xfffff800

08004594 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d00a      	beq.n	80045be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045a8:	4b16      	ldr	r3, [pc, #88]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e01f      	b.n	80045fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e01d      	b.n	80045fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 0207 	bic.w	r2, r3, #7
 80045c6:	490f      	ldr	r1, [pc, #60]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045ce:	f7fe f8df 	bl	8002790 <HAL_GetTick>
 80045d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045d4:	e009      	b.n	80045ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045d6:	f7fe f8db 	bl	8002790 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e4:	d901      	bls.n	80045ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_PWREx_ConfigSupply+0x70>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f6:	d1ee      	bne.n	80045d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	58024800 	.word	0x58024800

08004608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	; 0x30
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e3ff      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8087 	beq.w	8004736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004628:	4b99      	ldr	r3, [pc, #612]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004632:	4b97      	ldr	r3, [pc, #604]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	2b10      	cmp	r3, #16
 800463c:	d007      	beq.n	800464e <HAL_RCC_OscConfig+0x46>
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	2b18      	cmp	r3, #24
 8004642:	d110      	bne.n	8004666 <HAL_RCC_OscConfig+0x5e>
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d10b      	bne.n	8004666 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464e:	4b90      	ldr	r3, [pc, #576]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d06c      	beq.n	8004734 <HAL_RCC_OscConfig+0x12c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d168      	bne.n	8004734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e3d9      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x76>
 8004670:	4b87      	ldr	r3, [pc, #540]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a86      	ldr	r2, [pc, #536]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e02e      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x98>
 8004686:	4b82      	ldr	r3, [pc, #520]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a81      	ldr	r2, [pc, #516]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800468c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	4b7f      	ldr	r3, [pc, #508]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7e      	ldr	r2, [pc, #504]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0xbc>
 80046aa:	4b79      	ldr	r3, [pc, #484]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a78      	ldr	r2, [pc, #480]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b76      	ldr	r3, [pc, #472]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a75      	ldr	r2, [pc, #468]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 80046c4:	4b72      	ldr	r3, [pc, #456]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a71      	ldr	r2, [pc, #452]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b6f      	ldr	r3, [pc, #444]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a6e      	ldr	r2, [pc, #440]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fe f854 	bl	8002790 <HAL_GetTick>
 80046e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fe f850 	bl	8002790 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e38d      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046fe:	4b64      	ldr	r3, [pc, #400]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xe4>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fe f840 	bl	8002790 <HAL_GetTick>
 8004710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004714:	f7fe f83c 	bl	8002790 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e379      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004726:	4b5a      	ldr	r3, [pc, #360]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x10c>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80ae 	beq.w	80048a0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004744:	4b52      	ldr	r3, [pc, #328]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800474c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800474e:	4b50      	ldr	r3, [pc, #320]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_RCC_OscConfig+0x162>
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	2b18      	cmp	r3, #24
 800475e:	d13a      	bne.n	80047d6 <HAL_RCC_OscConfig+0x1ce>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d135      	bne.n	80047d6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800476a:	4b49      	ldr	r3, [pc, #292]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_RCC_OscConfig+0x17a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e34b      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004782:	f7fe f835 	bl	80027f0 <HAL_GetREVID>
 8004786:	4603      	mov	r3, r0
 8004788:	f241 0203 	movw	r2, #4099	; 0x1003
 800478c:	4293      	cmp	r3, r2
 800478e:	d817      	bhi.n	80047c0 <HAL_RCC_OscConfig+0x1b8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d108      	bne.n	80047aa <HAL_RCC_OscConfig+0x1a2>
 8004798:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80047a0:	4a3b      	ldr	r2, [pc, #236]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a8:	e07a      	b.n	80048a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	4b39      	ldr	r3, [pc, #228]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	031b      	lsls	r3, r3, #12
 80047b8:	4935      	ldr	r1, [pc, #212]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047be:	e06f      	b.n	80048a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c0:	4b33      	ldr	r3, [pc, #204]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	4930      	ldr	r1, [pc, #192]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d4:	e064      	b.n	80048a0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d045      	beq.n	800486a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047de:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 0219 	bic.w	r2, r3, #25
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4929      	ldr	r1, [pc, #164]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fd ffce 	bl	8002790 <HAL_GetTick>
 80047f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f8:	f7fd ffca 	bl	8002790 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e307      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800480a:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	f7fd ffeb 	bl	80027f0 <HAL_GetREVID>
 800481a:	4603      	mov	r3, r0
 800481c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004820:	4293      	cmp	r3, r2
 8004822:	d817      	bhi.n	8004854 <HAL_RCC_OscConfig+0x24c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d108      	bne.n	800483e <HAL_RCC_OscConfig+0x236>
 800482c:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004834:	4a16      	ldr	r2, [pc, #88]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483a:	6053      	str	r3, [r2, #4]
 800483c:	e030      	b.n	80048a0 <HAL_RCC_OscConfig+0x298>
 800483e:	4b14      	ldr	r3, [pc, #80]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	031b      	lsls	r3, r3, #12
 800484c:	4910      	ldr	r1, [pc, #64]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
 8004852:	e025      	b.n	80048a0 <HAL_RCC_OscConfig+0x298>
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	061b      	lsls	r3, r3, #24
 8004862:	490b      	ldr	r1, [pc, #44]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004864:	4313      	orrs	r3, r2
 8004866:	604b      	str	r3, [r1, #4]
 8004868:	e01a      	b.n	80048a0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a08      	ldr	r2, [pc, #32]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fd ff8b 	bl	8002790 <HAL_GetTick>
 800487a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800487e:	f7fd ff87 	bl	8002790 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d903      	bls.n	8004894 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e2c4      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
 8004890:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004894:	4ba4      	ldr	r3, [pc, #656]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ee      	bne.n	800487e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80a9 	beq.w	8004a00 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ae:	4b9e      	ldr	r3, [pc, #632]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048b8:	4b9b      	ldr	r3, [pc, #620]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d007      	beq.n	80048d4 <HAL_RCC_OscConfig+0x2cc>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b18      	cmp	r3, #24
 80048c8:	d13a      	bne.n	8004940 <HAL_RCC_OscConfig+0x338>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d135      	bne.n	8004940 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048d4:	4b94      	ldr	r3, [pc, #592]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_OscConfig+0x2e4>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e296      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ec:	f7fd ff80 	bl	80027f0 <HAL_GetREVID>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d817      	bhi.n	800492a <HAL_RCC_OscConfig+0x322>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d108      	bne.n	8004914 <HAL_RCC_OscConfig+0x30c>
 8004902:	4b89      	ldr	r3, [pc, #548]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800490a:	4a87      	ldr	r2, [pc, #540]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 800490c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004910:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004912:	e075      	b.n	8004a00 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004914:	4b84      	ldr	r3, [pc, #528]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	069b      	lsls	r3, r3, #26
 8004922:	4981      	ldr	r1, [pc, #516]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004928:	e06a      	b.n	8004a00 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800492a:	4b7f      	ldr	r3, [pc, #508]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	061b      	lsls	r3, r3, #24
 8004938:	497b      	ldr	r1, [pc, #492]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 800493a:	4313      	orrs	r3, r2
 800493c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800493e:	e05f      	b.n	8004a00 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d042      	beq.n	80049ce <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004948:	4b77      	ldr	r3, [pc, #476]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a76      	ldr	r2, [pc, #472]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd ff1c 	bl	8002790 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800495c:	f7fd ff18 	bl	8002790 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e255      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800496e:	4b6e      	ldr	r3, [pc, #440]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800497a:	f7fd ff39 	bl	80027f0 <HAL_GetREVID>
 800497e:	4603      	mov	r3, r0
 8004980:	f241 0203 	movw	r2, #4099	; 0x1003
 8004984:	4293      	cmp	r3, r2
 8004986:	d817      	bhi.n	80049b8 <HAL_RCC_OscConfig+0x3b0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	2b20      	cmp	r3, #32
 800498e:	d108      	bne.n	80049a2 <HAL_RCC_OscConfig+0x39a>
 8004990:	4b65      	ldr	r3, [pc, #404]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004998:	4a63      	ldr	r2, [pc, #396]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 800499a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800499e:	6053      	str	r3, [r2, #4]
 80049a0:	e02e      	b.n	8004a00 <HAL_RCC_OscConfig+0x3f8>
 80049a2:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	069b      	lsls	r3, r3, #26
 80049b0:	495d      	ldr	r1, [pc, #372]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
 80049b6:	e023      	b.n	8004a00 <HAL_RCC_OscConfig+0x3f8>
 80049b8:	4b5b      	ldr	r3, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	4958      	ldr	r1, [pc, #352]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60cb      	str	r3, [r1, #12]
 80049cc:	e018      	b.n	8004a00 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049ce:	4b56      	ldr	r3, [pc, #344]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a55      	ldr	r2, [pc, #340]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80049d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7fd fed9 	bl	8002790 <HAL_GetTick>
 80049de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80049e2:	f7fd fed5 	bl	8002790 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e212      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049f4:	4b4c      	ldr	r3, [pc, #304]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d036      	beq.n	8004a7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d019      	beq.n	8004a48 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a14:	4b44      	ldr	r3, [pc, #272]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a18:	4a43      	ldr	r2, [pc, #268]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd feb6 	bl	8002790 <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a28:	f7fd feb2 	bl	8002790 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1ef      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x420>
 8004a46:	e018      	b.n	8004a7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a48:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4c:	4a36      	ldr	r2, [pc, #216]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fd fe9c 	bl	8002790 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5c:	f7fd fe98 	bl	8002790 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1d5      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d036      	beq.n	8004af4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d019      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a8e:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a25      	ldr	r2, [pc, #148]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a9a:	f7fd fe79 	bl	8002790 <HAL_GetTick>
 8004a9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004aa2:	f7fd fe75 	bl	8002790 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1b2      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x49a>
 8004ac0:	e018      	b.n	8004af4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ac2:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004acc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ace:	f7fd fe5f 	bl	8002790 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ad6:	f7fd fe5b 	bl	8002790 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e198      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <HAL_RCC_OscConfig+0x520>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f0      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8085 	beq.w	8004c0c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <HAL_RCC_OscConfig+0x524>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <HAL_RCC_OscConfig+0x524>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b0e:	f7fd fe3f 	bl	8002790 <HAL_GetTick>
 8004b12:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b14:	e00c      	b.n	8004b30 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b16:	f7fd fe3b 	bl	8002790 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b64      	cmp	r3, #100	; 0x64
 8004b22:	d905      	bls.n	8004b30 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e178      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b30:	4b96      	ldr	r3, [pc, #600]	; (8004d8c <HAL_RCC_OscConfig+0x784>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ec      	beq.n	8004b16 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d106      	bne.n	8004b52 <HAL_RCC_OscConfig+0x54a>
 8004b44:	4b92      	ldr	r3, [pc, #584]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	4a91      	ldr	r2, [pc, #580]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b50:	e02d      	b.n	8004bae <HAL_RCC_OscConfig+0x5a6>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x56c>
 8004b5a:	4b8d      	ldr	r3, [pc, #564]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a8c      	ldr	r2, [pc, #560]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
 8004b66:	4b8a      	ldr	r3, [pc, #552]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a89      	ldr	r2, [pc, #548]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	e01c      	b.n	8004bae <HAL_RCC_OscConfig+0x5a6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b05      	cmp	r3, #5
 8004b7a:	d10c      	bne.n	8004b96 <HAL_RCC_OscConfig+0x58e>
 8004b7c:	4b84      	ldr	r3, [pc, #528]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a83      	ldr	r2, [pc, #524]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b82:	f043 0304 	orr.w	r3, r3, #4
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
 8004b88:	4b81      	ldr	r3, [pc, #516]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a80      	ldr	r2, [pc, #512]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
 8004b94:	e00b      	b.n	8004bae <HAL_RCC_OscConfig+0x5a6>
 8004b96:	4b7e      	ldr	r3, [pc, #504]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	4a7d      	ldr	r2, [pc, #500]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba2:	4b7b      	ldr	r3, [pc, #492]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a7a      	ldr	r2, [pc, #488]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004ba8:	f023 0304 	bic.w	r3, r3, #4
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d015      	beq.n	8004be2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb6:	f7fd fdeb 	bl	8002790 <HAL_GetTick>
 8004bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bbe:	f7fd fde7 	bl	8002790 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e122      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bd4:	4b6e      	ldr	r3, [pc, #440]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ee      	beq.n	8004bbe <HAL_RCC_OscConfig+0x5b6>
 8004be0:	e014      	b.n	8004c0c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fd fdd5 	bl	8002790 <HAL_GetTick>
 8004be6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004be8:	e00a      	b.n	8004c00 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fd fdd1 	bl	8002790 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e10c      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c00:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ee      	bne.n	8004bea <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8101 	beq.w	8004e18 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c16:	4b5e      	ldr	r3, [pc, #376]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c1e:	2b18      	cmp	r3, #24
 8004c20:	f000 80bc 	beq.w	8004d9c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	f040 8095 	bne.w	8004d58 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b58      	ldr	r3, [pc, #352]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a57      	ldr	r2, [pc, #348]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fda9 	bl	8002790 <HAL_GetTick>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd fda5 	bl	8002790 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0e2      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c54:	4b4e      	ldr	r3, [pc, #312]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c60:	4b4b      	ldr	r3, [pc, #300]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c64:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <HAL_RCC_OscConfig+0x78c>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c70:	0112      	lsls	r2, r2, #4
 8004c72:	430a      	orrs	r2, r1
 8004c74:	4946      	ldr	r1, [pc, #280]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	628b      	str	r3, [r1, #40]	; 0x28
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	025b      	lsls	r3, r3, #9
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	3b01      	subs	r3, #1
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004caa:	4939      	ldr	r1, [pc, #228]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004cb0:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	4a36      	ldr	r2, [pc, #216]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cbc:	4b34      	ldr	r3, [pc, #208]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc0:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <HAL_RCC_OscConfig+0x790>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cc8:	00d2      	lsls	r2, r2, #3
 8004cca:	4931      	ldr	r1, [pc, #196]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004cd0:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f023 020c 	bic.w	r2, r3, #12
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	492c      	ldr	r1, [pc, #176]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ce2:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f023 0202 	bic.w	r2, r3, #2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	4928      	ldr	r1, [pc, #160]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d00:	4b23      	ldr	r3, [pc, #140]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d0c:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004d18:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	4a1c      	ldr	r2, [pc, #112]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d24:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fd fd2e 	bl	8002790 <HAL_GetTick>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d38:	f7fd fd2a 	bl	8002790 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e067      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x730>
 8004d56:	e05f      	b.n	8004e18 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d58:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fd fd14 	bl	8002790 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fd fd10 	bl	8002790 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e04d      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d7e:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <HAL_RCC_OscConfig+0x788>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x764>
 8004d8a:	e045      	b.n	8004e18 <HAL_RCC_OscConfig+0x810>
 8004d8c:	58024800 	.word	0x58024800
 8004d90:	58024400 	.word	0x58024400
 8004d94:	fffffc0c 	.word	0xfffffc0c
 8004d98:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <HAL_RCC_OscConfig+0x81c>)
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_RCC_OscConfig+0x81c>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d031      	beq.n	8004e14 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f003 0203 	and.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d12a      	bne.n	8004e14 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d122      	bne.n	8004e14 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d11a      	bne.n	8004e14 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	0a5b      	lsrs	r3, r3, #9
 8004de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d111      	bne.n	8004e14 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	0c1b      	lsrs	r3, r3, #16
 8004df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d108      	bne.n	8004e14 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	0e1b      	lsrs	r3, r3, #24
 8004e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3730      	adds	r7, #48	; 0x30
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400

08004e28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e19c      	b.n	8005176 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e3c:	4b8a      	ldr	r3, [pc, #552]	; (8005068 <HAL_RCC_ClockConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d910      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	4b87      	ldr	r3, [pc, #540]	; (8005068 <HAL_RCC_ClockConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f023 020f 	bic.w	r2, r3, #15
 8004e52:	4985      	ldr	r1, [pc, #532]	; (8005068 <HAL_RCC_ClockConfig+0x240>)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b83      	ldr	r3, [pc, #524]	; (8005068 <HAL_RCC_ClockConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e184      	b.n	8005176 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d010      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	4b7b      	ldr	r3, [pc, #492]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d908      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e88:	4b78      	ldr	r3, [pc, #480]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	4975      	ldr	r1, [pc, #468]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d010      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	4b70      	ldr	r3, [pc, #448]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d908      	bls.n	8004ec8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	496a      	ldr	r1, [pc, #424]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d010      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699a      	ldr	r2, [r3, #24]
 8004ed8:	4b64      	ldr	r3, [pc, #400]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d908      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	495e      	ldr	r1, [pc, #376]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d010      	beq.n	8004f24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69da      	ldr	r2, [r3, #28]
 8004f06:	4b59      	ldr	r3, [pc, #356]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d908      	bls.n	8004f24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f12:	4b56      	ldr	r3, [pc, #344]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4953      	ldr	r1, [pc, #332]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d010      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	4b4d      	ldr	r3, [pc, #308]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d908      	bls.n	8004f52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f40:	4b4a      	ldr	r3, [pc, #296]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f023 020f 	bic.w	r2, r3, #15
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4947      	ldr	r1, [pc, #284]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d055      	beq.n	800500a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f5e:	4b43      	ldr	r3, [pc, #268]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	4940      	ldr	r1, [pc, #256]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d107      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f78:	4b3c      	ldr	r3, [pc, #240]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d121      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0f6      	b.n	8005176 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f90:	4b36      	ldr	r3, [pc, #216]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d115      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0ea      	b.n	8005176 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d107      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fa8:	4b30      	ldr	r3, [pc, #192]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0de      	b.n	8005176 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fb8:	4b2c      	ldr	r3, [pc, #176]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0d6      	b.n	8005176 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fc8:	4b28      	ldr	r3, [pc, #160]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f023 0207 	bic.w	r2, r3, #7
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4925      	ldr	r1, [pc, #148]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7fd fbd9 	bl	8002790 <HAL_GetTick>
 8004fde:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe2:	f7fd fbd5 	bl	8002790 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0be      	b.n	8005176 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	429a      	cmp	r2, r3
 8005008:	d1eb      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	4b14      	ldr	r3, [pc, #80]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	429a      	cmp	r2, r3
 8005024:	d208      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005026:	4b11      	ldr	r3, [pc, #68]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f023 020f 	bic.w	r2, r3, #15
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	490e      	ldr	r1, [pc, #56]	; (800506c <HAL_RCC_ClockConfig+0x244>)
 8005034:	4313      	orrs	r3, r2
 8005036:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_RCC_ClockConfig+0x240>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d214      	bcs.n	8005070 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <HAL_RCC_ClockConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 020f 	bic.w	r2, r3, #15
 800504e:	4906      	ldr	r1, [pc, #24]	; (8005068 <HAL_RCC_ClockConfig+0x240>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b04      	ldr	r3, [pc, #16]	; (8005068 <HAL_RCC_ClockConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d005      	beq.n	8005070 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e086      	b.n	8005176 <HAL_RCC_ClockConfig+0x34e>
 8005068:	52002000 	.word	0x52002000
 800506c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d010      	beq.n	800509e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005088:	429a      	cmp	r2, r3
 800508a:	d208      	bcs.n	800509e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800508c:	4b3c      	ldr	r3, [pc, #240]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	4939      	ldr	r1, [pc, #228]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 800509a:	4313      	orrs	r3, r2
 800509c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d010      	beq.n	80050cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	4b34      	ldr	r3, [pc, #208]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d208      	bcs.n	80050cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050ba:	4b31      	ldr	r3, [pc, #196]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	492e      	ldr	r1, [pc, #184]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d010      	beq.n	80050fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	4b28      	ldr	r3, [pc, #160]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d208      	bcs.n	80050fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	4922      	ldr	r1, [pc, #136]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d010      	beq.n	8005128 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69da      	ldr	r2, [r3, #28]
 800510a:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005112:	429a      	cmp	r2, r3
 8005114:	d208      	bcs.n	8005128 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	4917      	ldr	r1, [pc, #92]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 8005124:	4313      	orrs	r3, r2
 8005126:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005128:	f000 f834 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 800512c:	4602      	mov	r2, r0
 800512e:	4b14      	ldr	r3, [pc, #80]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	4912      	ldr	r1, [pc, #72]	; (8005184 <HAL_RCC_ClockConfig+0x35c>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
 8005144:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005146:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <HAL_RCC_ClockConfig+0x358>)
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <HAL_RCC_ClockConfig+0x35c>)
 8005150:	5cd3      	ldrb	r3, [r2, r3]
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
 800515c:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <HAL_RCC_ClockConfig+0x360>)
 800515e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005160:	4a0a      	ldr	r2, [pc, #40]	; (800518c <HAL_RCC_ClockConfig+0x364>)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_RCC_ClockConfig+0x368>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd f8a6 	bl	80022bc <HAL_InitTick>
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	58024400 	.word	0x58024400
 8005184:	08029de0 	.word	0x08029de0
 8005188:	20000008 	.word	0x20000008
 800518c:	20000004 	.word	0x20000004
 8005190:	2000000c 	.word	0x2000000c

08005194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	; 0x24
 8005198:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800519a:	4bb3      	ldr	r3, [pc, #716]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051a2:	2b18      	cmp	r3, #24
 80051a4:	f200 8155 	bhi.w	8005452 <HAL_RCC_GetSysClockFreq+0x2be>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	08005215 	.word	0x08005215
 80051b4:	08005453 	.word	0x08005453
 80051b8:	08005453 	.word	0x08005453
 80051bc:	08005453 	.word	0x08005453
 80051c0:	08005453 	.word	0x08005453
 80051c4:	08005453 	.word	0x08005453
 80051c8:	08005453 	.word	0x08005453
 80051cc:	08005453 	.word	0x08005453
 80051d0:	0800523b 	.word	0x0800523b
 80051d4:	08005453 	.word	0x08005453
 80051d8:	08005453 	.word	0x08005453
 80051dc:	08005453 	.word	0x08005453
 80051e0:	08005453 	.word	0x08005453
 80051e4:	08005453 	.word	0x08005453
 80051e8:	08005453 	.word	0x08005453
 80051ec:	08005453 	.word	0x08005453
 80051f0:	08005241 	.word	0x08005241
 80051f4:	08005453 	.word	0x08005453
 80051f8:	08005453 	.word	0x08005453
 80051fc:	08005453 	.word	0x08005453
 8005200:	08005453 	.word	0x08005453
 8005204:	08005453 	.word	0x08005453
 8005208:	08005453 	.word	0x08005453
 800520c:	08005453 	.word	0x08005453
 8005210:	08005247 	.word	0x08005247
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005214:	4b94      	ldr	r3, [pc, #592]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d009      	beq.n	8005234 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005220:	4b91      	ldr	r3, [pc, #580]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	08db      	lsrs	r3, r3, #3
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	4a90      	ldr	r2, [pc, #576]	; (800546c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005232:	e111      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005234:	4b8d      	ldr	r3, [pc, #564]	; (800546c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005236:	61bb      	str	r3, [r7, #24]
    break;
 8005238:	e10e      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800523a:	4b8d      	ldr	r3, [pc, #564]	; (8005470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800523c:	61bb      	str	r3, [r7, #24]
    break;
 800523e:	e10b      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005240:	4b8c      	ldr	r3, [pc, #560]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005242:	61bb      	str	r3, [r7, #24]
    break;
 8005244:	e108      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005246:	4b88      	ldr	r3, [pc, #544]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005250:	4b85      	ldr	r3, [pc, #532]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800525a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800525c:	4b82      	ldr	r3, [pc, #520]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005266:	4b80      	ldr	r3, [pc, #512]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	08db      	lsrs	r3, r3, #3
 800526c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80e1 	beq.w	800544c <HAL_RCC_GetSysClockFreq+0x2b8>
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b02      	cmp	r3, #2
 800528e:	f000 8083 	beq.w	8005398 <HAL_RCC_GetSysClockFreq+0x204>
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b02      	cmp	r3, #2
 8005296:	f200 80a1 	bhi.w	80053dc <HAL_RCC_GetSysClockFreq+0x248>
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0x114>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d056      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x1c0>
 80052a6:	e099      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052a8:	4b6f      	ldr	r3, [pc, #444]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d02d      	beq.n	8005310 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052b4:	4b6c      	ldr	r3, [pc, #432]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	4a6b      	ldr	r2, [pc, #428]	; (800546c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052de:	4b62      	ldr	r3, [pc, #392]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80052f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800530e:	e087      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800547c <HAL_RCC_GetSysClockFreq+0x2e8>
 800531e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005322:	4b51      	ldr	r3, [pc, #324]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005332:	ed97 6a02 	vldr	s12, [r7, #8]
 8005336:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800533a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005352:	e065      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005480 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005366:	4b40      	ldr	r3, [pc, #256]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005376:	ed97 6a02 	vldr	s12, [r7, #8]
 800537a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800537e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800538a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005396:	e043      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005484 <HAL_RCC_GetSysClockFreq+0x2f0>
 80053a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053aa:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80053be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053da:	e021      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005480 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005402:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005478 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800541e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005420:	4b11      	ldr	r3, [pc, #68]	; (8005468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	0a5b      	lsrs	r3, r3, #9
 8005426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542a:	3301      	adds	r3, #1
 800542c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005438:	edd7 6a07 	vldr	s13, [r7, #28]
 800543c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005444:	ee17 3a90 	vmov	r3, s15
 8005448:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800544a:	e005      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
    break;
 8005450:	e002      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005454:	61bb      	str	r3, [r7, #24]
    break;
 8005456:	bf00      	nop
  }

  return sysclockfreq;
 8005458:	69bb      	ldr	r3, [r7, #24]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3724      	adds	r7, #36	; 0x24
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	58024400 	.word	0x58024400
 800546c:	03d09000 	.word	0x03d09000
 8005470:	003d0900 	.word	0x003d0900
 8005474:	01312d00 	.word	0x01312d00
 8005478:	46000000 	.word	0x46000000
 800547c:	4c742400 	.word	0x4c742400
 8005480:	4a742400 	.word	0x4a742400
 8005484:	4b989680 	.word	0x4b989680

08005488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800548e:	f7ff fe81 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 8005492:	4602      	mov	r2, r0
 8005494:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	0a1b      	lsrs	r3, r3, #8
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	490f      	ldr	r1, [pc, #60]	; (80054dc <HAL_RCC_GetHCLKFreq+0x54>)
 80054a0:	5ccb      	ldrb	r3, [r1, r3]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_RCC_GetHCLKFreq+0x54>)
 80054b6:	5cd3      	ldrb	r3, [r2, r3]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	fa22 f303 	lsr.w	r3, r2, r3
 80054c2:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80054c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054c6:	4a07      	ldr	r2, [pc, #28]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80054ce:	681b      	ldr	r3, [r3, #0]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	58024400 	.word	0x58024400
 80054dc:	08029de0 	.word	0x08029de0
 80054e0:	20000008 	.word	0x20000008
 80054e4:	20000004 	.word	0x20000004

080054e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054ec:	f7ff ffcc 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4904      	ldr	r1, [pc, #16]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	58024400 	.word	0x58024400
 8005510:	08029de0 	.word	0x08029de0

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005518:	f7ff ffb6 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	0a1b      	lsrs	r3, r3, #8
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4904      	ldr	r1, [pc, #16]	; (800553c <HAL_RCC_GetPCLK2Freq+0x28>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005534:	4618      	mov	r0, r3
 8005536:	bd80      	pop	{r7, pc}
 8005538:	58024400 	.word	0x58024400
 800553c:	08029de0 	.word	0x08029de0

08005540 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	223f      	movs	r2, #63	; 0x3f
 800554e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <HAL_RCC_GetClockConfig+0x7c>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0207 	and.w	r2, r3, #7
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <HAL_RCC_GetClockConfig+0x7c>)
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005568:	4b14      	ldr	r3, [pc, #80]	; (80055bc <HAL_RCC_GetClockConfig+0x7c>)
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005574:	4b11      	ldr	r3, [pc, #68]	; (80055bc <HAL_RCC_GetClockConfig+0x7c>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <HAL_RCC_GetClockConfig+0x7c>)
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_RCC_GetClockConfig+0x7c>)
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005598:	4b08      	ldr	r3, [pc, #32]	; (80055bc <HAL_RCC_GetClockConfig+0x7c>)
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_RCC_GetClockConfig+0x80>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	601a      	str	r2, [r3, #0]
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	58024400 	.word	0x58024400
 80055c0:	52002000 	.word	0x52002000

080055c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055d0:	2300      	movs	r3, #0
 80055d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d03f      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055e8:	d02a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055ee:	d824      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f4:	d018      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055fa:	d81e      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005604:	d007      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005606:	e018      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005608:	4bab      	ldr	r3, [pc, #684]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4aaa      	ldr	r2, [pc, #680]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005612:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005614:	e015      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3304      	adds	r3, #4
 800561a:	2102      	movs	r1, #2
 800561c:	4618      	mov	r0, r3
 800561e:	f001 fff3 	bl	8007608 <RCCEx_PLL2_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005626:	e00c      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3324      	adds	r3, #36	; 0x24
 800562c:	2102      	movs	r1, #2
 800562e:	4618      	mov	r0, r3
 8005630:	f002 f89c 	bl	800776c <RCCEx_PLL3_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005638:	e003      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	75fb      	strb	r3, [r7, #23]
      break;
 800563e:	e000      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005648:	4b9b      	ldr	r3, [pc, #620]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005654:	4998      	ldr	r1, [pc, #608]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	650b      	str	r3, [r1, #80]	; 0x50
 800565a:	e001      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d03d      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	2b04      	cmp	r3, #4
 8005672:	d826      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	08005691 	.word	0x08005691
 8005680:	0800569f 	.word	0x0800569f
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c9 	.word	0x080056c9
 800568c:	080056c9 	.word	0x080056c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005690:	4b89      	ldr	r3, [pc, #548]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4a88      	ldr	r2, [pc, #544]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800569a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800569c:	e015      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 ffaf 	bl	8007608 <RCCEx_PLL2_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056ae:	e00c      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f002 f858 	bl	800776c <RCCEx_PLL3_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056c0:	e003      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
      break;
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80056c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056d0:	4b79      	ldr	r3, [pc, #484]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d4:	f023 0207 	bic.w	r2, r3, #7
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	4976      	ldr	r1, [pc, #472]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	650b      	str	r3, [r1, #80]	; 0x50
 80056e2:	e001      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d042      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fc:	d02b      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80056fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005702:	d825      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005704:	2bc0      	cmp	r3, #192	; 0xc0
 8005706:	d028      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005708:	2bc0      	cmp	r3, #192	; 0xc0
 800570a:	d821      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800570c:	2b80      	cmp	r3, #128	; 0x80
 800570e:	d016      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d81d      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d007      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800571c:	e018      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571e:	4b66      	ldr	r3, [pc, #408]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	4a65      	ldr	r2, [pc, #404]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005728:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800572a:	e017      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f001 ff68 	bl	8007608 <RCCEx_PLL2_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800573c:	e00e      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3324      	adds	r3, #36	; 0x24
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f002 f811 	bl	800776c <RCCEx_PLL3_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800574e:	e005      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	75fb      	strb	r3, [r7, #23]
      break;
 8005754:	e002      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800575a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005762:	4b55      	ldr	r3, [pc, #340]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005766:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	4952      	ldr	r1, [pc, #328]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005770:	4313      	orrs	r3, r2
 8005772:	650b      	str	r3, [r1, #80]	; 0x50
 8005774:	e001      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
 8005778:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005782:	2b00      	cmp	r3, #0
 8005784:	d049      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800578c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005790:	d030      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005796:	d82a      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005798:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800579c:	d02c      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800579e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057a2:	d824      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a8:	d018      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80057aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ae:	d81e      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80057b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057b8:	d007      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80057ba:	e018      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057bc:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a3d      	ldr	r2, [pc, #244]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057c8:	e017      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 ff19 	bl	8007608 <RCCEx_PLL2_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80057da:	e00e      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 ffc2 	bl	800776c <RCCEx_PLL3_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057ec:	e005      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
      break;
 80057f2:	e002      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80057f4:	bf00      	nop
 80057f6:	e000      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80057f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005800:	4b2d      	ldr	r3, [pc, #180]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800580e:	492a      	ldr	r1, [pc, #168]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005810:	4313      	orrs	r3, r2
 8005812:	658b      	str	r3, [r1, #88]	; 0x58
 8005814:	e001      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005822:	2b00      	cmp	r3, #0
 8005824:	d04c      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800582c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005830:	d030      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005836:	d82a      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005838:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800583c:	d02c      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800583e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005842:	d824      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005848:	d018      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800584a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800584e:	d81e      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005858:	d007      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800585a:	e018      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005868:	e017      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3304      	adds	r3, #4
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f001 fec9 	bl	8007608 <RCCEx_PLL2_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800587a:	e00e      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3324      	adds	r3, #36	; 0x24
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f001 ff72 	bl	800776c <RCCEx_PLL3_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800588c:	e005      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	75fb      	strb	r3, [r7, #23]
      break;
 8005892:	e002      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058ae:	4902      	ldr	r1, [pc, #8]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	658b      	str	r3, [r1, #88]	; 0x58
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80058b6:	bf00      	nop
 80058b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d032      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d0:	2b30      	cmp	r3, #48	; 0x30
 80058d2:	d01c      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80058d4:	2b30      	cmp	r3, #48	; 0x30
 80058d6:	d817      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d00c      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d813      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d016      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d10f      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e8:	4baf      	ldr	r3, [pc, #700]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4aae      	ldr	r2, [pc, #696]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80058f4:	e00e      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	2102      	movs	r1, #2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 fe83 	bl	8007608 <RCCEx_PLL2_Config>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005906:	e005      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]
      break;
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800591a:	4ba3      	ldr	r3, [pc, #652]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800591c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	49a0      	ldr	r1, [pc, #640]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005928:	4313      	orrs	r3, r2
 800592a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800592c:	e001      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d047      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005946:	d030      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800594c:	d82a      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800594e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005952:	d02c      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005954:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005958:	d824      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595e:	d018      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005964:	d81e      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d007      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005970:	e018      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005972:	4b8d      	ldr	r3, [pc, #564]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	4a8c      	ldr	r2, [pc, #560]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800597e:	e017      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	2100      	movs	r1, #0
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fe3e 	bl	8007608 <RCCEx_PLL2_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005990:	e00e      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3324      	adds	r3, #36	; 0x24
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fee7 	bl	800776c <RCCEx_PLL3_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059a2:	e005      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
      break;
 80059a8:	e002      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80059ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059b6:	4b7c      	ldr	r3, [pc, #496]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	4979      	ldr	r1, [pc, #484]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	650b      	str	r3, [r1, #80]	; 0x50
 80059c8:	e001      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d049      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e2:	d02e      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80059e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e8:	d828      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80059ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059ee:	d02a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80059f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059f4:	d822      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80059f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059fa:	d026      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80059fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a00:	d81c      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a06:	d010      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a0c:	d816      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01d      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a16:	d111      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 fdf2 	bl	8007608 <RCCEx_PLL2_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a28:	e012      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3324      	adds	r3, #36	; 0x24
 8005a2e:	2101      	movs	r1, #1
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 fe9b 	bl	800776c <RCCEx_PLL3_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a3a:	e009      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a40:	e006      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005a42:	bf00      	nop
 8005a44:	e004      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005a46:	bf00      	nop
 8005a48:	e002      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a56:	4b54      	ldr	r3, [pc, #336]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a62:	4951      	ldr	r1, [pc, #324]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	650b      	str	r3, [r1, #80]	; 0x50
 8005a68:	e001      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d04b      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a84:	d02e      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a8a:	d828      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a90:	d02a      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a96:	d822      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a9c:	d026      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005a9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005aa2:	d81c      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa8:	d010      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aae:	d816      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01d      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab8:	d111      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3304      	adds	r3, #4
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fda1 	bl	8007608 <RCCEx_PLL2_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005aca:	e012      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3324      	adds	r3, #36	; 0x24
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 fe4a 	bl	800776c <RCCEx_PLL3_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005adc:	e009      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae2:	e006      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ae4:	bf00      	nop
 8005ae6:	e004      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ae8:	bf00      	nop
 8005aea:	e002      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005aec:	bf00      	nop
 8005aee:	e000      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005af8:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b06:	4928      	ldr	r1, [pc, #160]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	658b      	str	r3, [r1, #88]	; 0x58
 8005b0c:	e001      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d02f      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b26:	d00e      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b2c:	d814      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d015      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b36:	d10f      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b44:	e00c      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 fd5b 	bl	8007608 <RCCEx_PLL2_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b56:	e003      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b66:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b72:	490d      	ldr	r1, [pc, #52]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	650b      	str	r3, [r1, #80]	; 0x50
 8005b78:	e001      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d033      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d81c      	bhi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bd3 	.word	0x08005bd3
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bbb 	.word	0x08005bbb
 8005ba4:	08005bd3 	.word	0x08005bd3
 8005ba8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	4bb8      	ldr	r3, [pc, #736]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	4ab7      	ldr	r2, [pc, #732]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005bb8:	e00c      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fd21 	bl	8007608 <RCCEx_PLL2_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005bca:	e003      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bda:	4bad      	ldr	r3, [pc, #692]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bde:	f023 0203 	bic.w	r2, r3, #3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be6:	49aa      	ldr	r1, [pc, #680]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bec:	e001      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8086 	beq.w	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c00:	4ba4      	ldr	r3, [pc, #656]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4aa3      	ldr	r2, [pc, #652]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c0c:	f7fc fdc0 	bl	8002790 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c12:	e009      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c14:	f7fc fdbc 	bl	8002790 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d902      	bls.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	75fb      	strb	r3, [r7, #23]
        break;
 8005c26:	e005      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c28:	4b9a      	ldr	r3, [pc, #616]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0ef      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d166      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c3a:	4b95      	ldr	r3, [pc, #596]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c44:	4053      	eors	r3, r2
 8005c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d013      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c4e:	4b90      	ldr	r3, [pc, #576]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c58:	4b8d      	ldr	r3, [pc, #564]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	4a8c      	ldr	r2, [pc, #560]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c64:	4b8a      	ldr	r3, [pc, #552]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	4a89      	ldr	r2, [pc, #548]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c70:	4a87      	ldr	r2, [pc, #540]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c80:	d115      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c82:	f7fc fd85 	bl	8002790 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c88:	e00b      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8a:	f7fc fd81 	bl	8002790 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d902      	bls.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	75fb      	strb	r3, [r7, #23]
            break;
 8005ca0:	e005      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ca2:	4b7b      	ldr	r3, [pc, #492]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0ed      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d126      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005cc4:	4b72      	ldr	r3, [pc, #456]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cd2:	0919      	lsrs	r1, r3, #4
 8005cd4:	4b70      	ldr	r3, [pc, #448]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005cd6:	400b      	ands	r3, r1
 8005cd8:	496d      	ldr	r1, [pc, #436]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	610b      	str	r3, [r1, #16]
 8005cde:	e005      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005ce0:	4b6b      	ldr	r3, [pc, #428]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	4a6a      	ldr	r2, [pc, #424]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ce6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cea:	6113      	str	r3, [r2, #16]
 8005cec:	4b68      	ldr	r3, [pc, #416]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cfa:	4965      	ldr	r1, [pc, #404]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	670b      	str	r3, [r1, #112]	; 0x70
 8005d00:	e004      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	75bb      	strb	r3, [r7, #22]
 8005d06:	e001      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d07e      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d1c:	2b28      	cmp	r3, #40	; 0x28
 8005d1e:	d867      	bhi.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005df7 	.word	0x08005df7
 8005d2c:	08005df1 	.word	0x08005df1
 8005d30:	08005df1 	.word	0x08005df1
 8005d34:	08005df1 	.word	0x08005df1
 8005d38:	08005df1 	.word	0x08005df1
 8005d3c:	08005df1 	.word	0x08005df1
 8005d40:	08005df1 	.word	0x08005df1
 8005d44:	08005df1 	.word	0x08005df1
 8005d48:	08005dcd 	.word	0x08005dcd
 8005d4c:	08005df1 	.word	0x08005df1
 8005d50:	08005df1 	.word	0x08005df1
 8005d54:	08005df1 	.word	0x08005df1
 8005d58:	08005df1 	.word	0x08005df1
 8005d5c:	08005df1 	.word	0x08005df1
 8005d60:	08005df1 	.word	0x08005df1
 8005d64:	08005df1 	.word	0x08005df1
 8005d68:	08005ddf 	.word	0x08005ddf
 8005d6c:	08005df1 	.word	0x08005df1
 8005d70:	08005df1 	.word	0x08005df1
 8005d74:	08005df1 	.word	0x08005df1
 8005d78:	08005df1 	.word	0x08005df1
 8005d7c:	08005df1 	.word	0x08005df1
 8005d80:	08005df1 	.word	0x08005df1
 8005d84:	08005df1 	.word	0x08005df1
 8005d88:	08005df7 	.word	0x08005df7
 8005d8c:	08005df1 	.word	0x08005df1
 8005d90:	08005df1 	.word	0x08005df1
 8005d94:	08005df1 	.word	0x08005df1
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005df1 	.word	0x08005df1
 8005da0:	08005df1 	.word	0x08005df1
 8005da4:	08005df1 	.word	0x08005df1
 8005da8:	08005df7 	.word	0x08005df7
 8005dac:	08005df1 	.word	0x08005df1
 8005db0:	08005df1 	.word	0x08005df1
 8005db4:	08005df1 	.word	0x08005df1
 8005db8:	08005df1 	.word	0x08005df1
 8005dbc:	08005df1 	.word	0x08005df1
 8005dc0:	08005df1 	.word	0x08005df1
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	08005df7 	.word	0x08005df7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 fc18 	bl	8007608 <RCCEx_PLL2_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005ddc:	e00c      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3324      	adds	r3, #36	; 0x24
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fcc1 	bl	800776c <RCCEx_PLL3_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75fb      	strb	r3, [r7, #23]
      break;
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d109      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005dfe:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e0a:	4921      	ldr	r1, [pc, #132]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	654b      	str	r3, [r1, #84]	; 0x54
 8005e10:	e001      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d03e      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d820      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e73 	.word	0x08005e73
 8005e34:	08005e49 	.word	0x08005e49
 8005e38:	08005e5b 	.word	0x08005e5b
 8005e3c:	08005e73 	.word	0x08005e73
 8005e40:	08005e73 	.word	0x08005e73
 8005e44:	08005e73 	.word	0x08005e73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 fbda 	bl	8007608 <RCCEx_PLL2_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e58:	e00c      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3324      	adds	r3, #36	; 0x24
 8005e5e:	2101      	movs	r1, #1
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 fc83 	bl	800776c <RCCEx_PLL3_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e6a:	e003      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e70:	e000      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d110      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	f023 0207 	bic.w	r2, r3, #7
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e86:	4902      	ldr	r1, [pc, #8]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	654b      	str	r3, [r1, #84]	; 0x54
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
 8005e94:	58024800 	.word	0x58024800
 8005e98:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d039      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	d820      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005eff 	.word	0x08005eff
 8005ec0:	08005ed5 	.word	0x08005ed5
 8005ec4:	08005ee7 	.word	0x08005ee7
 8005ec8:	08005eff 	.word	0x08005eff
 8005ecc:	08005eff 	.word	0x08005eff
 8005ed0:	08005eff 	.word	0x08005eff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fb94 	bl	8007608 <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ee4:	e00c      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3324      	adds	r3, #36	; 0x24
 8005eea:	2101      	movs	r1, #1
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 fc3d 	bl	800776c <RCCEx_PLL3_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ef6:	e003      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	75fb      	strb	r3, [r7, #23]
      break;
 8005efc:	e000      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f06:	4bb7      	ldr	r3, [pc, #732]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0a:	f023 0207 	bic.w	r2, r3, #7
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	49b3      	ldr	r1, [pc, #716]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	658b      	str	r3, [r1, #88]	; 0x58
 8005f1a:	e001      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d04b      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f36:	d02e      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f3c:	d828      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f42:	d02a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f48:	d822      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005f4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f4e:	d026      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f54:	d81c      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f60:	d816      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01d      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f6a:	d111      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fb48 	bl	8007608 <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f7c:	e012      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3324      	adds	r3, #36	; 0x24
 8005f82:	2102      	movs	r1, #2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 fbf1 	bl	800776c <RCCEx_PLL3_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f8e:	e009      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
      break;
 8005f94:	e006      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005f96:	bf00      	nop
 8005f98:	e004      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005faa:	4b8e      	ldr	r3, [pc, #568]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	498a      	ldr	r1, [pc, #552]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	654b      	str	r3, [r1, #84]	; 0x54
 8005fbe:	e001      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d04b      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fda:	d02e      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005fdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fe0:	d828      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe6:	d02a      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fec:	d822      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff2:	d026      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff8:	d81c      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffe:	d010      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006004:	d816      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01d      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600e:	d111      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3304      	adds	r3, #4
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f001 faf6 	bl	8007608 <RCCEx_PLL2_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006020:	e012      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3324      	adds	r3, #36	; 0x24
 8006026:	2102      	movs	r1, #2
 8006028:	4618      	mov	r0, r3
 800602a:	f001 fb9f 	bl	800776c <RCCEx_PLL3_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006032:	e009      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	75fb      	strb	r3, [r7, #23]
      break;
 8006038:	e006      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800603a:	bf00      	nop
 800603c:	e004      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800603e:	bf00      	nop
 8006040:	e002      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006042:	bf00      	nop
 8006044:	e000      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800604e:	4b65      	ldr	r3, [pc, #404]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006052:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800605c:	4961      	ldr	r1, [pc, #388]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800605e:	4313      	orrs	r3, r2
 8006060:	658b      	str	r3, [r1, #88]	; 0x58
 8006062:	e001      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006070:	2b00      	cmp	r3, #0
 8006072:	d04b      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800607a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800607e:	d02e      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006080:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006084:	d828      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608a:	d02a      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800608c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006090:	d822      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006092:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006096:	d026      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006098:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800609c:	d81c      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800609e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a2:	d010      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80060a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a8:	d816      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01d      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80060ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b2:	d111      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 faa4 	bl	8007608 <RCCEx_PLL2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80060c4:	e012      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3324      	adds	r3, #36	; 0x24
 80060ca:	2102      	movs	r1, #2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 fb4d 	bl	800776c <RCCEx_PLL3_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80060d6:	e009      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
      break;
 80060dc:	e006      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80060de:	bf00      	nop
 80060e0:	e004      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80060e2:	bf00      	nop
 80060e4:	e002      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80060ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060f2:	4b3c      	ldr	r3, [pc, #240]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006100:	4938      	ldr	r1, [pc, #224]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006102:	4313      	orrs	r3, r2
 8006104:	658b      	str	r3, [r1, #88]	; 0x58
 8006106:	e001      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006122:	d10a      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3324      	adds	r3, #36	; 0x24
 8006128:	2102      	movs	r1, #2
 800612a:	4618      	mov	r0, r3
 800612c:	f001 fb1e 	bl	800776c <RCCEx_PLL3_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800613a:	4b2a      	ldr	r3, [pc, #168]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006148:	4926      	ldr	r1, [pc, #152]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800614a:	4313      	orrs	r3, r2
 800614c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006164:	d10a      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	2102      	movs	r1, #2
 800616c:	4618      	mov	r0, r3
 800616e:	f001 fafd 	bl	800776c <RCCEx_PLL3_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800617c:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800618a:	4916      	ldr	r1, [pc, #88]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800618c:	4313      	orrs	r3, r2
 800618e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d036      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a6:	d01f      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80061a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061ac:	d817      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b6:	d009      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80061b8:	e011      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fa21 	bl	8007608 <RCCEx_PLL2_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80061ca:	e00e      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3324      	adds	r3, #36	; 0x24
 80061d0:	2102      	movs	r1, #2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 faca 	bl	800776c <RCCEx_PLL3_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80061dc:	e005      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
      break;
 80061e2:	e002      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80061e4:	58024400 	.word	0x58024400
      break;
 80061e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061f0:	4b93      	ldr	r3, [pc, #588]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061fe:	4990      	ldr	r1, [pc, #576]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006200:	4313      	orrs	r3, r2
 8006202:	658b      	str	r3, [r1, #88]	; 0x58
 8006204:	e001      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
 8006208:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d033      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006220:	d01c      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006222:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006226:	d816      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800622c:	d003      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800622e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006232:	d007      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006234:	e00f      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006236:	4b82      	ldr	r3, [pc, #520]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	4a81      	ldr	r2, [pc, #516]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800623c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006240:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006242:	e00c      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3324      	adds	r3, #36	; 0x24
 8006248:	2101      	movs	r1, #1
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fa8e 	bl	800776c <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006254:	e003      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
      break;
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800625c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006264:	4b76      	ldr	r3, [pc, #472]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006272:	4973      	ldr	r1, [pc, #460]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006274:	4313      	orrs	r3, r2
 8006276:	654b      	str	r3, [r1, #84]	; 0x54
 8006278:	e001      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d029      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006296:	d007      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006298:	e00f      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629a:	4b69      	ldr	r3, [pc, #420]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	4a68      	ldr	r2, [pc, #416]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80062a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80062a6:	e00b      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	2102      	movs	r1, #2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 f9aa 	bl	8007608 <RCCEx_PLL2_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	75fb      	strb	r3, [r7, #23]
      break;
 80062be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80062c6:	4b5e      	ldr	r3, [pc, #376]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80062c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d2:	495b      	ldr	r1, [pc, #364]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062d8:	e001      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
 80062dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	; 0x24
 80062ee:	2102      	movs	r1, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fa3b 	bl	800776c <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d030      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006314:	d017      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631a:	d811      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800631c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006320:	d013      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006326:	d80b      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d010      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800632c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006330:	d106      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006332:	4b43      	ldr	r3, [pc, #268]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	4a42      	ldr	r2, [pc, #264]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800633e:	e007      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
      break;
 8006344:	e004      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006346:	bf00      	nop
 8006348:	e002      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800634e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d109      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006356:	4b3a      	ldr	r3, [pc, #232]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006362:	4937      	ldr	r1, [pc, #220]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	654b      	str	r3, [r1, #84]	; 0x54
 8006368:	e001      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800637a:	4b31      	ldr	r3, [pc, #196]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	492e      	ldr	r1, [pc, #184]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006388:	4313      	orrs	r3, r2
 800638a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d009      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006398:	4b29      	ldr	r3, [pc, #164]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063a6:	4926      	ldr	r1, [pc, #152]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063b8:	4b21      	ldr	r3, [pc, #132]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c4:	491e      	ldr	r1, [pc, #120]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00d      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063d6:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	4a19      	ldr	r2, [pc, #100]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063e0:	6113      	str	r3, [r2, #16]
 80063e2:	4b17      	ldr	r3, [pc, #92]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80063ec:	4914      	ldr	r1, [pc, #80]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da08      	bge.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80063fa:	4b11      	ldr	r3, [pc, #68]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006406:	490e      	ldr	r1, [pc, #56]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800641a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006426:	4906      	ldr	r1, [pc, #24]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006428:	4313      	orrs	r3, r2
 800642a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800642c:	7dbb      	ldrb	r3, [r7, #22]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	e000      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	58024400 	.word	0x58024400

08006444 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b090      	sub	sp, #64	; 0x40
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006452:	f040 8095 	bne.w	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006456:	4bae      	ldr	r3, [pc, #696]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	633b      	str	r3, [r7, #48]	; 0x30
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	2b04      	cmp	r3, #4
 8006464:	f200 8088 	bhi.w	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006468:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006485 	.word	0x08006485
 8006474:	080064ad 	.word	0x080064ad
 8006478:	080064d5 	.word	0x080064d5
 800647c:	08006571 	.word	0x08006571
 8006480:	080064fd 	.word	0x080064fd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006484:	4ba2      	ldr	r3, [pc, #648]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006490:	d108      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006496:	4618      	mov	r0, r3
 8006498:	f000 ff64 	bl	8007364 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064a0:	f000 bc95 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064a8:	f000 bc91 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064ac:	4b98      	ldr	r3, [pc, #608]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b8:	d108      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ba:	f107 0318 	add.w	r3, r7, #24
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fca8 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064c8:	f000 bc81 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064d0:	f000 bc7d 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064d4:	4b8e      	ldr	r3, [pc, #568]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e0:	d108      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064e2:	f107 030c 	add.w	r3, r7, #12
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fde8 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064f0:	f000 bc6d 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064f8:	f000 bc69 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80064fc:	4b84      	ldr	r3, [pc, #528]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80064fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006504:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006506:	4b82      	ldr	r3, [pc, #520]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b04      	cmp	r3, #4
 8006510:	d10c      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006518:	4b7d      	ldr	r3, [pc, #500]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	08db      	lsrs	r3, r3, #3
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	4a7c      	ldr	r2, [pc, #496]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006524:	fa22 f303 	lsr.w	r3, r2, r3
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652a:	e01f      	b.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800652c:	4b78      	ldr	r3, [pc, #480]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006538:	d106      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800653a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006540:	d102      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006542:	4b75      	ldr	r3, [pc, #468]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006546:	e011      	b.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006548:	4b71      	ldr	r3, [pc, #452]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800655c:	d102      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800655e:	4b6f      	ldr	r3, [pc, #444]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006562:	e003      	b.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006568:	f000 bc31 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800656c:	f000 bc2f 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006570:	4b6b      	ldr	r3, [pc, #428]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006574:	f000 bc2b 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800657c:	f000 bc27 	b.w	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006586:	f040 8095 	bne.w	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800658a:	4b61      	ldr	r3, [pc, #388]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006592:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659a:	d04d      	beq.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	f200 8084 	bhi.w	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	2bc0      	cmp	r3, #192	; 0xc0
 80065aa:	d07d      	beq.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	2bc0      	cmp	r3, #192	; 0xc0
 80065b0:	d87d      	bhi.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	2b80      	cmp	r3, #128	; 0x80
 80065b6:	d02d      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d877      	bhi.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d012      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80065ca:	e070      	b.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065cc:	4b50      	ldr	r3, [pc, #320]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065d8:	d107      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fec0 	bl	8007364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065e8:	e3f1      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ee:	e3ee      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065f0:	4b47      	ldr	r3, [pc, #284]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065fc:	d107      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fe:	f107 0318 	add.w	r3, r7, #24
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fc06 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800660c:	e3df      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006612:	e3dc      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006614:	4b3e      	ldr	r3, [pc, #248]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800661c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006620:	d107      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006622:	f107 030c 	add.w	r3, r7, #12
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fd48 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006630:	e3cd      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006636:	e3ca      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006638:	4b35      	ldr	r3, [pc, #212]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800663a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006640:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006642:	4b33      	ldr	r3, [pc, #204]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b04      	cmp	r3, #4
 800664c:	d10c      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d109      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006654:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	08db      	lsrs	r3, r3, #3
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	4a2d      	ldr	r2, [pc, #180]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006666:	e01e      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006668:	4b29      	ldr	r3, [pc, #164]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	d106      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800667c:	d102      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800667e:	4b26      	ldr	r3, [pc, #152]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006682:	e010      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006684:	4b22      	ldr	r3, [pc, #136]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006690:	d106      	bne.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006698:	d102      	bne.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800669a:	4b20      	ldr	r3, [pc, #128]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80066a4:	e393      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066a6:	e392      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066a8:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ac:	e38f      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b2:	e38c      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ba:	f040 80a7 	bne.w	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80066be:	4b14      	ldr	r3, [pc, #80]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80066c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066ce:	d05f      	beq.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066d6:	f200 8096 	bhi.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066e0:	f000 808e 	beq.w	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066ea:	f200 808c 	bhi.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066f4:	d03a      	beq.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066fc:	f200 8083 	bhi.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00e      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800670c:	d01c      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800670e:	e07a      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006710:	58024400 	.word	0x58024400
 8006714:	03d09000 	.word	0x03d09000
 8006718:	003d0900 	.word	0x003d0900
 800671c:	01312d00 	.word	0x01312d00
 8006720:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006724:	4baa      	ldr	r3, [pc, #680]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006730:	d107      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fe14 	bl	8007364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006740:	e345      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006746:	e342      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006748:	4ba1      	ldr	r3, [pc, #644]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006754:	d107      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006756:	f107 0318 	add.w	r3, r7, #24
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fb5a 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006764:	e333      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800676a:	e330      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800676c:	4b98      	ldr	r3, [pc, #608]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006778:	d107      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677a:	f107 030c 	add.w	r3, r7, #12
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fc9c 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006788:	e321      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800678e:	e31e      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006790:	4b8f      	ldr	r3, [pc, #572]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006798:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800679a:	4b8d      	ldr	r3, [pc, #564]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80067a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067ac:	4b88      	ldr	r3, [pc, #544]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	08db      	lsrs	r3, r3, #3
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	4a87      	ldr	r2, [pc, #540]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067be:	e01e      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067c0:	4b83      	ldr	r3, [pc, #524]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067cc:	d106      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067d4:	d102      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80067d6:	4b80      	ldr	r3, [pc, #512]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067da:	e010      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067dc:	4b7c      	ldr	r3, [pc, #496]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067e8:	d106      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f0:	d102      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80067f2:	4b7a      	ldr	r3, [pc, #488]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f6:	e002      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80067fc:	e2e7      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067fe:	e2e6      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006800:	4b77      	ldr	r3, [pc, #476]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006804:	e2e3      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800680a:	e2e0      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006812:	f040 809c 	bne.w	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006816:	4b6e      	ldr	r3, [pc, #440]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800681e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006826:	d054      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800682e:	f200 808b 	bhi.w	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006838:	f000 8083 	beq.w	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006842:	f200 8081 	bhi.w	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800684c:	d02f      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006854:	d878      	bhi.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006862:	d012      	beq.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006864:	e070      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006866:	4b5a      	ldr	r3, [pc, #360]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006872:	d107      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fd73 	bl	8007364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006882:	e2a4      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006888:	e2a1      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800688a:	4b51      	ldr	r3, [pc, #324]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006896:	d107      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006898:	f107 0318 	add.w	r3, r7, #24
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fab9 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80068a6:	e292      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ac:	e28f      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068ae:	4b48      	ldr	r3, [pc, #288]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ba:	d107      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068bc:	f107 030c 	add.w	r3, r7, #12
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fbfb 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068ca:	e280      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d0:	e27d      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068d2:	4b3f      	ldr	r3, [pc, #252]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068da:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068dc:	4b3c      	ldr	r3, [pc, #240]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d10c      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068ee:	4b38      	ldr	r3, [pc, #224]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	08db      	lsrs	r3, r3, #3
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	4a36      	ldr	r2, [pc, #216]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068fa:	fa22 f303 	lsr.w	r3, r2, r3
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006900:	e01e      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006902:	4b33      	ldr	r3, [pc, #204]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690e:	d106      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006916:	d102      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006918:	4b2f      	ldr	r3, [pc, #188]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800691c:	e010      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800691e:	4b2c      	ldr	r3, [pc, #176]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800692a:	d106      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006932:	d102      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006934:	4b29      	ldr	r3, [pc, #164]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006938:	e002      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800693e:	e246      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006940:	e245      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006942:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006946:	e242      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800694c:	e23f      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006954:	f040 80a8 	bne.w	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006958:	4b1d      	ldr	r3, [pc, #116]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800695a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006960:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006968:	d060      	beq.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006970:	f200 8097 	bhi.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800697a:	f000 808f 	beq.w	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006984:	f200 808d 	bhi.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698e:	d03b      	beq.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006996:	f200 8084 	bhi.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a6:	d01d      	beq.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80069a8:	e07b      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069aa:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069b6:	d107      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fcd1 	bl	8007364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069c6:	e202      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069cc:	e1ff      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	03d09000 	.word	0x03d09000
 80069d8:	003d0900 	.word	0x003d0900
 80069dc:	01312d00 	.word	0x01312d00
 80069e0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069e4:	4ba3      	ldr	r3, [pc, #652]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069f0:	d107      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f2:	f107 0318 	add.w	r3, r7, #24
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fa0c 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a00:	e1e5      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a06:	e1e2      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a08:	4b9a      	ldr	r3, [pc, #616]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a14:	d107      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a16:	f107 030c 	add.w	r3, r7, #12
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fb4e 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a24:	e1d3      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a2a:	e1d0      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a2c:	4b91      	ldr	r3, [pc, #580]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a36:	4b8f      	ldr	r3, [pc, #572]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d10c      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a48:	4b8a      	ldr	r3, [pc, #552]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	4a89      	ldr	r2, [pc, #548]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5a:	e01e      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a5c:	4b85      	ldr	r3, [pc, #532]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a68:	d106      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a70:	d102      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a72:	4b82      	ldr	r3, [pc, #520]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a76:	e010      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a78:	4b7e      	ldr	r3, [pc, #504]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a84:	d106      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a8c:	d102      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a8e:	4b7c      	ldr	r3, [pc, #496]	; (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a92:	e002      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a98:	e199      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a9a:	e198      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a9c:	4b79      	ldr	r3, [pc, #484]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aa0:	e195      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aa6:	e192      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006aae:	d173      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006ab0:	4b70      	ldr	r3, [pc, #448]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ab8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac0:	d02f      	beq.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac8:	d863      	bhi.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad6:	d012      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006ad8:	e05b      	b.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ada:	4b66      	ldr	r3, [pc, #408]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ae6:	d107      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae8:	f107 0318 	add.w	r3, r7, #24
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 f991 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006af6:	e16a      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006afc:	e167      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006afe:	4b5d      	ldr	r3, [pc, #372]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0a:	d107      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b0c:	f107 030c 	add.w	r3, r7, #12
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fad3 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b1a:	e158      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b20:	e155      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b22:	4b54      	ldr	r3, [pc, #336]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b2c:	4b51      	ldr	r3, [pc, #324]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d10c      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b3e:	4b4d      	ldr	r3, [pc, #308]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	08db      	lsrs	r3, r3, #3
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	4a4b      	ldr	r2, [pc, #300]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b50:	e01e      	b.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b52:	4b48      	ldr	r3, [pc, #288]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5e:	d106      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b66:	d102      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b68:	4b44      	ldr	r3, [pc, #272]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6c:	e010      	b.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b6e:	4b41      	ldr	r3, [pc, #260]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b7a:	d106      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b82:	d102      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b84:	4b3e      	ldr	r3, [pc, #248]	; (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b88:	e002      	b.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b8e:	e11e      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006b90:	e11d      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b96:	e11a      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9e:	d133      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006ba0:	4b34      	ldr	r3, [pc, #208]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb6:	d012      	beq.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006bb8:	e023      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fbc9 	bl	8007364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006bd6:	e0fa      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bdc:	e0f7      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bde:	4b25      	ldr	r3, [pc, #148]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bea:	d107      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bec:	f107 0318 	add.w	r3, r7, #24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 f90f 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006bfa:	e0e8      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c00:	e0e5      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c06:	e0e2      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0e:	f040 808f 	bne.w	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006c12:	4b18      	ldr	r3, [pc, #96]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c16:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c22:	d075      	beq.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c2a:	d87e      	bhi.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d060      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3a:	d876      	bhi.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c42:	d045      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c4a:	d86e      	bhi.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c52:	d02b      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5a:	d866      	bhi.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c68:	d00e      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006c6a:	e05e      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006c6c:	f000 f8bc 	bl	8006de8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c70:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006c72:	e0ac      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c74:	58024400 	.word	0x58024400
 8006c78:	03d09000 	.word	0x03d09000
 8006c7c:	003d0900 	.word	0x003d0900
 8006c80:	01312d00 	.word	0x01312d00
 8006c84:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c88:	4b53      	ldr	r3, [pc, #332]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c96:	f107 0318 	add.w	r3, r7, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 f8ba 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ca4:	e093      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006caa:	e090      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cac:	4b4a      	ldr	r3, [pc, #296]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cb8:	d107      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cba:	f107 030c 	add.w	r3, r7, #12
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f9fc 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006cc8:	e081      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cce:	e07e      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cd0:	4b41      	ldr	r3, [pc, #260]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d109      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cdc:	4b3e      	ldr	r3, [pc, #248]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	08db      	lsrs	r3, r3, #3
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	4a3d      	ldr	r2, [pc, #244]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006cee:	e06e      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf4:	e06b      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006cf6:	4b38      	ldr	r3, [pc, #224]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d02:	d102      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006d04:	4b36      	ldr	r3, [pc, #216]	; (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d08:	e061      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d0e:	e05e      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d10:	4b31      	ldr	r3, [pc, #196]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d1c:	d102      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006d1e:	4b31      	ldr	r3, [pc, #196]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d22:	e054      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d28:	e051      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d2e:	e04e      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d36:	d148      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006d38:	4b27      	ldr	r3, [pc, #156]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d48:	d02a      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d50:	d838      	bhi.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d5e:	d00d      	beq.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006d60:	e030      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d62:	4b1d      	ldr	r3, [pc, #116]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6e:	d102      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006d70:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d74:	e02b      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d7a:	e028      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d7c:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d88:	d107      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fae8 	bl	8007364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d98:	e019      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d9e:	e016      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dac:	d107      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dae:	f107 0318 	add.w	r3, r7, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f82e 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006dbc:	e007      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc2:	e004      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc8:	e001      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3740      	adds	r7, #64	; 0x40
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	03d09000 	.word	0x03d09000
 8006de0:	003d0900 	.word	0x003d0900
 8006de4:	01312d00 	.word	0x01312d00

08006de8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006dec:	f7fe fb4c 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 8006df0:	4602      	mov	r2, r0
 8006df2:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	4904      	ldr	r1, [pc, #16]	; (8006e10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006dfe:	5ccb      	ldrb	r3, [r1, r3]
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	58024400 	.word	0x58024400
 8006e10:	08029de0 	.word	0x08029de0

08006e14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b089      	sub	sp, #36	; 0x24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e1c:	4ba1      	ldr	r3, [pc, #644]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006e26:	4b9f      	ldr	r3, [pc, #636]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	0b1b      	lsrs	r3, r3, #12
 8006e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e32:	4b9c      	ldr	r3, [pc, #624]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	091b      	lsrs	r3, r3, #4
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006e3e:	4b99      	ldr	r3, [pc, #612]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e42:	08db      	lsrs	r3, r3, #3
 8006e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8111 	beq.w	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	f000 8083 	beq.w	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	f200 80a1 	bhi.w	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d056      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e7e:	e099      	b.n	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e80:	4b88      	ldr	r3, [pc, #544]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02d      	beq.n	8006ee8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e8c:	4b85      	ldr	r3, [pc, #532]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	08db      	lsrs	r3, r3, #3
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	4a84      	ldr	r2, [pc, #528]	; (80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb6:	4b7b      	ldr	r3, [pc, #492]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ee6:	e087      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b6a      	ldr	r3, [pc, #424]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f2a:	e065      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f6e:	e043      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b48      	ldr	r3, [pc, #288]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fb2:	e021      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ff6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006ff8:	4b2a      	ldr	r3, [pc, #168]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	0a5b      	lsrs	r3, r3, #9
 8006ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800700e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007012:	edd7 6a07 	vldr	s13, [r7, #28]
 8007016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701e:	ee17 2a90 	vmov	r2, s15
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007026:	4b1f      	ldr	r3, [pc, #124]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	0c1b      	lsrs	r3, r3, #16
 800702c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800703c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007040:	edd7 6a07 	vldr	s13, [r7, #28]
 8007044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704c:	ee17 2a90 	vmov	r2, s15
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007054:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	0e1b      	lsrs	r3, r3, #24
 800705a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800706a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800706e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707a:	ee17 2a90 	vmov	r2, s15
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007082:	e008      	b.n	8007096 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	609a      	str	r2, [r3, #8]
}
 8007096:	bf00      	nop
 8007098:	3724      	adds	r7, #36	; 0x24
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	58024400 	.word	0x58024400
 80070a8:	03d09000 	.word	0x03d09000
 80070ac:	46000000 	.word	0x46000000
 80070b0:	4c742400 	.word	0x4c742400
 80070b4:	4a742400 	.word	0x4a742400
 80070b8:	4b989680 	.word	0x4b989680

080070bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80070bc:	b480      	push	{r7}
 80070be:	b089      	sub	sp, #36	; 0x24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070c4:	4ba1      	ldr	r3, [pc, #644]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80070ce:	4b9f      	ldr	r3, [pc, #636]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	0d1b      	lsrs	r3, r3, #20
 80070d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070da:	4b9c      	ldr	r3, [pc, #624]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80070e6:	4b99      	ldr	r3, [pc, #612]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8111 	beq.w	800732c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b02      	cmp	r3, #2
 800710e:	f000 8083 	beq.w	8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b02      	cmp	r3, #2
 8007116:	f200 80a1 	bhi.w	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d056      	beq.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007126:	e099      	b.n	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007128:	4b88      	ldr	r3, [pc, #544]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d02d      	beq.n	8007190 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007134:	4b85      	ldr	r3, [pc, #532]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	08db      	lsrs	r3, r3, #3
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	4a84      	ldr	r2, [pc, #528]	; (8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
 8007144:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715e:	4b7b      	ldr	r3, [pc, #492]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007172:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800718e:	e087      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b6a      	ldr	r3, [pc, #424]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d2:	e065      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800735c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b59      	ldr	r3, [pc, #356]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007216:	e043      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b48      	ldr	r3, [pc, #288]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800725a:	e021      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800735c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b37      	ldr	r3, [pc, #220]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800729e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80072a0:	4b2a      	ldr	r3, [pc, #168]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	0a5b      	lsrs	r3, r3, #9
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80072ce:	4b1f      	ldr	r3, [pc, #124]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f4:	ee17 2a90 	vmov	r2, s15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80072fc:	4b13      	ldr	r3, [pc, #76]	; (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	0e1b      	lsrs	r3, r3, #24
 8007302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007316:	edd7 6a07 	vldr	s13, [r7, #28]
 800731a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007322:	ee17 2a90 	vmov	r2, s15
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800732a:	e008      	b.n	800733e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	609a      	str	r2, [r3, #8]
}
 800733e:	bf00      	nop
 8007340:	3724      	adds	r7, #36	; 0x24
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	58024400 	.word	0x58024400
 8007350:	03d09000 	.word	0x03d09000
 8007354:	46000000 	.word	0x46000000
 8007358:	4c742400 	.word	0x4c742400
 800735c:	4a742400 	.word	0x4a742400
 8007360:	4b989680 	.word	0x4b989680

08007364 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007364:	b480      	push	{r7}
 8007366:	b089      	sub	sp, #36	; 0x24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800736c:	4ba0      	ldr	r3, [pc, #640]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007376:	4b9e      	ldr	r3, [pc, #632]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	091b      	lsrs	r3, r3, #4
 800737c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007380:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007382:	4b9b      	ldr	r3, [pc, #620]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800738c:	4b98      	ldr	r3, [pc, #608]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800738e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007390:	08db      	lsrs	r3, r3, #3
 8007392:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	fb02 f303 	mul.w	r3, r2, r3
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8111 	beq.w	80075d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	f000 8083 	beq.w	80074be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	f200 80a1 	bhi.w	8007502 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d056      	beq.n	800747a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80073cc:	e099      	b.n	8007502 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ce:	4b88      	ldr	r3, [pc, #544]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d02d      	beq.n	8007436 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073da:	4b85      	ldr	r3, [pc, #532]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	08db      	lsrs	r3, r3, #3
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	4a83      	ldr	r2, [pc, #524]	; (80075f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007404:	4b7a      	ldr	r3, [pc, #488]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007414:	ed97 6a03 	vldr	s12, [r7, #12]
 8007418:	eddf 5a77 	vldr	s11, [pc, #476]	; 80075f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800741c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007430:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007434:	e087      	b.n	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	ee07 3a90 	vmov	s15, r3
 800743c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007440:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80075fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007448:	4b69      	ldr	r3, [pc, #420]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007458:	ed97 6a03 	vldr	s12, [r7, #12]
 800745c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80075f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007474:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007478:	e065      	b.n	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007484:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007600 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748c:	4b58      	ldr	r3, [pc, #352]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749c:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80075f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074bc:	e043      	b.n	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	ee07 3a90 	vmov	s15, r3
 80074c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80074cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d0:	4b47      	ldr	r3, [pc, #284]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80075f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007500:	e021      	b.n	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80075fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007514:	4b36      	ldr	r3, [pc, #216]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007524:	ed97 6a03 	vldr	s12, [r7, #12]
 8007528:	eddf 5a33 	vldr	s11, [pc, #204]	; 80075f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800752c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007540:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007544:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007546:	4b2a      	ldr	r3, [pc, #168]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	0a5b      	lsrs	r3, r3, #9
 800754c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800755c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007560:	edd7 6a07 	vldr	s13, [r7, #28]
 8007564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756c:	ee17 2a90 	vmov	r2, s15
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007574:	4b1e      	ldr	r3, [pc, #120]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800758a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800758e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800759a:	ee17 2a90 	vmov	r2, s15
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80075a2:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	0e1b      	lsrs	r3, r3, #24
 80075a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c8:	ee17 2a90 	vmov	r2, s15
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80075d0:	e008      	b.n	80075e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	609a      	str	r2, [r3, #8]
}
 80075e4:	bf00      	nop
 80075e6:	3724      	adds	r7, #36	; 0x24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	58024400 	.word	0x58024400
 80075f4:	03d09000 	.word	0x03d09000
 80075f8:	46000000 	.word	0x46000000
 80075fc:	4c742400 	.word	0x4c742400
 8007600:	4a742400 	.word	0x4a742400
 8007604:	4b989680 	.word	0x4b989680

08007608 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007616:	4b53      	ldr	r3, [pc, #332]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b03      	cmp	r3, #3
 8007620:	d101      	bne.n	8007626 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e099      	b.n	800775a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007626:	4b4f      	ldr	r3, [pc, #316]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a4e      	ldr	r2, [pc, #312]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 800762c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007632:	f7fb f8ad 	bl	8002790 <HAL_GetTick>
 8007636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007638:	e008      	b.n	800764c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800763a:	f7fb f8a9 	bl	8002790 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b02      	cmp	r3, #2
 8007646:	d901      	bls.n	800764c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e086      	b.n	800775a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800764c:	4b45      	ldr	r3, [pc, #276]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1f0      	bne.n	800763a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007658:	4b42      	ldr	r3, [pc, #264]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	031b      	lsls	r3, r3, #12
 8007666:	493f      	ldr	r1, [pc, #252]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 8007668:	4313      	orrs	r3, r2
 800766a:	628b      	str	r3, [r1, #40]	; 0x28
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	3b01      	subs	r3, #1
 8007672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	3b01      	subs	r3, #1
 800767c:	025b      	lsls	r3, r3, #9
 800767e:	b29b      	uxth	r3, r3
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	3b01      	subs	r3, #1
 8007688:	041b      	lsls	r3, r3, #16
 800768a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	3b01      	subs	r3, #1
 8007696:	061b      	lsls	r3, r3, #24
 8007698:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800769c:	4931      	ldr	r1, [pc, #196]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076a2:	4b30      	ldr	r3, [pc, #192]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	492d      	ldr	r1, [pc, #180]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076b4:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	f023 0220 	bic.w	r2, r3, #32
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	4928      	ldr	r1, [pc, #160]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076c6:	4b27      	ldr	r3, [pc, #156]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	4a26      	ldr	r2, [pc, #152]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076cc:	f023 0310 	bic.w	r3, r3, #16
 80076d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d6:	4b24      	ldr	r3, [pc, #144]	; (8007768 <RCCEx_PLL2_Config+0x160>)
 80076d8:	4013      	ands	r3, r2
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	69d2      	ldr	r2, [r2, #28]
 80076de:	00d2      	lsls	r2, r2, #3
 80076e0:	4920      	ldr	r1, [pc, #128]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076e6:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076ec:	f043 0310 	orr.w	r3, r3, #16
 80076f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	4a19      	ldr	r2, [pc, #100]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 80076fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007702:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007704:	e00f      	b.n	8007726 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d106      	bne.n	800771a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800770c:	4b15      	ldr	r3, [pc, #84]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	4a14      	ldr	r2, [pc, #80]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 8007712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007718:	e005      	b.n	8007726 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 800771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771e:	4a11      	ldr	r2, [pc, #68]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 8007720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007724:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a0e      	ldr	r2, [pc, #56]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 800772c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007732:	f7fb f82d 	bl	8002790 <HAL_GetTick>
 8007736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007738:	e008      	b.n	800774c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800773a:	f7fb f829 	bl	8002790 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e006      	b.n	800775a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <RCCEx_PLL2_Config+0x15c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0f0      	beq.n	800773a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	58024400 	.word	0x58024400
 8007768:	ffff0007 	.word	0xffff0007

0800776c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800777a:	4b53      	ldr	r3, [pc, #332]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 800777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	2b03      	cmp	r3, #3
 8007784:	d101      	bne.n	800778a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e099      	b.n	80078be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800778a:	4b4f      	ldr	r3, [pc, #316]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a4e      	ldr	r2, [pc, #312]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007796:	f7fa fffb 	bl	8002790 <HAL_GetTick>
 800779a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800779c:	e008      	b.n	80077b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800779e:	f7fa fff7 	bl	8002790 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e086      	b.n	80078be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077b0:	4b45      	ldr	r3, [pc, #276]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f0      	bne.n	800779e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077bc:	4b42      	ldr	r3, [pc, #264]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	051b      	lsls	r3, r3, #20
 80077ca:	493f      	ldr	r1, [pc, #252]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	628b      	str	r3, [r1, #40]	; 0x28
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	3b01      	subs	r3, #1
 80077e0:	025b      	lsls	r3, r3, #9
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	061b      	lsls	r3, r3, #24
 80077fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007800:	4931      	ldr	r1, [pc, #196]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007802:	4313      	orrs	r3, r2
 8007804:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007806:	4b30      	ldr	r3, [pc, #192]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	492d      	ldr	r1, [pc, #180]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007814:	4313      	orrs	r3, r2
 8007816:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007818:	4b2b      	ldr	r3, [pc, #172]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	4928      	ldr	r1, [pc, #160]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007826:	4313      	orrs	r3, r2
 8007828:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800782a:	4b27      	ldr	r3, [pc, #156]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	4a26      	ldr	r2, [pc, #152]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007836:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800783a:	4b24      	ldr	r3, [pc, #144]	; (80078cc <RCCEx_PLL3_Config+0x160>)
 800783c:	4013      	ands	r3, r2
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	69d2      	ldr	r2, [r2, #28]
 8007842:	00d2      	lsls	r2, r2, #3
 8007844:	4920      	ldr	r1, [pc, #128]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007846:	4313      	orrs	r3, r2
 8007848:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800784a:	4b1f      	ldr	r3, [pc, #124]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800785c:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	4a19      	ldr	r2, [pc, #100]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007868:	e00f      	b.n	800788a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d106      	bne.n	800787e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007870:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	4a14      	ldr	r2, [pc, #80]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007876:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800787a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800787c:	e005      	b.n	800788a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800787e:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	4a11      	ldr	r2, [pc, #68]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007888:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a0e      	ldr	r2, [pc, #56]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 8007890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007896:	f7fa ff7b 	bl	8002790 <HAL_GetTick>
 800789a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800789c:	e008      	b.n	80078b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800789e:	f7fa ff77 	bl	8002790 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e006      	b.n	80078be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078b0:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0f0      	beq.n	800789e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	58024400 	.word	0x58024400
 80078cc:	ffff0007 	.word	0xffff0007

080078d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e07c      	b.n	80079dc <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10c      	bne.n	8007908 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fa fa24 	bl	8001d50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2203      	movs	r2, #3
 800790c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f867 	bl	80079e4 <HAL_SD_InitCard>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e05d      	b.n	80079dc <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fbfe 	bl	8008128 <HAL_SD_GetCardStatus>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e052      	b.n	80079dc <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007936:	7e3b      	ldrb	r3, [r7, #24]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800793c:	7e7b      	ldrb	r3, [r7, #25]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	2b01      	cmp	r3, #1
 8007948:	d10a      	bne.n	8007960 <HAL_SD_Init+0x90>
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <HAL_SD_Init+0x86>
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d004      	beq.n	8007960 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800795c:	65da      	str	r2, [r3, #92]	; 0x5c
 800795e:	e00b      	b.n	8007978 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007964:	2b01      	cmp	r3, #1
 8007966:	d104      	bne.n	8007972 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800796e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007970:	e002      	b.n	8007978 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fcb4 	bl	80082ec <HAL_SD_ConfigWideBusOperation>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e026      	b.n	80079dc <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800798e:	f7fa feff 	bl	8002790 <HAL_GetTick>
 8007992:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007994:	e011      	b.n	80079ba <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007996:	f7fa fefb 	bl	8002790 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d109      	bne.n	80079ba <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e010      	b.n	80079dc <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fdaa 	bl	8008514 <HAL_SD_GetCardState>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d1e7      	bne.n	8007996 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3728      	adds	r7, #40	; 0x28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079e4:	b5b0      	push	{r4, r5, r7, lr}
 80079e6:	b08e      	sub	sp, #56	; 0x38
 80079e8:	af04      	add	r7, sp, #16
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80079f4:	2300      	movs	r3, #0
 80079f6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80079fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a00:	f7fe fd20 	bl	8006444 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a04:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d109      	bne.n	8007a20 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e079      	b.n	8007b14 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	4a3d      	ldr	r2, [pc, #244]	; (8007b1c <HAL_SD_InitCard+0x138>)
 8007a26:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2a:	091b      	lsrs	r3, r3, #4
 8007a2c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d107      	bne.n	8007a4c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0210 	orr.w	r2, r2, #16
 8007a4a:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681d      	ldr	r5, [r3, #0]
 8007a50:	466c      	mov	r4, sp
 8007a52:	f107 0314 	add.w	r3, r7, #20
 8007a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a64:	4628      	mov	r0, r5
 8007a66:	f003 fcef 	bl	800b448 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f003 fd21 	bl	800b4b6 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007a80:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <HAL_SD_InitCard+0x13c>)
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a88:	3301      	adds	r3, #1
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fa fe8c 	bl	80027a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fe1b 	bl	80086cc <SD_PowerON>
 8007a96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e02e      	b.n	8007b14 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fd4c 	bl	8008554 <SD_InitCard>
 8007abc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e01b      	b.n	8007b14 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f003 fd7b 	bl	800b5e0 <SDMMC_CmdBlockLength>
 8007aea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00f      	beq.n	8007b12 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a0b      	ldr	r2, [pc, #44]	; (8007b24 <HAL_SD_InitCard+0x140>)
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	431a      	orrs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3728      	adds	r7, #40	; 0x28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b1c:	014f8b59 	.word	0x014f8b59
 8007b20:	00012110 	.word	0x00012110
 8007b24:	1fe00fff 	.word	0x1fe00fff

08007b28 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08c      	sub	sp, #48	; 0x30
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d107      	bne.n	8007b50 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e08d      	b.n	8007c6c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	f040 8086 	bne.w	8007c6a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	441a      	add	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d907      	bls.n	8007b82 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e074      	b.n	8007c6c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2203      	movs	r2, #3
 8007b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	025a      	lsls	r2, r3, #9
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d002      	beq.n	8007bae <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	025b      	lsls	r3, r3, #9
 8007bac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	025b      	lsls	r3, r3, #9
 8007bb8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007bba:	2390      	movs	r3, #144	; 0x90
 8007bbc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f107 0210 	add.w	r2, r7, #16
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f003 fcd7 	bl	800b588 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d90a      	bls.n	8007c16 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2282      	movs	r2, #130	; 0x82
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f003 fd2d 	bl	800b66c <SDMMC_CmdReadMultiBlock>
 8007c12:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c14:	e009      	b.n	8007c2a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2281      	movs	r2, #129	; 0x81
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c22:	4618      	mov	r0, r3
 8007c24:	f003 fcff 	bl	800b626 <SDMMC_CmdReadSingleBlock>
 8007c28:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d012      	beq.n	8007c56 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a0f      	ldr	r2, [pc, #60]	; (8007c74 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e00a      	b.n	8007c6c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007c64:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e000      	b.n	8007c6c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007c6a:	2302      	movs	r3, #2
  }
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3730      	adds	r7, #48	; 0x30
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	1fe00fff 	.word	0x1fe00fff

08007c78 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d107      	bne.n	8007ca0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e08d      	b.n	8007dbc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	f040 8086 	bne.w	8007dba <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	441a      	add	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d907      	bls.n	8007cd2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e074      	b.n	8007dbc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2203      	movs	r2, #3
 8007cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	025a      	lsls	r2, r3, #9
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d002      	beq.n	8007cfe <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	025b      	lsls	r3, r3, #9
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007d02:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	025b      	lsls	r3, r3, #9
 8007d08:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d0a:	2390      	movs	r3, #144	; 0x90
 8007d0c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f107 0210 	add.w	r2, r7, #16
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f003 fc2f 	bl	800b588 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d38:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2201      	movs	r2, #1
 8007d48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d90a      	bls.n	8007d66 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	22a0      	movs	r2, #160	; 0xa0
 8007d54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f003 fccb 	bl	800b6f8 <SDMMC_CmdWriteMultiBlock>
 8007d62:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d64:	e009      	b.n	8007d7a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2290      	movs	r2, #144	; 0x90
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d72:	4618      	mov	r0, r3
 8007d74:	f003 fc9d 	bl	800b6b2 <SDMMC_CmdWriteSingleBlock>
 8007d78:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d012      	beq.n	8007da6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a0f      	ldr	r2, [pc, #60]	; (8007dc4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e00a      	b.n	8007dbc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007db4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e000      	b.n	8007dbc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007dba:	2302      	movs	r3, #2
  }
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3730      	adds	r7, #48	; 0x30
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	1fe00fff 	.word	0x1fe00fff

08007dc8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dee:	0f9b      	lsrs	r3, r3, #30
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	0e9b      	lsrs	r3, r3, #26
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0c:	0e1b      	lsrs	r3, r3, #24
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1e:	0c1b      	lsrs	r3, r3, #16
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2a:	0a1b      	lsrs	r3, r3, #8
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e40:	0d1b      	lsrs	r3, r3, #20
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e4c:	0c1b      	lsrs	r3, r3, #16
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5e:	0bdb      	lsrs	r3, r3, #15
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e70:	0b9b      	lsrs	r3, r3, #14
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e82:	0b5b      	lsrs	r3, r3, #13
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e94:	0b1b      	lsrs	r3, r3, #12
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d163      	bne.n	8007f78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb4:	009a      	lsls	r2, r3, #2
 8007eb6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007eba:	4013      	ands	r3, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ec0:	0f92      	lsrs	r2, r2, #30
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ecc:	0edb      	lsrs	r3, r3, #27
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ede:	0e1b      	lsrs	r3, r3, #24
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef0:	0d5b      	lsrs	r3, r3, #21
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f02:	0c9b      	lsrs	r3, r3, #18
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f14:	0bdb      	lsrs	r3, r3, #15
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	7e1b      	ldrb	r3, [r3, #24]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	3302      	adds	r3, #2
 8007f38:	2201      	movs	r2, #1
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f42:	fb02 f203 	mul.w	r2, r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	7a1b      	ldrb	r3, [r3, #8]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f003 030f 	and.w	r3, r3, #15
 8007f54:	2201      	movs	r2, #1
 8007f56:	409a      	lsls	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f64:	0a52      	lsrs	r2, r2, #9
 8007f66:	fb02 f203 	mul.w	r2, r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f74:	659a      	str	r2, [r3, #88]	; 0x58
 8007f76:	e031      	b.n	8007fdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d11d      	bne.n	8007fbc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f84:	041b      	lsls	r3, r3, #16
 8007f86:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	431a      	orrs	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	029a      	lsls	r2, r3, #10
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	659a      	str	r2, [r3, #88]	; 0x58
 8007fba:	e00f      	b.n	8007fdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a58      	ldr	r2, [pc, #352]	; (8008124 <HAL_SD_GetCardCSD+0x344>)
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e09d      	b.n	8008118 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe0:	0b9b      	lsrs	r3, r3, #14
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff2:	09db      	lsrs	r3, r3, #7
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800800a:	b2da      	uxtb	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008014:	0fdb      	lsrs	r3, r3, #31
 8008016:	b2da      	uxtb	r2, r3
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008020:	0f5b      	lsrs	r3, r3, #29
 8008022:	b2db      	uxtb	r3, r3
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	b2da      	uxtb	r2, r3
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008032:	0e9b      	lsrs	r3, r3, #26
 8008034:	b2db      	uxtb	r3, r3
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	b2da      	uxtb	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008044:	0d9b      	lsrs	r3, r3, #22
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	b2da      	uxtb	r2, r3
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008056:	0d5b      	lsrs	r3, r3, #21
 8008058:	b2db      	uxtb	r3, r3
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	b2da      	uxtb	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008072:	0c1b      	lsrs	r3, r3, #16
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008086:	0bdb      	lsrs	r3, r3, #15
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800809a:	0b9b      	lsrs	r3, r3, #14
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ae:	0b5b      	lsrs	r3, r3, #13
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c2:	0b1b      	lsrs	r3, r3, #12
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d6:	0a9b      	lsrs	r3, r3, #10
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f003 0303 	and.w	r3, r3, #3
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008106:	b2da      	uxtb	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	1fe00fff 	.word	0x1fe00fff

08008128 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b094      	sub	sp, #80	; 0x50
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008138:	f107 0308 	add.w	r3, r7, #8
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fbcc 	bl	80088dc <SD_SendSDStatus>
 8008144:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008148:	2b00      	cmp	r3, #0
 800814a:	d011      	beq.n	8008170 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a4f      	ldr	r2, [pc, #316]	; (8008290 <HAL_SD_GetCardStatus+0x168>)
 8008152:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800815a:	431a      	orrs	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800816e:	e070      	b.n	8008252 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	099b      	lsrs	r3, r3, #6
 8008174:	b2db      	uxtb	r3, r3
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	b2da      	uxtb	r2, r3
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	b29b      	uxth	r3, r3
 8008196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800819a:	b29a      	uxth	r2, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	0e1b      	lsrs	r3, r3, #24
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4313      	orrs	r3, r2
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	061a      	lsls	r2, r3, #24
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081b6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	0a1b      	lsrs	r3, r3, #8
 80081bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80081c0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	0e1b      	lsrs	r3, r3, #24
 80081c6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	0d1b      	lsrs	r3, r3, #20
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	0c1b      	lsrs	r3, r3, #16
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	b29b      	uxth	r3, r3
 8008202:	4313      	orrs	r3, r2
 8008204:	b29a      	uxth	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	0a9b      	lsrs	r3, r3, #10
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008214:	b2da      	uxtb	r2, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	0a1b      	lsrs	r3, r3, #8
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	b2da      	uxtb	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	091b      	lsrs	r3, r3, #4
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	b2da      	uxtb	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 030f 	and.w	r3, r3, #15
 8008242:	b2da      	uxtb	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	0e1b      	lsrs	r3, r3, #24
 800824c:	b2da      	uxtb	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800825a:	4618      	mov	r0, r3
 800825c:	f003 f9c0 	bl	800b5e0 <SDMMC_CmdBlockLength>
 8008260:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00d      	beq.n	8008284 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a08      	ldr	r2, [pc, #32]	; (8008290 <HAL_SD_GetCardStatus+0x168>)
 800826e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008284:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008288:	4618      	mov	r0, r3
 800828a:	3750      	adds	r7, #80	; 0x50
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	1fe00fff 	.word	0x1fe00fff

08008294 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80082ec:	b5b0      	push	{r4, r5, r7, lr}
 80082ee:	b090      	sub	sp, #64	; 0x40
 80082f0:	af04      	add	r7, sp, #16
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2203      	movs	r2, #3
 8008300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008308:	2b03      	cmp	r3, #3
 800830a:	d02e      	beq.n	800836a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008312:	d106      	bne.n	8008322 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	639a      	str	r2, [r3, #56]	; 0x38
 8008320:	e029      	b.n	8008376 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008328:	d10a      	bne.n	8008340 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fbce 	bl	8008acc <SD_WideBus_Enable>
 8008330:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
 800833e:	e01a      	b.n	8008376 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fc0b 	bl	8008b62 <SD_WideBus_Disable>
 800834c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	639a      	str	r2, [r3, #56]	; 0x38
 800835a:	e00c      	b.n	8008376 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
 8008368:	e005      	b.n	8008376 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a60      	ldr	r2, [pc, #384]	; (8008504 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008384:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800838c:	e097      	b.n	80084be <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800838e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008392:	f7fe f857 	bl	8006444 <HAL_RCCEx_GetPeriphCLKFreq>
 8008396:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8086 	beq.w	80084ac <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	695a      	ldr	r2, [r3, #20]
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	4952      	ldr	r1, [pc, #328]	; (8008508 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80083be:	fba1 1303 	umull	r1, r3, r1, r3
 80083c2:	0e1b      	lsrs	r3, r3, #24
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d303      	bcc.n	80083d0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	61fb      	str	r3, [r7, #28]
 80083ce:	e05a      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d8:	d103      	bne.n	80083e2 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	e051      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ea:	d126      	bne.n	800843a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10e      	bne.n	8008412 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	4a45      	ldr	r2, [pc, #276]	; (800850c <HAL_SD_ConfigWideBusOperation+0x220>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d906      	bls.n	800840a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	4a42      	ldr	r2, [pc, #264]	; (8008508 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008400:	fba2 2303 	umull	r2, r3, r2, r3
 8008404:	0e5b      	lsrs	r3, r3, #25
 8008406:	61fb      	str	r3, [r7, #28]
 8008408:	e03d      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	61fb      	str	r3, [r7, #28]
 8008410:	e039      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	fbb2 f3f3 	udiv	r3, r2, r3
 800841e:	4a3b      	ldr	r2, [pc, #236]	; (800850c <HAL_SD_ConfigWideBusOperation+0x220>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d906      	bls.n	8008432 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	4a38      	ldr	r2, [pc, #224]	; (8008508 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008428:	fba2 2303 	umull	r2, r3, r2, r3
 800842c:	0e5b      	lsrs	r3, r3, #25
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e029      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	e025      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10e      	bne.n	8008460 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	4a32      	ldr	r2, [pc, #200]	; (8008510 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d906      	bls.n	8008458 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	4a2e      	ldr	r2, [pc, #184]	; (8008508 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800844e:	fba2 2303 	umull	r2, r3, r2, r3
 8008452:	0e1b      	lsrs	r3, r3, #24
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	e016      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	e012      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008468:	fbb2 f3f3 	udiv	r3, r2, r3
 800846c:	4a28      	ldr	r2, [pc, #160]	; (8008510 <HAL_SD_ConfigWideBusOperation+0x224>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d906      	bls.n	8008480 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	4a24      	ldr	r2, [pc, #144]	; (8008508 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008476:	fba2 2303 	umull	r2, r3, r2, r3
 800847a:	0e1b      	lsrs	r3, r3, #24
 800847c:	61fb      	str	r3, [r7, #28]
 800847e:	e002      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681d      	ldr	r5, [r3, #0]
 8008490:	466c      	mov	r4, sp
 8008492:	f107 0318 	add.w	r3, r7, #24
 8008496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800849a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800849e:	f107 030c 	add.w	r3, r7, #12
 80084a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084a4:	4628      	mov	r0, r5
 80084a6:	f002 ffcf 	bl	800b448 <SDMMC_Init>
 80084aa:	e008      	b.n	80084be <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084c6:	4618      	mov	r0, r3
 80084c8:	f003 f88a 	bl	800b5e0 <SDMMC_CmdBlockLength>
 80084cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00c      	beq.n	80084ee <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a0a      	ldr	r2, [pc, #40]	; (8008504 <HAL_SD_ConfigWideBusOperation+0x218>)
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80084f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3730      	adds	r7, #48	; 0x30
 80084fe:	46bd      	mov	sp, r7
 8008500:	bdb0      	pop	{r4, r5, r7, pc}
 8008502:	bf00      	nop
 8008504:	1fe00fff 	.word	0x1fe00fff
 8008508:	55e63b89 	.word	0x55e63b89
 800850c:	02faf080 	.word	0x02faf080
 8008510:	017d7840 	.word	0x017d7840

08008514 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008520:	f107 030c 	add.w	r3, r7, #12
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 faa8 	bl	8008a7c <SD_SendStatus>
 800852c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	0a5b      	lsrs	r3, r3, #9
 8008544:	f003 030f 	and.w	r3, r3, #15
 8008548:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800854a:	693b      	ldr	r3, [r7, #16]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b090      	sub	sp, #64	; 0x40
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800855c:	2301      	movs	r3, #1
 800855e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f002 ffb7 	bl	800b4d8 <SDMMC_GetPowerState>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d102      	bne.n	8008576 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008570:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008574:	e0a5      	b.n	80086c2 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	2b03      	cmp	r3, #3
 800857c:	d02e      	beq.n	80085dc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f003 f9c4 	bl	800b910 <SDMMC_CmdSendCID>
 8008588:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800858a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <SD_InitCard+0x40>
    {
      return errorstate;
 8008590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008592:	e096      	b.n	80086c2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2100      	movs	r1, #0
 800859a:	4618      	mov	r0, r3
 800859c:	f002 ffe1 	bl	800b562 <SDMMC_GetResponse>
 80085a0:	4602      	mov	r2, r0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2104      	movs	r1, #4
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 ffd8 	bl	800b562 <SDMMC_GetResponse>
 80085b2:	4602      	mov	r2, r0
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2108      	movs	r1, #8
 80085be:	4618      	mov	r0, r3
 80085c0:	f002 ffcf 	bl	800b562 <SDMMC_GetResponse>
 80085c4:	4602      	mov	r2, r0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	210c      	movs	r1, #12
 80085d0:	4618      	mov	r0, r3
 80085d2:	f002 ffc6 	bl	800b562 <SDMMC_GetResponse>
 80085d6:	4602      	mov	r2, r0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d00d      	beq.n	8008600 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f107 020e 	add.w	r2, r7, #14
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f003 f9cd 	bl	800b98e <SDMMC_CmdSetRelAdd>
 80085f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80085f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <SD_InitCard+0xac>
    {
      return errorstate;
 80085fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fe:	e060      	b.n	80086c2 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008604:	2b03      	cmp	r3, #3
 8008606:	d036      	beq.n	8008676 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008608:	89fb      	ldrh	r3, [r7, #14]
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008618:	041b      	lsls	r3, r3, #16
 800861a:	4619      	mov	r1, r3
 800861c:	4610      	mov	r0, r2
 800861e:	f003 f996 	bl	800b94e <SDMMC_CmdSendCSD>
 8008622:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <SD_InitCard+0xda>
    {
      return errorstate;
 800862a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862c:	e049      	b.n	80086c2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2100      	movs	r1, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f002 ff94 	bl	800b562 <SDMMC_GetResponse>
 800863a:	4602      	mov	r2, r0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2104      	movs	r1, #4
 8008646:	4618      	mov	r0, r3
 8008648:	f002 ff8b 	bl	800b562 <SDMMC_GetResponse>
 800864c:	4602      	mov	r2, r0
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2108      	movs	r1, #8
 8008658:	4618      	mov	r0, r3
 800865a:	f002 ff82 	bl	800b562 <SDMMC_GetResponse>
 800865e:	4602      	mov	r2, r0
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	210c      	movs	r1, #12
 800866a:	4618      	mov	r0, r3
 800866c:	f002 ff79 	bl	800b562 <SDMMC_GetResponse>
 8008670:	4602      	mov	r2, r0
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2104      	movs	r1, #4
 800867c:	4618      	mov	r0, r3
 800867e:	f002 ff70 	bl	800b562 <SDMMC_GetResponse>
 8008682:	4603      	mov	r3, r0
 8008684:	0d1a      	lsrs	r2, r3, #20
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800868a:	f107 0310 	add.w	r3, r7, #16
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff fba5 	bl	8007de0 <HAL_SD_GetCardCSD>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800869c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086a0:	e00f      	b.n	80086c2 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086aa:	041b      	lsls	r3, r3, #16
 80086ac:	4619      	mov	r1, r3
 80086ae:	4610      	mov	r0, r2
 80086b0:	f003 f845 	bl	800b73e <SDMMC_CmdSelDesel>
 80086b4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 80086b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <SD_InitCard+0x16c>
  {
    return errorstate;
 80086bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086be:	e000      	b.n	80086c2 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3740      	adds	r7, #64	; 0x40
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 80086e0:	f7fa f856 	bl	8002790 <HAL_GetTick>
 80086e4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f003 f84a 	bl	800b784 <SDMMC_CmdGoIdleState>
 80086f0:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <SD_PowerON+0x30>
  {
    return errorstate;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	e0e9      	b.n	80088d0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f003 f85d 	bl	800b7c0 <SDMMC_CmdOperCond>
 8008706:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00d      	beq.n	800872a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f003 f833 	bl	800b784 <SDMMC_CmdGoIdleState>
 800871e:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d004      	beq.n	8008730 <SD_PowerON+0x64>
    {
      return errorstate;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	e0d2      	b.n	80088d0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	2b01      	cmp	r3, #1
 8008736:	d137      	bne.n	80087a8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2100      	movs	r1, #0
 800873e:	4618      	mov	r0, r3
 8008740:	f003 f85e 	bl	800b800 <SDMMC_CmdAppCommand>
 8008744:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d02d      	beq.n	80087a8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800874c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008750:	e0be      	b.n	80088d0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f003 f851 	bl	800b800 <SDMMC_CmdAppCommand>
 800875e:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <SD_PowerON+0x9e>
    {
      return errorstate;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	e0b2      	b.n	80088d0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	495a      	ldr	r1, [pc, #360]	; (80088d8 <SD_PowerON+0x20c>)
 8008770:	4618      	mov	r0, r3
 8008772:	f003 f868 	bl	800b846 <SDMMC_CmdAppOperCommand>
 8008776:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800877e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008782:	e0a5      	b.n	80088d0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2100      	movs	r1, #0
 800878a:	4618      	mov	r0, r3
 800878c:	f002 fee9 	bl	800b562 <SDMMC_GetResponse>
 8008790:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	0fdb      	lsrs	r3, r3, #31
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <SD_PowerON+0xd2>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <SD_PowerON+0xd4>
 800879e:	2300      	movs	r3, #0
 80087a0:	61bb      	str	r3, [r7, #24]

    count++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d802      	bhi.n	80087b8 <SD_PowerON+0xec>
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0cc      	beq.n	8008752 <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087be:	4293      	cmp	r3, r2
 80087c0:	d902      	bls.n	80087c8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087c6:	e083      	b.n	80088d0 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d07d      	beq.n	80088ce <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d176      	bne.n	80088ce <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d071      	beq.n	80088ce <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087f0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 0208 	orr.w	r2, r2, #8
 8008800:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f003 f928 	bl	800ba5c <SDMMC_CmdVoltageSwitch>
 800880c:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00c      	beq.n	800882e <SD_PowerON+0x162>
        {
          return errorstate;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	e05b      	b.n	80088d0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008818:	f7f9 ffba 	bl	8002790 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d102      	bne.n	800882e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800882c:	e050      	b.n	80088d0 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800883c:	d1ec      	bne.n	8008818 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008846:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008856:	d002      	beq.n	800885e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800885c:	e038      	b.n	80088d0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800885e:	2001      	movs	r0, #1
 8008860:	f7ff fab2 	bl	8007dc8 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0204 	orr.w	r2, r2, #4
 8008872:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008874:	e00a      	b.n	800888c <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008876:	f7f9 ff8b 	bl	8002790 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008884:	d102      	bne.n	800888c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008886:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800888a:	e021      	b.n	80088d0 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800889a:	d1ec      	bne.n	8008876 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088a4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088b4:	d102      	bne.n	80088bc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80088b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088ba:	e009      	b.n	80088d0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2213      	movs	r2, #19
 80088c2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3720      	adds	r7, #32
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	c1100000 	.word	0xc1100000

080088dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08c      	sub	sp, #48	; 0x30
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088e6:	f7f9 ff53 	bl	8002790 <HAL_GetTick>
 80088ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f002 fe33 	bl	800b562 <SDMMC_GetResponse>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008906:	d102      	bne.n	800890e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800890c:	e0b0      	b.n	8008a70 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2140      	movs	r1, #64	; 0x40
 8008914:	4618      	mov	r0, r3
 8008916:	f002 fe63 	bl	800b5e0 <SDMMC_CmdBlockLength>
 800891a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	e0a0      	b.n	8008a70 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008936:	041b      	lsls	r3, r3, #16
 8008938:	4619      	mov	r1, r3
 800893a:	4610      	mov	r0, r2
 800893c:	f002 ff60 	bl	800b800 <SDMMC_CmdAppCommand>
 8008940:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	e08d      	b.n	8008a70 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008954:	f04f 33ff 	mov.w	r3, #4294967295
 8008958:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800895a:	2340      	movs	r3, #64	; 0x40
 800895c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800895e:	2360      	movs	r3, #96	; 0x60
 8008960:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008962:	2302      	movs	r3, #2
 8008964:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008966:	2300      	movs	r3, #0
 8008968:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800896a:	2301      	movs	r3, #1
 800896c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f107 0208 	add.w	r2, r7, #8
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f002 fe05 	bl	800b588 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4618      	mov	r0, r3
 8008984:	f003 f848 	bl	800ba18 <SDMMC_CmdStatusRegister>
 8008988:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d02b      	beq.n	80089e8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	e069      	b.n	8008a70 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d013      	beq.n	80089d2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80089aa:	2300      	movs	r3, #0
 80089ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ae:	e00d      	b.n	80089cc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f002 fd71 	bl	800b49c <SDMMC_ReadFIFO>
 80089ba:	4602      	mov	r2, r0
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	601a      	str	r2, [r3, #0]
        pData++;
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	3304      	adds	r3, #4
 80089c4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	3301      	adds	r3, #1
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	2b07      	cmp	r3, #7
 80089d0:	d9ee      	bls.n	80089b0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089d2:	f7f9 fedd 	bl	8002790 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d102      	bne.n	80089e8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089e6:	e043      	b.n	8008a70 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0d2      	beq.n	800899c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a04:	2308      	movs	r3, #8
 8008a06:	e033      	b.n	8008a70 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a16:	2302      	movs	r3, #2
 8008a18:	e02a      	b.n	8008a70 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d017      	beq.n	8008a58 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008a28:	2320      	movs	r3, #32
 8008a2a:	e021      	b.n	8008a70 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f002 fd33 	bl	800b49c <SDMMC_ReadFIFO>
 8008a36:	4602      	mov	r2, r0
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	601a      	str	r2, [r3, #0]
    pData++;
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	3304      	adds	r3, #4
 8008a40:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a42:	f7f9 fea5 	bl	8002790 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d102      	bne.n	8008a58 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a56:	e00b      	b.n	8008a70 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e2      	bne.n	8008a2c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a03      	ldr	r2, [pc, #12]	; (8008a78 <SD_SendSDStatus+0x19c>)
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3730      	adds	r7, #48	; 0x30
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	18000f3a 	.word	0x18000f3a

08008a7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a90:	e018      	b.n	8008ac4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a9a:	041b      	lsls	r3, r3, #16
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f002 ff97 	bl	800b9d2 <SDMMC_CmdSendStatus>
 8008aa4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	e009      	b.n	8008ac4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f002 fd53 	bl	800b562 <SDMMC_GetResponse>
 8008abc:	4602      	mov	r2, r0
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f002 fd3d 	bl	800b562 <SDMMC_GetResponse>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008af2:	d102      	bne.n	8008afa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008af8:	e02f      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008afa:	f107 030c 	add.w	r3, r7, #12
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f879 	bl	8008bf8 <SD_FindSCR>
 8008b06:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	e023      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01c      	beq.n	8008b56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b24:	041b      	lsls	r3, r3, #16
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f002 fe69 	bl	800b800 <SDMMC_CmdAppCommand>
 8008b2e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	e00f      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2102      	movs	r1, #2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f002 fea0 	bl	800b886 <SDMMC_CmdBusWidth>
 8008b46:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	e003      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	e001      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b086      	sub	sp, #24
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f002 fcf2 	bl	800b562 <SDMMC_GetResponse>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b88:	d102      	bne.n	8008b90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b8e:	e02f      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b90:	f107 030c 	add.w	r3, r7, #12
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f82e 	bl	8008bf8 <SD_FindSCR>
 8008b9c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	e023      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d01c      	beq.n	8008bec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bba:	041b      	lsls	r3, r3, #16
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f002 fe1e 	bl	800b800 <SDMMC_CmdAppCommand>
 8008bc4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	e00f      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f002 fe55 	bl	800b886 <SDMMC_CmdBusWidth>
 8008bdc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	e003      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	e001      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	; 0x38
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c02:	f7f9 fdc5 	bl	8002790 <HAL_GetTick>
 8008c06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60bb      	str	r3, [r7, #8]
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2108      	movs	r1, #8
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f002 fcde 	bl	800b5e0 <SDMMC_CmdBlockLength>
 8008c24:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	e0ad      	b.n	8008d8c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c38:	041b      	lsls	r3, r3, #16
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	f002 fddf 	bl	800b800 <SDMMC_CmdAppCommand>
 8008c42:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	e09e      	b.n	8008d8c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c54:	2308      	movs	r3, #8
 8008c56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c58:	2330      	movs	r3, #48	; 0x30
 8008c5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c64:	2301      	movs	r3, #1
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f107 0210 	add.w	r2, r7, #16
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f002 fc88 	bl	800b588 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f002 fe25 	bl	800b8cc <SDMMC_CmdSendSCR>
 8008c82:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d027      	beq.n	8008cda <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	e07e      	b.n	8008d8c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d113      	bne.n	8008cc4 <SD_FindSCR+0xcc>
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d110      	bne.n	8008cc4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f002 fbf8 	bl	800b49c <SDMMC_ReadFIFO>
 8008cac:	4603      	mov	r3, r0
 8008cae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f002 fbf1 	bl	800b49c <SDMMC_ReadFIFO>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	60fb      	str	r3, [r7, #12]
      index++;
 8008cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cc4:	f7f9 fd64 	bl	8002790 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd2:	d102      	bne.n	8008cda <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cd8:	e058      	b.n	8008d8c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce0:	f240 532a 	movw	r3, #1322	; 0x52a
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0d1      	beq.n	8008c8e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf0:	f003 0308 	and.w	r3, r3, #8
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d00:	2308      	movs	r3, #8
 8008d02:	e043      	b.n	8008d8c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d005      	beq.n	8008d1e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2202      	movs	r2, #2
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e036      	b.n	8008d8c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d24:	f003 0320 	and.w	r3, r3, #32
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2220      	movs	r2, #32
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d34:	2320      	movs	r3, #32
 8008d36:	e029      	b.n	8008d8c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a15      	ldr	r2, [pc, #84]	; (8008d94 <SD_FindSCR+0x19c>)
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	061a      	lsls	r2, r3, #24
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	021b      	lsls	r3, r3, #8
 8008d48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	0e1b      	lsrs	r3, r3, #24
 8008d5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	601a      	str	r2, [r3, #0]
    scr++;
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	3304      	adds	r3, #4
 8008d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	061a      	lsls	r2, r3, #24
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	0a1b      	lsrs	r3, r3, #8
 8008d7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	0e1b      	lsrs	r3, r3, #24
 8008d84:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3738      	adds	r7, #56	; 0x38
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	18000f3a 	.word	0x18000f3a

08008d98 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e02b      	b.n	8008e04 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7f9 fa71 	bl	80022a8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4610      	mov	r0, r2
 8008dda:	f002 fa33 	bl	800b244 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	461a      	mov	r2, r3
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	f002 fa87 	bl	800b2fc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008dee:	4b07      	ldr	r3, [pc, #28]	; (8008e0c <HAL_SDRAM_Init+0x74>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a06      	ldr	r2, [pc, #24]	; (8008e0c <HAL_SDRAM_Init+0x74>)
 8008df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008df8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	52004000 	.word	0x52004000

08008e10 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e22:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008e24:	7dfb      	ldrb	r3, [r7, #23]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d101      	bne.n	8008e2e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e021      	b.n	8008e72 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d002      	beq.n	8008e3a <HAL_SDRAM_SendCommand+0x2a>
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	2b05      	cmp	r3, #5
 8008e38:	d118      	bne.n	8008e6c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f002 fac0 	bl	800b3d0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d104      	bne.n	8008e62 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2205      	movs	r2, #5
 8008e5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e60:	e006      	b.n	8008e70 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e6a:	e001      	b.n	8008e70 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e000      	b.n	8008e72 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d101      	bne.n	8008e94 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008e90:	2302      	movs	r3, #2
 8008e92:	e016      	b.n	8008ec2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d10f      	bne.n	8008ec0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fab2 	bl	800b418 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e000      	b.n	8008ec2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e049      	b.n	8008f70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d106      	bne.n	8008ef6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7f8 ffb9 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f000 fc51 	bl	80097b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d001      	beq.n	8008f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e04f      	b.n	8009030 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f042 0201 	orr.w	r2, r2, #1
 8008fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a23      	ldr	r2, [pc, #140]	; (800903c <HAL_TIM_Base_Start_IT+0xc4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d01d      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fba:	d018      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <HAL_TIM_Base_Start_IT+0xc8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d013      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1e      	ldr	r2, [pc, #120]	; (8009044 <HAL_TIM_Base_Start_IT+0xcc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00e      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1c      	ldr	r2, [pc, #112]	; (8009048 <HAL_TIM_Base_Start_IT+0xd0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d009      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1b      	ldr	r2, [pc, #108]	; (800904c <HAL_TIM_Base_Start_IT+0xd4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d004      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a19      	ldr	r2, [pc, #100]	; (8009050 <HAL_TIM_Base_Start_IT+0xd8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d115      	bne.n	800901a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	4b17      	ldr	r3, [pc, #92]	; (8009054 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b06      	cmp	r3, #6
 8008ffe:	d015      	beq.n	800902c <HAL_TIM_Base_Start_IT+0xb4>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009006:	d011      	beq.n	800902c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009018:	e008      	b.n	800902c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	e000      	b.n	800902e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	40010000 	.word	0x40010000
 8009040:	40000400 	.word	0x40000400
 8009044:	40000800 	.word	0x40000800
 8009048:	40000c00 	.word	0x40000c00
 800904c:	40010400 	.word	0x40010400
 8009050:	40001800 	.word	0x40001800
 8009054:	00010007 	.word	0x00010007

08009058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e049      	b.n	80090fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d106      	bne.n	8009084 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f841 	bl	8009106 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	3304      	adds	r3, #4
 8009094:	4619      	mov	r1, r3
 8009096:	4610      	mov	r0, r2
 8009098:	f000 fb8a 	bl	80097b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b02      	cmp	r3, #2
 800912e:	d122      	bne.n	8009176 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b02      	cmp	r3, #2
 800913c:	d11b      	bne.n	8009176 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f06f 0202 	mvn.w	r2, #2
 8009146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	f003 0303 	and.w	r3, r3, #3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fb09 	bl	8009774 <HAL_TIM_IC_CaptureCallback>
 8009162:	e005      	b.n	8009170 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fafb 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fb0c 	bl	8009788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b04      	cmp	r3, #4
 8009182:	d122      	bne.n	80091ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 0304 	and.w	r3, r3, #4
 800918e:	2b04      	cmp	r3, #4
 8009190:	d11b      	bne.n	80091ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f06f 0204 	mvn.w	r2, #4
 800919a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fadf 	bl	8009774 <HAL_TIM_IC_CaptureCallback>
 80091b6:	e005      	b.n	80091c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fad1 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fae2 	bl	8009788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d122      	bne.n	800921e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b08      	cmp	r3, #8
 80091e4:	d11b      	bne.n	800921e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f06f 0208 	mvn.w	r2, #8
 80091ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2204      	movs	r2, #4
 80091f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	f003 0303 	and.w	r3, r3, #3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fab5 	bl	8009774 <HAL_TIM_IC_CaptureCallback>
 800920a:	e005      	b.n	8009218 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 faa7 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fab8 	bl	8009788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	2b10      	cmp	r3, #16
 800922a:	d122      	bne.n	8009272 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f003 0310 	and.w	r3, r3, #16
 8009236:	2b10      	cmp	r3, #16
 8009238:	d11b      	bne.n	8009272 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f06f 0210 	mvn.w	r2, #16
 8009242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2208      	movs	r2, #8
 8009248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fa8b 	bl	8009774 <HAL_TIM_IC_CaptureCallback>
 800925e:	e005      	b.n	800926c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fa7d 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa8e 	bl	8009788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b01      	cmp	r3, #1
 800927e:	d10e      	bne.n	800929e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b01      	cmp	r3, #1
 800928c:	d107      	bne.n	800929e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f06f 0201 	mvn.w	r2, #1
 8009296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7f8 faaf 	bl	80017fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a8:	2b80      	cmp	r3, #128	; 0x80
 80092aa:	d10e      	bne.n	80092ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b6:	2b80      	cmp	r3, #128	; 0x80
 80092b8:	d107      	bne.n	80092ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 ff89 	bl	800a1dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d8:	d10e      	bne.n	80092f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e4:	2b80      	cmp	r3, #128	; 0x80
 80092e6:	d107      	bne.n	80092f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 ff7c 	bl	800a1f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009302:	2b40      	cmp	r3, #64	; 0x40
 8009304:	d10e      	bne.n	8009324 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009310:	2b40      	cmp	r3, #64	; 0x40
 8009312:	d107      	bne.n	8009324 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800931c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa3c 	bl	800979c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b20      	cmp	r3, #32
 8009330:	d10e      	bne.n	8009350 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	f003 0320 	and.w	r3, r3, #32
 800933c:	2b20      	cmp	r3, #32
 800933e:	d107      	bne.n	8009350 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f06f 0220 	mvn.w	r2, #32
 8009348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 ff3c 	bl	800a1c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936a:	2b01      	cmp	r3, #1
 800936c:	d101      	bne.n	8009372 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800936e:	2302      	movs	r3, #2
 8009370:	e0fd      	b.n	800956e <HAL_TIM_PWM_ConfigChannel+0x216>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b14      	cmp	r3, #20
 800937e:	f200 80f0 	bhi.w	8009562 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009382:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	080093dd 	.word	0x080093dd
 800938c:	08009563 	.word	0x08009563
 8009390:	08009563 	.word	0x08009563
 8009394:	08009563 	.word	0x08009563
 8009398:	0800941d 	.word	0x0800941d
 800939c:	08009563 	.word	0x08009563
 80093a0:	08009563 	.word	0x08009563
 80093a4:	08009563 	.word	0x08009563
 80093a8:	0800945f 	.word	0x0800945f
 80093ac:	08009563 	.word	0x08009563
 80093b0:	08009563 	.word	0x08009563
 80093b4:	08009563 	.word	0x08009563
 80093b8:	0800949f 	.word	0x0800949f
 80093bc:	08009563 	.word	0x08009563
 80093c0:	08009563 	.word	0x08009563
 80093c4:	08009563 	.word	0x08009563
 80093c8:	080094e1 	.word	0x080094e1
 80093cc:	08009563 	.word	0x08009563
 80093d0:	08009563 	.word	0x08009563
 80093d4:	08009563 	.word	0x08009563
 80093d8:	08009521 	.word	0x08009521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 fa7e 	bl	80098e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	699a      	ldr	r2, [r3, #24]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0208 	orr.w	r2, r2, #8
 80093f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699a      	ldr	r2, [r3, #24]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0204 	bic.w	r2, r2, #4
 8009406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6999      	ldr	r1, [r3, #24]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	691a      	ldr	r2, [r3, #16]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	619a      	str	r2, [r3, #24]
      break;
 800941a:	e0a3      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68b9      	ldr	r1, [r7, #8]
 8009422:	4618      	mov	r0, r3
 8009424:	f000 faee 	bl	8009a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	699a      	ldr	r2, [r3, #24]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6999      	ldr	r1, [r3, #24]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	021a      	lsls	r2, r3, #8
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	619a      	str	r2, [r3, #24]
      break;
 800945c:	e082      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 fb57 	bl	8009b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69da      	ldr	r2, [r3, #28]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0208 	orr.w	r2, r2, #8
 8009478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69da      	ldr	r2, [r3, #28]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0204 	bic.w	r2, r2, #4
 8009488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69d9      	ldr	r1, [r3, #28]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	691a      	ldr	r2, [r3, #16]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	430a      	orrs	r2, r1
 800949a:	61da      	str	r2, [r3, #28]
      break;
 800949c:	e062      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fbbd 	bl	8009c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69da      	ldr	r2, [r3, #28]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	69da      	ldr	r2, [r3, #28]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69d9      	ldr	r1, [r3, #28]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	021a      	lsls	r2, r3, #8
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	61da      	str	r2, [r3, #28]
      break;
 80094de:	e041      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 fc04 	bl	8009cf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0208 	orr.w	r2, r2, #8
 80094fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 0204 	bic.w	r2, r2, #4
 800950a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	691a      	ldr	r2, [r3, #16]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800951e:	e021      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68b9      	ldr	r1, [r7, #8]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fc46 	bl	8009db8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800953a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	021a      	lsls	r2, r3, #8
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	430a      	orrs	r2, r1
 800955e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009560:	e000      	b.n	8009564 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop

08009578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <HAL_TIM_ConfigClockSource+0x18>
 800958c:	2302      	movs	r3, #2
 800958e:	e0db      	b.n	8009748 <HAL_TIM_ConfigClockSource+0x1d0>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2202      	movs	r2, #2
 800959c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	4b69      	ldr	r3, [pc, #420]	; (8009750 <HAL_TIM_ConfigClockSource+0x1d8>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a63      	ldr	r2, [pc, #396]	; (8009754 <HAL_TIM_ConfigClockSource+0x1dc>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	f000 80a9 	beq.w	800971e <HAL_TIM_ConfigClockSource+0x1a6>
 80095cc:	4a61      	ldr	r2, [pc, #388]	; (8009754 <HAL_TIM_ConfigClockSource+0x1dc>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	f200 80ae 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 80095d4:	4a60      	ldr	r2, [pc, #384]	; (8009758 <HAL_TIM_ConfigClockSource+0x1e0>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	f000 80a1 	beq.w	800971e <HAL_TIM_ConfigClockSource+0x1a6>
 80095dc:	4a5e      	ldr	r2, [pc, #376]	; (8009758 <HAL_TIM_ConfigClockSource+0x1e0>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	f200 80a6 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 80095e4:	4a5d      	ldr	r2, [pc, #372]	; (800975c <HAL_TIM_ConfigClockSource+0x1e4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	f000 8099 	beq.w	800971e <HAL_TIM_ConfigClockSource+0x1a6>
 80095ec:	4a5b      	ldr	r2, [pc, #364]	; (800975c <HAL_TIM_ConfigClockSource+0x1e4>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	f200 809e 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 80095f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095f8:	f000 8091 	beq.w	800971e <HAL_TIM_ConfigClockSource+0x1a6>
 80095fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009600:	f200 8096 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009608:	f000 8089 	beq.w	800971e <HAL_TIM_ConfigClockSource+0x1a6>
 800960c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009610:	f200 808e 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009618:	d03e      	beq.n	8009698 <HAL_TIM_ConfigClockSource+0x120>
 800961a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800961e:	f200 8087 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009626:	f000 8085 	beq.w	8009734 <HAL_TIM_ConfigClockSource+0x1bc>
 800962a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962e:	d87f      	bhi.n	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009630:	2b70      	cmp	r3, #112	; 0x70
 8009632:	d01a      	beq.n	800966a <HAL_TIM_ConfigClockSource+0xf2>
 8009634:	2b70      	cmp	r3, #112	; 0x70
 8009636:	d87b      	bhi.n	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009638:	2b60      	cmp	r3, #96	; 0x60
 800963a:	d050      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x166>
 800963c:	2b60      	cmp	r3, #96	; 0x60
 800963e:	d877      	bhi.n	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009640:	2b50      	cmp	r3, #80	; 0x50
 8009642:	d03c      	beq.n	80096be <HAL_TIM_ConfigClockSource+0x146>
 8009644:	2b50      	cmp	r3, #80	; 0x50
 8009646:	d873      	bhi.n	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	d058      	beq.n	80096fe <HAL_TIM_ConfigClockSource+0x186>
 800964c:	2b40      	cmp	r3, #64	; 0x40
 800964e:	d86f      	bhi.n	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009650:	2b30      	cmp	r3, #48	; 0x30
 8009652:	d064      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x1a6>
 8009654:	2b30      	cmp	r3, #48	; 0x30
 8009656:	d86b      	bhi.n	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009658:	2b20      	cmp	r3, #32
 800965a:	d060      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x1a6>
 800965c:	2b20      	cmp	r3, #32
 800965e:	d867      	bhi.n	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d05c      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x1a6>
 8009664:	2b10      	cmp	r3, #16
 8009666:	d05a      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009668:	e062      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	6899      	ldr	r1, [r3, #8]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f000 fc7f 	bl	8009f7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800968c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	609a      	str	r2, [r3, #8]
      break;
 8009696:	e04e      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	6899      	ldr	r1, [r3, #8]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f000 fc68 	bl	8009f7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689a      	ldr	r2, [r3, #8]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096ba:	609a      	str	r2, [r3, #8]
      break;
 80096bc:	e03b      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	6859      	ldr	r1, [r3, #4]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f000 fbd8 	bl	8009e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2150      	movs	r1, #80	; 0x50
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fc32 	bl	8009f40 <TIM_ITRx_SetConfig>
      break;
 80096dc:	e02b      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	6859      	ldr	r1, [r3, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	461a      	mov	r2, r3
 80096ec:	f000 fbf7 	bl	8009ede <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2160      	movs	r1, #96	; 0x60
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fc22 	bl	8009f40 <TIM_ITRx_SetConfig>
      break;
 80096fc:	e01b      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	6859      	ldr	r1, [r3, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	461a      	mov	r2, r3
 800970c:	f000 fbb8 	bl	8009e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2140      	movs	r1, #64	; 0x40
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fc12 	bl	8009f40 <TIM_ITRx_SetConfig>
      break;
 800971c:	e00b      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f000 fc09 	bl	8009f40 <TIM_ITRx_SetConfig>
        break;
 800972e:	e002      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009730:	bf00      	nop
 8009732:	e000      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009734:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	ffceff88 	.word	0xffceff88
 8009754:	00100040 	.word	0x00100040
 8009758:	00100030 	.word	0x00100030
 800975c:	00100020 	.word	0x00100020

08009760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a40      	ldr	r2, [pc, #256]	; (80098c4 <TIM_Base_SetConfig+0x114>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d013      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ce:	d00f      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a3d      	ldr	r2, [pc, #244]	; (80098c8 <TIM_Base_SetConfig+0x118>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d00b      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a3c      	ldr	r2, [pc, #240]	; (80098cc <TIM_Base_SetConfig+0x11c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d007      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a3b      	ldr	r2, [pc, #236]	; (80098d0 <TIM_Base_SetConfig+0x120>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d003      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a3a      	ldr	r2, [pc, #232]	; (80098d4 <TIM_Base_SetConfig+0x124>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d108      	bne.n	8009802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a2f      	ldr	r2, [pc, #188]	; (80098c4 <TIM_Base_SetConfig+0x114>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d01f      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009810:	d01b      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a2c      	ldr	r2, [pc, #176]	; (80098c8 <TIM_Base_SetConfig+0x118>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d017      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a2b      	ldr	r2, [pc, #172]	; (80098cc <TIM_Base_SetConfig+0x11c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d013      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <TIM_Base_SetConfig+0x120>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d00f      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a29      	ldr	r2, [pc, #164]	; (80098d4 <TIM_Base_SetConfig+0x124>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d00b      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a28      	ldr	r2, [pc, #160]	; (80098d8 <TIM_Base_SetConfig+0x128>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d007      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a27      	ldr	r2, [pc, #156]	; (80098dc <TIM_Base_SetConfig+0x12c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d003      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a26      	ldr	r2, [pc, #152]	; (80098e0 <TIM_Base_SetConfig+0x130>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d108      	bne.n	800985c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a10      	ldr	r2, [pc, #64]	; (80098c4 <TIM_Base_SetConfig+0x114>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d00f      	beq.n	80098a8 <TIM_Base_SetConfig+0xf8>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a12      	ldr	r2, [pc, #72]	; (80098d4 <TIM_Base_SetConfig+0x124>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00b      	beq.n	80098a8 <TIM_Base_SetConfig+0xf8>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a11      	ldr	r2, [pc, #68]	; (80098d8 <TIM_Base_SetConfig+0x128>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d007      	beq.n	80098a8 <TIM_Base_SetConfig+0xf8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a10      	ldr	r2, [pc, #64]	; (80098dc <TIM_Base_SetConfig+0x12c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d003      	beq.n	80098a8 <TIM_Base_SetConfig+0xf8>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a0f      	ldr	r2, [pc, #60]	; (80098e0 <TIM_Base_SetConfig+0x130>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d103      	bne.n	80098b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	615a      	str	r2, [r3, #20]
}
 80098b6:	bf00      	nop
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	40010000 	.word	0x40010000
 80098c8:	40000400 	.word	0x40000400
 80098cc:	40000800 	.word	0x40000800
 80098d0:	40000c00 	.word	0x40000c00
 80098d4:	40010400 	.word	0x40010400
 80098d8:	40014000 	.word	0x40014000
 80098dc:	40014400 	.word	0x40014400
 80098e0:	40014800 	.word	0x40014800

080098e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	f023 0201 	bic.w	r2, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4b37      	ldr	r3, [pc, #220]	; (80099ec <TIM_OC1_SetConfig+0x108>)
 8009910:	4013      	ands	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0303 	bic.w	r3, r3, #3
 800991a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4313      	orrs	r3, r2
 8009924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f023 0302 	bic.w	r3, r3, #2
 800992c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	4313      	orrs	r3, r2
 8009936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a2d      	ldr	r2, [pc, #180]	; (80099f0 <TIM_OC1_SetConfig+0x10c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d00f      	beq.n	8009960 <TIM_OC1_SetConfig+0x7c>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a2c      	ldr	r2, [pc, #176]	; (80099f4 <TIM_OC1_SetConfig+0x110>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00b      	beq.n	8009960 <TIM_OC1_SetConfig+0x7c>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a2b      	ldr	r2, [pc, #172]	; (80099f8 <TIM_OC1_SetConfig+0x114>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d007      	beq.n	8009960 <TIM_OC1_SetConfig+0x7c>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a2a      	ldr	r2, [pc, #168]	; (80099fc <TIM_OC1_SetConfig+0x118>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d003      	beq.n	8009960 <TIM_OC1_SetConfig+0x7c>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a29      	ldr	r2, [pc, #164]	; (8009a00 <TIM_OC1_SetConfig+0x11c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d10c      	bne.n	800997a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	f023 0308 	bic.w	r3, r3, #8
 8009966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f023 0304 	bic.w	r3, r3, #4
 8009978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a1c      	ldr	r2, [pc, #112]	; (80099f0 <TIM_OC1_SetConfig+0x10c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d00f      	beq.n	80099a2 <TIM_OC1_SetConfig+0xbe>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a1b      	ldr	r2, [pc, #108]	; (80099f4 <TIM_OC1_SetConfig+0x110>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d00b      	beq.n	80099a2 <TIM_OC1_SetConfig+0xbe>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a1a      	ldr	r2, [pc, #104]	; (80099f8 <TIM_OC1_SetConfig+0x114>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d007      	beq.n	80099a2 <TIM_OC1_SetConfig+0xbe>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a19      	ldr	r2, [pc, #100]	; (80099fc <TIM_OC1_SetConfig+0x118>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d003      	beq.n	80099a2 <TIM_OC1_SetConfig+0xbe>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a18      	ldr	r2, [pc, #96]	; (8009a00 <TIM_OC1_SetConfig+0x11c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d111      	bne.n	80099c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	621a      	str	r2, [r3, #32]
}
 80099e0:	bf00      	nop
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	fffeff8f 	.word	0xfffeff8f
 80099f0:	40010000 	.word	0x40010000
 80099f4:	40010400 	.word	0x40010400
 80099f8:	40014000 	.word	0x40014000
 80099fc:	40014400 	.word	0x40014400
 8009a00:	40014800 	.word	0x40014800

08009a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	f023 0210 	bic.w	r2, r3, #16
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4b34      	ldr	r3, [pc, #208]	; (8009b00 <TIM_OC2_SetConfig+0xfc>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	021b      	lsls	r3, r3, #8
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f023 0320 	bic.w	r3, r3, #32
 8009a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	011b      	lsls	r3, r3, #4
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a29      	ldr	r2, [pc, #164]	; (8009b04 <TIM_OC2_SetConfig+0x100>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d003      	beq.n	8009a6c <TIM_OC2_SetConfig+0x68>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a28      	ldr	r2, [pc, #160]	; (8009b08 <TIM_OC2_SetConfig+0x104>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d10d      	bne.n	8009a88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	011b      	lsls	r3, r3, #4
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a1e      	ldr	r2, [pc, #120]	; (8009b04 <TIM_OC2_SetConfig+0x100>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d00f      	beq.n	8009ab0 <TIM_OC2_SetConfig+0xac>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1d      	ldr	r2, [pc, #116]	; (8009b08 <TIM_OC2_SetConfig+0x104>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d00b      	beq.n	8009ab0 <TIM_OC2_SetConfig+0xac>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a1c      	ldr	r2, [pc, #112]	; (8009b0c <TIM_OC2_SetConfig+0x108>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d007      	beq.n	8009ab0 <TIM_OC2_SetConfig+0xac>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a1b      	ldr	r2, [pc, #108]	; (8009b10 <TIM_OC2_SetConfig+0x10c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d003      	beq.n	8009ab0 <TIM_OC2_SetConfig+0xac>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a1a      	ldr	r2, [pc, #104]	; (8009b14 <TIM_OC2_SetConfig+0x110>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d113      	bne.n	8009ad8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	621a      	str	r2, [r3, #32]
}
 8009af2:	bf00      	nop
 8009af4:	371c      	adds	r7, #28
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	feff8fff 	.word	0xfeff8fff
 8009b04:	40010000 	.word	0x40010000
 8009b08:	40010400 	.word	0x40010400
 8009b0c:	40014000 	.word	0x40014000
 8009b10:	40014400 	.word	0x40014400
 8009b14:	40014800 	.word	0x40014800

08009b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f023 0303 	bic.w	r3, r3, #3
 8009b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	021b      	lsls	r3, r3, #8
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a27      	ldr	r2, [pc, #156]	; (8009c10 <TIM_OC3_SetConfig+0xf8>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d003      	beq.n	8009b7e <TIM_OC3_SetConfig+0x66>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a26      	ldr	r2, [pc, #152]	; (8009c14 <TIM_OC3_SetConfig+0xfc>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d10d      	bne.n	8009b9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	021b      	lsls	r3, r3, #8
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a1c      	ldr	r2, [pc, #112]	; (8009c10 <TIM_OC3_SetConfig+0xf8>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d00f      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xaa>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a1b      	ldr	r2, [pc, #108]	; (8009c14 <TIM_OC3_SetConfig+0xfc>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d00b      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xaa>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a1a      	ldr	r2, [pc, #104]	; (8009c18 <TIM_OC3_SetConfig+0x100>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d007      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xaa>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <TIM_OC3_SetConfig+0x104>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d003      	beq.n	8009bc2 <TIM_OC3_SetConfig+0xaa>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <TIM_OC3_SetConfig+0x108>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d113      	bne.n	8009bea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	621a      	str	r2, [r3, #32]
}
 8009c04:	bf00      	nop
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400
 8009c18:	40014000 	.word	0x40014000
 8009c1c:	40014400 	.word	0x40014400
 8009c20:	40014800 	.word	0x40014800

08009c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	021b      	lsls	r3, r3, #8
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	031b      	lsls	r3, r3, #12
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a18      	ldr	r2, [pc, #96]	; (8009ce0 <TIM_OC4_SetConfig+0xbc>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d00f      	beq.n	8009ca4 <TIM_OC4_SetConfig+0x80>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a17      	ldr	r2, [pc, #92]	; (8009ce4 <TIM_OC4_SetConfig+0xc0>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d00b      	beq.n	8009ca4 <TIM_OC4_SetConfig+0x80>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a16      	ldr	r2, [pc, #88]	; (8009ce8 <TIM_OC4_SetConfig+0xc4>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d007      	beq.n	8009ca4 <TIM_OC4_SetConfig+0x80>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a15      	ldr	r2, [pc, #84]	; (8009cec <TIM_OC4_SetConfig+0xc8>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d003      	beq.n	8009ca4 <TIM_OC4_SetConfig+0x80>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <TIM_OC4_SetConfig+0xcc>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d109      	bne.n	8009cb8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	019b      	lsls	r3, r3, #6
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	40010000 	.word	0x40010000
 8009ce4:	40010400 	.word	0x40010400
 8009ce8:	40014000 	.word	0x40014000
 8009cec:	40014400 	.word	0x40014400
 8009cf0:	40014800 	.word	0x40014800

08009cf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	041b      	lsls	r3, r3, #16
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a17      	ldr	r2, [pc, #92]	; (8009da4 <TIM_OC5_SetConfig+0xb0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d00f      	beq.n	8009d6a <TIM_OC5_SetConfig+0x76>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a16      	ldr	r2, [pc, #88]	; (8009da8 <TIM_OC5_SetConfig+0xb4>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d00b      	beq.n	8009d6a <TIM_OC5_SetConfig+0x76>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a15      	ldr	r2, [pc, #84]	; (8009dac <TIM_OC5_SetConfig+0xb8>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d007      	beq.n	8009d6a <TIM_OC5_SetConfig+0x76>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a14      	ldr	r2, [pc, #80]	; (8009db0 <TIM_OC5_SetConfig+0xbc>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d003      	beq.n	8009d6a <TIM_OC5_SetConfig+0x76>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a13      	ldr	r2, [pc, #76]	; (8009db4 <TIM_OC5_SetConfig+0xc0>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d109      	bne.n	8009d7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	021b      	lsls	r3, r3, #8
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	621a      	str	r2, [r3, #32]
}
 8009d98:	bf00      	nop
 8009d9a:	371c      	adds	r7, #28
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	40010000 	.word	0x40010000
 8009da8:	40010400 	.word	0x40010400
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40014400 	.word	0x40014400
 8009db4:	40014800 	.word	0x40014800

08009db8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	021b      	lsls	r3, r3, #8
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	051b      	lsls	r3, r3, #20
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a18      	ldr	r2, [pc, #96]	; (8009e6c <TIM_OC6_SetConfig+0xb4>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00f      	beq.n	8009e30 <TIM_OC6_SetConfig+0x78>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a17      	ldr	r2, [pc, #92]	; (8009e70 <TIM_OC6_SetConfig+0xb8>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00b      	beq.n	8009e30 <TIM_OC6_SetConfig+0x78>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a16      	ldr	r2, [pc, #88]	; (8009e74 <TIM_OC6_SetConfig+0xbc>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d007      	beq.n	8009e30 <TIM_OC6_SetConfig+0x78>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a15      	ldr	r2, [pc, #84]	; (8009e78 <TIM_OC6_SetConfig+0xc0>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d003      	beq.n	8009e30 <TIM_OC6_SetConfig+0x78>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a14      	ldr	r2, [pc, #80]	; (8009e7c <TIM_OC6_SetConfig+0xc4>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d109      	bne.n	8009e44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	029b      	lsls	r3, r3, #10
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	621a      	str	r2, [r3, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	371c      	adds	r7, #28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	40010000 	.word	0x40010000
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40014400 	.word	0x40014400
 8009e7c:	40014800 	.word	0x40014800

08009e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	f023 0201 	bic.w	r2, r3, #1
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	011b      	lsls	r3, r3, #4
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f023 030a 	bic.w	r3, r3, #10
 8009ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	621a      	str	r2, [r3, #32]
}
 8009ed2:	bf00      	nop
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b087      	sub	sp, #28
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	f023 0210 	bic.w	r2, r3, #16
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a1b      	ldr	r3, [r3, #32]
 8009f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	031b      	lsls	r3, r3, #12
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	621a      	str	r2, [r3, #32]
}
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <TIM_ITRx_SetConfig+0x38>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	f043 0307 	orr.w	r3, r3, #7
 8009f62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	609a      	str	r2, [r3, #8]
}
 8009f6a:	bf00      	nop
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	ffcfff8f 	.word	0xffcfff8f

08009f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	021a      	lsls	r2, r3, #8
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	609a      	str	r2, [r3, #8]
}
 8009fb0:	bf00      	nop
 8009fb2:	371c      	adds	r7, #28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d101      	bne.n	8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e068      	b.n	800a0a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2202      	movs	r2, #2
 8009fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a2e      	ldr	r2, [pc, #184]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d004      	beq.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a2d      	ldr	r2, [pc, #180]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d108      	bne.n	800a01a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a00e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a1e      	ldr	r2, [pc, #120]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d01d      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a046:	d018      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a1b      	ldr	r2, [pc, #108]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d013      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a1a      	ldr	r2, [pc, #104]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d00e      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a18      	ldr	r2, [pc, #96]	; (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d009      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a13      	ldr	r2, [pc, #76]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d004      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a14      	ldr	r2, [pc, #80]	; (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d10c      	bne.n	800a094 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	4313      	orrs	r3, r2
 800a08a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	40010000 	.word	0x40010000
 800a0b8:	40010400 	.word	0x40010400
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40001800 	.word	0x40001800

0800a0cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d101      	bne.n	800a0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	e065      	b.n	800a1b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	4313      	orrs	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4313      	orrs	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	4313      	orrs	r3, r2
 800a134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	695b      	ldr	r3, [r3, #20]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	041b      	lsls	r3, r3, #16
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a16      	ldr	r2, [pc, #88]	; (800a1c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d004      	beq.n	800a176 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a14      	ldr	r2, [pc, #80]	; (800a1c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d115      	bne.n	800a1a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	051b      	lsls	r3, r3, #20
 800a182:	4313      	orrs	r3, r2
 800a184:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	40010000 	.word	0x40010000
 800a1c4:	40010400 	.word	0x40010400

0800a1c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e042      	b.n	800a29c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7f7 fe7b 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2224      	movs	r2, #36	; 0x24
 800a232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 0201 	bic.w	r2, r2, #1
 800a244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f82c 	bl	800a2a4 <UART_SetConfig>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d101      	bne.n	800a256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e022      	b.n	800a29c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fd80 	bl	800ad64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f042 0201 	orr.w	r2, r2, #1
 800a292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fe07 	bl	800aea8 <UART_CheckIdleState>
 800a29a:	4603      	mov	r3, r0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2a4:	b5b0      	push	{r4, r5, r7, lr}
 800a2a6:	b08e      	sub	sp, #56	; 0x38
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	689a      	ldr	r2, [r3, #8]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	695b      	ldr	r3, [r3, #20]
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	4bbf      	ldr	r3, [pc, #764]	; (800a5d0 <UART_SetConfig+0x32c>)
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	6812      	ldr	r2, [r2, #0]
 800a2d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4ab5      	ldr	r2, [pc, #724]	; (800a5d4 <UART_SetConfig+0x330>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d004      	beq.n	800a30e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a1b      	ldr	r3, [r3, #32]
 800a308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a30a:	4313      	orrs	r3, r2
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	4bb0      	ldr	r3, [pc, #704]	; (800a5d8 <UART_SetConfig+0x334>)
 800a316:	4013      	ands	r3, r2
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a31e:	430b      	orrs	r3, r1
 800a320:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	f023 010f 	bic.w	r1, r3, #15
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	430a      	orrs	r2, r1
 800a336:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4aa7      	ldr	r2, [pc, #668]	; (800a5dc <UART_SetConfig+0x338>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d176      	bne.n	800a430 <UART_SetConfig+0x18c>
 800a342:	4ba7      	ldr	r3, [pc, #668]	; (800a5e0 <UART_SetConfig+0x33c>)
 800a344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a34a:	2b28      	cmp	r3, #40	; 0x28
 800a34c:	d86c      	bhi.n	800a428 <UART_SetConfig+0x184>
 800a34e:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <UART_SetConfig+0xb0>)
 800a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a354:	0800a3f9 	.word	0x0800a3f9
 800a358:	0800a429 	.word	0x0800a429
 800a35c:	0800a429 	.word	0x0800a429
 800a360:	0800a429 	.word	0x0800a429
 800a364:	0800a429 	.word	0x0800a429
 800a368:	0800a429 	.word	0x0800a429
 800a36c:	0800a429 	.word	0x0800a429
 800a370:	0800a429 	.word	0x0800a429
 800a374:	0800a401 	.word	0x0800a401
 800a378:	0800a429 	.word	0x0800a429
 800a37c:	0800a429 	.word	0x0800a429
 800a380:	0800a429 	.word	0x0800a429
 800a384:	0800a429 	.word	0x0800a429
 800a388:	0800a429 	.word	0x0800a429
 800a38c:	0800a429 	.word	0x0800a429
 800a390:	0800a429 	.word	0x0800a429
 800a394:	0800a409 	.word	0x0800a409
 800a398:	0800a429 	.word	0x0800a429
 800a39c:	0800a429 	.word	0x0800a429
 800a3a0:	0800a429 	.word	0x0800a429
 800a3a4:	0800a429 	.word	0x0800a429
 800a3a8:	0800a429 	.word	0x0800a429
 800a3ac:	0800a429 	.word	0x0800a429
 800a3b0:	0800a429 	.word	0x0800a429
 800a3b4:	0800a411 	.word	0x0800a411
 800a3b8:	0800a429 	.word	0x0800a429
 800a3bc:	0800a429 	.word	0x0800a429
 800a3c0:	0800a429 	.word	0x0800a429
 800a3c4:	0800a429 	.word	0x0800a429
 800a3c8:	0800a429 	.word	0x0800a429
 800a3cc:	0800a429 	.word	0x0800a429
 800a3d0:	0800a429 	.word	0x0800a429
 800a3d4:	0800a419 	.word	0x0800a419
 800a3d8:	0800a429 	.word	0x0800a429
 800a3dc:	0800a429 	.word	0x0800a429
 800a3e0:	0800a429 	.word	0x0800a429
 800a3e4:	0800a429 	.word	0x0800a429
 800a3e8:	0800a429 	.word	0x0800a429
 800a3ec:	0800a429 	.word	0x0800a429
 800a3f0:	0800a429 	.word	0x0800a429
 800a3f4:	0800a421 	.word	0x0800a421
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fe:	e222      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a400:	2304      	movs	r3, #4
 800a402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a406:	e21e      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a408:	2308      	movs	r3, #8
 800a40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40e:	e21a      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a410:	2310      	movs	r3, #16
 800a412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a416:	e216      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a418:	2320      	movs	r3, #32
 800a41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41e:	e212      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a420:	2340      	movs	r3, #64	; 0x40
 800a422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a426:	e20e      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a428:	2380      	movs	r3, #128	; 0x80
 800a42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42e:	e20a      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a6b      	ldr	r2, [pc, #428]	; (800a5e4 <UART_SetConfig+0x340>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d130      	bne.n	800a49c <UART_SetConfig+0x1f8>
 800a43a:	4b69      	ldr	r3, [pc, #420]	; (800a5e0 <UART_SetConfig+0x33c>)
 800a43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	2b05      	cmp	r3, #5
 800a444:	d826      	bhi.n	800a494 <UART_SetConfig+0x1f0>
 800a446:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <UART_SetConfig+0x1a8>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a465 	.word	0x0800a465
 800a450:	0800a46d 	.word	0x0800a46d
 800a454:	0800a475 	.word	0x0800a475
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a48d 	.word	0x0800a48d
 800a464:	2300      	movs	r3, #0
 800a466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46a:	e1ec      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a46c:	2304      	movs	r3, #4
 800a46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a472:	e1e8      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a474:	2308      	movs	r3, #8
 800a476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47a:	e1e4      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a47c:	2310      	movs	r3, #16
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e1e0      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a484:	2320      	movs	r3, #32
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	e1dc      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a48c:	2340      	movs	r3, #64	; 0x40
 800a48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a492:	e1d8      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a494:	2380      	movs	r3, #128	; 0x80
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49a:	e1d4      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a51      	ldr	r2, [pc, #324]	; (800a5e8 <UART_SetConfig+0x344>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d130      	bne.n	800a508 <UART_SetConfig+0x264>
 800a4a6:	4b4e      	ldr	r3, [pc, #312]	; (800a5e0 <UART_SetConfig+0x33c>)
 800a4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4aa:	f003 0307 	and.w	r3, r3, #7
 800a4ae:	2b05      	cmp	r3, #5
 800a4b0:	d826      	bhi.n	800a500 <UART_SetConfig+0x25c>
 800a4b2:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <UART_SetConfig+0x214>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4d1 	.word	0x0800a4d1
 800a4bc:	0800a4d9 	.word	0x0800a4d9
 800a4c0:	0800a4e1 	.word	0x0800a4e1
 800a4c4:	0800a4e9 	.word	0x0800a4e9
 800a4c8:	0800a4f1 	.word	0x0800a4f1
 800a4cc:	0800a4f9 	.word	0x0800a4f9
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d6:	e1b6      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4de:	e1b2      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e6:	e1ae      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e1aa      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a4f0:	2320      	movs	r3, #32
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e1a6      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a4f8:	2340      	movs	r3, #64	; 0x40
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e1a2      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a500:	2380      	movs	r3, #128	; 0x80
 800a502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a506:	e19e      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a37      	ldr	r2, [pc, #220]	; (800a5ec <UART_SetConfig+0x348>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d130      	bne.n	800a574 <UART_SetConfig+0x2d0>
 800a512:	4b33      	ldr	r3, [pc, #204]	; (800a5e0 <UART_SetConfig+0x33c>)
 800a514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	2b05      	cmp	r3, #5
 800a51c:	d826      	bhi.n	800a56c <UART_SetConfig+0x2c8>
 800a51e:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <UART_SetConfig+0x280>)
 800a520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a524:	0800a53d 	.word	0x0800a53d
 800a528:	0800a545 	.word	0x0800a545
 800a52c:	0800a54d 	.word	0x0800a54d
 800a530:	0800a555 	.word	0x0800a555
 800a534:	0800a55d 	.word	0x0800a55d
 800a538:	0800a565 	.word	0x0800a565
 800a53c:	2300      	movs	r3, #0
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e180      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a544:	2304      	movs	r3, #4
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54a:	e17c      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a54c:	2308      	movs	r3, #8
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e178      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a554:	2310      	movs	r3, #16
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e174      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a55c:	2320      	movs	r3, #32
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e170      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e16c      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a56c:	2380      	movs	r3, #128	; 0x80
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e168      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a1d      	ldr	r2, [pc, #116]	; (800a5f0 <UART_SetConfig+0x34c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d142      	bne.n	800a604 <UART_SetConfig+0x360>
 800a57e:	4b18      	ldr	r3, [pc, #96]	; (800a5e0 <UART_SetConfig+0x33c>)
 800a580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b05      	cmp	r3, #5
 800a588:	d838      	bhi.n	800a5fc <UART_SetConfig+0x358>
 800a58a:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <UART_SetConfig+0x2ec>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a5a9 	.word	0x0800a5a9
 800a594:	0800a5b1 	.word	0x0800a5b1
 800a598:	0800a5b9 	.word	0x0800a5b9
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5c9 	.word	0x0800a5c9
 800a5a4:	0800a5f5 	.word	0x0800a5f5
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e14a      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	e146      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a5b8:	2308      	movs	r3, #8
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5be:	e142      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a5c0:	2310      	movs	r3, #16
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e13e      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ce:	e13a      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a5d0:	cfff69f3 	.word	0xcfff69f3
 800a5d4:	58000c00 	.word	0x58000c00
 800a5d8:	11fff4ff 	.word	0x11fff4ff
 800a5dc:	40011000 	.word	0x40011000
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	40004400 	.word	0x40004400
 800a5e8:	40004800 	.word	0x40004800
 800a5ec:	40004c00 	.word	0x40004c00
 800a5f0:	40005000 	.word	0x40005000
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e124      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a5fc:	2380      	movs	r3, #128	; 0x80
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e120      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4acc      	ldr	r2, [pc, #816]	; (800a93c <UART_SetConfig+0x698>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d176      	bne.n	800a6fc <UART_SetConfig+0x458>
 800a60e:	4bcc      	ldr	r3, [pc, #816]	; (800a940 <UART_SetConfig+0x69c>)
 800a610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a616:	2b28      	cmp	r3, #40	; 0x28
 800a618:	d86c      	bhi.n	800a6f4 <UART_SetConfig+0x450>
 800a61a:	a201      	add	r2, pc, #4	; (adr r2, 800a620 <UART_SetConfig+0x37c>)
 800a61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a620:	0800a6c5 	.word	0x0800a6c5
 800a624:	0800a6f5 	.word	0x0800a6f5
 800a628:	0800a6f5 	.word	0x0800a6f5
 800a62c:	0800a6f5 	.word	0x0800a6f5
 800a630:	0800a6f5 	.word	0x0800a6f5
 800a634:	0800a6f5 	.word	0x0800a6f5
 800a638:	0800a6f5 	.word	0x0800a6f5
 800a63c:	0800a6f5 	.word	0x0800a6f5
 800a640:	0800a6cd 	.word	0x0800a6cd
 800a644:	0800a6f5 	.word	0x0800a6f5
 800a648:	0800a6f5 	.word	0x0800a6f5
 800a64c:	0800a6f5 	.word	0x0800a6f5
 800a650:	0800a6f5 	.word	0x0800a6f5
 800a654:	0800a6f5 	.word	0x0800a6f5
 800a658:	0800a6f5 	.word	0x0800a6f5
 800a65c:	0800a6f5 	.word	0x0800a6f5
 800a660:	0800a6d5 	.word	0x0800a6d5
 800a664:	0800a6f5 	.word	0x0800a6f5
 800a668:	0800a6f5 	.word	0x0800a6f5
 800a66c:	0800a6f5 	.word	0x0800a6f5
 800a670:	0800a6f5 	.word	0x0800a6f5
 800a674:	0800a6f5 	.word	0x0800a6f5
 800a678:	0800a6f5 	.word	0x0800a6f5
 800a67c:	0800a6f5 	.word	0x0800a6f5
 800a680:	0800a6dd 	.word	0x0800a6dd
 800a684:	0800a6f5 	.word	0x0800a6f5
 800a688:	0800a6f5 	.word	0x0800a6f5
 800a68c:	0800a6f5 	.word	0x0800a6f5
 800a690:	0800a6f5 	.word	0x0800a6f5
 800a694:	0800a6f5 	.word	0x0800a6f5
 800a698:	0800a6f5 	.word	0x0800a6f5
 800a69c:	0800a6f5 	.word	0x0800a6f5
 800a6a0:	0800a6e5 	.word	0x0800a6e5
 800a6a4:	0800a6f5 	.word	0x0800a6f5
 800a6a8:	0800a6f5 	.word	0x0800a6f5
 800a6ac:	0800a6f5 	.word	0x0800a6f5
 800a6b0:	0800a6f5 	.word	0x0800a6f5
 800a6b4:	0800a6f5 	.word	0x0800a6f5
 800a6b8:	0800a6f5 	.word	0x0800a6f5
 800a6bc:	0800a6f5 	.word	0x0800a6f5
 800a6c0:	0800a6ed 	.word	0x0800a6ed
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ca:	e0bc      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d2:	e0b8      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6da:	e0b4      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a6dc:	2310      	movs	r3, #16
 800a6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e2:	e0b0      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a6e4:	2320      	movs	r3, #32
 800a6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ea:	e0ac      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a6ec:	2340      	movs	r3, #64	; 0x40
 800a6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f2:	e0a8      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fa:	e0a4      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a90      	ldr	r2, [pc, #576]	; (800a944 <UART_SetConfig+0x6a0>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d130      	bne.n	800a768 <UART_SetConfig+0x4c4>
 800a706:	4b8e      	ldr	r3, [pc, #568]	; (800a940 <UART_SetConfig+0x69c>)
 800a708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70a:	f003 0307 	and.w	r3, r3, #7
 800a70e:	2b05      	cmp	r3, #5
 800a710:	d826      	bhi.n	800a760 <UART_SetConfig+0x4bc>
 800a712:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <UART_SetConfig+0x474>)
 800a714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a718:	0800a731 	.word	0x0800a731
 800a71c:	0800a739 	.word	0x0800a739
 800a720:	0800a741 	.word	0x0800a741
 800a724:	0800a749 	.word	0x0800a749
 800a728:	0800a751 	.word	0x0800a751
 800a72c:	0800a759 	.word	0x0800a759
 800a730:	2300      	movs	r3, #0
 800a732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a736:	e086      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a738:	2304      	movs	r3, #4
 800a73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a73e:	e082      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a740:	2308      	movs	r3, #8
 800a742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a746:	e07e      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a748:	2310      	movs	r3, #16
 800a74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74e:	e07a      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a750:	2320      	movs	r3, #32
 800a752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a756:	e076      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a758:	2340      	movs	r3, #64	; 0x40
 800a75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75e:	e072      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a760:	2380      	movs	r3, #128	; 0x80
 800a762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a766:	e06e      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a76      	ldr	r2, [pc, #472]	; (800a948 <UART_SetConfig+0x6a4>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d130      	bne.n	800a7d4 <UART_SetConfig+0x530>
 800a772:	4b73      	ldr	r3, [pc, #460]	; (800a940 <UART_SetConfig+0x69c>)
 800a774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b05      	cmp	r3, #5
 800a77c:	d826      	bhi.n	800a7cc <UART_SetConfig+0x528>
 800a77e:	a201      	add	r2, pc, #4	; (adr r2, 800a784 <UART_SetConfig+0x4e0>)
 800a780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a784:	0800a79d 	.word	0x0800a79d
 800a788:	0800a7a5 	.word	0x0800a7a5
 800a78c:	0800a7ad 	.word	0x0800a7ad
 800a790:	0800a7b5 	.word	0x0800a7b5
 800a794:	0800a7bd 	.word	0x0800a7bd
 800a798:	0800a7c5 	.word	0x0800a7c5
 800a79c:	2300      	movs	r3, #0
 800a79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a2:	e050      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a7a4:	2304      	movs	r3, #4
 800a7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7aa:	e04c      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a7ac:	2308      	movs	r3, #8
 800a7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b2:	e048      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a7b4:	2310      	movs	r3, #16
 800a7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ba:	e044      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a7bc:	2320      	movs	r3, #32
 800a7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c2:	e040      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a7c4:	2340      	movs	r3, #64	; 0x40
 800a7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ca:	e03c      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a7cc:	2380      	movs	r3, #128	; 0x80
 800a7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d2:	e038      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a5c      	ldr	r2, [pc, #368]	; (800a94c <UART_SetConfig+0x6a8>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d130      	bne.n	800a840 <UART_SetConfig+0x59c>
 800a7de:	4b58      	ldr	r3, [pc, #352]	; (800a940 <UART_SetConfig+0x69c>)
 800a7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	2b05      	cmp	r3, #5
 800a7e8:	d826      	bhi.n	800a838 <UART_SetConfig+0x594>
 800a7ea:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <UART_SetConfig+0x54c>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a809 	.word	0x0800a809
 800a7f4:	0800a811 	.word	0x0800a811
 800a7f8:	0800a819 	.word	0x0800a819
 800a7fc:	0800a821 	.word	0x0800a821
 800a800:	0800a829 	.word	0x0800a829
 800a804:	0800a831 	.word	0x0800a831
 800a808:	2302      	movs	r3, #2
 800a80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a80e:	e01a      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a810:	2304      	movs	r3, #4
 800a812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a816:	e016      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a818:	2308      	movs	r3, #8
 800a81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81e:	e012      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a820:	2310      	movs	r3, #16
 800a822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a826:	e00e      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a828:	2320      	movs	r3, #32
 800a82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82e:	e00a      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a830:	2340      	movs	r3, #64	; 0x40
 800a832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a836:	e006      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a838:	2380      	movs	r3, #128	; 0x80
 800a83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83e:	e002      	b.n	800a846 <UART_SetConfig+0x5a2>
 800a840:	2380      	movs	r3, #128	; 0x80
 800a842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a40      	ldr	r2, [pc, #256]	; (800a94c <UART_SetConfig+0x6a8>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	f040 80ef 	bne.w	800aa30 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a856:	2b20      	cmp	r3, #32
 800a858:	dc46      	bgt.n	800a8e8 <UART_SetConfig+0x644>
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	f2c0 8081 	blt.w	800a962 <UART_SetConfig+0x6be>
 800a860:	3b02      	subs	r3, #2
 800a862:	2b1e      	cmp	r3, #30
 800a864:	d87d      	bhi.n	800a962 <UART_SetConfig+0x6be>
 800a866:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <UART_SetConfig+0x5c8>)
 800a868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86c:	0800a8ef 	.word	0x0800a8ef
 800a870:	0800a963 	.word	0x0800a963
 800a874:	0800a8f7 	.word	0x0800a8f7
 800a878:	0800a963 	.word	0x0800a963
 800a87c:	0800a963 	.word	0x0800a963
 800a880:	0800a963 	.word	0x0800a963
 800a884:	0800a907 	.word	0x0800a907
 800a888:	0800a963 	.word	0x0800a963
 800a88c:	0800a963 	.word	0x0800a963
 800a890:	0800a963 	.word	0x0800a963
 800a894:	0800a963 	.word	0x0800a963
 800a898:	0800a963 	.word	0x0800a963
 800a89c:	0800a963 	.word	0x0800a963
 800a8a0:	0800a963 	.word	0x0800a963
 800a8a4:	0800a917 	.word	0x0800a917
 800a8a8:	0800a963 	.word	0x0800a963
 800a8ac:	0800a963 	.word	0x0800a963
 800a8b0:	0800a963 	.word	0x0800a963
 800a8b4:	0800a963 	.word	0x0800a963
 800a8b8:	0800a963 	.word	0x0800a963
 800a8bc:	0800a963 	.word	0x0800a963
 800a8c0:	0800a963 	.word	0x0800a963
 800a8c4:	0800a963 	.word	0x0800a963
 800a8c8:	0800a963 	.word	0x0800a963
 800a8cc:	0800a963 	.word	0x0800a963
 800a8d0:	0800a963 	.word	0x0800a963
 800a8d4:	0800a963 	.word	0x0800a963
 800a8d8:	0800a963 	.word	0x0800a963
 800a8dc:	0800a963 	.word	0x0800a963
 800a8e0:	0800a963 	.word	0x0800a963
 800a8e4:	0800a955 	.word	0x0800a955
 800a8e8:	2b40      	cmp	r3, #64	; 0x40
 800a8ea:	d036      	beq.n	800a95a <UART_SetConfig+0x6b6>
 800a8ec:	e039      	b.n	800a962 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a8ee:	f7fc fa7b 	bl	8006de8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8f4:	e03b      	b.n	800a96e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f6:	f107 0314 	add.w	r3, r7, #20
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fc fa8a 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a904:	e033      	b.n	800a96e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a906:	f107 0308 	add.w	r3, r7, #8
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fc fbd6 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a914:	e02b      	b.n	800a96e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a916:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <UART_SetConfig+0x69c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d009      	beq.n	800a936 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a922:	4b07      	ldr	r3, [pc, #28]	; (800a940 <UART_SetConfig+0x69c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	08db      	lsrs	r3, r3, #3
 800a928:	f003 0303 	and.w	r3, r3, #3
 800a92c:	4a08      	ldr	r2, [pc, #32]	; (800a950 <UART_SetConfig+0x6ac>)
 800a92e:	fa22 f303 	lsr.w	r3, r2, r3
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a934:	e01b      	b.n	800a96e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a936:	4b06      	ldr	r3, [pc, #24]	; (800a950 <UART_SetConfig+0x6ac>)
 800a938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a93a:	e018      	b.n	800a96e <UART_SetConfig+0x6ca>
 800a93c:	40011400 	.word	0x40011400
 800a940:	58024400 	.word	0x58024400
 800a944:	40007800 	.word	0x40007800
 800a948:	40007c00 	.word	0x40007c00
 800a94c:	58000c00 	.word	0x58000c00
 800a950:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a954:	4bc4      	ldr	r3, [pc, #784]	; (800ac68 <UART_SetConfig+0x9c4>)
 800a956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a958:	e009      	b.n	800a96e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a95a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a960:	e005      	b.n	800a96e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a96c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 81da 	beq.w	800ad2a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	4abc      	ldr	r2, [pc, #752]	; (800ac6c <UART_SetConfig+0x9c8>)
 800a97c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a980:	461a      	mov	r2, r3
 800a982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a984:	fbb3 f3f2 	udiv	r3, r3, r2
 800a988:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	4613      	mov	r3, r2
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	4413      	add	r3, r2
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	429a      	cmp	r2, r3
 800a998:	d305      	bcc.n	800a9a6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9a0:	6a3a      	ldr	r2, [r7, #32]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d903      	bls.n	800a9ae <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a9ac:	e1bd      	b.n	800ad2a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f04f 0100 	mov.w	r1, #0
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ba:	4aac      	ldr	r2, [pc, #688]	; (800ac6c <UART_SetConfig+0x9c8>)
 800a9bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	f04f 0300 	mov.w	r3, #0
 800a9c6:	f7f5 fe97 	bl	80006f8 <__aeabi_uldivmod>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f04f 0200 	mov.w	r2, #0
 800a9d6:	f04f 0300 	mov.w	r3, #0
 800a9da:	020b      	lsls	r3, r1, #8
 800a9dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9e0:	0202      	lsls	r2, r0, #8
 800a9e2:	6879      	ldr	r1, [r7, #4]
 800a9e4:	6849      	ldr	r1, [r1, #4]
 800a9e6:	0849      	lsrs	r1, r1, #1
 800a9e8:	4608      	mov	r0, r1
 800a9ea:	f04f 0100 	mov.w	r1, #0
 800a9ee:	1814      	adds	r4, r2, r0
 800a9f0:	eb43 0501 	adc.w	r5, r3, r1
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7f5 fe79 	bl	80006f8 <__aeabi_uldivmod>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa14:	d308      	bcc.n	800aa28 <UART_SetConfig+0x784>
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa1c:	d204      	bcs.n	800aa28 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa24:	60da      	str	r2, [r3, #12]
 800aa26:	e180      	b.n	800ad2a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aa2e:	e17c      	b.n	800ad2a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa38:	f040 80bf 	bne.w	800abba <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800aa3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa40:	2b20      	cmp	r3, #32
 800aa42:	dc49      	bgt.n	800aad8 <UART_SetConfig+0x834>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	db7c      	blt.n	800ab42 <UART_SetConfig+0x89e>
 800aa48:	2b20      	cmp	r3, #32
 800aa4a:	d87a      	bhi.n	800ab42 <UART_SetConfig+0x89e>
 800aa4c:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <UART_SetConfig+0x7b0>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aadf 	.word	0x0800aadf
 800aa58:	0800aae7 	.word	0x0800aae7
 800aa5c:	0800ab43 	.word	0x0800ab43
 800aa60:	0800ab43 	.word	0x0800ab43
 800aa64:	0800aaef 	.word	0x0800aaef
 800aa68:	0800ab43 	.word	0x0800ab43
 800aa6c:	0800ab43 	.word	0x0800ab43
 800aa70:	0800ab43 	.word	0x0800ab43
 800aa74:	0800aaff 	.word	0x0800aaff
 800aa78:	0800ab43 	.word	0x0800ab43
 800aa7c:	0800ab43 	.word	0x0800ab43
 800aa80:	0800ab43 	.word	0x0800ab43
 800aa84:	0800ab43 	.word	0x0800ab43
 800aa88:	0800ab43 	.word	0x0800ab43
 800aa8c:	0800ab43 	.word	0x0800ab43
 800aa90:	0800ab43 	.word	0x0800ab43
 800aa94:	0800ab0f 	.word	0x0800ab0f
 800aa98:	0800ab43 	.word	0x0800ab43
 800aa9c:	0800ab43 	.word	0x0800ab43
 800aaa0:	0800ab43 	.word	0x0800ab43
 800aaa4:	0800ab43 	.word	0x0800ab43
 800aaa8:	0800ab43 	.word	0x0800ab43
 800aaac:	0800ab43 	.word	0x0800ab43
 800aab0:	0800ab43 	.word	0x0800ab43
 800aab4:	0800ab43 	.word	0x0800ab43
 800aab8:	0800ab43 	.word	0x0800ab43
 800aabc:	0800ab43 	.word	0x0800ab43
 800aac0:	0800ab43 	.word	0x0800ab43
 800aac4:	0800ab43 	.word	0x0800ab43
 800aac8:	0800ab43 	.word	0x0800ab43
 800aacc:	0800ab43 	.word	0x0800ab43
 800aad0:	0800ab43 	.word	0x0800ab43
 800aad4:	0800ab35 	.word	0x0800ab35
 800aad8:	2b40      	cmp	r3, #64	; 0x40
 800aada:	d02e      	beq.n	800ab3a <UART_SetConfig+0x896>
 800aadc:	e031      	b.n	800ab42 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aade:	f7fa fd03 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 800aae2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aae4:	e033      	b.n	800ab4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aae6:	f7fa fd15 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 800aaea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aaec:	e02f      	b.n	800ab4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaee:	f107 0314 	add.w	r3, r7, #20
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fc f98e 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aafc:	e027      	b.n	800ab4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aafe:	f107 0308 	add.w	r3, r7, #8
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fc fada 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab0c:	e01f      	b.n	800ab4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab0e:	4b58      	ldr	r3, [pc, #352]	; (800ac70 <UART_SetConfig+0x9cc>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0320 	and.w	r3, r3, #32
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d009      	beq.n	800ab2e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab1a:	4b55      	ldr	r3, [pc, #340]	; (800ac70 <UART_SetConfig+0x9cc>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	08db      	lsrs	r3, r3, #3
 800ab20:	f003 0303 	and.w	r3, r3, #3
 800ab24:	4a53      	ldr	r2, [pc, #332]	; (800ac74 <UART_SetConfig+0x9d0>)
 800ab26:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab2c:	e00f      	b.n	800ab4e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ab2e:	4b51      	ldr	r3, [pc, #324]	; (800ac74 <UART_SetConfig+0x9d0>)
 800ab30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab32:	e00c      	b.n	800ab4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab34:	4b4c      	ldr	r3, [pc, #304]	; (800ac68 <UART_SetConfig+0x9c4>)
 800ab36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab38:	e009      	b.n	800ab4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab40:	e005      	b.n	800ab4e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 80ea 	beq.w	800ad2a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	4a44      	ldr	r2, [pc, #272]	; (800ac6c <UART_SetConfig+0x9c8>)
 800ab5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab60:	461a      	mov	r2, r3
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab68:	005a      	lsls	r2, r3, #1
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	085b      	lsrs	r3, r3, #1
 800ab70:	441a      	add	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	2b0f      	cmp	r3, #15
 800ab82:	d916      	bls.n	800abb2 <UART_SetConfig+0x90e>
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab8a:	d212      	bcs.n	800abb2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f023 030f 	bic.w	r3, r3, #15
 800ab94:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab98:	085b      	lsrs	r3, r3, #1
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aba4:	4313      	orrs	r3, r2
 800aba6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800abae:	60da      	str	r2, [r3, #12]
 800abb0:	e0bb      	b.n	800ad2a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800abb8:	e0b7      	b.n	800ad2a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abbe:	2b20      	cmp	r3, #32
 800abc0:	dc4a      	bgt.n	800ac58 <UART_SetConfig+0x9b4>
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f2c0 8086 	blt.w	800acd4 <UART_SetConfig+0xa30>
 800abc8:	2b20      	cmp	r3, #32
 800abca:	f200 8083 	bhi.w	800acd4 <UART_SetConfig+0xa30>
 800abce:	a201      	add	r2, pc, #4	; (adr r2, 800abd4 <UART_SetConfig+0x930>)
 800abd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd4:	0800ac5f 	.word	0x0800ac5f
 800abd8:	0800ac79 	.word	0x0800ac79
 800abdc:	0800acd5 	.word	0x0800acd5
 800abe0:	0800acd5 	.word	0x0800acd5
 800abe4:	0800ac81 	.word	0x0800ac81
 800abe8:	0800acd5 	.word	0x0800acd5
 800abec:	0800acd5 	.word	0x0800acd5
 800abf0:	0800acd5 	.word	0x0800acd5
 800abf4:	0800ac91 	.word	0x0800ac91
 800abf8:	0800acd5 	.word	0x0800acd5
 800abfc:	0800acd5 	.word	0x0800acd5
 800ac00:	0800acd5 	.word	0x0800acd5
 800ac04:	0800acd5 	.word	0x0800acd5
 800ac08:	0800acd5 	.word	0x0800acd5
 800ac0c:	0800acd5 	.word	0x0800acd5
 800ac10:	0800acd5 	.word	0x0800acd5
 800ac14:	0800aca1 	.word	0x0800aca1
 800ac18:	0800acd5 	.word	0x0800acd5
 800ac1c:	0800acd5 	.word	0x0800acd5
 800ac20:	0800acd5 	.word	0x0800acd5
 800ac24:	0800acd5 	.word	0x0800acd5
 800ac28:	0800acd5 	.word	0x0800acd5
 800ac2c:	0800acd5 	.word	0x0800acd5
 800ac30:	0800acd5 	.word	0x0800acd5
 800ac34:	0800acd5 	.word	0x0800acd5
 800ac38:	0800acd5 	.word	0x0800acd5
 800ac3c:	0800acd5 	.word	0x0800acd5
 800ac40:	0800acd5 	.word	0x0800acd5
 800ac44:	0800acd5 	.word	0x0800acd5
 800ac48:	0800acd5 	.word	0x0800acd5
 800ac4c:	0800acd5 	.word	0x0800acd5
 800ac50:	0800acd5 	.word	0x0800acd5
 800ac54:	0800acc7 	.word	0x0800acc7
 800ac58:	2b40      	cmp	r3, #64	; 0x40
 800ac5a:	d037      	beq.n	800accc <UART_SetConfig+0xa28>
 800ac5c:	e03a      	b.n	800acd4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac5e:	f7fa fc43 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 800ac62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac64:	e03c      	b.n	800ace0 <UART_SetConfig+0xa3c>
 800ac66:	bf00      	nop
 800ac68:	003d0900 	.word	0x003d0900
 800ac6c:	08029df0 	.word	0x08029df0
 800ac70:	58024400 	.word	0x58024400
 800ac74:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac78:	f7fa fc4c 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 800ac7c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac7e:	e02f      	b.n	800ace0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fc f8c5 	bl	8006e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac8e:	e027      	b.n	800ace0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac90:	f107 0308 	add.w	r3, r7, #8
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fc fa11 	bl	80070bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac9e:	e01f      	b.n	800ace0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aca0:	4b2c      	ldr	r3, [pc, #176]	; (800ad54 <UART_SetConfig+0xab0>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d009      	beq.n	800acc0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acac:	4b29      	ldr	r3, [pc, #164]	; (800ad54 <UART_SetConfig+0xab0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	08db      	lsrs	r3, r3, #3
 800acb2:	f003 0303 	and.w	r3, r3, #3
 800acb6:	4a28      	ldr	r2, [pc, #160]	; (800ad58 <UART_SetConfig+0xab4>)
 800acb8:	fa22 f303 	lsr.w	r3, r2, r3
 800acbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acbe:	e00f      	b.n	800ace0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800acc0:	4b25      	ldr	r3, [pc, #148]	; (800ad58 <UART_SetConfig+0xab4>)
 800acc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acc4:	e00c      	b.n	800ace0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acc6:	4b25      	ldr	r3, [pc, #148]	; (800ad5c <UART_SetConfig+0xab8>)
 800acc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acca:	e009      	b.n	800ace0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800accc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acd2:	e005      	b.n	800ace0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800acd4:	2300      	movs	r3, #0
 800acd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800acde:	bf00      	nop
    }

    if (pclk != 0U)
 800ace0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d021      	beq.n	800ad2a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	4a1d      	ldr	r2, [pc, #116]	; (800ad60 <UART_SetConfig+0xabc>)
 800acec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acf0:	461a      	mov	r2, r3
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	fbb3 f2f2 	udiv	r2, r3, r2
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	085b      	lsrs	r3, r3, #1
 800acfe:	441a      	add	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	2b0f      	cmp	r3, #15
 800ad10:	d908      	bls.n	800ad24 <UART_SetConfig+0xa80>
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad18:	d204      	bcs.n	800ad24 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad20:	60da      	str	r2, [r3, #12]
 800ad22:	e002      	b.n	800ad2a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ad46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3738      	adds	r7, #56	; 0x38
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bdb0      	pop	{r4, r5, r7, pc}
 800ad52:	bf00      	nop
 800ad54:	58024400 	.word	0x58024400
 800ad58:	03d09000 	.word	0x03d09000
 800ad5c:	003d0900 	.word	0x003d0900
 800ad60:	08029df0 	.word	0x08029df0

0800ad64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add6:	f003 0308 	and.w	r3, r3, #8
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf8:	f003 0310 	and.w	r3, r3, #16
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00a      	beq.n	800ae16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1a:	f003 0320 	and.w	r3, r3, #32
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00a      	beq.n	800ae38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	430a      	orrs	r2, r1
 800ae36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d01a      	beq.n	800ae7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae62:	d10a      	bne.n	800ae7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00a      	beq.n	800ae9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	605a      	str	r2, [r3, #4]
  }
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af02      	add	r7, sp, #8
 800aeae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aeb8:	f7f7 fc6a 	bl	8002790 <HAL_GetTick>
 800aebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0308 	and.w	r3, r3, #8
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d10e      	bne.n	800aeea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f82f 	bl	800af3e <UART_WaitOnFlagUntilTimeout>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e025      	b.n	800af36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d10e      	bne.n	800af16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f819 	bl	800af3e <UART_WaitOnFlagUntilTimeout>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e00f      	b.n	800af36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2220      	movs	r2, #32
 800af1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2220      	movs	r2, #32
 800af22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	603b      	str	r3, [r7, #0]
 800af4a:	4613      	mov	r3, r2
 800af4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af4e:	e062      	b.n	800b016 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af56:	d05e      	beq.n	800b016 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af58:	f7f7 fc1a 	bl	8002790 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	429a      	cmp	r2, r3
 800af66:	d302      	bcc.n	800af6e <UART_WaitOnFlagUntilTimeout+0x30>
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d11d      	bne.n	800afaa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f022 0201 	bic.w	r2, r2, #1
 800af8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2220      	movs	r2, #32
 800af92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2220      	movs	r2, #32
 800af9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e045      	b.n	800b036 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0304 	and.w	r3, r3, #4
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d02e      	beq.n	800b016 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afc6:	d126      	bne.n	800b016 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800afe0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689a      	ldr	r2, [r3, #8]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f022 0201 	bic.w	r2, r2, #1
 800aff0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2220      	movs	r2, #32
 800affe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2220      	movs	r2, #32
 800b006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e00f      	b.n	800b036 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	69da      	ldr	r2, [r3, #28]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	4013      	ands	r3, r2
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	429a      	cmp	r2, r3
 800b024:	bf0c      	ite	eq
 800b026:	2301      	moveq	r3, #1
 800b028:	2300      	movne	r3, #0
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	79fb      	ldrb	r3, [r7, #7]
 800b030:	429a      	cmp	r2, r3
 800b032:	d08d      	beq.n	800af50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b03e:	b480      	push	{r7}
 800b040:	b085      	sub	sp, #20
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d101      	bne.n	800b054 <HAL_UARTEx_DisableFifoMode+0x16>
 800b050:	2302      	movs	r3, #2
 800b052:	e027      	b.n	800b0a4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2224      	movs	r2, #36	; 0x24
 800b060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f022 0201 	bic.w	r2, r2, #1
 800b07a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b082:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2220      	movs	r2, #32
 800b096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d101      	bne.n	800b0c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	e02d      	b.n	800b124 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2224      	movs	r2, #36	; 0x24
 800b0d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f022 0201 	bic.w	r2, r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	430a      	orrs	r2, r1
 800b102:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f84f 	bl	800b1a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2220      	movs	r2, #32
 800b116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b140:	2302      	movs	r3, #2
 800b142:	e02d      	b.n	800b1a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2224      	movs	r2, #36	; 0x24
 800b150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f022 0201 	bic.w	r2, r2, #1
 800b16a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	430a      	orrs	r2, r1
 800b17e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f811 	bl	800b1a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2220      	movs	r2, #32
 800b192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d108      	bne.n	800b1ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1c8:	e031      	b.n	800b22e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1ca:	2310      	movs	r3, #16
 800b1cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1ce:	2310      	movs	r3, #16
 800b1d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	0e5b      	lsrs	r3, r3, #25
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	f003 0307 	and.w	r3, r3, #7
 800b1e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	0f5b      	lsrs	r3, r3, #29
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	7b3a      	ldrb	r2, [r7, #12]
 800b1f6:	4911      	ldr	r1, [pc, #68]	; (800b23c <UARTEx_SetNbDataToProcess+0x94>)
 800b1f8:	5c8a      	ldrb	r2, [r1, r2]
 800b1fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1fe:	7b3a      	ldrb	r2, [r7, #12]
 800b200:	490f      	ldr	r1, [pc, #60]	; (800b240 <UARTEx_SetNbDataToProcess+0x98>)
 800b202:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b204:	fb93 f3f2 	sdiv	r3, r3, r2
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	7b7a      	ldrb	r2, [r7, #13]
 800b214:	4909      	ldr	r1, [pc, #36]	; (800b23c <UARTEx_SetNbDataToProcess+0x94>)
 800b216:	5c8a      	ldrb	r2, [r1, r2]
 800b218:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b21c:	7b7a      	ldrb	r2, [r7, #13]
 800b21e:	4908      	ldr	r1, [pc, #32]	; (800b240 <UARTEx_SetNbDataToProcess+0x98>)
 800b220:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b222:	fb93 f3f2 	sdiv	r3, r3, r2
 800b226:	b29a      	uxth	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b22e:	bf00      	nop
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	08029e08 	.word	0x08029e08
 800b240:	08029e10 	.word	0x08029e10

0800b244 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d121      	bne.n	800b29a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	4b27      	ldr	r3, [pc, #156]	; (800b2f8 <FMC_SDRAM_Init+0xb4>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	6851      	ldr	r1, [r2, #4]
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	6892      	ldr	r2, [r2, #8]
 800b266:	4311      	orrs	r1, r2
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	68d2      	ldr	r2, [r2, #12]
 800b26c:	4311      	orrs	r1, r2
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	6912      	ldr	r2, [r2, #16]
 800b272:	4311      	orrs	r1, r2
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	6952      	ldr	r2, [r2, #20]
 800b278:	4311      	orrs	r1, r2
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	6992      	ldr	r2, [r2, #24]
 800b27e:	4311      	orrs	r1, r2
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	69d2      	ldr	r2, [r2, #28]
 800b284:	4311      	orrs	r1, r2
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	6a12      	ldr	r2, [r2, #32]
 800b28a:	4311      	orrs	r1, r2
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b290:	430a      	orrs	r2, r1
 800b292:	431a      	orrs	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	e026      	b.n	800b2e8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	69d9      	ldr	r1, [r3, #28]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	4319      	orrs	r1, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	4b0e      	ldr	r3, [pc, #56]	; (800b2f8 <FMC_SDRAM_Init+0xb4>)
 800b2be:	4013      	ands	r3, r2
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	6851      	ldr	r1, [r2, #4]
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	6892      	ldr	r2, [r2, #8]
 800b2c8:	4311      	orrs	r1, r2
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	68d2      	ldr	r2, [r2, #12]
 800b2ce:	4311      	orrs	r1, r2
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	6912      	ldr	r2, [r2, #16]
 800b2d4:	4311      	orrs	r1, r2
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	6952      	ldr	r2, [r2, #20]
 800b2da:	4311      	orrs	r1, r2
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	6992      	ldr	r2, [r2, #24]
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	ffff8000 	.word	0xffff8000

0800b2fc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d128      	bne.n	800b360 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	1e59      	subs	r1, r3, #1
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	3b01      	subs	r3, #1
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	4319      	orrs	r1, r3
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	021b      	lsls	r3, r3, #8
 800b32e:	4319      	orrs	r1, r3
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	3b01      	subs	r3, #1
 800b336:	031b      	lsls	r3, r3, #12
 800b338:	4319      	orrs	r1, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	3b01      	subs	r3, #1
 800b340:	041b      	lsls	r3, r3, #16
 800b342:	4319      	orrs	r1, r3
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	3b01      	subs	r3, #1
 800b34a:	051b      	lsls	r3, r3, #20
 800b34c:	4319      	orrs	r1, r3
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	3b01      	subs	r3, #1
 800b354:	061b      	lsls	r3, r3, #24
 800b356:	430b      	orrs	r3, r1
 800b358:	431a      	orrs	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	609a      	str	r2, [r3, #8]
 800b35e:	e02d      	b.n	800b3bc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	689a      	ldr	r2, [r3, #8]
 800b364:	4b19      	ldr	r3, [pc, #100]	; (800b3cc <FMC_SDRAM_Timing_Init+0xd0>)
 800b366:	4013      	ands	r3, r2
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	68d2      	ldr	r2, [r2, #12]
 800b36c:	3a01      	subs	r2, #1
 800b36e:	0311      	lsls	r1, r2, #12
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	6952      	ldr	r2, [r2, #20]
 800b374:	3a01      	subs	r2, #1
 800b376:	0512      	lsls	r2, r2, #20
 800b378:	430a      	orrs	r2, r1
 800b37a:	431a      	orrs	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	1e59      	subs	r1, r3, #1
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	3b01      	subs	r3, #1
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	4319      	orrs	r1, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	021b      	lsls	r3, r3, #8
 800b3a0:	4319      	orrs	r1, r3
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	041b      	lsls	r3, r3, #16
 800b3aa:	4319      	orrs	r1, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	061b      	lsls	r3, r3, #24
 800b3b4:	430b      	orrs	r3, r1
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	ff0f0fff 	.word	0xff0f0fff

0800b3d0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	691a      	ldr	r2, [r3, #16]
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	; (800b414 <FMC_SDRAM_SendCommand+0x44>)
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	6811      	ldr	r1, [r2, #0]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	6852      	ldr	r2, [r2, #4]
 800b3ec:	4311      	orrs	r1, r2
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	6892      	ldr	r2, [r2, #8]
 800b3f2:	3a01      	subs	r2, #1
 800b3f4:	0152      	lsls	r2, r2, #5
 800b3f6:	4311      	orrs	r1, r2
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	68d2      	ldr	r2, [r2, #12]
 800b3fc:	0252      	lsls	r2, r2, #9
 800b3fe:	430a      	orrs	r2, r1
 800b400:	431a      	orrs	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	ffc00000 	.word	0xffc00000

0800b418 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	695a      	ldr	r2, [r3, #20]
 800b426:	4b07      	ldr	r3, [pc, #28]	; (800b444 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b428:	4013      	ands	r3, r2
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	0052      	lsls	r2, r2, #1
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	ffffc001 	.word	0xffffc001

0800b448 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b448:	b084      	sub	sp, #16
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	f107 001c 	add.w	r0, r7, #28
 800b456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b45e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b460:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b462:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b466:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b468:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b46a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b46e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	4313      	orrs	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	4b07      	ldr	r3, [pc, #28]	; (800b498 <SDMMC_Init+0x50>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	431a      	orrs	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	b004      	add	sp, #16
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	ffc02c00 	.word	0xffc02c00

0800b49c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f043 0203 	orr.w	r2, r3, #3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 0303 	and.w	r3, r3, #3
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b512:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b518:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b51e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	4313      	orrs	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	4b06      	ldr	r3, [pc, #24]	; (800b544 <SDMMC_SendCommand+0x50>)
 800b52c:	4013      	ands	r3, r2
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	431a      	orrs	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	fffee0c0 	.word	0xfffee0c0

0800b548 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	b2db      	uxtb	r3, r3
}
 800b556:	4618      	mov	r0, r3
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b562:	b480      	push	{r7}
 800b564:	b085      	sub	sp, #20
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3314      	adds	r3, #20
 800b570:	461a      	mov	r2, r3
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	4413      	add	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b5ae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b5b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b5ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0

}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b088      	sub	sp, #32
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b5ee:	2310      	movs	r3, #16
 800b5f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b600:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b602:	f107 0308 	add.w	r3, r7, #8
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7ff ff73 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b60e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b612:	2110      	movs	r1, #16
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fa43 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b61c:	69fb      	ldr	r3, [r7, #28]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3720      	adds	r7, #32
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b088      	sub	sp, #32
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b634:	2311      	movs	r3, #17
 800b636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b63c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b63e:	2300      	movs	r3, #0
 800b640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b648:	f107 0308 	add.w	r3, r7, #8
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff ff50 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b654:	f241 3288 	movw	r2, #5000	; 0x1388
 800b658:	2111      	movs	r1, #17
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fa20 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b662:	69fb      	ldr	r3, [r7, #28]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3720      	adds	r7, #32
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b088      	sub	sp, #32
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b67a:	2312      	movs	r3, #18
 800b67c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b67e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b684:	2300      	movs	r3, #0
 800b686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b68c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b68e:	f107 0308 	add.w	r3, r7, #8
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff ff2d 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b69a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b69e:	2112      	movs	r1, #18
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f9fd 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b6a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6a8:	69fb      	ldr	r3, [r7, #28]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3720      	adds	r7, #32
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b088      	sub	sp, #32
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b6c0:	2318      	movs	r3, #24
 800b6c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6d4:	f107 0308 	add.w	r3, r7, #8
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7ff ff0a 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b6e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e4:	2118      	movs	r1, #24
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f9da 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b6ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ee:	69fb      	ldr	r3, [r7, #28]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3720      	adds	r7, #32
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b706:	2319      	movs	r3, #25
 800b708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b70a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b70e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b718:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b71a:	f107 0308 	add.w	r3, r7, #8
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7ff fee7 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b726:	f241 3288 	movw	r2, #5000	; 0x1388
 800b72a:	2119      	movs	r1, #25
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f9b7 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b734:	69fb      	ldr	r3, [r7, #28]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3720      	adds	r7, #32
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b088      	sub	sp, #32
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b74c:	2307      	movs	r3, #7
 800b74e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b750:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b75a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b75e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b760:	f107 0308 	add.w	r3, r7, #8
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff fec4 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b770:	2107      	movs	r1, #7
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f994 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b77a:	69fb      	ldr	r3, [r7, #28]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3720      	adds	r7, #32
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b088      	sub	sp, #32
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b790:	2300      	movs	r3, #0
 800b792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b794:	2300      	movs	r3, #0
 800b796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b798:	2300      	movs	r3, #0
 800b79a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7a2:	f107 0308 	add.w	r3, r7, #8
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7ff fea3 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fbb8 	bl	800bf24 <SDMMC_GetCmdError>
 800b7b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7b6:	69fb      	ldr	r3, [r7, #28]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b7c8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b7cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b7ce:	2308      	movs	r3, #8
 800b7d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7e2:	f107 0308 	add.w	r3, r7, #8
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff fe83 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fb4a 	bl	800be88 <SDMMC_GetCmdResp7>
 800b7f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7f6:	69fb      	ldr	r3, [r7, #28]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3720      	adds	r7, #32
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b80e:	2337      	movs	r3, #55	; 0x37
 800b810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b812:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b818:	2300      	movs	r3, #0
 800b81a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b81c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b820:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b822:	f107 0308 	add.w	r3, r7, #8
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff fe63 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b82e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b832:	2137      	movs	r1, #55	; 0x37
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f933 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b83a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b83c:	69fb      	ldr	r3, [r7, #28]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3720      	adds	r7, #32
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b088      	sub	sp, #32
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b854:	2329      	movs	r3, #41	; 0x29
 800b856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b85e:	2300      	movs	r3, #0
 800b860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b868:	f107 0308 	add.w	r3, r7, #8
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fe40 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fa4f 	bl	800bd18 <SDMMC_GetCmdResp3>
 800b87a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b87c:	69fb      	ldr	r3, [r7, #28]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b088      	sub	sp, #32
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b894:	2306      	movs	r3, #6
 800b896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b89c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8a8:	f107 0308 	add.w	r3, r7, #8
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7ff fe20 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8b8:	2106      	movs	r1, #6
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f8f0 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b8c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8c2:	69fb      	ldr	r3, [r7, #28]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3720      	adds	r7, #32
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b088      	sub	sp, #32
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b8d8:	2333      	movs	r3, #51	; 0x33
 800b8da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ec:	f107 0308 	add.w	r3, r7, #8
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff fdfe 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8fc:	2133      	movs	r1, #51	; 0x33
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f8ce 	bl	800baa0 <SDMMC_GetCmdResp1>
 800b904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b906:	69fb      	ldr	r3, [r7, #28]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3720      	adds	r7, #32
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b918:	2300      	movs	r3, #0
 800b91a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b91c:	2302      	movs	r3, #2
 800b91e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b920:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b92a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b92e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b930:	f107 0308 	add.w	r3, r7, #8
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fddc 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f9a1 	bl	800bc84 <SDMMC_GetCmdResp2>
 800b942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b944:	69fb      	ldr	r3, [r7, #28]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3720      	adds	r7, #32
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b088      	sub	sp, #32
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b95c:	2309      	movs	r3, #9
 800b95e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b960:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b966:	2300      	movs	r3, #0
 800b968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b96a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b96e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b970:	f107 0308 	add.w	r3, r7, #8
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff fdbc 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f981 	bl	800bc84 <SDMMC_GetCmdResp2>
 800b982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b984:	69fb      	ldr	r3, [r7, #28]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3720      	adds	r7, #32
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b088      	sub	sp, #32
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b998:	2300      	movs	r3, #0
 800b99a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b99c:	2303      	movs	r3, #3
 800b99e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9b0:	f107 0308 	add.w	r3, r7, #8
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7ff fd9c 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	2103      	movs	r1, #3
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 f9e9 	bl	800bd98 <SDMMC_GetCmdResp6>
 800b9c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9c8:	69fb      	ldr	r3, [r7, #28]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3720      	adds	r7, #32
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b088      	sub	sp, #32
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b9e0:	230d      	movs	r3, #13
 800b9e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9f4:	f107 0308 	add.w	r3, r7, #8
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff fd7a 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ba00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba04:	210d      	movs	r1, #13
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f84a 	bl	800baa0 <SDMMC_GetCmdResp1>
 800ba0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba0e:	69fb      	ldr	r3, [r7, #28]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3720      	adds	r7, #32
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ba24:	230d      	movs	r3, #13
 800ba26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba38:	f107 0308 	add.w	r3, r7, #8
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7ff fd58 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ba44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba48:	210d      	movs	r1, #13
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f828 	bl	800baa0 <SDMMC_GetCmdResp1>
 800ba50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba52:	69fb      	ldr	r3, [r7, #28]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3720      	adds	r7, #32
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800ba64:	2300      	movs	r3, #0
 800ba66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800ba68:	230b      	movs	r3, #11
 800ba6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba72:	2300      	movs	r3, #0
 800ba74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba7c:	f107 0308 	add.w	r3, r7, #8
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff fd36 	bl	800b4f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800ba88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba8c:	210b      	movs	r1, #11
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f806 	bl	800baa0 <SDMMC_GetCmdResp1>
 800ba94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba96:	69fb      	ldr	r3, [r7, #28]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	460b      	mov	r3, r1
 800baaa:	607a      	str	r2, [r7, #4]
 800baac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800baae:	4b70      	ldr	r3, [pc, #448]	; (800bc70 <SDMMC_GetCmdResp1+0x1d0>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a70      	ldr	r2, [pc, #448]	; (800bc74 <SDMMC_GetCmdResp1+0x1d4>)
 800bab4:	fba2 2303 	umull	r2, r3, r2, r3
 800bab8:	0a5a      	lsrs	r2, r3, #9
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	fb02 f303 	mul.w	r3, r2, r3
 800bac0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	1e5a      	subs	r2, r3, #1
 800bac6:	61fa      	str	r2, [r7, #28]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bacc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bad0:	e0c9      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bad8:	69ba      	ldr	r2, [r7, #24]
 800bada:	4b67      	ldr	r3, [pc, #412]	; (800bc78 <SDMMC_GetCmdResp1+0x1d8>)
 800badc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0ef      	beq.n	800bac2 <SDMMC_GetCmdResp1+0x22>
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1ea      	bne.n	800bac2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf0:	f003 0304 	and.w	r3, r3, #4
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d004      	beq.n	800bb02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2204      	movs	r2, #4
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bafe:	2304      	movs	r3, #4
 800bb00:	e0b1      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d004      	beq.n	800bb18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2201      	movs	r2, #1
 800bb12:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e0a6      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	4a58      	ldr	r2, [pc, #352]	; (800bc7c <SDMMC_GetCmdResp1+0x1dc>)
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f7ff fd12 	bl	800b548 <SDMMC_GetCommandResponse>
 800bb24:	4603      	mov	r3, r0
 800bb26:	461a      	mov	r2, r3
 800bb28:	7afb      	ldrb	r3, [r7, #11]
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d001      	beq.n	800bb32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e099      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb32:	2100      	movs	r1, #0
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f7ff fd14 	bl	800b562 <SDMMC_GetResponse>
 800bb3a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	4b50      	ldr	r3, [pc, #320]	; (800bc80 <SDMMC_GetCmdResp1+0x1e0>)
 800bb40:	4013      	ands	r3, r2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e08d      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	da02      	bge.n	800bb56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb54:	e087      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb60:	2340      	movs	r3, #64	; 0x40
 800bb62:	e080      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb6e:	2380      	movs	r3, #128	; 0x80
 800bb70:	e079      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb80:	e071      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb90:	e069      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bba0:	e061      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bbac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbb0:	e059      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbc0:	e051      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbd0:	e049      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbe0:	e041      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bbec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbf0:	e039      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bc00:	e031      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc10:	e029      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc20:	e021      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc30:	e019      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc40:	e011      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc50:	e009      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f003 0308 	and.w	r3, r3, #8
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc60:	e001      	b.n	800bc66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3720      	adds	r7, #32
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20000004 	.word	0x20000004
 800bc74:	10624dd3 	.word	0x10624dd3
 800bc78:	00200045 	.word	0x00200045
 800bc7c:	002000c5 	.word	0x002000c5
 800bc80:	fdffe008 	.word	0xfdffe008

0800bc84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc8c:	4b1f      	ldr	r3, [pc, #124]	; (800bd0c <SDMMC_GetCmdResp2+0x88>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a1f      	ldr	r2, [pc, #124]	; (800bd10 <SDMMC_GetCmdResp2+0x8c>)
 800bc92:	fba2 2303 	umull	r2, r3, r2, r3
 800bc96:	0a5b      	lsrs	r3, r3, #9
 800bc98:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc9c:	fb02 f303 	mul.w	r3, r2, r3
 800bca0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	1e5a      	subs	r2, r3, #1
 800bca6:	60fa      	str	r2, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d102      	bne.n	800bcb2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcb0:	e026      	b.n	800bd00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0ef      	beq.n	800bca2 <SDMMC_GetCmdResp2+0x1e>
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1ea      	bne.n	800bca2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d004      	beq.n	800bce2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2204      	movs	r2, #4
 800bcdc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcde:	2304      	movs	r3, #4
 800bce0:	e00e      	b.n	800bd00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d004      	beq.n	800bcf8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e003      	b.n	800bd00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a06      	ldr	r2, [pc, #24]	; (800bd14 <SDMMC_GetCmdResp2+0x90>)
 800bcfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	20000004 	.word	0x20000004
 800bd10:	10624dd3 	.word	0x10624dd3
 800bd14:	002000c5 	.word	0x002000c5

0800bd18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd20:	4b1a      	ldr	r3, [pc, #104]	; (800bd8c <SDMMC_GetCmdResp3+0x74>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a1a      	ldr	r2, [pc, #104]	; (800bd90 <SDMMC_GetCmdResp3+0x78>)
 800bd26:	fba2 2303 	umull	r2, r3, r2, r3
 800bd2a:	0a5b      	lsrs	r3, r3, #9
 800bd2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd30:	fb02 f303 	mul.w	r3, r2, r3
 800bd34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	1e5a      	subs	r2, r3, #1
 800bd3a:	60fa      	str	r2, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd44:	e01b      	b.n	800bd7e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0ef      	beq.n	800bd36 <SDMMC_GetCmdResp3+0x1e>
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1ea      	bne.n	800bd36 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d004      	beq.n	800bd76 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2204      	movs	r2, #4
 800bd70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd72:	2304      	movs	r3, #4
 800bd74:	e003      	b.n	800bd7e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a06      	ldr	r2, [pc, #24]	; (800bd94 <SDMMC_GetCmdResp3+0x7c>)
 800bd7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	20000004 	.word	0x20000004
 800bd90:	10624dd3 	.word	0x10624dd3
 800bd94:	002000c5 	.word	0x002000c5

0800bd98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	460b      	mov	r3, r1
 800bda2:	607a      	str	r2, [r7, #4]
 800bda4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bda6:	4b35      	ldr	r3, [pc, #212]	; (800be7c <SDMMC_GetCmdResp6+0xe4>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a35      	ldr	r2, [pc, #212]	; (800be80 <SDMMC_GetCmdResp6+0xe8>)
 800bdac:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb0:	0a5b      	lsrs	r3, r3, #9
 800bdb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdb6:	fb02 f303 	mul.w	r3, r2, r3
 800bdba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	1e5a      	subs	r2, r3, #1
 800bdc0:	61fa      	str	r2, [r7, #28]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdca:	e052      	b.n	800be72 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d0ef      	beq.n	800bdbc <SDMMC_GetCmdResp6+0x24>
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1ea      	bne.n	800bdbc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdea:	f003 0304 	and.w	r3, r3, #4
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d004      	beq.n	800bdfc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2204      	movs	r2, #4
 800bdf6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdf8:	2304      	movs	r3, #4
 800bdfa:	e03a      	b.n	800be72 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b00      	cmp	r3, #0
 800be06:	d004      	beq.n	800be12 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2201      	movs	r2, #1
 800be0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be0e:	2301      	movs	r3, #1
 800be10:	e02f      	b.n	800be72 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f7ff fb98 	bl	800b548 <SDMMC_GetCommandResponse>
 800be18:	4603      	mov	r3, r0
 800be1a:	461a      	mov	r2, r3
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	4293      	cmp	r3, r2
 800be20:	d001      	beq.n	800be26 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be22:	2301      	movs	r3, #1
 800be24:	e025      	b.n	800be72 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	4a16      	ldr	r2, [pc, #88]	; (800be84 <SDMMC_GetCmdResp6+0xec>)
 800be2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be2c:	2100      	movs	r1, #0
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f7ff fb97 	bl	800b562 <SDMMC_GetResponse>
 800be34:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d106      	bne.n	800be4e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	0c1b      	lsrs	r3, r3, #16
 800be44:	b29a      	uxth	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800be4a:	2300      	movs	r3, #0
 800be4c:	e011      	b.n	800be72 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be5c:	e009      	b.n	800be72 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be6c:	e001      	b.n	800be72 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20000004 	.word	0x20000004
 800be80:	10624dd3 	.word	0x10624dd3
 800be84:	002000c5 	.word	0x002000c5

0800be88 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be90:	4b22      	ldr	r3, [pc, #136]	; (800bf1c <SDMMC_GetCmdResp7+0x94>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a22      	ldr	r2, [pc, #136]	; (800bf20 <SDMMC_GetCmdResp7+0x98>)
 800be96:	fba2 2303 	umull	r2, r3, r2, r3
 800be9a:	0a5b      	lsrs	r3, r3, #9
 800be9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bea0:	fb02 f303 	mul.w	r3, r2, r3
 800bea4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	1e5a      	subs	r2, r3, #1
 800beaa:	60fa      	str	r2, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d102      	bne.n	800beb6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800beb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800beb4:	e02c      	b.n	800bf10 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0ef      	beq.n	800bea6 <SDMMC_GetCmdResp7+0x1e>
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1ea      	bne.n	800bea6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bed4:	f003 0304 	and.w	r3, r3, #4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d004      	beq.n	800bee6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2204      	movs	r2, #4
 800bee0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bee2:	2304      	movs	r3, #4
 800bee4:	e014      	b.n	800bf10 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d004      	beq.n	800befc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bef8:	2301      	movs	r3, #1
 800befa:	e009      	b.n	800bf10 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2240      	movs	r2, #64	; 0x40
 800bf0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf0e:	2300      	movs	r3, #0

}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr
 800bf1c:	20000004 	.word	0x20000004
 800bf20:	10624dd3 	.word	0x10624dd3

0800bf24 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf2c:	4b11      	ldr	r3, [pc, #68]	; (800bf74 <SDMMC_GetCmdError+0x50>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a11      	ldr	r2, [pc, #68]	; (800bf78 <SDMMC_GetCmdError+0x54>)
 800bf32:	fba2 2303 	umull	r2, r3, r2, r3
 800bf36:	0a5b      	lsrs	r3, r3, #9
 800bf38:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf3c:	fb02 f303 	mul.w	r3, r2, r3
 800bf40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	1e5a      	subs	r2, r3, #1
 800bf46:	60fa      	str	r2, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d102      	bne.n	800bf52 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf50:	e009      	b.n	800bf66 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d0f1      	beq.n	800bf42 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a06      	ldr	r2, [pc, #24]	; (800bf7c <SDMMC_GetCmdError+0x58>)
 800bf62:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	20000004 	.word	0x20000004
 800bf78:	10624dd3 	.word	0x10624dd3
 800bf7c:	002000c5 	.word	0x002000c5

0800bf80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bf84:	4904      	ldr	r1, [pc, #16]	; (800bf98 <MX_FATFS_Init+0x18>)
 800bf86:	4805      	ldr	r0, [pc, #20]	; (800bf9c <MX_FATFS_Init+0x1c>)
 800bf88:	f000 fa52 	bl	800c430 <FATFS_LinkDriver>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	461a      	mov	r2, r3
 800bf90:	4b03      	ldr	r3, [pc, #12]	; (800bfa0 <MX_FATFS_Init+0x20>)
 800bf92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bf94:	bf00      	nop
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	2000687c 	.word	0x2000687c
 800bf9c:	08029e18 	.word	0x08029e18
 800bfa0:	20006878 	.word	0x20006878

0800bfa4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bfae:	f000 f871 	bl	800c094 <BSP_SD_IsDetected>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d001      	beq.n	800bfbc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bfb8:	2302      	movs	r3, #2
 800bfba:	e012      	b.n	800bfe2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bfbc:	480b      	ldr	r0, [pc, #44]	; (800bfec <BSP_SD_Init+0x48>)
 800bfbe:	f7fb fc87 	bl	80078d0 <HAL_SD_Init>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d109      	bne.n	800bfe0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bfcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bfd0:	4806      	ldr	r0, [pc, #24]	; (800bfec <BSP_SD_Init+0x48>)
 800bfd2:	f7fc f98b 	bl	80082ec <HAL_SD_ConfigWideBusOperation>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	200064ec 	.word	0x200064ec

0800bff0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bffc:	2300      	movs	r3, #0
 800bffe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	68f9      	ldr	r1, [r7, #12]
 800c006:	4806      	ldr	r0, [pc, #24]	; (800c020 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c008:	f7fb fd8e 	bl	8007b28 <HAL_SD_ReadBlocks_DMA>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c016:	7dfb      	ldrb	r3, [r7, #23]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	200064ec 	.word	0x200064ec

0800c024 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	68f9      	ldr	r1, [r7, #12]
 800c03a:	4806      	ldr	r0, [pc, #24]	; (800c054 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c03c:	f7fb fe1c 	bl	8007c78 <HAL_SD_WriteBlocks_DMA>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	200064ec 	.word	0x200064ec

0800c058 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c05c:	4805      	ldr	r0, [pc, #20]	; (800c074 <BSP_SD_GetCardState+0x1c>)
 800c05e:	f7fc fa59 	bl	8008514 <HAL_SD_GetCardState>
 800c062:	4603      	mov	r3, r0
 800c064:	2b04      	cmp	r3, #4
 800c066:	bf14      	ite	ne
 800c068:	2301      	movne	r3, #1
 800c06a:	2300      	moveq	r3, #0
 800c06c:	b2db      	uxtb	r3, r3
}
 800c06e:	4618      	mov	r0, r3
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	200064ec 	.word	0x200064ec

0800c078 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	4803      	ldr	r0, [pc, #12]	; (800c090 <BSP_SD_GetCardInfo+0x18>)
 800c084:	f7fc f906 	bl	8008294 <HAL_SD_GetCardInfo>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	200064ec 	.word	0x200064ec

0800c094 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c09a:	2301      	movs	r3, #1
 800c09c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800c09e:	79fb      	ldrb	r3, [r7, #7]
 800c0a0:	b2db      	uxtb	r3, r3
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800c0b6:	f000 fa7b 	bl	800c5b0 <osKernelGetTickCount>
 800c0ba:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800c0bc:	e006      	b.n	800c0cc <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c0be:	f7ff ffcb 	bl	800c058 <BSP_SD_GetCardState>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	e009      	b.n	800c0e0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800c0cc:	f000 fa70 	bl	800c5b0 <osKernelGetTickCount>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d8f0      	bhi.n	800c0be <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c0dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c0f2:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <SD_CheckStatus+0x38>)
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c0f8:	f7ff ffae 	bl	800c058 <BSP_SD_GetCardState>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d107      	bne.n	800c112 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c102:	4b07      	ldr	r3, [pc, #28]	; (800c120 <SD_CheckStatus+0x38>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	b2db      	uxtb	r3, r3
 800c108:	f023 0301 	bic.w	r3, r3, #1
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4b04      	ldr	r3, [pc, #16]	; (800c120 <SD_CheckStatus+0x38>)
 800c110:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c112:	4b03      	ldr	r3, [pc, #12]	; (800c120 <SD_CheckStatus+0x38>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	b2db      	uxtb	r3, r3
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	20000011 	.word	0x20000011

0800c124 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c12e:	4b1c      	ldr	r3, [pc, #112]	; (800c1a0 <SD_initialize+0x7c>)
 800c130:	2201      	movs	r2, #1
 800c132:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800c134:	f000 f9f4 	bl	800c520 <osKernelGetState>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d129      	bne.n	800c192 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c13e:	f7ff ff31 	bl	800bfa4 <BSP_SD_Init>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d107      	bne.n	800c158 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff ffcc 	bl	800c0e8 <SD_CheckStatus>
 800c150:	4603      	mov	r3, r0
 800c152:	461a      	mov	r2, r3
 800c154:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <SD_initialize+0x7c>)
 800c156:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c158:	4b11      	ldr	r3, [pc, #68]	; (800c1a0 <SD_initialize+0x7c>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d017      	beq.n	800c192 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800c162:	4b10      	ldr	r3, [pc, #64]	; (800c1a4 <SD_initialize+0x80>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d107      	bne.n	800c17a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800c16a:	2200      	movs	r2, #0
 800c16c:	2102      	movs	r1, #2
 800c16e:	200a      	movs	r0, #10
 800c170:	f000 fc00 	bl	800c974 <osMessageQueueNew>
 800c174:	4603      	mov	r3, r0
 800c176:	4a0b      	ldr	r2, [pc, #44]	; (800c1a4 <SD_initialize+0x80>)
 800c178:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800c17a:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <SD_initialize+0x80>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d107      	bne.n	800c192 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800c182:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <SD_initialize+0x7c>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	b2db      	uxtb	r3, r3
 800c188:	f043 0301 	orr.w	r3, r3, #1
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4b04      	ldr	r3, [pc, #16]	; (800c1a0 <SD_initialize+0x7c>)
 800c190:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c192:	4b03      	ldr	r3, [pc, #12]	; (800c1a0 <SD_initialize+0x7c>)
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	b2db      	uxtb	r3, r3
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	20000011 	.word	0x20000011
 800c1a4:	20000104 	.word	0x20000104

0800c1a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff ff97 	bl	800c0e8 <SD_CheckStatus>
 800c1ba:	4603      	mov	r3, r0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60b9      	str	r1, [r7, #8]
 800c1cc:	607a      	str	r2, [r7, #4]
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c1d8:	f247 5030 	movw	r0, #30000	; 0x7530
 800c1dc:	f7ff ff67 	bl	800c0ae <SD_CheckStatusWithTimeout>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	da01      	bge.n	800c1ea <SD_read+0x26>
  {
    return res;
 800c1e6:	7ffb      	ldrb	r3, [r7, #31]
 800c1e8:	e02f      	b.n	800c24a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	6879      	ldr	r1, [r7, #4]
 800c1ee:	68b8      	ldr	r0, [r7, #8]
 800c1f0:	f7ff fefe 	bl	800bff0 <BSP_SD_ReadBlocks_DMA>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800c1f8:	7fbb      	ldrb	r3, [r7, #30]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d124      	bne.n	800c248 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c1fe:	4b15      	ldr	r3, [pc, #84]	; (800c254 <SD_read+0x90>)
 800c200:	6818      	ldr	r0, [r3, #0]
 800c202:	f107 0112 	add.w	r1, r7, #18
 800c206:	f247 5330 	movw	r3, #30000	; 0x7530
 800c20a:	2200      	movs	r2, #0
 800c20c:	f000 fc86 	bl	800cb1c <osMessageQueueGet>
 800c210:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d117      	bne.n	800c248 <SD_read+0x84>
 800c218:	8a7b      	ldrh	r3, [r7, #18]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d114      	bne.n	800c248 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800c21e:	f000 f9c7 	bl	800c5b0 <osKernelGetTickCount>
 800c222:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c224:	e007      	b.n	800c236 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c226:	f7ff ff17 	bl	800c058 <BSP_SD_GetCardState>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d102      	bne.n	800c236 <SD_read+0x72>
              {
                res = RES_OK;
 800c230:	2300      	movs	r3, #0
 800c232:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c234:	e008      	b.n	800c248 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c236:	f000 f9bb 	bl	800c5b0 <osKernelGetTickCount>
 800c23a:	4602      	mov	r2, r0
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	f247 522f 	movw	r2, #29999	; 0x752f
 800c244:	4293      	cmp	r3, r2
 800c246:	d9ee      	bls.n	800c226 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c248:	7ffb      	ldrb	r3, [r7, #31]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3720      	adds	r7, #32
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	20000104 	.word	0x20000104

0800c258 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b088      	sub	sp, #32
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60b9      	str	r1, [r7, #8]
 800c260:	607a      	str	r2, [r7, #4]
 800c262:	603b      	str	r3, [r7, #0]
 800c264:	4603      	mov	r3, r0
 800c266:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c26c:	f247 5030 	movw	r0, #30000	; 0x7530
 800c270:	f7ff ff1d 	bl	800c0ae <SD_CheckStatusWithTimeout>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	da01      	bge.n	800c27e <SD_write+0x26>
  {
    return res;
 800c27a:	7ffb      	ldrb	r3, [r7, #31]
 800c27c:	e02d      	b.n	800c2da <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	6879      	ldr	r1, [r7, #4]
 800c282:	68b8      	ldr	r0, [r7, #8]
 800c284:	f7ff fece 	bl	800c024 <BSP_SD_WriteBlocks_DMA>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d124      	bne.n	800c2d8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c28e:	4b15      	ldr	r3, [pc, #84]	; (800c2e4 <SD_write+0x8c>)
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	f107 0112 	add.w	r1, r7, #18
 800c296:	f247 5330 	movw	r3, #30000	; 0x7530
 800c29a:	2200      	movs	r2, #0
 800c29c:	f000 fc3e 	bl	800cb1c <osMessageQueueGet>
 800c2a0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d117      	bne.n	800c2d8 <SD_write+0x80>
 800c2a8:	8a7b      	ldrh	r3, [r7, #18]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d114      	bne.n	800c2d8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800c2ae:	f000 f97f 	bl	800c5b0 <osKernelGetTickCount>
 800c2b2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c2b4:	e007      	b.n	800c2c6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c2b6:	f7ff fecf 	bl	800c058 <BSP_SD_GetCardState>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <SD_write+0x6e>
          {
            res = RES_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	77fb      	strb	r3, [r7, #31]
            break;
 800c2c4:	e008      	b.n	800c2d8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c2c6:	f000 f973 	bl	800c5b0 <osKernelGetTickCount>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	f247 522f 	movw	r2, #29999	; 0x752f
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d9ee      	bls.n	800c2b6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800c2d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3720      	adds	r7, #32
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20000104 	.word	0x20000104

0800c2e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b08c      	sub	sp, #48	; 0x30
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	603a      	str	r2, [r7, #0]
 800c2f2:	71fb      	strb	r3, [r7, #7]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c2fe:	4b25      	ldr	r3, [pc, #148]	; (800c394 <SD_ioctl+0xac>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	b2db      	uxtb	r3, r3
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <SD_ioctl+0x28>
 800c30c:	2303      	movs	r3, #3
 800c30e:	e03c      	b.n	800c38a <SD_ioctl+0xa2>

  switch (cmd)
 800c310:	79bb      	ldrb	r3, [r7, #6]
 800c312:	2b03      	cmp	r3, #3
 800c314:	d834      	bhi.n	800c380 <SD_ioctl+0x98>
 800c316:	a201      	add	r2, pc, #4	; (adr r2, 800c31c <SD_ioctl+0x34>)
 800c318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31c:	0800c32d 	.word	0x0800c32d
 800c320:	0800c335 	.word	0x0800c335
 800c324:	0800c34d 	.word	0x0800c34d
 800c328:	0800c367 	.word	0x0800c367
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c332:	e028      	b.n	800c386 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c334:	f107 0308 	add.w	r3, r7, #8
 800c338:	4618      	mov	r0, r3
 800c33a:	f7ff fe9d 	bl	800c078 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c33e:	6a3a      	ldr	r2, [r7, #32]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c34a:	e01c      	b.n	800c386 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c34c:	f107 0308 	add.w	r3, r7, #8
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff fe91 	bl	800c078 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	b29a      	uxth	r2, r3
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c364:	e00f      	b.n	800c386 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c366:	f107 0308 	add.w	r3, r7, #8
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff fe84 	bl	800c078 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	0a5a      	lsrs	r2, r3, #9
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c37e:	e002      	b.n	800c386 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c380:	2304      	movs	r3, #4
 800c382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3730      	adds	r7, #48	; 0x30
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	20000011 	.word	0x20000011

0800c398 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c398:	b480      	push	{r7}
 800c39a:	b087      	sub	sp, #28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c3ae:	4b1f      	ldr	r3, [pc, #124]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3b0:	7a5b      	ldrb	r3, [r3, #9]
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d131      	bne.n	800c41c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c3b8:	4b1c      	ldr	r3, [pc, #112]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3ba:	7a5b      	ldrb	r3, [r3, #9]
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4b1a      	ldr	r3, [pc, #104]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c3c6:	4b19      	ldr	r3, [pc, #100]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3c8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	4a17      	ldr	r2, [pc, #92]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c3d6:	4b15      	ldr	r3, [pc, #84]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3d8:	7a5b      	ldrb	r3, [r3, #9]
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	461a      	mov	r2, r3
 800c3de:	4b13      	ldr	r3, [pc, #76]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3e0:	4413      	add	r3, r2
 800c3e2:	79fa      	ldrb	r2, [r7, #7]
 800c3e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c3e6:	4b11      	ldr	r3, [pc, #68]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3e8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	1c5a      	adds	r2, r3, #1
 800c3ee:	b2d1      	uxtb	r1, r2
 800c3f0:	4a0e      	ldr	r2, [pc, #56]	; (800c42c <FATFS_LinkDriverEx+0x94>)
 800c3f2:	7251      	strb	r1, [r2, #9]
 800c3f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3f6:	7dbb      	ldrb	r3, [r7, #22]
 800c3f8:	3330      	adds	r3, #48	; 0x30
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	3301      	adds	r3, #1
 800c404:	223a      	movs	r2, #58	; 0x3a
 800c406:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	3302      	adds	r3, #2
 800c40c:	222f      	movs	r2, #47	; 0x2f
 800c40e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	3303      	adds	r3, #3
 800c414:	2200      	movs	r2, #0
 800c416:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	20000108 	.word	0x20000108

0800c430 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c43a:	2200      	movs	r2, #0
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff ffaa 	bl	800c398 <FATFS_LinkDriverEx>
 800c444:	4603      	mov	r3, r0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <__NVIC_SetPriority>:
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	6039      	str	r1, [r7, #0]
 800c45a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c45c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c460:	2b00      	cmp	r3, #0
 800c462:	db0a      	blt.n	800c47a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	b2da      	uxtb	r2, r3
 800c468:	490c      	ldr	r1, [pc, #48]	; (800c49c <__NVIC_SetPriority+0x4c>)
 800c46a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c46e:	0112      	lsls	r2, r2, #4
 800c470:	b2d2      	uxtb	r2, r2
 800c472:	440b      	add	r3, r1
 800c474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c478:	e00a      	b.n	800c490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	4908      	ldr	r1, [pc, #32]	; (800c4a0 <__NVIC_SetPriority+0x50>)
 800c480:	88fb      	ldrh	r3, [r7, #6]
 800c482:	f003 030f 	and.w	r3, r3, #15
 800c486:	3b04      	subs	r3, #4
 800c488:	0112      	lsls	r2, r2, #4
 800c48a:	b2d2      	uxtb	r2, r2
 800c48c:	440b      	add	r3, r1
 800c48e:	761a      	strb	r2, [r3, #24]
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	e000e100 	.word	0xe000e100
 800c4a0:	e000ed00 	.word	0xe000ed00

0800c4a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c4a8:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <SysTick_Handler+0x1c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c4ac:	f002 faba 	bl	800ea24 <xTaskGetSchedulerState>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d001      	beq.n	800c4ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c4b6:	f003 f99f 	bl	800f7f8 <xPortSysTickHandler>
  }
}
 800c4ba:	bf00      	nop
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	e000e010 	.word	0xe000e010

0800c4c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	f06f 0004 	mvn.w	r0, #4
 800c4ce:	f7ff ffbf 	bl	800c450 <__NVIC_SetPriority>
#endif
}
 800c4d2:	bf00      	nop
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	603b      	str	r3, [r7, #0]
  return(result);
 800c4e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d003      	beq.n	800c4f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c4ea:	f06f 0305 	mvn.w	r3, #5
 800c4ee:	607b      	str	r3, [r7, #4]
 800c4f0:	e00c      	b.n	800c50c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c4f2:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <osKernelInitialize+0x44>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d105      	bne.n	800c506 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c4fa:	4b08      	ldr	r3, [pc, #32]	; (800c51c <osKernelInitialize+0x44>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c500:	2300      	movs	r3, #0
 800c502:	607b      	str	r3, [r7, #4]
 800c504:	e002      	b.n	800c50c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c506:	f04f 33ff 	mov.w	r3, #4294967295
 800c50a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c50c:	687b      	ldr	r3, [r7, #4]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	20000114 	.word	0x20000114

0800c520 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c526:	f002 fa7d 	bl	800ea24 <xTaskGetSchedulerState>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d004      	beq.n	800c53a <osKernelGetState+0x1a>
 800c530:	2b02      	cmp	r3, #2
 800c532:	d105      	bne.n	800c540 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c534:	2302      	movs	r3, #2
 800c536:	607b      	str	r3, [r7, #4]
      break;
 800c538:	e00c      	b.n	800c554 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c53a:	2303      	movs	r3, #3
 800c53c:	607b      	str	r3, [r7, #4]
      break;
 800c53e:	e009      	b.n	800c554 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c540:	4b07      	ldr	r3, [pc, #28]	; (800c560 <osKernelGetState+0x40>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d102      	bne.n	800c54e <osKernelGetState+0x2e>
        state = osKernelReady;
 800c548:	2301      	movs	r3, #1
 800c54a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c54c:	e001      	b.n	800c552 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c54e:	2300      	movs	r3, #0
 800c550:	607b      	str	r3, [r7, #4]
      break;
 800c552:	bf00      	nop
  }

  return (state);
 800c554:	687b      	ldr	r3, [r7, #4]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3708      	adds	r7, #8
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	20000114 	.word	0x20000114

0800c564 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c56a:	f3ef 8305 	mrs	r3, IPSR
 800c56e:	603b      	str	r3, [r7, #0]
  return(result);
 800c570:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c576:	f06f 0305 	mvn.w	r3, #5
 800c57a:	607b      	str	r3, [r7, #4]
 800c57c:	e010      	b.n	800c5a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c57e:	4b0b      	ldr	r3, [pc, #44]	; (800c5ac <osKernelStart+0x48>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d109      	bne.n	800c59a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c586:	f7ff ff9d 	bl	800c4c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c58a:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <osKernelStart+0x48>)
 800c58c:	2202      	movs	r2, #2
 800c58e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c590:	f001 fdee 	bl	800e170 <vTaskStartScheduler>
      stat = osOK;
 800c594:	2300      	movs	r3, #0
 800c596:	607b      	str	r3, [r7, #4]
 800c598:	e002      	b.n	800c5a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295
 800c59e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5a0:	687b      	ldr	r3, [r7, #4]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000114 	.word	0x20000114

0800c5b0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b6:	f3ef 8305 	mrs	r3, IPSR
 800c5ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c5bc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d003      	beq.n	800c5ca <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c5c2:	f001 fef7 	bl	800e3b4 <xTaskGetTickCountFromISR>
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	e002      	b.n	800c5d0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c5ca:	f001 fee3 	bl	800e394 <xTaskGetTickCount>
 800c5ce:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c5d0:	687b      	ldr	r3, [r7, #4]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b08e      	sub	sp, #56	; 0x38
 800c5de:	af04      	add	r7, sp, #16
 800c5e0:	60f8      	str	r0, [r7, #12]
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5ea:	f3ef 8305 	mrs	r3, IPSR
 800c5ee:	617b      	str	r3, [r7, #20]
  return(result);
 800c5f0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d17e      	bne.n	800c6f4 <osThreadNew+0x11a>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d07b      	beq.n	800c6f4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c5fc:	2380      	movs	r3, #128	; 0x80
 800c5fe:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c600:	2318      	movs	r3, #24
 800c602:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c608:	f04f 33ff 	mov.w	r3, #4294967295
 800c60c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d045      	beq.n	800c6a0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <osThreadNew+0x48>
        name = attr->name;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d002      	beq.n	800c630 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	699b      	ldr	r3, [r3, #24]
 800c62e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d008      	beq.n	800c648 <osThreadNew+0x6e>
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	2b38      	cmp	r3, #56	; 0x38
 800c63a:	d805      	bhi.n	800c648 <osThreadNew+0x6e>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	d001      	beq.n	800c64c <osThreadNew+0x72>
        return (NULL);
 800c648:	2300      	movs	r3, #0
 800c64a:	e054      	b.n	800c6f6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	695b      	ldr	r3, [r3, #20]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d003      	beq.n	800c65c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	089b      	lsrs	r3, r3, #2
 800c65a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00e      	beq.n	800c682 <osThreadNew+0xa8>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	2b5b      	cmp	r3, #91	; 0x5b
 800c66a:	d90a      	bls.n	800c682 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c670:	2b00      	cmp	r3, #0
 800c672:	d006      	beq.n	800c682 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <osThreadNew+0xa8>
        mem = 1;
 800c67c:	2301      	movs	r3, #1
 800c67e:	61bb      	str	r3, [r7, #24]
 800c680:	e010      	b.n	800c6a4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d10c      	bne.n	800c6a4 <osThreadNew+0xca>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d108      	bne.n	800c6a4 <osThreadNew+0xca>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d104      	bne.n	800c6a4 <osThreadNew+0xca>
          mem = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	61bb      	str	r3, [r7, #24]
 800c69e:	e001      	b.n	800c6a4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d110      	bne.n	800c6cc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6b2:	9202      	str	r2, [sp, #8]
 800c6b4:	9301      	str	r3, [sp, #4]
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	6a3a      	ldr	r2, [r7, #32]
 800c6be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f001 fb7f 	bl	800ddc4 <xTaskCreateStatic>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	613b      	str	r3, [r7, #16]
 800c6ca:	e013      	b.n	800c6f4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d110      	bne.n	800c6f4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c6d2:	6a3b      	ldr	r3, [r7, #32]
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	f107 0310 	add.w	r3, r7, #16
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f001 fbca 	bl	800de7e <xTaskCreate>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d001      	beq.n	800c6f4 <osThreadNew+0x11a>
            hTask = NULL;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c6f4:	693b      	ldr	r3, [r7, #16]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3728      	adds	r7, #40	; 0x28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c706:	f3ef 8305 	mrs	r3, IPSR
 800c70a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c70c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <osDelay+0x1c>
    stat = osErrorISR;
 800c712:	f06f 0305 	mvn.w	r3, #5
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	e007      	b.n	800c72a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <osDelay+0x2c>
      vTaskDelay(ticks);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f001 fcef 	bl	800e108 <vTaskDelay>
    }
  }

  return (stat);
 800c72a:	68fb      	ldr	r3, [r7, #12]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c734:	b580      	push	{r7, lr}
 800c736:	b08a      	sub	sp, #40	; 0x28
 800c738:	af02      	add	r7, sp, #8
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c740:	2300      	movs	r3, #0
 800c742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c744:	f3ef 8305 	mrs	r3, IPSR
 800c748:	613b      	str	r3, [r7, #16]
  return(result);
 800c74a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d175      	bne.n	800c83c <osSemaphoreNew+0x108>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d072      	beq.n	800c83c <osSemaphoreNew+0x108>
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d86e      	bhi.n	800c83c <osSemaphoreNew+0x108>
    mem = -1;
 800c75e:	f04f 33ff 	mov.w	r3, #4294967295
 800c762:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d015      	beq.n	800c796 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d006      	beq.n	800c780 <osSemaphoreNew+0x4c>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	2b4f      	cmp	r3, #79	; 0x4f
 800c778:	d902      	bls.n	800c780 <osSemaphoreNew+0x4c>
        mem = 1;
 800c77a:	2301      	movs	r3, #1
 800c77c:	61bb      	str	r3, [r7, #24]
 800c77e:	e00c      	b.n	800c79a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d108      	bne.n	800c79a <osSemaphoreNew+0x66>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d104      	bne.n	800c79a <osSemaphoreNew+0x66>
          mem = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	61bb      	str	r3, [r7, #24]
 800c794:	e001      	b.n	800c79a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a0:	d04c      	beq.n	800c83c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d128      	bne.n	800c7fa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d10a      	bne.n	800c7c4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	2203      	movs	r2, #3
 800c7b4:	9200      	str	r2, [sp, #0]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	f000 fb5c 	bl	800ce78 <xQueueGenericCreateStatic>
 800c7c0:	61f8      	str	r0, [r7, #28]
 800c7c2:	e005      	b.n	800c7d0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c7c4:	2203      	movs	r2, #3
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	2001      	movs	r0, #1
 800c7ca:	f000 fbcd 	bl	800cf68 <xQueueGenericCreate>
 800c7ce:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d022      	beq.n	800c81c <osSemaphoreNew+0xe8>
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d01f      	beq.n	800c81c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c7dc:	2300      	movs	r3, #0
 800c7de:	2200      	movs	r2, #0
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	69f8      	ldr	r0, [r7, #28]
 800c7e4:	f000 fc88 	bl	800d0f8 <xQueueGenericSend>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d016      	beq.n	800c81c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c7ee:	69f8      	ldr	r0, [r7, #28]
 800c7f0:	f001 f914 	bl	800da1c <vQueueDelete>
            hSemaphore = NULL;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	61fb      	str	r3, [r7, #28]
 800c7f8:	e010      	b.n	800c81c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d108      	bne.n	800c812 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	461a      	mov	r2, r3
 800c806:	68b9      	ldr	r1, [r7, #8]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f000 fc0a 	bl	800d022 <xQueueCreateCountingSemaphoreStatic>
 800c80e:	61f8      	str	r0, [r7, #28]
 800c810:	e004      	b.n	800c81c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c812:	68b9      	ldr	r1, [r7, #8]
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 fc3b 	bl	800d090 <xQueueCreateCountingSemaphore>
 800c81a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00c      	beq.n	800c83c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	617b      	str	r3, [r7, #20]
 800c82e:	e001      	b.n	800c834 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c830:	2300      	movs	r3, #0
 800c832:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c834:	6979      	ldr	r1, [r7, #20]
 800c836:	69f8      	ldr	r0, [r7, #28]
 800c838:	f001 fa3c 	bl	800dcb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c83c:	69fb      	ldr	r3, [r7, #28]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3720      	adds	r7, #32
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c856:	2300      	movs	r3, #0
 800c858:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d103      	bne.n	800c868 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c860:	f06f 0303 	mvn.w	r3, #3
 800c864:	617b      	str	r3, [r7, #20]
 800c866:	e039      	b.n	800c8dc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c868:	f3ef 8305 	mrs	r3, IPSR
 800c86c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c86e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c870:	2b00      	cmp	r3, #0
 800c872:	d022      	beq.n	800c8ba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c87a:	f06f 0303 	mvn.w	r3, #3
 800c87e:	617b      	str	r3, [r7, #20]
 800c880:	e02c      	b.n	800c8dc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c882:	2300      	movs	r3, #0
 800c884:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c886:	f107 0308 	add.w	r3, r7, #8
 800c88a:	461a      	mov	r2, r3
 800c88c:	2100      	movs	r1, #0
 800c88e:	6938      	ldr	r0, [r7, #16]
 800c890:	f001 f844 	bl	800d91c <xQueueReceiveFromISR>
 800c894:	4603      	mov	r3, r0
 800c896:	2b01      	cmp	r3, #1
 800c898:	d003      	beq.n	800c8a2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c89a:	f06f 0302 	mvn.w	r3, #2
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e01c      	b.n	800c8dc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d019      	beq.n	800c8dc <osSemaphoreAcquire+0x94>
 800c8a8:	4b0f      	ldr	r3, [pc, #60]	; (800c8e8 <osSemaphoreAcquire+0xa0>)
 800c8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	e010      	b.n	800c8dc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	6938      	ldr	r0, [r7, #16]
 800c8be:	f000 ff21 	bl	800d704 <xQueueSemaphoreTake>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d009      	beq.n	800c8dc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d003      	beq.n	800c8d6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c8ce:	f06f 0301 	mvn.w	r3, #1
 800c8d2:	617b      	str	r3, [r7, #20]
 800c8d4:	e002      	b.n	800c8dc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c8d6:	f06f 0302 	mvn.w	r3, #2
 800c8da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c8dc:	697b      	ldr	r3, [r7, #20]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3718      	adds	r7, #24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	e000ed04 	.word	0xe000ed04

0800c8ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d103      	bne.n	800c90a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c902:	f06f 0303 	mvn.w	r3, #3
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	e02c      	b.n	800c964 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c90a:	f3ef 8305 	mrs	r3, IPSR
 800c90e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c910:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c912:	2b00      	cmp	r3, #0
 800c914:	d01a      	beq.n	800c94c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c916:	2300      	movs	r3, #0
 800c918:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c91a:	f107 0308 	add.w	r3, r7, #8
 800c91e:	4619      	mov	r1, r3
 800c920:	6938      	ldr	r0, [r7, #16]
 800c922:	f000 fd82 	bl	800d42a <xQueueGiveFromISR>
 800c926:	4603      	mov	r3, r0
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d003      	beq.n	800c934 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c92c:	f06f 0302 	mvn.w	r3, #2
 800c930:	617b      	str	r3, [r7, #20]
 800c932:	e017      	b.n	800c964 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d014      	beq.n	800c964 <osSemaphoreRelease+0x78>
 800c93a:	4b0d      	ldr	r3, [pc, #52]	; (800c970 <osSemaphoreRelease+0x84>)
 800c93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	e00b      	b.n	800c964 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c94c:	2300      	movs	r3, #0
 800c94e:	2200      	movs	r2, #0
 800c950:	2100      	movs	r1, #0
 800c952:	6938      	ldr	r0, [r7, #16]
 800c954:	f000 fbd0 	bl	800d0f8 <xQueueGenericSend>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d002      	beq.n	800c964 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c95e:	f06f 0302 	mvn.w	r3, #2
 800c962:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c964:	697b      	ldr	r3, [r7, #20]
}
 800c966:	4618      	mov	r0, r3
 800c968:	3718      	adds	r7, #24
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	e000ed04 	.word	0xe000ed04

0800c974 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c974:	b580      	push	{r7, lr}
 800c976:	b08a      	sub	sp, #40	; 0x28
 800c978:	af02      	add	r7, sp, #8
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c980:	2300      	movs	r3, #0
 800c982:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c984:	f3ef 8305 	mrs	r3, IPSR
 800c988:	613b      	str	r3, [r7, #16]
  return(result);
 800c98a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d15f      	bne.n	800ca50 <osMessageQueueNew+0xdc>
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d05c      	beq.n	800ca50 <osMessageQueueNew+0xdc>
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d059      	beq.n	800ca50 <osMessageQueueNew+0xdc>
    mem = -1;
 800c99c:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d029      	beq.n	800c9fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d012      	beq.n	800c9d6 <osMessageQueueNew+0x62>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	2b4f      	cmp	r3, #79	; 0x4f
 800c9b6:	d90e      	bls.n	800c9d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00a      	beq.n	800c9d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	695a      	ldr	r2, [r3, #20]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	68b9      	ldr	r1, [r7, #8]
 800c9c8:	fb01 f303 	mul.w	r3, r1, r3
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d302      	bcc.n	800c9d6 <osMessageQueueNew+0x62>
        mem = 1;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	61bb      	str	r3, [r7, #24]
 800c9d4:	e014      	b.n	800ca00 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d110      	bne.n	800ca00 <osMessageQueueNew+0x8c>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10c      	bne.n	800ca00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d108      	bne.n	800ca00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	695b      	ldr	r3, [r3, #20]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d104      	bne.n	800ca00 <osMessageQueueNew+0x8c>
          mem = 0;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	61bb      	str	r3, [r7, #24]
 800c9fa:	e001      	b.n	800ca00 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d10b      	bne.n	800ca1e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	691a      	ldr	r2, [r3, #16]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	2100      	movs	r1, #0
 800ca10:	9100      	str	r1, [sp, #0]
 800ca12:	68b9      	ldr	r1, [r7, #8]
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	f000 fa2f 	bl	800ce78 <xQueueGenericCreateStatic>
 800ca1a:	61f8      	str	r0, [r7, #28]
 800ca1c:	e008      	b.n	800ca30 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d105      	bne.n	800ca30 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ca24:	2200      	movs	r2, #0
 800ca26:	68b9      	ldr	r1, [r7, #8]
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f000 fa9d 	bl	800cf68 <xQueueGenericCreate>
 800ca2e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00c      	beq.n	800ca50 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	617b      	str	r3, [r7, #20]
 800ca42:	e001      	b.n	800ca48 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ca44:	2300      	movs	r3, #0
 800ca46:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ca48:	6979      	ldr	r1, [r7, #20]
 800ca4a:	69f8      	ldr	r0, [r7, #28]
 800ca4c:	f001 f932 	bl	800dcb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ca50:	69fb      	ldr	r3, [r7, #28]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3720      	adds	r7, #32
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
	...

0800ca5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b088      	sub	sp, #32
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca74:	f3ef 8305 	mrs	r3, IPSR
 800ca78:	617b      	str	r3, [r7, #20]
  return(result);
 800ca7a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d028      	beq.n	800cad2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d005      	beq.n	800ca92 <osMessageQueuePut+0x36>
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <osMessageQueuePut+0x36>
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d003      	beq.n	800ca9a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ca92:	f06f 0303 	mvn.w	r3, #3
 800ca96:	61fb      	str	r3, [r7, #28]
 800ca98:	e038      	b.n	800cb0c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ca9e:	f107 0210 	add.w	r2, r7, #16
 800caa2:	2300      	movs	r3, #0
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	69b8      	ldr	r0, [r7, #24]
 800caa8:	f000 fc24 	bl	800d2f4 <xQueueGenericSendFromISR>
 800caac:	4603      	mov	r3, r0
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d003      	beq.n	800caba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cab2:	f06f 0302 	mvn.w	r3, #2
 800cab6:	61fb      	str	r3, [r7, #28]
 800cab8:	e028      	b.n	800cb0c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d025      	beq.n	800cb0c <osMessageQueuePut+0xb0>
 800cac0:	4b15      	ldr	r3, [pc, #84]	; (800cb18 <osMessageQueuePut+0xbc>)
 800cac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	e01c      	b.n	800cb0c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <osMessageQueuePut+0x82>
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d103      	bne.n	800cae6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cade:	f06f 0303 	mvn.w	r3, #3
 800cae2:	61fb      	str	r3, [r7, #28]
 800cae4:	e012      	b.n	800cb0c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cae6:	2300      	movs	r3, #0
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	68b9      	ldr	r1, [r7, #8]
 800caec:	69b8      	ldr	r0, [r7, #24]
 800caee:	f000 fb03 	bl	800d0f8 <xQueueGenericSend>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d009      	beq.n	800cb0c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d003      	beq.n	800cb06 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cafe:	f06f 0301 	mvn.w	r3, #1
 800cb02:	61fb      	str	r3, [r7, #28]
 800cb04:	e002      	b.n	800cb0c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cb06:	f06f 0302 	mvn.w	r3, #2
 800cb0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cb0c:	69fb      	ldr	r3, [r7, #28]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3720      	adds	r7, #32
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	e000ed04 	.word	0xe000ed04

0800cb1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b088      	sub	sp, #32
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb32:	f3ef 8305 	mrs	r3, IPSR
 800cb36:	617b      	str	r3, [r7, #20]
  return(result);
 800cb38:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d028      	beq.n	800cb90 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <osMessageQueueGet+0x34>
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <osMessageQueueGet+0x34>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d003      	beq.n	800cb58 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cb50:	f06f 0303 	mvn.w	r3, #3
 800cb54:	61fb      	str	r3, [r7, #28]
 800cb56:	e037      	b.n	800cbc8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cb5c:	f107 0310 	add.w	r3, r7, #16
 800cb60:	461a      	mov	r2, r3
 800cb62:	68b9      	ldr	r1, [r7, #8]
 800cb64:	69b8      	ldr	r0, [r7, #24]
 800cb66:	f000 fed9 	bl	800d91c <xQueueReceiveFromISR>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d003      	beq.n	800cb78 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cb70:	f06f 0302 	mvn.w	r3, #2
 800cb74:	61fb      	str	r3, [r7, #28]
 800cb76:	e027      	b.n	800cbc8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d024      	beq.n	800cbc8 <osMessageQueueGet+0xac>
 800cb7e:	4b15      	ldr	r3, [pc, #84]	; (800cbd4 <osMessageQueueGet+0xb8>)
 800cb80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	e01b      	b.n	800cbc8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d002      	beq.n	800cb9c <osMessageQueueGet+0x80>
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d103      	bne.n	800cba4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cb9c:	f06f 0303 	mvn.w	r3, #3
 800cba0:	61fb      	str	r3, [r7, #28]
 800cba2:	e011      	b.n	800cbc8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cba4:	683a      	ldr	r2, [r7, #0]
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	69b8      	ldr	r0, [r7, #24]
 800cbaa:	f000 fccb 	bl	800d544 <xQueueReceive>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d009      	beq.n	800cbc8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cbba:	f06f 0301 	mvn.w	r3, #1
 800cbbe:	61fb      	str	r3, [r7, #28]
 800cbc0:	e002      	b.n	800cbc8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cbc2:	f06f 0302 	mvn.w	r3, #2
 800cbc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cbc8:	69fb      	ldr	r3, [r7, #28]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3720      	adds	r7, #32
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	e000ed04 	.word	0xe000ed04

0800cbd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4a07      	ldr	r2, [pc, #28]	; (800cc04 <vApplicationGetIdleTaskMemory+0x2c>)
 800cbe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	4a06      	ldr	r2, [pc, #24]	; (800cc08 <vApplicationGetIdleTaskMemory+0x30>)
 800cbee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2280      	movs	r2, #128	; 0x80
 800cbf4:	601a      	str	r2, [r3, #0]
}
 800cbf6:	bf00      	nop
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	20000118 	.word	0x20000118
 800cc08:	20000174 	.word	0x20000174

0800cc0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	4a07      	ldr	r2, [pc, #28]	; (800cc38 <vApplicationGetTimerTaskMemory+0x2c>)
 800cc1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	4a06      	ldr	r2, [pc, #24]	; (800cc3c <vApplicationGetTimerTaskMemory+0x30>)
 800cc22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc2a:	601a      	str	r2, [r3, #0]
}
 800cc2c:	bf00      	nop
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr
 800cc38:	20000374 	.word	0x20000374
 800cc3c:	200003d0 	.word	0x200003d0

0800cc40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f103 0208 	add.w	r2, r3, #8
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f04f 32ff 	mov.w	r2, #4294967295
 800cc58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f103 0208 	add.w	r2, r3, #8
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f103 0208 	add.w	r2, r3, #8
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc8e:	bf00      	nop
 800cc90:	370c      	adds	r7, #12
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b085      	sub	sp, #20
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	689a      	ldr	r2, [r3, #8]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	601a      	str	r2, [r3, #0]
}
 800ccd6:	bf00      	nop
 800ccd8:	3714      	adds	r7, #20
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cce2:	b480      	push	{r7}
 800cce4:	b085      	sub	sp, #20
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf8:	d103      	bne.n	800cd02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	e00c      	b.n	800cd1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3308      	adds	r3, #8
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	e002      	b.n	800cd10 <vListInsert+0x2e>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d2f6      	bcs.n	800cd0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	1c5a      	adds	r2, r3, #1
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	601a      	str	r2, [r3, #0]
}
 800cd48:	bf00      	nop
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6892      	ldr	r2, [r2, #8]
 800cd6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	6852      	ldr	r2, [r2, #4]
 800cd74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d103      	bne.n	800cd88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	689a      	ldr	r2, [r3, #8]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	1e5a      	subs	r2, r3, #1
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10a      	bne.n	800cdd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cdd2:	f002 fc7f 	bl	800f6d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cde2:	fb01 f303 	mul.w	r3, r1, r3
 800cde6:	441a      	add	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce02:	3b01      	subs	r3, #1
 800ce04:	68f9      	ldr	r1, [r7, #12]
 800ce06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce08:	fb01 f303 	mul.w	r3, r1, r3
 800ce0c:	441a      	add	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	22ff      	movs	r2, #255	; 0xff
 800ce16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	22ff      	movs	r2, #255	; 0xff
 800ce1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d114      	bne.n	800ce52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d01a      	beq.n	800ce66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3310      	adds	r3, #16
 800ce34:	4618      	mov	r0, r3
 800ce36:	f001 fc37 	bl	800e6a8 <xTaskRemoveFromEventList>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d012      	beq.n	800ce66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce40:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <xQueueGenericReset+0xcc>)
 800ce42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	e009      	b.n	800ce66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3310      	adds	r3, #16
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff fef2 	bl	800cc40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3324      	adds	r3, #36	; 0x24
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff feed 	bl	800cc40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce66:	f002 fc65 	bl	800f734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce6a:	2301      	movs	r3, #1
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08e      	sub	sp, #56	; 0x38
 800ce7c:	af02      	add	r7, sp, #8
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
 800ce84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10a      	bne.n	800cea2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce9e:	bf00      	nop
 800cea0:	e7fe      	b.n	800cea0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10a      	bne.n	800cebe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ceba:	bf00      	nop
 800cebc:	e7fe      	b.n	800cebc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <xQueueGenericCreateStatic+0x52>
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <xQueueGenericCreateStatic+0x56>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e000      	b.n	800ced0 <xQueueGenericCreateStatic+0x58>
 800cece:	2300      	movs	r3, #0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	623b      	str	r3, [r7, #32]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <xQueueGenericCreateStatic+0x7e>
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <xQueueGenericCreateStatic+0x82>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e000      	b.n	800cefc <xQueueGenericCreateStatic+0x84>
 800cefa:	2300      	movs	r3, #0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10a      	bne.n	800cf16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	61fb      	str	r3, [r7, #28]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf16:	2350      	movs	r3, #80	; 0x50
 800cf18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2b50      	cmp	r3, #80	; 0x50
 800cf1e:	d00a      	beq.n	800cf36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	61bb      	str	r3, [r7, #24]
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00d      	beq.n	800cf5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	4613      	mov	r3, r2
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f000 f83f 	bl	800cfdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3730      	adds	r7, #48	; 0x30
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	4613      	mov	r3, r2
 800cf74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10a      	bne.n	800cf92 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	613b      	str	r3, [r7, #16]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	fb02 f303 	mul.w	r3, r2, r3
 800cf9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	3350      	adds	r3, #80	; 0x50
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f002 fcb9 	bl	800f918 <pvPortMalloc>
 800cfa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d011      	beq.n	800cfd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	3350      	adds	r3, #80	; 0x50
 800cfb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfc0:	79fa      	ldrb	r2, [r7, #7]
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f000 f805 	bl	800cfdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfd2:	69bb      	ldr	r3, [r7, #24]
	}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3720      	adds	r7, #32
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d103      	bne.n	800cff8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	69ba      	ldr	r2, [r7, #24]
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	e002      	b.n	800cffe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	68ba      	ldr	r2, [r7, #8]
 800d008:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d00a:	2101      	movs	r1, #1
 800d00c:	69b8      	ldr	r0, [r7, #24]
 800d00e:	f7ff fecb 	bl	800cda8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	78fa      	ldrb	r2, [r7, #3]
 800d016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d01a:	bf00      	nop
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d022:	b580      	push	{r7, lr}
 800d024:	b08a      	sub	sp, #40	; 0x28
 800d026:	af02      	add	r7, sp, #8
 800d028:	60f8      	str	r0, [r7, #12]
 800d02a:	60b9      	str	r1, [r7, #8]
 800d02c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10a      	bne.n	800d04a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d038:	f383 8811 	msr	BASEPRI, r3
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	61bb      	str	r3, [r7, #24]
}
 800d046:	bf00      	nop
 800d048:	e7fe      	b.n	800d048 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d90a      	bls.n	800d068 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	617b      	str	r3, [r7, #20]
}
 800d064:	bf00      	nop
 800d066:	e7fe      	b.n	800d066 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d068:	2302      	movs	r3, #2
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	2100      	movs	r1, #0
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f7ff ff00 	bl	800ce78 <xQueueGenericCreateStatic>
 800d078:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d086:	69fb      	ldr	r3, [r7, #28]
	}
 800d088:	4618      	mov	r0, r3
 800d08a:	3720      	adds	r7, #32
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10a      	bne.n	800d0b6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a4:	f383 8811 	msr	BASEPRI, r3
 800d0a8:	f3bf 8f6f 	isb	sy
 800d0ac:	f3bf 8f4f 	dsb	sy
 800d0b0:	613b      	str	r3, [r7, #16]
}
 800d0b2:	bf00      	nop
 800d0b4:	e7fe      	b.n	800d0b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d90a      	bls.n	800d0d4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	60fb      	str	r3, [r7, #12]
}
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0d4:	2202      	movs	r2, #2
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff ff45 	bl	800cf68 <xQueueGenericCreate>
 800d0de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	683a      	ldr	r2, [r7, #0]
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0ec:	697b      	ldr	r3, [r7, #20]
	}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3718      	adds	r7, #24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
	...

0800d0f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08e      	sub	sp, #56	; 0x38
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
 800d104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d106:	2300      	movs	r3, #0
 800d108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10a      	bne.n	800d12a <xQueueGenericSend+0x32>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d126:	bf00      	nop
 800d128:	e7fe      	b.n	800d128 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d103      	bne.n	800d138 <xQueueGenericSend+0x40>
 800d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d134:	2b00      	cmp	r3, #0
 800d136:	d101      	bne.n	800d13c <xQueueGenericSend+0x44>
 800d138:	2301      	movs	r3, #1
 800d13a:	e000      	b.n	800d13e <xQueueGenericSend+0x46>
 800d13c:	2300      	movs	r3, #0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10a      	bne.n	800d158 <xQueueGenericSend+0x60>
	__asm volatile
 800d142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d146:	f383 8811 	msr	BASEPRI, r3
 800d14a:	f3bf 8f6f 	isb	sy
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d154:	bf00      	nop
 800d156:	e7fe      	b.n	800d156 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d103      	bne.n	800d166 <xQueueGenericSend+0x6e>
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d162:	2b01      	cmp	r3, #1
 800d164:	d101      	bne.n	800d16a <xQueueGenericSend+0x72>
 800d166:	2301      	movs	r3, #1
 800d168:	e000      	b.n	800d16c <xQueueGenericSend+0x74>
 800d16a:	2300      	movs	r3, #0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10a      	bne.n	800d186 <xQueueGenericSend+0x8e>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	623b      	str	r3, [r7, #32]
}
 800d182:	bf00      	nop
 800d184:	e7fe      	b.n	800d184 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d186:	f001 fc4d 	bl	800ea24 <xTaskGetSchedulerState>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d102      	bne.n	800d196 <xQueueGenericSend+0x9e>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <xQueueGenericSend+0xa2>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <xQueueGenericSend+0xa4>
 800d19a:	2300      	movs	r3, #0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10a      	bne.n	800d1b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	61fb      	str	r3, [r7, #28]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1b6:	f002 fa8d 	bl	800f6d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d302      	bcc.n	800d1cc <xQueueGenericSend+0xd4>
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d129      	bne.n	800d220 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	68b9      	ldr	r1, [r7, #8]
 800d1d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1d2:	f000 fc5e 	bl	800da92 <prvCopyDataToQueue>
 800d1d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d010      	beq.n	800d202 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e2:	3324      	adds	r3, #36	; 0x24
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f001 fa5f 	bl	800e6a8 <xTaskRemoveFromEventList>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d013      	beq.n	800d218 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1f0:	4b3f      	ldr	r3, [pc, #252]	; (800d2f0 <xQueueGenericSend+0x1f8>)
 800d1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	e00a      	b.n	800d218 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d204:	2b00      	cmp	r3, #0
 800d206:	d007      	beq.n	800d218 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d208:	4b39      	ldr	r3, [pc, #228]	; (800d2f0 <xQueueGenericSend+0x1f8>)
 800d20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d218:	f002 fa8c 	bl	800f734 <vPortExitCritical>
				return pdPASS;
 800d21c:	2301      	movs	r3, #1
 800d21e:	e063      	b.n	800d2e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d103      	bne.n	800d22e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d226:	f002 fa85 	bl	800f734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	e05c      	b.n	800d2e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d230:	2b00      	cmp	r3, #0
 800d232:	d106      	bne.n	800d242 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d234:	f107 0314 	add.w	r3, r7, #20
 800d238:	4618      	mov	r0, r3
 800d23a:	f001 fa99 	bl	800e770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d23e:	2301      	movs	r3, #1
 800d240:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d242:	f002 fa77 	bl	800f734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d246:	f000 fff9 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d24a:	f002 fa43 	bl	800f6d4 <vPortEnterCritical>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d254:	b25b      	sxtb	r3, r3
 800d256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25a:	d103      	bne.n	800d264 <xQueueGenericSend+0x16c>
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	2200      	movs	r2, #0
 800d260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d26a:	b25b      	sxtb	r3, r3
 800d26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d270:	d103      	bne.n	800d27a <xQueueGenericSend+0x182>
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	2200      	movs	r2, #0
 800d276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d27a:	f002 fa5b 	bl	800f734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d27e:	1d3a      	adds	r2, r7, #4
 800d280:	f107 0314 	add.w	r3, r7, #20
 800d284:	4611      	mov	r1, r2
 800d286:	4618      	mov	r0, r3
 800d288:	f001 fa88 	bl	800e79c <xTaskCheckForTimeOut>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d124      	bne.n	800d2dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d294:	f000 fcf5 	bl	800dc82 <prvIsQueueFull>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d018      	beq.n	800d2d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a0:	3310      	adds	r3, #16
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f001 f9ae 	bl	800e608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ae:	f000 fc80 	bl	800dbb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2b2:	f000 ffd1 	bl	800e258 <xTaskResumeAll>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f47f af7c 	bne.w	800d1b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d2be:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <xQueueGenericSend+0x1f8>)
 800d2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	e772      	b.n	800d1b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2d2:	f000 fc6e 	bl	800dbb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2d6:	f000 ffbf 	bl	800e258 <xTaskResumeAll>
 800d2da:	e76c      	b.n	800d1b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2de:	f000 fc68 	bl	800dbb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2e2:	f000 ffb9 	bl	800e258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3738      	adds	r7, #56	; 0x38
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	e000ed04 	.word	0xe000ed04

0800d2f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b090      	sub	sp, #64	; 0x40
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
 800d300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10a      	bne.n	800d322 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d103      	bne.n	800d330 <xQueueGenericSendFromISR+0x3c>
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d101      	bne.n	800d334 <xQueueGenericSendFromISR+0x40>
 800d330:	2301      	movs	r3, #1
 800d332:	e000      	b.n	800d336 <xQueueGenericSendFromISR+0x42>
 800d334:	2300      	movs	r3, #0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10a      	bne.n	800d350 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d34c:	bf00      	nop
 800d34e:	e7fe      	b.n	800d34e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2b02      	cmp	r3, #2
 800d354:	d103      	bne.n	800d35e <xQueueGenericSendFromISR+0x6a>
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d101      	bne.n	800d362 <xQueueGenericSendFromISR+0x6e>
 800d35e:	2301      	movs	r3, #1
 800d360:	e000      	b.n	800d364 <xQueueGenericSendFromISR+0x70>
 800d362:	2300      	movs	r3, #0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10a      	bne.n	800d37e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	623b      	str	r3, [r7, #32]
}
 800d37a:	bf00      	nop
 800d37c:	e7fe      	b.n	800d37c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d37e:	f002 fa8b 	bl	800f898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d382:	f3ef 8211 	mrs	r2, BASEPRI
 800d386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	61fa      	str	r2, [r7, #28]
 800d398:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d39a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d39c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d302      	bcc.n	800d3b0 <xQueueGenericSendFromISR+0xbc>
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d12f      	bne.n	800d410 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	68b9      	ldr	r1, [r7, #8]
 800d3c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3c6:	f000 fb64 	bl	800da92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d112      	bne.n	800d3fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d016      	beq.n	800d40a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3de:	3324      	adds	r3, #36	; 0x24
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f001 f961 	bl	800e6a8 <xTaskRemoveFromEventList>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00e      	beq.n	800d40a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00b      	beq.n	800d40a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	e007      	b.n	800d40a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3fe:	3301      	adds	r3, #1
 800d400:	b2db      	uxtb	r3, r3
 800d402:	b25a      	sxtb	r2, r3
 800d404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d40a:	2301      	movs	r3, #1
 800d40c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d40e:	e001      	b.n	800d414 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d410:	2300      	movs	r3, #0
 800d412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d416:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d41e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d422:	4618      	mov	r0, r3
 800d424:	3740      	adds	r7, #64	; 0x40
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b08e      	sub	sp, #56	; 0x38
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10a      	bne.n	800d454 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	623b      	str	r3, [r7, #32]
}
 800d450:	bf00      	nop
 800d452:	e7fe      	b.n	800d452 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00a      	beq.n	800d472 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	61fb      	str	r3, [r7, #28]
}
 800d46e:	bf00      	nop
 800d470:	e7fe      	b.n	800d470 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d103      	bne.n	800d482 <xQueueGiveFromISR+0x58>
 800d47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d101      	bne.n	800d486 <xQueueGiveFromISR+0x5c>
 800d482:	2301      	movs	r3, #1
 800d484:	e000      	b.n	800d488 <xQueueGiveFromISR+0x5e>
 800d486:	2300      	movs	r3, #0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d10a      	bne.n	800d4a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	61bb      	str	r3, [r7, #24]
}
 800d49e:	bf00      	nop
 800d4a0:	e7fe      	b.n	800d4a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4a2:	f002 f9f9 	bl	800f898 <vPortValidateInterruptPriority>
	__asm volatile
 800d4a6:	f3ef 8211 	mrs	r2, BASEPRI
 800d4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	617a      	str	r2, [r7, #20]
 800d4bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d4be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d22b      	bcs.n	800d52a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ec:	d112      	bne.n	800d514 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d016      	beq.n	800d524 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	3324      	adds	r3, #36	; 0x24
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f001 f8d4 	bl	800e6a8 <xTaskRemoveFromEventList>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00e      	beq.n	800d524 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00b      	beq.n	800d524 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2201      	movs	r2, #1
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	e007      	b.n	800d524 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d518:	3301      	adds	r3, #1
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	b25a      	sxtb	r2, r3
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d524:	2301      	movs	r3, #1
 800d526:	637b      	str	r3, [r7, #52]	; 0x34
 800d528:	e001      	b.n	800d52e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	637b      	str	r3, [r7, #52]	; 0x34
 800d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d530:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f383 8811 	msr	BASEPRI, r3
}
 800d538:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3738      	adds	r7, #56	; 0x38
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08c      	sub	sp, #48	; 0x30
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d550:	2300      	movs	r3, #0
 800d552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10a      	bne.n	800d574 <xQueueReceive+0x30>
	__asm volatile
 800d55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	623b      	str	r3, [r7, #32]
}
 800d570:	bf00      	nop
 800d572:	e7fe      	b.n	800d572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d103      	bne.n	800d582 <xQueueReceive+0x3e>
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d101      	bne.n	800d586 <xQueueReceive+0x42>
 800d582:	2301      	movs	r3, #1
 800d584:	e000      	b.n	800d588 <xQueueReceive+0x44>
 800d586:	2300      	movs	r3, #0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10a      	bne.n	800d5a2 <xQueueReceive+0x5e>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	61fb      	str	r3, [r7, #28]
}
 800d59e:	bf00      	nop
 800d5a0:	e7fe      	b.n	800d5a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5a2:	f001 fa3f 	bl	800ea24 <xTaskGetSchedulerState>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d102      	bne.n	800d5b2 <xQueueReceive+0x6e>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <xQueueReceive+0x72>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e000      	b.n	800d5b8 <xQueueReceive+0x74>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10a      	bne.n	800d5d2 <xQueueReceive+0x8e>
	__asm volatile
 800d5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	61bb      	str	r3, [r7, #24]
}
 800d5ce:	bf00      	nop
 800d5d0:	e7fe      	b.n	800d5d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5d2:	f002 f87f 	bl	800f6d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d01f      	beq.n	800d622 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5e2:	68b9      	ldr	r1, [r7, #8]
 800d5e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5e6:	f000 fabe 	bl	800db66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	1e5a      	subs	r2, r3, #1
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	691b      	ldr	r3, [r3, #16]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00f      	beq.n	800d61a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	3310      	adds	r3, #16
 800d5fe:	4618      	mov	r0, r3
 800d600:	f001 f852 	bl	800e6a8 <xTaskRemoveFromEventList>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d007      	beq.n	800d61a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d60a:	4b3d      	ldr	r3, [pc, #244]	; (800d700 <xQueueReceive+0x1bc>)
 800d60c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d61a:	f002 f88b 	bl	800f734 <vPortExitCritical>
				return pdPASS;
 800d61e:	2301      	movs	r3, #1
 800d620:	e069      	b.n	800d6f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d103      	bne.n	800d630 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d628:	f002 f884 	bl	800f734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d62c:	2300      	movs	r3, #0
 800d62e:	e062      	b.n	800d6f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d632:	2b00      	cmp	r3, #0
 800d634:	d106      	bne.n	800d644 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d636:	f107 0310 	add.w	r3, r7, #16
 800d63a:	4618      	mov	r0, r3
 800d63c:	f001 f898 	bl	800e770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d640:	2301      	movs	r3, #1
 800d642:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d644:	f002 f876 	bl	800f734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d648:	f000 fdf8 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d64c:	f002 f842 	bl	800f6d4 <vPortEnterCritical>
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d656:	b25b      	sxtb	r3, r3
 800d658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65c:	d103      	bne.n	800d666 <xQueueReceive+0x122>
 800d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d660:	2200      	movs	r2, #0
 800d662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d66c:	b25b      	sxtb	r3, r3
 800d66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d672:	d103      	bne.n	800d67c <xQueueReceive+0x138>
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	2200      	movs	r2, #0
 800d678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d67c:	f002 f85a 	bl	800f734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d680:	1d3a      	adds	r2, r7, #4
 800d682:	f107 0310 	add.w	r3, r7, #16
 800d686:	4611      	mov	r1, r2
 800d688:	4618      	mov	r0, r3
 800d68a:	f001 f887 	bl	800e79c <xTaskCheckForTimeOut>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d123      	bne.n	800d6dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d696:	f000 fade 	bl	800dc56 <prvIsQueueEmpty>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d017      	beq.n	800d6d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a2:	3324      	adds	r3, #36	; 0x24
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 ffad 	bl	800e608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6b0:	f000 fa7f 	bl	800dbb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6b4:	f000 fdd0 	bl	800e258 <xTaskResumeAll>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d189      	bne.n	800d5d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d6be:	4b10      	ldr	r3, [pc, #64]	; (800d700 <xQueueReceive+0x1bc>)
 800d6c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6c4:	601a      	str	r2, [r3, #0]
 800d6c6:	f3bf 8f4f 	dsb	sy
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	e780      	b.n	800d5d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6d2:	f000 fa6e 	bl	800dbb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6d6:	f000 fdbf 	bl	800e258 <xTaskResumeAll>
 800d6da:	e77a      	b.n	800d5d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6de:	f000 fa68 	bl	800dbb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6e2:	f000 fdb9 	bl	800e258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6e8:	f000 fab5 	bl	800dc56 <prvIsQueueEmpty>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f43f af6f 	beq.w	800d5d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3730      	adds	r7, #48	; 0x30
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	e000ed04 	.word	0xe000ed04

0800d704 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08e      	sub	sp, #56	; 0x38
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d70e:	2300      	movs	r3, #0
 800d710:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d716:	2300      	movs	r3, #0
 800d718:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10a      	bne.n	800d736 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	623b      	str	r3, [r7, #32]
}
 800d732:	bf00      	nop
 800d734:	e7fe      	b.n	800d734 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00a      	beq.n	800d754 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d742:	f383 8811 	msr	BASEPRI, r3
 800d746:	f3bf 8f6f 	isb	sy
 800d74a:	f3bf 8f4f 	dsb	sy
 800d74e:	61fb      	str	r3, [r7, #28]
}
 800d750:	bf00      	nop
 800d752:	e7fe      	b.n	800d752 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d754:	f001 f966 	bl	800ea24 <xTaskGetSchedulerState>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d102      	bne.n	800d764 <xQueueSemaphoreTake+0x60>
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d101      	bne.n	800d768 <xQueueSemaphoreTake+0x64>
 800d764:	2301      	movs	r3, #1
 800d766:	e000      	b.n	800d76a <xQueueSemaphoreTake+0x66>
 800d768:	2300      	movs	r3, #0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10a      	bne.n	800d784 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	61bb      	str	r3, [r7, #24]
}
 800d780:	bf00      	nop
 800d782:	e7fe      	b.n	800d782 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d784:	f001 ffa6 	bl	800f6d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	2b00      	cmp	r3, #0
 800d792:	d024      	beq.n	800d7de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	1e5a      	subs	r2, r3, #1
 800d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d104      	bne.n	800d7ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d7a4:	f001 fab4 	bl	800ed10 <pvTaskIncrementMutexHeldCount>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00f      	beq.n	800d7d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	3310      	adds	r3, #16
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f000 ff74 	bl	800e6a8 <xTaskRemoveFromEventList>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d007      	beq.n	800d7d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7c6:	4b54      	ldr	r3, [pc, #336]	; (800d918 <xQueueSemaphoreTake+0x214>)
 800d7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7cc:	601a      	str	r2, [r3, #0]
 800d7ce:	f3bf 8f4f 	dsb	sy
 800d7d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7d6:	f001 ffad 	bl	800f734 <vPortExitCritical>
				return pdPASS;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e097      	b.n	800d90e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d111      	bne.n	800d808 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	617b      	str	r3, [r7, #20]
}
 800d7fc:	bf00      	nop
 800d7fe:	e7fe      	b.n	800d7fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d800:	f001 ff98 	bl	800f734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d804:	2300      	movs	r3, #0
 800d806:	e082      	b.n	800d90e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d106      	bne.n	800d81c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d80e:	f107 030c 	add.w	r3, r7, #12
 800d812:	4618      	mov	r0, r3
 800d814:	f000 ffac 	bl	800e770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d818:	2301      	movs	r3, #1
 800d81a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d81c:	f001 ff8a 	bl	800f734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d820:	f000 fd0c 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d824:	f001 ff56 	bl	800f6d4 <vPortEnterCritical>
 800d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d82e:	b25b      	sxtb	r3, r3
 800d830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d834:	d103      	bne.n	800d83e <xQueueSemaphoreTake+0x13a>
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	2200      	movs	r2, #0
 800d83a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d844:	b25b      	sxtb	r3, r3
 800d846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84a:	d103      	bne.n	800d854 <xQueueSemaphoreTake+0x150>
 800d84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d854:	f001 ff6e 	bl	800f734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d858:	463a      	mov	r2, r7
 800d85a:	f107 030c 	add.w	r3, r7, #12
 800d85e:	4611      	mov	r1, r2
 800d860:	4618      	mov	r0, r3
 800d862:	f000 ff9b 	bl	800e79c <xTaskCheckForTimeOut>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d132      	bne.n	800d8d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d86c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d86e:	f000 f9f2 	bl	800dc56 <prvIsQueueEmpty>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d026      	beq.n	800d8c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d109      	bne.n	800d894 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d880:	f001 ff28 	bl	800f6d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	4618      	mov	r0, r3
 800d88a:	f001 f8e9 	bl	800ea60 <xTaskPriorityInherit>
 800d88e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d890:	f001 ff50 	bl	800f734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	3324      	adds	r3, #36	; 0x24
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	4611      	mov	r1, r2
 800d89c:	4618      	mov	r0, r3
 800d89e:	f000 feb3 	bl	800e608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8a4:	f000 f985 	bl	800dbb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8a8:	f000 fcd6 	bl	800e258 <xTaskResumeAll>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f47f af68 	bne.w	800d784 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d8b4:	4b18      	ldr	r3, [pc, #96]	; (800d918 <xQueueSemaphoreTake+0x214>)
 800d8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ba:	601a      	str	r2, [r3, #0]
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	f3bf 8f6f 	isb	sy
 800d8c4:	e75e      	b.n	800d784 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d8c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8c8:	f000 f973 	bl	800dbb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8cc:	f000 fcc4 	bl	800e258 <xTaskResumeAll>
 800d8d0:	e758      	b.n	800d784 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8d4:	f000 f96d 	bl	800dbb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8d8:	f000 fcbe 	bl	800e258 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8de:	f000 f9ba 	bl	800dc56 <prvIsQueueEmpty>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f43f af4d 	beq.w	800d784 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00d      	beq.n	800d90c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d8f0:	f001 fef0 	bl	800f6d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d8f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8f6:	f000 f8b4 	bl	800da62 <prvGetDisinheritPriorityAfterTimeout>
 800d8fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d902:	4618      	mov	r0, r3
 800d904:	f001 f982 	bl	800ec0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d908:	f001 ff14 	bl	800f734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d90c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3738      	adds	r7, #56	; 0x38
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	e000ed04 	.word	0xe000ed04

0800d91c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08e      	sub	sp, #56	; 0x38
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10a      	bne.n	800d948 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	623b      	str	r3, [r7, #32]
}
 800d944:	bf00      	nop
 800d946:	e7fe      	b.n	800d946 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d103      	bne.n	800d956 <xQueueReceiveFromISR+0x3a>
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d952:	2b00      	cmp	r3, #0
 800d954:	d101      	bne.n	800d95a <xQueueReceiveFromISR+0x3e>
 800d956:	2301      	movs	r3, #1
 800d958:	e000      	b.n	800d95c <xQueueReceiveFromISR+0x40>
 800d95a:	2300      	movs	r3, #0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10a      	bne.n	800d976 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	61fb      	str	r3, [r7, #28]
}
 800d972:	bf00      	nop
 800d974:	e7fe      	b.n	800d974 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d976:	f001 ff8f 	bl	800f898 <vPortValidateInterruptPriority>
	__asm volatile
 800d97a:	f3ef 8211 	mrs	r2, BASEPRI
 800d97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	61ba      	str	r2, [r7, #24]
 800d990:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d992:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d994:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d02f      	beq.n	800da02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9ac:	68b9      	ldr	r1, [r7, #8]
 800d9ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9b0:	f000 f8d9 	bl	800db66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b6:	1e5a      	subs	r2, r3, #1
 800d9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d9bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c4:	d112      	bne.n	800d9ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d016      	beq.n	800d9fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d0:	3310      	adds	r3, #16
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 fe68 	bl	800e6a8 <xTaskRemoveFromEventList>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00e      	beq.n	800d9fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	e007      	b.n	800d9fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	b25a      	sxtb	r2, r3
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	637b      	str	r3, [r7, #52]	; 0x34
 800da00:	e001      	b.n	800da06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800da02:	2300      	movs	r3, #0
 800da04:	637b      	str	r3, [r7, #52]	; 0x34
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	f383 8811 	msr	BASEPRI, r3
}
 800da10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da14:	4618      	mov	r0, r3
 800da16:	3738      	adds	r7, #56	; 0x38
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10a      	bne.n	800da44 <vQueueDelete+0x28>
	__asm volatile
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	60bb      	str	r3, [r7, #8]
}
 800da40:	bf00      	nop
 800da42:	e7fe      	b.n	800da42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f000 f95f 	bl	800dd08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da50:	2b00      	cmp	r3, #0
 800da52:	d102      	bne.n	800da5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f002 f82b 	bl	800fab0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da5a:	bf00      	nop
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da62:	b480      	push	{r7}
 800da64:	b085      	sub	sp, #20
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d006      	beq.n	800da80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	e001      	b.n	800da84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da80:	2300      	movs	r3, #0
 800da82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da84:	68fb      	ldr	r3, [r7, #12]
	}
 800da86:	4618      	mov	r0, r3
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b086      	sub	sp, #24
 800da96:	af00      	add	r7, sp, #0
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da9e:	2300      	movs	r3, #0
 800daa0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10d      	bne.n	800dacc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d14d      	bne.n	800db54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	4618      	mov	r0, r3
 800dabe:	f001 f837 	bl	800eb30 <xTaskPriorityDisinherit>
 800dac2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2200      	movs	r2, #0
 800dac8:	609a      	str	r2, [r3, #8]
 800daca:	e043      	b.n	800db54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d119      	bne.n	800db06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6858      	ldr	r0, [r3, #4]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dada:	461a      	mov	r2, r3
 800dadc:	68b9      	ldr	r1, [r7, #8]
 800dade:	f01a faad 	bl	802803c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	685a      	ldr	r2, [r3, #4]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daea:	441a      	add	r2, r3
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	685a      	ldr	r2, [r3, #4]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d32b      	bcc.n	800db54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	605a      	str	r2, [r3, #4]
 800db04:	e026      	b.n	800db54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	68d8      	ldr	r0, [r3, #12]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db0e:	461a      	mov	r2, r3
 800db10:	68b9      	ldr	r1, [r7, #8]
 800db12:	f01a fa93 	bl	802803c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	68da      	ldr	r2, [r3, #12]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1e:	425b      	negs	r3, r3
 800db20:	441a      	add	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	68da      	ldr	r2, [r3, #12]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d207      	bcs.n	800db42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	689a      	ldr	r2, [r3, #8]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3a:	425b      	negs	r3, r3
 800db3c:	441a      	add	r2, r3
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2b02      	cmp	r3, #2
 800db46:	d105      	bne.n	800db54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d002      	beq.n	800db54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	3b01      	subs	r3, #1
 800db52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	1c5a      	adds	r2, r3, #1
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db5c:	697b      	ldr	r3, [r7, #20]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3718      	adds	r7, #24
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db74:	2b00      	cmp	r3, #0
 800db76:	d018      	beq.n	800dbaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	68da      	ldr	r2, [r3, #12]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db80:	441a      	add	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	68da      	ldr	r2, [r3, #12]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d303      	bcc.n	800db9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	68d9      	ldr	r1, [r3, #12]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba2:	461a      	mov	r2, r3
 800dba4:	6838      	ldr	r0, [r7, #0]
 800dba6:	f01a fa49 	bl	802803c <memcpy>
	}
}
 800dbaa:	bf00      	nop
 800dbac:	3708      	adds	r7, #8
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b084      	sub	sp, #16
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbba:	f001 fd8b 	bl	800f6d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbc6:	e011      	b.n	800dbec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d012      	beq.n	800dbf6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3324      	adds	r3, #36	; 0x24
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 fd67 	bl	800e6a8 <xTaskRemoveFromEventList>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dbe0:	f000 fe3e 	bl	800e860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dbe4:	7bfb      	ldrb	r3, [r7, #15]
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	dce9      	bgt.n	800dbc8 <prvUnlockQueue+0x16>
 800dbf4:	e000      	b.n	800dbf8 <prvUnlockQueue+0x46>
					break;
 800dbf6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	22ff      	movs	r2, #255	; 0xff
 800dbfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc00:	f001 fd98 	bl	800f734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc04:	f001 fd66 	bl	800f6d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc10:	e011      	b.n	800dc36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	691b      	ldr	r3, [r3, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d012      	beq.n	800dc40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	3310      	adds	r3, #16
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 fd42 	bl	800e6a8 <xTaskRemoveFromEventList>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d001      	beq.n	800dc2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc2a:	f000 fe19 	bl	800e860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc2e:	7bbb      	ldrb	r3, [r7, #14]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	dce9      	bgt.n	800dc12 <prvUnlockQueue+0x60>
 800dc3e:	e000      	b.n	800dc42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	22ff      	movs	r2, #255	; 0xff
 800dc46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc4a:	f001 fd73 	bl	800f734 <vPortExitCritical>
}
 800dc4e:	bf00      	nop
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc5e:	f001 fd39 	bl	800f6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d102      	bne.n	800dc70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	60fb      	str	r3, [r7, #12]
 800dc6e:	e001      	b.n	800dc74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc70:	2300      	movs	r3, #0
 800dc72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc74:	f001 fd5e 	bl	800f734 <vPortExitCritical>

	return xReturn;
 800dc78:	68fb      	ldr	r3, [r7, #12]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b084      	sub	sp, #16
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc8a:	f001 fd23 	bl	800f6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d102      	bne.n	800dca0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	e001      	b.n	800dca4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dca0:	2300      	movs	r3, #0
 800dca2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dca4:	f001 fd46 	bl	800f734 <vPortExitCritical>

	return xReturn;
 800dca8:	68fb      	ldr	r3, [r7, #12]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
	...

0800dcb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	60fb      	str	r3, [r7, #12]
 800dcc2:	e014      	b.n	800dcee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dcc4:	4a0f      	ldr	r2, [pc, #60]	; (800dd04 <vQueueAddToRegistry+0x50>)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10b      	bne.n	800dce8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dcd0:	490c      	ldr	r1, [pc, #48]	; (800dd04 <vQueueAddToRegistry+0x50>)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dcda:	4a0a      	ldr	r2, [pc, #40]	; (800dd04 <vQueueAddToRegistry+0x50>)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	00db      	lsls	r3, r3, #3
 800dce0:	4413      	add	r3, r2
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dce6:	e006      	b.n	800dcf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	3301      	adds	r3, #1
 800dcec:	60fb      	str	r3, [r7, #12]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2b07      	cmp	r3, #7
 800dcf2:	d9e7      	bls.n	800dcc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dcf4:	bf00      	nop
 800dcf6:	bf00      	nop
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	20006d14 	.word	0x20006d14

0800dd08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd10:	2300      	movs	r3, #0
 800dd12:	60fb      	str	r3, [r7, #12]
 800dd14:	e016      	b.n	800dd44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dd16:	4a10      	ldr	r2, [pc, #64]	; (800dd58 <vQueueUnregisterQueue+0x50>)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	4413      	add	r3, r2
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d10b      	bne.n	800dd3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dd26:	4a0c      	ldr	r2, [pc, #48]	; (800dd58 <vQueueUnregisterQueue+0x50>)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dd30:	4a09      	ldr	r2, [pc, #36]	; (800dd58 <vQueueUnregisterQueue+0x50>)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	00db      	lsls	r3, r3, #3
 800dd36:	4413      	add	r3, r2
 800dd38:	2200      	movs	r2, #0
 800dd3a:	605a      	str	r2, [r3, #4]
				break;
 800dd3c:	e006      	b.n	800dd4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3301      	adds	r3, #1
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b07      	cmp	r3, #7
 800dd48:	d9e5      	bls.n	800dd16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dd4a:	bf00      	nop
 800dd4c:	bf00      	nop
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	20006d14 	.word	0x20006d14

0800dd5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd6c:	f001 fcb2 	bl	800f6d4 <vPortEnterCritical>
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd76:	b25b      	sxtb	r3, r3
 800dd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd7c:	d103      	bne.n	800dd86 <vQueueWaitForMessageRestricted+0x2a>
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd8c:	b25b      	sxtb	r3, r3
 800dd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd92:	d103      	bne.n	800dd9c <vQueueWaitForMessageRestricted+0x40>
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd9c:	f001 fcca 	bl	800f734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d106      	bne.n	800ddb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	3324      	adds	r3, #36	; 0x24
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	68b9      	ldr	r1, [r7, #8]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 fc4d 	bl	800e650 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ddb6:	6978      	ldr	r0, [r7, #20]
 800ddb8:	f7ff fefb 	bl	800dbb2 <prvUnlockQueue>
	}
 800ddbc:	bf00      	nop
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b08e      	sub	sp, #56	; 0x38
 800ddc8:	af04      	add	r7, sp, #16
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d10a      	bne.n	800ddee <xTaskCreateStatic+0x2a>
	__asm volatile
 800ddd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dddc:	f383 8811 	msr	BASEPRI, r3
 800dde0:	f3bf 8f6f 	isb	sy
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	623b      	str	r3, [r7, #32]
}
 800ddea:	bf00      	nop
 800ddec:	e7fe      	b.n	800ddec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d10a      	bne.n	800de0a <xTaskCreateStatic+0x46>
	__asm volatile
 800ddf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf8:	f383 8811 	msr	BASEPRI, r3
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	61fb      	str	r3, [r7, #28]
}
 800de06:	bf00      	nop
 800de08:	e7fe      	b.n	800de08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de0a:	235c      	movs	r3, #92	; 0x5c
 800de0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	2b5c      	cmp	r3, #92	; 0x5c
 800de12:	d00a      	beq.n	800de2a <xTaskCreateStatic+0x66>
	__asm volatile
 800de14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de18:	f383 8811 	msr	BASEPRI, r3
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	f3bf 8f4f 	dsb	sy
 800de24:	61bb      	str	r3, [r7, #24]
}
 800de26:	bf00      	nop
 800de28:	e7fe      	b.n	800de28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d01e      	beq.n	800de70 <xTaskCreateStatic+0xac>
 800de32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01b      	beq.n	800de70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	2202      	movs	r2, #2
 800de46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de4a:	2300      	movs	r3, #0
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	f107 0314 	add.w	r3, r7, #20
 800de56:	9301      	str	r3, [sp, #4]
 800de58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	68b9      	ldr	r1, [r7, #8]
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 f850 	bl	800df08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de6a:	f000 f8dd 	bl	800e028 <prvAddNewTaskToReadyList>
 800de6e:	e001      	b.n	800de74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de70:	2300      	movs	r3, #0
 800de72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de74:	697b      	ldr	r3, [r7, #20]
	}
 800de76:	4618      	mov	r0, r3
 800de78:	3728      	adds	r7, #40	; 0x28
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b08c      	sub	sp, #48	; 0x30
 800de82:	af04      	add	r7, sp, #16
 800de84:	60f8      	str	r0, [r7, #12]
 800de86:	60b9      	str	r1, [r7, #8]
 800de88:	603b      	str	r3, [r7, #0]
 800de8a:	4613      	mov	r3, r2
 800de8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de8e:	88fb      	ldrh	r3, [r7, #6]
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4618      	mov	r0, r3
 800de94:	f001 fd40 	bl	800f918 <pvPortMalloc>
 800de98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00e      	beq.n	800debe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dea0:	205c      	movs	r0, #92	; 0x5c
 800dea2:	f001 fd39 	bl	800f918 <pvPortMalloc>
 800dea6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d003      	beq.n	800deb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	631a      	str	r2, [r3, #48]	; 0x30
 800deb4:	e005      	b.n	800dec2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800deb6:	6978      	ldr	r0, [r7, #20]
 800deb8:	f001 fdfa 	bl	800fab0 <vPortFree>
 800debc:	e001      	b.n	800dec2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800debe:	2300      	movs	r3, #0
 800dec0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d017      	beq.n	800def8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	2200      	movs	r2, #0
 800decc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ded0:	88fa      	ldrh	r2, [r7, #6]
 800ded2:	2300      	movs	r3, #0
 800ded4:	9303      	str	r3, [sp, #12]
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	9302      	str	r3, [sp, #8]
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	9301      	str	r3, [sp, #4]
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	68b9      	ldr	r1, [r7, #8]
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f000 f80e 	bl	800df08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800deec:	69f8      	ldr	r0, [r7, #28]
 800deee:	f000 f89b 	bl	800e028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800def2:	2301      	movs	r3, #1
 800def4:	61bb      	str	r3, [r7, #24]
 800def6:	e002      	b.n	800defe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800def8:	f04f 33ff 	mov.w	r3, #4294967295
 800defc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800defe:	69bb      	ldr	r3, [r7, #24]
	}
 800df00:	4618      	mov	r0, r3
 800df02:	3720      	adds	r7, #32
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b088      	sub	sp, #32
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	461a      	mov	r2, r3
 800df20:	21a5      	movs	r1, #165	; 0xa5
 800df22:	f01a f899 	bl	8028058 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800df30:	440b      	add	r3, r1
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	f023 0307 	bic.w	r3, r3, #7
 800df3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	f003 0307 	and.w	r3, r3, #7
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00a      	beq.n	800df60 <prvInitialiseNewTask+0x58>
	__asm volatile
 800df4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	617b      	str	r3, [r7, #20]
}
 800df5c:	bf00      	nop
 800df5e:	e7fe      	b.n	800df5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d01f      	beq.n	800dfa6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df66:	2300      	movs	r3, #0
 800df68:	61fb      	str	r3, [r7, #28]
 800df6a:	e012      	b.n	800df92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	4413      	add	r3, r2
 800df72:	7819      	ldrb	r1, [r3, #0]
 800df74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	4413      	add	r3, r2
 800df7a:	3334      	adds	r3, #52	; 0x34
 800df7c:	460a      	mov	r2, r1
 800df7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	4413      	add	r3, r2
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d006      	beq.n	800df9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	3301      	adds	r3, #1
 800df90:	61fb      	str	r3, [r7, #28]
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	2b0f      	cmp	r3, #15
 800df96:	d9e9      	bls.n	800df6c <prvInitialiseNewTask+0x64>
 800df98:	e000      	b.n	800df9c <prvInitialiseNewTask+0x94>
			{
				break;
 800df9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dfa4:	e003      	b.n	800dfae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb0:	2b37      	cmp	r3, #55	; 0x37
 800dfb2:	d901      	bls.n	800dfb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfb4:	2337      	movs	r3, #55	; 0x37
 800dfb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfcc:	3304      	adds	r3, #4
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fe fe56 	bl	800cc80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	3318      	adds	r3, #24
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fe fe51 	bl	800cc80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	2200      	movs	r2, #0
 800dff8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	68f9      	ldr	r1, [r7, #12]
 800e006:	69b8      	ldr	r0, [r7, #24]
 800e008:	f001 fa38 	bl	800f47c <pxPortInitialiseStack>
 800e00c:	4602      	mov	r2, r0
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e01c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e01e:	bf00      	nop
 800e020:	3720      	adds	r7, #32
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e030:	f001 fb50 	bl	800f6d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e034:	4b2d      	ldr	r3, [pc, #180]	; (800e0ec <prvAddNewTaskToReadyList+0xc4>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	3301      	adds	r3, #1
 800e03a:	4a2c      	ldr	r2, [pc, #176]	; (800e0ec <prvAddNewTaskToReadyList+0xc4>)
 800e03c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e03e:	4b2c      	ldr	r3, [pc, #176]	; (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d109      	bne.n	800e05a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e046:	4a2a      	ldr	r2, [pc, #168]	; (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e04c:	4b27      	ldr	r3, [pc, #156]	; (800e0ec <prvAddNewTaskToReadyList+0xc4>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d110      	bne.n	800e076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e054:	f000 fc28 	bl	800e8a8 <prvInitialiseTaskLists>
 800e058:	e00d      	b.n	800e076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e05a:	4b26      	ldr	r3, [pc, #152]	; (800e0f4 <prvAddNewTaskToReadyList+0xcc>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d109      	bne.n	800e076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e062:	4b23      	ldr	r3, [pc, #140]	; (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d802      	bhi.n	800e076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e070:	4a1f      	ldr	r2, [pc, #124]	; (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e076:	4b20      	ldr	r3, [pc, #128]	; (800e0f8 <prvAddNewTaskToReadyList+0xd0>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	3301      	adds	r3, #1
 800e07c:	4a1e      	ldr	r2, [pc, #120]	; (800e0f8 <prvAddNewTaskToReadyList+0xd0>)
 800e07e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e080:	4b1d      	ldr	r3, [pc, #116]	; (800e0f8 <prvAddNewTaskToReadyList+0xd0>)
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08c:	4b1b      	ldr	r3, [pc, #108]	; (800e0fc <prvAddNewTaskToReadyList+0xd4>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	d903      	bls.n	800e09c <prvAddNewTaskToReadyList+0x74>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e098:	4a18      	ldr	r2, [pc, #96]	; (800e0fc <prvAddNewTaskToReadyList+0xd4>)
 800e09a:	6013      	str	r3, [r2, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4413      	add	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4a15      	ldr	r2, [pc, #84]	; (800e100 <prvAddNewTaskToReadyList+0xd8>)
 800e0aa:	441a      	add	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	4610      	mov	r0, r2
 800e0b4:	f7fe fdf1 	bl	800cc9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0b8:	f001 fb3c 	bl	800f734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0bc:	4b0d      	ldr	r3, [pc, #52]	; (800e0f4 <prvAddNewTaskToReadyList+0xcc>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00e      	beq.n	800e0e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0c4:	4b0a      	ldr	r3, [pc, #40]	; (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d207      	bcs.n	800e0e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0d2:	4b0c      	ldr	r3, [pc, #48]	; (800e104 <prvAddNewTaskToReadyList+0xdc>)
 800e0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	20000ca4 	.word	0x20000ca4
 800e0f0:	200007d0 	.word	0x200007d0
 800e0f4:	20000cb0 	.word	0x20000cb0
 800e0f8:	20000cc0 	.word	0x20000cc0
 800e0fc:	20000cac 	.word	0x20000cac
 800e100:	200007d4 	.word	0x200007d4
 800e104:	e000ed04 	.word	0xe000ed04

0800e108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e110:	2300      	movs	r3, #0
 800e112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d017      	beq.n	800e14a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e11a:	4b13      	ldr	r3, [pc, #76]	; (800e168 <vTaskDelay+0x60>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00a      	beq.n	800e138 <vTaskDelay+0x30>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	60bb      	str	r3, [r7, #8]
}
 800e134:	bf00      	nop
 800e136:	e7fe      	b.n	800e136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e138:	f000 f880 	bl	800e23c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e13c:	2100      	movs	r1, #0
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fdfa 	bl	800ed38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e144:	f000 f888 	bl	800e258 <xTaskResumeAll>
 800e148:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d107      	bne.n	800e160 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e150:	4b06      	ldr	r3, [pc, #24]	; (800e16c <vTaskDelay+0x64>)
 800e152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e156:	601a      	str	r2, [r3, #0]
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e160:	bf00      	nop
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	20000ccc 	.word	0x20000ccc
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b08a      	sub	sp, #40	; 0x28
 800e174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e176:	2300      	movs	r3, #0
 800e178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e17a:	2300      	movs	r3, #0
 800e17c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e17e:	463a      	mov	r2, r7
 800e180:	1d39      	adds	r1, r7, #4
 800e182:	f107 0308 	add.w	r3, r7, #8
 800e186:	4618      	mov	r0, r3
 800e188:	f7fe fd26 	bl	800cbd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	9202      	str	r2, [sp, #8]
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	2300      	movs	r3, #0
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	2300      	movs	r3, #0
 800e19c:	460a      	mov	r2, r1
 800e19e:	4921      	ldr	r1, [pc, #132]	; (800e224 <vTaskStartScheduler+0xb4>)
 800e1a0:	4821      	ldr	r0, [pc, #132]	; (800e228 <vTaskStartScheduler+0xb8>)
 800e1a2:	f7ff fe0f 	bl	800ddc4 <xTaskCreateStatic>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	4a20      	ldr	r2, [pc, #128]	; (800e22c <vTaskStartScheduler+0xbc>)
 800e1aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1ac:	4b1f      	ldr	r3, [pc, #124]	; (800e22c <vTaskStartScheduler+0xbc>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	617b      	str	r3, [r7, #20]
 800e1b8:	e001      	b.n	800e1be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d102      	bne.n	800e1ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1c4:	f000 fe0c 	bl	800ede0 <xTimerCreateTimerTask>
 800e1c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d116      	bne.n	800e1fe <vTaskStartScheduler+0x8e>
	__asm volatile
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	613b      	str	r3, [r7, #16]
}
 800e1e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1e4:	4b12      	ldr	r3, [pc, #72]	; (800e230 <vTaskStartScheduler+0xc0>)
 800e1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1ec:	4b11      	ldr	r3, [pc, #68]	; (800e234 <vTaskStartScheduler+0xc4>)
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e1f2:	4b11      	ldr	r3, [pc, #68]	; (800e238 <vTaskStartScheduler+0xc8>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e1f8:	f001 f9ca 	bl	800f590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e1fc:	e00e      	b.n	800e21c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e204:	d10a      	bne.n	800e21c <vTaskStartScheduler+0xac>
	__asm volatile
 800e206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20a:	f383 8811 	msr	BASEPRI, r3
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	60fb      	str	r3, [r7, #12]
}
 800e218:	bf00      	nop
 800e21a:	e7fe      	b.n	800e21a <vTaskStartScheduler+0xaa>
}
 800e21c:	bf00      	nop
 800e21e:	3718      	adds	r7, #24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	0802916c 	.word	0x0802916c
 800e228:	0800e879 	.word	0x0800e879
 800e22c:	20000cc8 	.word	0x20000cc8
 800e230:	20000cc4 	.word	0x20000cc4
 800e234:	20000cb0 	.word	0x20000cb0
 800e238:	20000ca8 	.word	0x20000ca8

0800e23c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e23c:	b480      	push	{r7}
 800e23e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e240:	4b04      	ldr	r3, [pc, #16]	; (800e254 <vTaskSuspendAll+0x18>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	4a03      	ldr	r2, [pc, #12]	; (800e254 <vTaskSuspendAll+0x18>)
 800e248:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e24a:	bf00      	nop
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	20000ccc 	.word	0x20000ccc

0800e258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e25e:	2300      	movs	r3, #0
 800e260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e262:	2300      	movs	r3, #0
 800e264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e266:	4b42      	ldr	r3, [pc, #264]	; (800e370 <xTaskResumeAll+0x118>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <xTaskResumeAll+0x2c>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	603b      	str	r3, [r7, #0]
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e284:	f001 fa26 	bl	800f6d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e288:	4b39      	ldr	r3, [pc, #228]	; (800e370 <xTaskResumeAll+0x118>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	4a38      	ldr	r2, [pc, #224]	; (800e370 <xTaskResumeAll+0x118>)
 800e290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e292:	4b37      	ldr	r3, [pc, #220]	; (800e370 <xTaskResumeAll+0x118>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d162      	bne.n	800e360 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e29a:	4b36      	ldr	r3, [pc, #216]	; (800e374 <xTaskResumeAll+0x11c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d05e      	beq.n	800e360 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2a2:	e02f      	b.n	800e304 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2a4:	4b34      	ldr	r3, [pc, #208]	; (800e378 <xTaskResumeAll+0x120>)
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	3318      	adds	r3, #24
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fe fd4f 	bl	800cd54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3304      	adds	r3, #4
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fe fd4a 	bl	800cd54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c4:	4b2d      	ldr	r3, [pc, #180]	; (800e37c <xTaskResumeAll+0x124>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d903      	bls.n	800e2d4 <xTaskResumeAll+0x7c>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d0:	4a2a      	ldr	r2, [pc, #168]	; (800e37c <xTaskResumeAll+0x124>)
 800e2d2:	6013      	str	r3, [r2, #0]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	4a27      	ldr	r2, [pc, #156]	; (800e380 <xTaskResumeAll+0x128>)
 800e2e2:	441a      	add	r2, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7fe fcd5 	bl	800cc9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f4:	4b23      	ldr	r3, [pc, #140]	; (800e384 <xTaskResumeAll+0x12c>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d302      	bcc.n	800e304 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e2fe:	4b22      	ldr	r3, [pc, #136]	; (800e388 <xTaskResumeAll+0x130>)
 800e300:	2201      	movs	r2, #1
 800e302:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e304:	4b1c      	ldr	r3, [pc, #112]	; (800e378 <xTaskResumeAll+0x120>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1cb      	bne.n	800e2a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e312:	f000 fb67 	bl	800e9e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e316:	4b1d      	ldr	r3, [pc, #116]	; (800e38c <xTaskResumeAll+0x134>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d010      	beq.n	800e344 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e322:	f000 f859 	bl	800e3d8 <xTaskIncrementTick>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e32c:	4b16      	ldr	r3, [pc, #88]	; (800e388 <xTaskResumeAll+0x130>)
 800e32e:	2201      	movs	r2, #1
 800e330:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	3b01      	subs	r3, #1
 800e336:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1f1      	bne.n	800e322 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e33e:	4b13      	ldr	r3, [pc, #76]	; (800e38c <xTaskResumeAll+0x134>)
 800e340:	2200      	movs	r2, #0
 800e342:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e344:	4b10      	ldr	r3, [pc, #64]	; (800e388 <xTaskResumeAll+0x130>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d009      	beq.n	800e360 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e34c:	2301      	movs	r3, #1
 800e34e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e350:	4b0f      	ldr	r3, [pc, #60]	; (800e390 <xTaskResumeAll+0x138>)
 800e352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e356:	601a      	str	r2, [r3, #0]
 800e358:	f3bf 8f4f 	dsb	sy
 800e35c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e360:	f001 f9e8 	bl	800f734 <vPortExitCritical>

	return xAlreadyYielded;
 800e364:	68bb      	ldr	r3, [r7, #8]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3710      	adds	r7, #16
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	20000ccc 	.word	0x20000ccc
 800e374:	20000ca4 	.word	0x20000ca4
 800e378:	20000c64 	.word	0x20000c64
 800e37c:	20000cac 	.word	0x20000cac
 800e380:	200007d4 	.word	0x200007d4
 800e384:	200007d0 	.word	0x200007d0
 800e388:	20000cb8 	.word	0x20000cb8
 800e38c:	20000cb4 	.word	0x20000cb4
 800e390:	e000ed04 	.word	0xe000ed04

0800e394 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e39a:	4b05      	ldr	r3, [pc, #20]	; (800e3b0 <xTaskGetTickCount+0x1c>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3a0:	687b      	ldr	r3, [r7, #4]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	370c      	adds	r7, #12
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	20000ca8 	.word	0x20000ca8

0800e3b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3ba:	f001 fa6d 	bl	800f898 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e3be:	2300      	movs	r3, #0
 800e3c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e3c2:	4b04      	ldr	r3, [pc, #16]	; (800e3d4 <xTaskGetTickCountFromISR+0x20>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e3c8:	683b      	ldr	r3, [r7, #0]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	20000ca8 	.word	0x20000ca8

0800e3d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e2:	4b4f      	ldr	r3, [pc, #316]	; (800e520 <xTaskIncrementTick+0x148>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f040 808f 	bne.w	800e50a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3ec:	4b4d      	ldr	r3, [pc, #308]	; (800e524 <xTaskIncrementTick+0x14c>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3f4:	4a4b      	ldr	r2, [pc, #300]	; (800e524 <xTaskIncrementTick+0x14c>)
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d120      	bne.n	800e442 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e400:	4b49      	ldr	r3, [pc, #292]	; (800e528 <xTaskIncrementTick+0x150>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00a      	beq.n	800e420 <xTaskIncrementTick+0x48>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	603b      	str	r3, [r7, #0]
}
 800e41c:	bf00      	nop
 800e41e:	e7fe      	b.n	800e41e <xTaskIncrementTick+0x46>
 800e420:	4b41      	ldr	r3, [pc, #260]	; (800e528 <xTaskIncrementTick+0x150>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	60fb      	str	r3, [r7, #12]
 800e426:	4b41      	ldr	r3, [pc, #260]	; (800e52c <xTaskIncrementTick+0x154>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a3f      	ldr	r2, [pc, #252]	; (800e528 <xTaskIncrementTick+0x150>)
 800e42c:	6013      	str	r3, [r2, #0]
 800e42e:	4a3f      	ldr	r2, [pc, #252]	; (800e52c <xTaskIncrementTick+0x154>)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6013      	str	r3, [r2, #0]
 800e434:	4b3e      	ldr	r3, [pc, #248]	; (800e530 <xTaskIncrementTick+0x158>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	3301      	adds	r3, #1
 800e43a:	4a3d      	ldr	r2, [pc, #244]	; (800e530 <xTaskIncrementTick+0x158>)
 800e43c:	6013      	str	r3, [r2, #0]
 800e43e:	f000 fad1 	bl	800e9e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e442:	4b3c      	ldr	r3, [pc, #240]	; (800e534 <xTaskIncrementTick+0x15c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	693a      	ldr	r2, [r7, #16]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d349      	bcc.n	800e4e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e44c:	4b36      	ldr	r3, [pc, #216]	; (800e528 <xTaskIncrementTick+0x150>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d104      	bne.n	800e460 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e456:	4b37      	ldr	r3, [pc, #220]	; (800e534 <xTaskIncrementTick+0x15c>)
 800e458:	f04f 32ff 	mov.w	r2, #4294967295
 800e45c:	601a      	str	r2, [r3, #0]
					break;
 800e45e:	e03f      	b.n	800e4e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e460:	4b31      	ldr	r3, [pc, #196]	; (800e528 <xTaskIncrementTick+0x150>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e470:	693a      	ldr	r2, [r7, #16]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	429a      	cmp	r2, r3
 800e476:	d203      	bcs.n	800e480 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e478:	4a2e      	ldr	r2, [pc, #184]	; (800e534 <xTaskIncrementTick+0x15c>)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e47e:	e02f      	b.n	800e4e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	3304      	adds	r3, #4
 800e484:	4618      	mov	r0, r3
 800e486:	f7fe fc65 	bl	800cd54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d004      	beq.n	800e49c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	3318      	adds	r3, #24
 800e496:	4618      	mov	r0, r3
 800e498:	f7fe fc5c 	bl	800cd54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a0:	4b25      	ldr	r3, [pc, #148]	; (800e538 <xTaskIncrementTick+0x160>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d903      	bls.n	800e4b0 <xTaskIncrementTick+0xd8>
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ac:	4a22      	ldr	r2, [pc, #136]	; (800e538 <xTaskIncrementTick+0x160>)
 800e4ae:	6013      	str	r3, [r2, #0]
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	4413      	add	r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4a1f      	ldr	r2, [pc, #124]	; (800e53c <xTaskIncrementTick+0x164>)
 800e4be:	441a      	add	r2, r3
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	4610      	mov	r0, r2
 800e4c8:	f7fe fbe7 	bl	800cc9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d0:	4b1b      	ldr	r3, [pc, #108]	; (800e540 <xTaskIncrementTick+0x168>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d3b8      	bcc.n	800e44c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4de:	e7b5      	b.n	800e44c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4e0:	4b17      	ldr	r3, [pc, #92]	; (800e540 <xTaskIncrementTick+0x168>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e6:	4915      	ldr	r1, [pc, #84]	; (800e53c <xTaskIncrementTick+0x164>)
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	4413      	add	r3, r2
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	440b      	add	r3, r1
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d901      	bls.n	800e4fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e4fc:	4b11      	ldr	r3, [pc, #68]	; (800e544 <xTaskIncrementTick+0x16c>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d007      	beq.n	800e514 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e504:	2301      	movs	r3, #1
 800e506:	617b      	str	r3, [r7, #20]
 800e508:	e004      	b.n	800e514 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e50a:	4b0f      	ldr	r3, [pc, #60]	; (800e548 <xTaskIncrementTick+0x170>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3301      	adds	r3, #1
 800e510:	4a0d      	ldr	r2, [pc, #52]	; (800e548 <xTaskIncrementTick+0x170>)
 800e512:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e514:	697b      	ldr	r3, [r7, #20]
}
 800e516:	4618      	mov	r0, r3
 800e518:	3718      	adds	r7, #24
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	20000ccc 	.word	0x20000ccc
 800e524:	20000ca8 	.word	0x20000ca8
 800e528:	20000c5c 	.word	0x20000c5c
 800e52c:	20000c60 	.word	0x20000c60
 800e530:	20000cbc 	.word	0x20000cbc
 800e534:	20000cc4 	.word	0x20000cc4
 800e538:	20000cac 	.word	0x20000cac
 800e53c:	200007d4 	.word	0x200007d4
 800e540:	200007d0 	.word	0x200007d0
 800e544:	20000cb8 	.word	0x20000cb8
 800e548:	20000cb4 	.word	0x20000cb4

0800e54c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e552:	4b28      	ldr	r3, [pc, #160]	; (800e5f4 <vTaskSwitchContext+0xa8>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d003      	beq.n	800e562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e55a:	4b27      	ldr	r3, [pc, #156]	; (800e5f8 <vTaskSwitchContext+0xac>)
 800e55c:	2201      	movs	r2, #1
 800e55e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e560:	e041      	b.n	800e5e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e562:	4b25      	ldr	r3, [pc, #148]	; (800e5f8 <vTaskSwitchContext+0xac>)
 800e564:	2200      	movs	r2, #0
 800e566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e568:	4b24      	ldr	r3, [pc, #144]	; (800e5fc <vTaskSwitchContext+0xb0>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	60fb      	str	r3, [r7, #12]
 800e56e:	e010      	b.n	800e592 <vTaskSwitchContext+0x46>
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10a      	bne.n	800e58c <vTaskSwitchContext+0x40>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	607b      	str	r3, [r7, #4]
}
 800e588:	bf00      	nop
 800e58a:	e7fe      	b.n	800e58a <vTaskSwitchContext+0x3e>
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3b01      	subs	r3, #1
 800e590:	60fb      	str	r3, [r7, #12]
 800e592:	491b      	ldr	r1, [pc, #108]	; (800e600 <vTaskSwitchContext+0xb4>)
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	4613      	mov	r3, r2
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	4413      	add	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	440b      	add	r3, r1
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0e4      	beq.n	800e570 <vTaskSwitchContext+0x24>
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4a13      	ldr	r2, [pc, #76]	; (800e600 <vTaskSwitchContext+0xb4>)
 800e5b2:	4413      	add	r3, r2
 800e5b4:	60bb      	str	r3, [r7, #8]
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	685a      	ldr	r2, [r3, #4]
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	605a      	str	r2, [r3, #4]
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d104      	bne.n	800e5d6 <vTaskSwitchContext+0x8a>
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	605a      	str	r2, [r3, #4]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	4a09      	ldr	r2, [pc, #36]	; (800e604 <vTaskSwitchContext+0xb8>)
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	4a06      	ldr	r2, [pc, #24]	; (800e5fc <vTaskSwitchContext+0xb0>)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	6013      	str	r3, [r2, #0]
}
 800e5e6:	bf00      	nop
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop
 800e5f4:	20000ccc 	.word	0x20000ccc
 800e5f8:	20000cb8 	.word	0x20000cb8
 800e5fc:	20000cac 	.word	0x20000cac
 800e600:	200007d4 	.word	0x200007d4
 800e604:	200007d0 	.word	0x200007d0

0800e608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	60fb      	str	r3, [r7, #12]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e62e:	4b07      	ldr	r3, [pc, #28]	; (800e64c <vTaskPlaceOnEventList+0x44>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3318      	adds	r3, #24
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7fe fb53 	bl	800cce2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e63c:	2101      	movs	r1, #1
 800e63e:	6838      	ldr	r0, [r7, #0]
 800e640:	f000 fb7a 	bl	800ed38 <prvAddCurrentTaskToDelayedList>
}
 800e644:	bf00      	nop
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	200007d0 	.word	0x200007d0

0800e650 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d10a      	bne.n	800e678 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	617b      	str	r3, [r7, #20]
}
 800e674:	bf00      	nop
 800e676:	e7fe      	b.n	800e676 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e678:	4b0a      	ldr	r3, [pc, #40]	; (800e6a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3318      	adds	r3, #24
 800e67e:	4619      	mov	r1, r3
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f7fe fb0a 	bl	800cc9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d002      	beq.n	800e692 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e68c:	f04f 33ff 	mov.w	r3, #4294967295
 800e690:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e692:	6879      	ldr	r1, [r7, #4]
 800e694:	68b8      	ldr	r0, [r7, #8]
 800e696:	f000 fb4f 	bl	800ed38 <prvAddCurrentTaskToDelayedList>
	}
 800e69a:	bf00      	nop
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200007d0 	.word	0x200007d0

0800e6a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10a      	bne.n	800e6d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	60fb      	str	r3, [r7, #12]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	3318      	adds	r3, #24
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fe fb3b 	bl	800cd54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6de:	4b1e      	ldr	r3, [pc, #120]	; (800e758 <xTaskRemoveFromEventList+0xb0>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d11d      	bne.n	800e722 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	3304      	adds	r3, #4
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fe fb32 	bl	800cd54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6f4:	4b19      	ldr	r3, [pc, #100]	; (800e75c <xTaskRemoveFromEventList+0xb4>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d903      	bls.n	800e704 <xTaskRemoveFromEventList+0x5c>
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e700:	4a16      	ldr	r2, [pc, #88]	; (800e75c <xTaskRemoveFromEventList+0xb4>)
 800e702:	6013      	str	r3, [r2, #0]
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e708:	4613      	mov	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	4413      	add	r3, r2
 800e70e:	009b      	lsls	r3, r3, #2
 800e710:	4a13      	ldr	r2, [pc, #76]	; (800e760 <xTaskRemoveFromEventList+0xb8>)
 800e712:	441a      	add	r2, r3
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	3304      	adds	r3, #4
 800e718:	4619      	mov	r1, r3
 800e71a:	4610      	mov	r0, r2
 800e71c:	f7fe fabd 	bl	800cc9a <vListInsertEnd>
 800e720:	e005      	b.n	800e72e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	3318      	adds	r3, #24
 800e726:	4619      	mov	r1, r3
 800e728:	480e      	ldr	r0, [pc, #56]	; (800e764 <xTaskRemoveFromEventList+0xbc>)
 800e72a:	f7fe fab6 	bl	800cc9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e732:	4b0d      	ldr	r3, [pc, #52]	; (800e768 <xTaskRemoveFromEventList+0xc0>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e738:	429a      	cmp	r2, r3
 800e73a:	d905      	bls.n	800e748 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e73c:	2301      	movs	r3, #1
 800e73e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e740:	4b0a      	ldr	r3, [pc, #40]	; (800e76c <xTaskRemoveFromEventList+0xc4>)
 800e742:	2201      	movs	r2, #1
 800e744:	601a      	str	r2, [r3, #0]
 800e746:	e001      	b.n	800e74c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e748:	2300      	movs	r3, #0
 800e74a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e74c:	697b      	ldr	r3, [r7, #20]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3718      	adds	r7, #24
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	20000ccc 	.word	0x20000ccc
 800e75c:	20000cac 	.word	0x20000cac
 800e760:	200007d4 	.word	0x200007d4
 800e764:	20000c64 	.word	0x20000c64
 800e768:	200007d0 	.word	0x200007d0
 800e76c:	20000cb8 	.word	0x20000cb8

0800e770 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e778:	4b06      	ldr	r3, [pc, #24]	; (800e794 <vTaskInternalSetTimeOutState+0x24>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e780:	4b05      	ldr	r3, [pc, #20]	; (800e798 <vTaskInternalSetTimeOutState+0x28>)
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	605a      	str	r2, [r3, #4]
}
 800e788:	bf00      	nop
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	20000cbc 	.word	0x20000cbc
 800e798:	20000ca8 	.word	0x20000ca8

0800e79c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b088      	sub	sp, #32
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10a      	bne.n	800e7c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	613b      	str	r3, [r7, #16]
}
 800e7be:	bf00      	nop
 800e7c0:	e7fe      	b.n	800e7c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10a      	bne.n	800e7de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7cc:	f383 8811 	msr	BASEPRI, r3
 800e7d0:	f3bf 8f6f 	isb	sy
 800e7d4:	f3bf 8f4f 	dsb	sy
 800e7d8:	60fb      	str	r3, [r7, #12]
}
 800e7da:	bf00      	nop
 800e7dc:	e7fe      	b.n	800e7dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e7de:	f000 ff79 	bl	800f6d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e7e2:	4b1d      	ldr	r3, [pc, #116]	; (800e858 <xTaskCheckForTimeOut+0xbc>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	69ba      	ldr	r2, [r7, #24]
 800e7ee:	1ad3      	subs	r3, r2, r3
 800e7f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7fa:	d102      	bne.n	800e802 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	61fb      	str	r3, [r7, #28]
 800e800:	e023      	b.n	800e84a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	4b15      	ldr	r3, [pc, #84]	; (800e85c <xTaskCheckForTimeOut+0xc0>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d007      	beq.n	800e81e <xTaskCheckForTimeOut+0x82>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	69ba      	ldr	r2, [r7, #24]
 800e814:	429a      	cmp	r2, r3
 800e816:	d302      	bcc.n	800e81e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e818:	2301      	movs	r3, #1
 800e81a:	61fb      	str	r3, [r7, #28]
 800e81c:	e015      	b.n	800e84a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	697a      	ldr	r2, [r7, #20]
 800e824:	429a      	cmp	r2, r3
 800e826:	d20b      	bcs.n	800e840 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	1ad2      	subs	r2, r2, r3
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7ff ff9b 	bl	800e770 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e83a:	2300      	movs	r3, #0
 800e83c:	61fb      	str	r3, [r7, #28]
 800e83e:	e004      	b.n	800e84a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	2200      	movs	r2, #0
 800e844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e846:	2301      	movs	r3, #1
 800e848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e84a:	f000 ff73 	bl	800f734 <vPortExitCritical>

	return xReturn;
 800e84e:	69fb      	ldr	r3, [r7, #28]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3720      	adds	r7, #32
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	20000ca8 	.word	0x20000ca8
 800e85c:	20000cbc 	.word	0x20000cbc

0800e860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e860:	b480      	push	{r7}
 800e862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e864:	4b03      	ldr	r3, [pc, #12]	; (800e874 <vTaskMissedYield+0x14>)
 800e866:	2201      	movs	r2, #1
 800e868:	601a      	str	r2, [r3, #0]
}
 800e86a:	bf00      	nop
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr
 800e874:	20000cb8 	.word	0x20000cb8

0800e878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e880:	f000 f852 	bl	800e928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e884:	4b06      	ldr	r3, [pc, #24]	; (800e8a0 <prvIdleTask+0x28>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d9f9      	bls.n	800e880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e88c:	4b05      	ldr	r3, [pc, #20]	; (800e8a4 <prvIdleTask+0x2c>)
 800e88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e89c:	e7f0      	b.n	800e880 <prvIdleTask+0x8>
 800e89e:	bf00      	nop
 800e8a0:	200007d4 	.word	0x200007d4
 800e8a4:	e000ed04 	.word	0xe000ed04

0800e8a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	607b      	str	r3, [r7, #4]
 800e8b2:	e00c      	b.n	800e8ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4413      	add	r3, r2
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	4a12      	ldr	r2, [pc, #72]	; (800e908 <prvInitialiseTaskLists+0x60>)
 800e8c0:	4413      	add	r3, r2
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fe f9bc 	bl	800cc40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	607b      	str	r3, [r7, #4]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b37      	cmp	r3, #55	; 0x37
 800e8d2:	d9ef      	bls.n	800e8b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8d4:	480d      	ldr	r0, [pc, #52]	; (800e90c <prvInitialiseTaskLists+0x64>)
 800e8d6:	f7fe f9b3 	bl	800cc40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e8da:	480d      	ldr	r0, [pc, #52]	; (800e910 <prvInitialiseTaskLists+0x68>)
 800e8dc:	f7fe f9b0 	bl	800cc40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e8e0:	480c      	ldr	r0, [pc, #48]	; (800e914 <prvInitialiseTaskLists+0x6c>)
 800e8e2:	f7fe f9ad 	bl	800cc40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e8e6:	480c      	ldr	r0, [pc, #48]	; (800e918 <prvInitialiseTaskLists+0x70>)
 800e8e8:	f7fe f9aa 	bl	800cc40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e8ec:	480b      	ldr	r0, [pc, #44]	; (800e91c <prvInitialiseTaskLists+0x74>)
 800e8ee:	f7fe f9a7 	bl	800cc40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e8f2:	4b0b      	ldr	r3, [pc, #44]	; (800e920 <prvInitialiseTaskLists+0x78>)
 800e8f4:	4a05      	ldr	r2, [pc, #20]	; (800e90c <prvInitialiseTaskLists+0x64>)
 800e8f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e8f8:	4b0a      	ldr	r3, [pc, #40]	; (800e924 <prvInitialiseTaskLists+0x7c>)
 800e8fa:	4a05      	ldr	r2, [pc, #20]	; (800e910 <prvInitialiseTaskLists+0x68>)
 800e8fc:	601a      	str	r2, [r3, #0]
}
 800e8fe:	bf00      	nop
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	200007d4 	.word	0x200007d4
 800e90c:	20000c34 	.word	0x20000c34
 800e910:	20000c48 	.word	0x20000c48
 800e914:	20000c64 	.word	0x20000c64
 800e918:	20000c78 	.word	0x20000c78
 800e91c:	20000c90 	.word	0x20000c90
 800e920:	20000c5c 	.word	0x20000c5c
 800e924:	20000c60 	.word	0x20000c60

0800e928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e92e:	e019      	b.n	800e964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e930:	f000 fed0 	bl	800f6d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e934:	4b10      	ldr	r3, [pc, #64]	; (800e978 <prvCheckTasksWaitingTermination+0x50>)
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	3304      	adds	r3, #4
 800e940:	4618      	mov	r0, r3
 800e942:	f7fe fa07 	bl	800cd54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e946:	4b0d      	ldr	r3, [pc, #52]	; (800e97c <prvCheckTasksWaitingTermination+0x54>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3b01      	subs	r3, #1
 800e94c:	4a0b      	ldr	r2, [pc, #44]	; (800e97c <prvCheckTasksWaitingTermination+0x54>)
 800e94e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e950:	4b0b      	ldr	r3, [pc, #44]	; (800e980 <prvCheckTasksWaitingTermination+0x58>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3b01      	subs	r3, #1
 800e956:	4a0a      	ldr	r2, [pc, #40]	; (800e980 <prvCheckTasksWaitingTermination+0x58>)
 800e958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e95a:	f000 feeb 	bl	800f734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 f810 	bl	800e984 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e964:	4b06      	ldr	r3, [pc, #24]	; (800e980 <prvCheckTasksWaitingTermination+0x58>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1e1      	bne.n	800e930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e96c:	bf00      	nop
 800e96e:	bf00      	nop
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	20000c78 	.word	0x20000c78
 800e97c:	20000ca4 	.word	0x20000ca4
 800e980:	20000c8c 	.word	0x20000c8c

0800e984 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e992:	2b00      	cmp	r3, #0
 800e994:	d108      	bne.n	800e9a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e99a:	4618      	mov	r0, r3
 800e99c:	f001 f888 	bl	800fab0 <vPortFree>
				vPortFree( pxTCB );
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f001 f885 	bl	800fab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9a6:	e018      	b.n	800e9da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d103      	bne.n	800e9ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f001 f87c 	bl	800fab0 <vPortFree>
	}
 800e9b8:	e00f      	b.n	800e9da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	d00a      	beq.n	800e9da <prvDeleteTCB+0x56>
	__asm volatile
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	60fb      	str	r3, [r7, #12]
}
 800e9d6:	bf00      	nop
 800e9d8:	e7fe      	b.n	800e9d8 <prvDeleteTCB+0x54>
	}
 800e9da:	bf00      	nop
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
	...

0800e9e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ea1c <prvResetNextTaskUnblockTime+0x38>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d104      	bne.n	800e9fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ea20 <prvResetNextTaskUnblockTime+0x3c>)
 800e9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e9fc:	e008      	b.n	800ea10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9fe:	4b07      	ldr	r3, [pc, #28]	; (800ea1c <prvResetNextTaskUnblockTime+0x38>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	4a04      	ldr	r2, [pc, #16]	; (800ea20 <prvResetNextTaskUnblockTime+0x3c>)
 800ea0e:	6013      	str	r3, [r2, #0]
}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr
 800ea1c:	20000c5c 	.word	0x20000c5c
 800ea20:	20000cc4 	.word	0x20000cc4

0800ea24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea2a:	4b0b      	ldr	r3, [pc, #44]	; (800ea58 <xTaskGetSchedulerState+0x34>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d102      	bne.n	800ea38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea32:	2301      	movs	r3, #1
 800ea34:	607b      	str	r3, [r7, #4]
 800ea36:	e008      	b.n	800ea4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea38:	4b08      	ldr	r3, [pc, #32]	; (800ea5c <xTaskGetSchedulerState+0x38>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d102      	bne.n	800ea46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea40:	2302      	movs	r3, #2
 800ea42:	607b      	str	r3, [r7, #4]
 800ea44:	e001      	b.n	800ea4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea46:	2300      	movs	r3, #0
 800ea48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea4a:	687b      	ldr	r3, [r7, #4]
	}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	20000cb0 	.word	0x20000cb0
 800ea5c:	20000ccc 	.word	0x20000ccc

0800ea60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d051      	beq.n	800eb1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea7a:	4b2a      	ldr	r3, [pc, #168]	; (800eb24 <xTaskPriorityInherit+0xc4>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d241      	bcs.n	800eb08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	db06      	blt.n	800ea9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea8c:	4b25      	ldr	r3, [pc, #148]	; (800eb24 <xTaskPriorityInherit+0xc4>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	6959      	ldr	r1, [r3, #20]
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	4413      	add	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4a1f      	ldr	r2, [pc, #124]	; (800eb28 <xTaskPriorityInherit+0xc8>)
 800eaac:	4413      	add	r3, r2
 800eaae:	4299      	cmp	r1, r3
 800eab0:	d122      	bne.n	800eaf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	3304      	adds	r3, #4
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fe f94c 	bl	800cd54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eabc:	4b19      	ldr	r3, [pc, #100]	; (800eb24 <xTaskPriorityInherit+0xc4>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaca:	4b18      	ldr	r3, [pc, #96]	; (800eb2c <xTaskPriorityInherit+0xcc>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d903      	bls.n	800eada <xTaskPriorityInherit+0x7a>
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead6:	4a15      	ldr	r2, [pc, #84]	; (800eb2c <xTaskPriorityInherit+0xcc>)
 800ead8:	6013      	str	r3, [r2, #0]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4a10      	ldr	r2, [pc, #64]	; (800eb28 <xTaskPriorityInherit+0xc8>)
 800eae8:	441a      	add	r2, r3
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	3304      	adds	r3, #4
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	f7fe f8d2 	bl	800cc9a <vListInsertEnd>
 800eaf6:	e004      	b.n	800eb02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eaf8:	4b0a      	ldr	r3, [pc, #40]	; (800eb24 <xTaskPriorityInherit+0xc4>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb02:	2301      	movs	r3, #1
 800eb04:	60fb      	str	r3, [r7, #12]
 800eb06:	e008      	b.n	800eb1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb0c:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <xTaskPriorityInherit+0xc4>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d201      	bcs.n	800eb1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb16:	2301      	movs	r3, #1
 800eb18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
	}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	200007d0 	.word	0x200007d0
 800eb28:	200007d4 	.word	0x200007d4
 800eb2c:	20000cac 	.word	0x20000cac

0800eb30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d056      	beq.n	800ebf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb46:	4b2e      	ldr	r3, [pc, #184]	; (800ec00 <xTaskPriorityDisinherit+0xd0>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d00a      	beq.n	800eb66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	60fb      	str	r3, [r7, #12]
}
 800eb62:	bf00      	nop
 800eb64:	e7fe      	b.n	800eb64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d10a      	bne.n	800eb84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb72:	f383 8811 	msr	BASEPRI, r3
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	60bb      	str	r3, [r7, #8]
}
 800eb80:	bf00      	nop
 800eb82:	e7fe      	b.n	800eb82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb88:	1e5a      	subs	r2, r3, #1
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d02c      	beq.n	800ebf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d128      	bne.n	800ebf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	3304      	adds	r3, #4
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe f8d4 	bl	800cd54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc4:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <xTaskPriorityDisinherit+0xd4>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d903      	bls.n	800ebd4 <xTaskPriorityDisinherit+0xa4>
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd0:	4a0c      	ldr	r2, [pc, #48]	; (800ec04 <xTaskPriorityDisinherit+0xd4>)
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd8:	4613      	mov	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4413      	add	r3, r2
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	4a09      	ldr	r2, [pc, #36]	; (800ec08 <xTaskPriorityDisinherit+0xd8>)
 800ebe2:	441a      	add	r2, r3
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	3304      	adds	r3, #4
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4610      	mov	r0, r2
 800ebec:	f7fe f855 	bl	800cc9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebf4:	697b      	ldr	r3, [r7, #20]
	}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3718      	adds	r7, #24
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	200007d0 	.word	0x200007d0
 800ec04:	20000cac 	.word	0x20000cac
 800ec08:	200007d4 	.word	0x200007d4

0800ec0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d06a      	beq.n	800ecfa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10a      	bne.n	800ec42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ec2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec30:	f383 8811 	msr	BASEPRI, r3
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	60fb      	str	r3, [r7, #12]
}
 800ec3e:	bf00      	nop
 800ec40:	e7fe      	b.n	800ec40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d902      	bls.n	800ec52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	61fb      	str	r3, [r7, #28]
 800ec50:	e002      	b.n	800ec58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5c:	69fa      	ldr	r2, [r7, #28]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d04b      	beq.n	800ecfa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d146      	bne.n	800ecfa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ec6c:	4b25      	ldr	r3, [pc, #148]	; (800ed04 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	69ba      	ldr	r2, [r7, #24]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d10a      	bne.n	800ec8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ec76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7a:	f383 8811 	msr	BASEPRI, r3
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f3bf 8f4f 	dsb	sy
 800ec86:	60bb      	str	r3, [r7, #8]
}
 800ec88:	bf00      	nop
 800ec8a:	e7fe      	b.n	800ec8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	69fa      	ldr	r2, [r7, #28]
 800ec96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	699b      	ldr	r3, [r3, #24]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	db04      	blt.n	800ecaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	6959      	ldr	r1, [r3, #20]
 800ecae:	693a      	ldr	r2, [r7, #16]
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	4a13      	ldr	r2, [pc, #76]	; (800ed08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ecba:	4413      	add	r3, r2
 800ecbc:	4299      	cmp	r1, r3
 800ecbe:	d11c      	bne.n	800ecfa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fe f845 	bl	800cd54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecce:	4b0f      	ldr	r3, [pc, #60]	; (800ed0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d903      	bls.n	800ecde <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecda:	4a0c      	ldr	r2, [pc, #48]	; (800ed0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ecdc:	6013      	str	r3, [r2, #0]
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece2:	4613      	mov	r3, r2
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	4413      	add	r3, r2
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4a07      	ldr	r2, [pc, #28]	; (800ed08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ecec:	441a      	add	r2, r3
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	4610      	mov	r0, r2
 800ecf6:	f7fd ffd0 	bl	800cc9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecfa:	bf00      	nop
 800ecfc:	3720      	adds	r7, #32
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	200007d0 	.word	0x200007d0
 800ed08:	200007d4 	.word	0x200007d4
 800ed0c:	20000cac 	.word	0x20000cac

0800ed10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed10:	b480      	push	{r7}
 800ed12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed14:	4b07      	ldr	r3, [pc, #28]	; (800ed34 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d004      	beq.n	800ed26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed1c:	4b05      	ldr	r3, [pc, #20]	; (800ed34 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed22:	3201      	adds	r2, #1
 800ed24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ed26:	4b03      	ldr	r3, [pc, #12]	; (800ed34 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed28:	681b      	ldr	r3, [r3, #0]
	}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr
 800ed34:	200007d0 	.word	0x200007d0

0800ed38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed42:	4b21      	ldr	r3, [pc, #132]	; (800edc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed48:	4b20      	ldr	r3, [pc, #128]	; (800edcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	3304      	adds	r3, #4
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fe f800 	bl	800cd54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed5a:	d10a      	bne.n	800ed72 <prvAddCurrentTaskToDelayedList+0x3a>
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d007      	beq.n	800ed72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed62:	4b1a      	ldr	r3, [pc, #104]	; (800edcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	3304      	adds	r3, #4
 800ed68:	4619      	mov	r1, r3
 800ed6a:	4819      	ldr	r0, [pc, #100]	; (800edd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ed6c:	f7fd ff95 	bl	800cc9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed70:	e026      	b.n	800edc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4413      	add	r3, r2
 800ed78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed7a:	4b14      	ldr	r3, [pc, #80]	; (800edcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	68ba      	ldr	r2, [r7, #8]
 800ed80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed82:	68ba      	ldr	r2, [r7, #8]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d209      	bcs.n	800ed9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed8a:	4b12      	ldr	r3, [pc, #72]	; (800edd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	4b0f      	ldr	r3, [pc, #60]	; (800edcc <prvAddCurrentTaskToDelayedList+0x94>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	3304      	adds	r3, #4
 800ed94:	4619      	mov	r1, r3
 800ed96:	4610      	mov	r0, r2
 800ed98:	f7fd ffa3 	bl	800cce2 <vListInsert>
}
 800ed9c:	e010      	b.n	800edc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed9e:	4b0e      	ldr	r3, [pc, #56]	; (800edd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	4b0a      	ldr	r3, [pc, #40]	; (800edcc <prvAddCurrentTaskToDelayedList+0x94>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	3304      	adds	r3, #4
 800eda8:	4619      	mov	r1, r3
 800edaa:	4610      	mov	r0, r2
 800edac:	f7fd ff99 	bl	800cce2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <prvAddCurrentTaskToDelayedList+0xa4>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d202      	bcs.n	800edc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800edba:	4a08      	ldr	r2, [pc, #32]	; (800eddc <prvAddCurrentTaskToDelayedList+0xa4>)
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	6013      	str	r3, [r2, #0]
}
 800edc0:	bf00      	nop
 800edc2:	3710      	adds	r7, #16
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	20000ca8 	.word	0x20000ca8
 800edcc:	200007d0 	.word	0x200007d0
 800edd0:	20000c90 	.word	0x20000c90
 800edd4:	20000c60 	.word	0x20000c60
 800edd8:	20000c5c 	.word	0x20000c5c
 800eddc:	20000cc4 	.word	0x20000cc4

0800ede0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b08a      	sub	sp, #40	; 0x28
 800ede4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ede6:	2300      	movs	r3, #0
 800ede8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800edea:	f000 fb07 	bl	800f3fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800edee:	4b1c      	ldr	r3, [pc, #112]	; (800ee60 <xTimerCreateTimerTask+0x80>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d021      	beq.n	800ee3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800edf6:	2300      	movs	r3, #0
 800edf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800edfa:	2300      	movs	r3, #0
 800edfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800edfe:	1d3a      	adds	r2, r7, #4
 800ee00:	f107 0108 	add.w	r1, r7, #8
 800ee04:	f107 030c 	add.w	r3, r7, #12
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fd feff 	bl	800cc0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee0e:	6879      	ldr	r1, [r7, #4]
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	9202      	str	r2, [sp, #8]
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	2302      	movs	r3, #2
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	460a      	mov	r2, r1
 800ee20:	4910      	ldr	r1, [pc, #64]	; (800ee64 <xTimerCreateTimerTask+0x84>)
 800ee22:	4811      	ldr	r0, [pc, #68]	; (800ee68 <xTimerCreateTimerTask+0x88>)
 800ee24:	f7fe ffce 	bl	800ddc4 <xTaskCreateStatic>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	4a10      	ldr	r2, [pc, #64]	; (800ee6c <xTimerCreateTimerTask+0x8c>)
 800ee2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee2e:	4b0f      	ldr	r3, [pc, #60]	; (800ee6c <xTimerCreateTimerTask+0x8c>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d001      	beq.n	800ee3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee36:	2301      	movs	r3, #1
 800ee38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d10a      	bne.n	800ee56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ee40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	613b      	str	r3, [r7, #16]
}
 800ee52:	bf00      	nop
 800ee54:	e7fe      	b.n	800ee54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ee56:	697b      	ldr	r3, [r7, #20]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	20000d00 	.word	0x20000d00
 800ee64:	08029174 	.word	0x08029174
 800ee68:	0800efa5 	.word	0x0800efa5
 800ee6c:	20000d04 	.word	0x20000d04

0800ee70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b08a      	sub	sp, #40	; 0x28
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
 800ee7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d10a      	bne.n	800ee9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ee88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8c:	f383 8811 	msr	BASEPRI, r3
 800ee90:	f3bf 8f6f 	isb	sy
 800ee94:	f3bf 8f4f 	dsb	sy
 800ee98:	623b      	str	r3, [r7, #32]
}
 800ee9a:	bf00      	nop
 800ee9c:	e7fe      	b.n	800ee9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ee9e:	4b1a      	ldr	r3, [pc, #104]	; (800ef08 <xTimerGenericCommand+0x98>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d02a      	beq.n	800eefc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	2b05      	cmp	r3, #5
 800eeb6:	dc18      	bgt.n	800eeea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eeb8:	f7ff fdb4 	bl	800ea24 <xTaskGetSchedulerState>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b02      	cmp	r3, #2
 800eec0:	d109      	bne.n	800eed6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eec2:	4b11      	ldr	r3, [pc, #68]	; (800ef08 <xTimerGenericCommand+0x98>)
 800eec4:	6818      	ldr	r0, [r3, #0]
 800eec6:	f107 0110 	add.w	r1, r7, #16
 800eeca:	2300      	movs	r3, #0
 800eecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eece:	f7fe f913 	bl	800d0f8 <xQueueGenericSend>
 800eed2:	6278      	str	r0, [r7, #36]	; 0x24
 800eed4:	e012      	b.n	800eefc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eed6:	4b0c      	ldr	r3, [pc, #48]	; (800ef08 <xTimerGenericCommand+0x98>)
 800eed8:	6818      	ldr	r0, [r3, #0]
 800eeda:	f107 0110 	add.w	r1, r7, #16
 800eede:	2300      	movs	r3, #0
 800eee0:	2200      	movs	r2, #0
 800eee2:	f7fe f909 	bl	800d0f8 <xQueueGenericSend>
 800eee6:	6278      	str	r0, [r7, #36]	; 0x24
 800eee8:	e008      	b.n	800eefc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eeea:	4b07      	ldr	r3, [pc, #28]	; (800ef08 <xTimerGenericCommand+0x98>)
 800eeec:	6818      	ldr	r0, [r3, #0]
 800eeee:	f107 0110 	add.w	r1, r7, #16
 800eef2:	2300      	movs	r3, #0
 800eef4:	683a      	ldr	r2, [r7, #0]
 800eef6:	f7fe f9fd 	bl	800d2f4 <xQueueGenericSendFromISR>
 800eefa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3728      	adds	r7, #40	; 0x28
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	20000d00 	.word	0x20000d00

0800ef0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b088      	sub	sp, #32
 800ef10:	af02      	add	r7, sp, #8
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef16:	4b22      	ldr	r3, [pc, #136]	; (800efa0 <prvProcessExpiredTimer+0x94>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	3304      	adds	r3, #4
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fd ff15 	bl	800cd54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef30:	f003 0304 	and.w	r3, r3, #4
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d022      	beq.n	800ef7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	699a      	ldr	r2, [r3, #24]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	18d1      	adds	r1, r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	683a      	ldr	r2, [r7, #0]
 800ef44:	6978      	ldr	r0, [r7, #20]
 800ef46:	f000 f8d1 	bl	800f0ec <prvInsertTimerInActiveList>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d01f      	beq.n	800ef90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef50:	2300      	movs	r3, #0
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	2300      	movs	r3, #0
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	2100      	movs	r1, #0
 800ef5a:	6978      	ldr	r0, [r7, #20]
 800ef5c:	f7ff ff88 	bl	800ee70 <xTimerGenericCommand>
 800ef60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d113      	bne.n	800ef90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	60fb      	str	r3, [r7, #12]
}
 800ef7a:	bf00      	nop
 800ef7c:	e7fe      	b.n	800ef7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef84:	f023 0301 	bic.w	r3, r3, #1
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	6a1b      	ldr	r3, [r3, #32]
 800ef94:	6978      	ldr	r0, [r7, #20]
 800ef96:	4798      	blx	r3
}
 800ef98:	bf00      	nop
 800ef9a:	3718      	adds	r7, #24
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	20000cf8 	.word	0x20000cf8

0800efa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800efac:	f107 0308 	add.w	r3, r7, #8
 800efb0:	4618      	mov	r0, r3
 800efb2:	f000 f857 	bl	800f064 <prvGetNextExpireTime>
 800efb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	4619      	mov	r1, r3
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f000 f803 	bl	800efc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800efc2:	f000 f8d5 	bl	800f170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800efc6:	e7f1      	b.n	800efac <prvTimerTask+0x8>

0800efc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800efd2:	f7ff f933 	bl	800e23c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efd6:	f107 0308 	add.w	r3, r7, #8
 800efda:	4618      	mov	r0, r3
 800efdc:	f000 f866 	bl	800f0ac <prvSampleTimeNow>
 800efe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d130      	bne.n	800f04a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d10a      	bne.n	800f004 <prvProcessTimerOrBlockTask+0x3c>
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d806      	bhi.n	800f004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eff6:	f7ff f92f 	bl	800e258 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800effa:	68f9      	ldr	r1, [r7, #12]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7ff ff85 	bl	800ef0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f002:	e024      	b.n	800f04e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d008      	beq.n	800f01c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f00a:	4b13      	ldr	r3, [pc, #76]	; (800f058 <prvProcessTimerOrBlockTask+0x90>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d101      	bne.n	800f018 <prvProcessTimerOrBlockTask+0x50>
 800f014:	2301      	movs	r3, #1
 800f016:	e000      	b.n	800f01a <prvProcessTimerOrBlockTask+0x52>
 800f018:	2300      	movs	r3, #0
 800f01a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f01c:	4b0f      	ldr	r3, [pc, #60]	; (800f05c <prvProcessTimerOrBlockTask+0x94>)
 800f01e:	6818      	ldr	r0, [r3, #0]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	1ad3      	subs	r3, r2, r3
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	4619      	mov	r1, r3
 800f02a:	f7fe fe97 	bl	800dd5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f02e:	f7ff f913 	bl	800e258 <xTaskResumeAll>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10a      	bne.n	800f04e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f038:	4b09      	ldr	r3, [pc, #36]	; (800f060 <prvProcessTimerOrBlockTask+0x98>)
 800f03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	f3bf 8f6f 	isb	sy
}
 800f048:	e001      	b.n	800f04e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f04a:	f7ff f905 	bl	800e258 <xTaskResumeAll>
}
 800f04e:	bf00      	nop
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	20000cfc 	.word	0x20000cfc
 800f05c:	20000d00 	.word	0x20000d00
 800f060:	e000ed04 	.word	0xe000ed04

0800f064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f064:	b480      	push	{r7}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f06c:	4b0e      	ldr	r3, [pc, #56]	; (800f0a8 <prvGetNextExpireTime+0x44>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d101      	bne.n	800f07a <prvGetNextExpireTime+0x16>
 800f076:	2201      	movs	r2, #1
 800f078:	e000      	b.n	800f07c <prvGetNextExpireTime+0x18>
 800f07a:	2200      	movs	r2, #0
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d105      	bne.n	800f094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f088:	4b07      	ldr	r3, [pc, #28]	; (800f0a8 <prvGetNextExpireTime+0x44>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	60fb      	str	r3, [r7, #12]
 800f092:	e001      	b.n	800f098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f094:	2300      	movs	r3, #0
 800f096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f098:	68fb      	ldr	r3, [r7, #12]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3714      	adds	r7, #20
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	20000cf8 	.word	0x20000cf8

0800f0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f0b4:	f7ff f96e 	bl	800e394 <xTaskGetTickCount>
 800f0b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f0ba:	4b0b      	ldr	r3, [pc, #44]	; (800f0e8 <prvSampleTimeNow+0x3c>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d205      	bcs.n	800f0d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f0c4:	f000 f936 	bl	800f334 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	e002      	b.n	800f0d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f0d6:	4a04      	ldr	r2, [pc, #16]	; (800f0e8 <prvSampleTimeNow+0x3c>)
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20000d08 	.word	0x20000d08

0800f0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b086      	sub	sp, #24
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	68ba      	ldr	r2, [r7, #8]
 800f102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d812      	bhi.n	800f138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	1ad2      	subs	r2, r2, r3
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	699b      	ldr	r3, [r3, #24]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d302      	bcc.n	800f126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f120:	2301      	movs	r3, #1
 800f122:	617b      	str	r3, [r7, #20]
 800f124:	e01b      	b.n	800f15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f126:	4b10      	ldr	r3, [pc, #64]	; (800f168 <prvInsertTimerInActiveList+0x7c>)
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	3304      	adds	r3, #4
 800f12e:	4619      	mov	r1, r3
 800f130:	4610      	mov	r0, r2
 800f132:	f7fd fdd6 	bl	800cce2 <vListInsert>
 800f136:	e012      	b.n	800f15e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d206      	bcs.n	800f14e <prvInsertTimerInActiveList+0x62>
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	d302      	bcc.n	800f14e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f148:	2301      	movs	r3, #1
 800f14a:	617b      	str	r3, [r7, #20]
 800f14c:	e007      	b.n	800f15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f14e:	4b07      	ldr	r3, [pc, #28]	; (800f16c <prvInsertTimerInActiveList+0x80>)
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	3304      	adds	r3, #4
 800f156:	4619      	mov	r1, r3
 800f158:	4610      	mov	r0, r2
 800f15a:	f7fd fdc2 	bl	800cce2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f15e:	697b      	ldr	r3, [r7, #20]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3718      	adds	r7, #24
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	20000cfc 	.word	0x20000cfc
 800f16c:	20000cf8 	.word	0x20000cf8

0800f170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b08e      	sub	sp, #56	; 0x38
 800f174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f176:	e0ca      	b.n	800f30e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	da18      	bge.n	800f1b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f17e:	1d3b      	adds	r3, r7, #4
 800f180:	3304      	adds	r3, #4
 800f182:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	2b00      	cmp	r3, #0
 800f188:	d10a      	bne.n	800f1a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18e:	f383 8811 	msr	BASEPRI, r3
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	f3bf 8f4f 	dsb	sy
 800f19a:	61fb      	str	r3, [r7, #28]
}
 800f19c:	bf00      	nop
 800f19e:	e7fe      	b.n	800f19e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1a6:	6850      	ldr	r0, [r2, #4]
 800f1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1aa:	6892      	ldr	r2, [r2, #8]
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f2c0 80aa 	blt.w	800f30c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1be:	695b      	ldr	r3, [r3, #20]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d004      	beq.n	800f1ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fd fdc3 	bl	800cd54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1ce:	463b      	mov	r3, r7
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7ff ff6b 	bl	800f0ac <prvSampleTimeNow>
 800f1d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b09      	cmp	r3, #9
 800f1dc:	f200 8097 	bhi.w	800f30e <prvProcessReceivedCommands+0x19e>
 800f1e0:	a201      	add	r2, pc, #4	; (adr r2, 800f1e8 <prvProcessReceivedCommands+0x78>)
 800f1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e6:	bf00      	nop
 800f1e8:	0800f211 	.word	0x0800f211
 800f1ec:	0800f211 	.word	0x0800f211
 800f1f0:	0800f211 	.word	0x0800f211
 800f1f4:	0800f285 	.word	0x0800f285
 800f1f8:	0800f299 	.word	0x0800f299
 800f1fc:	0800f2e3 	.word	0x0800f2e3
 800f200:	0800f211 	.word	0x0800f211
 800f204:	0800f211 	.word	0x0800f211
 800f208:	0800f285 	.word	0x0800f285
 800f20c:	0800f299 	.word	0x0800f299
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f216:	f043 0301 	orr.w	r3, r3, #1
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f226:	699b      	ldr	r3, [r3, #24]
 800f228:	18d1      	adds	r1, r2, r3
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f230:	f7ff ff5c 	bl	800f0ec <prvInsertTimerInActiveList>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d069      	beq.n	800f30e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f248:	f003 0304 	and.w	r3, r3, #4
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d05e      	beq.n	800f30e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	441a      	add	r2, r3
 800f258:	2300      	movs	r3, #0
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	2300      	movs	r3, #0
 800f25e:	2100      	movs	r1, #0
 800f260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f262:	f7ff fe05 	bl	800ee70 <xTimerGenericCommand>
 800f266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d14f      	bne.n	800f30e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	61bb      	str	r3, [r7, #24]
}
 800f280:	bf00      	nop
 800f282:	e7fe      	b.n	800f282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f28a:	f023 0301 	bic.w	r3, r3, #1
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f296:	e03a      	b.n	800f30e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f29e:	f043 0301 	orr.w	r3, r3, #1
 800f2a2:	b2da      	uxtb	r2, r3
 800f2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b2:	699b      	ldr	r3, [r3, #24]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10a      	bne.n	800f2ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	617b      	str	r3, [r7, #20]
}
 800f2ca:	bf00      	nop
 800f2cc:	e7fe      	b.n	800f2cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	699a      	ldr	r2, [r3, #24]
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d4:	18d1      	adds	r1, r2, r3
 800f2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2dc:	f7ff ff06 	bl	800f0ec <prvInsertTimerInActiveList>
					break;
 800f2e0:	e015      	b.n	800f30e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2e8:	f003 0302 	and.w	r3, r3, #2
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d103      	bne.n	800f2f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2f2:	f000 fbdd 	bl	800fab0 <vPortFree>
 800f2f6:	e00a      	b.n	800f30e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2fe:	f023 0301 	bic.w	r3, r3, #1
 800f302:	b2da      	uxtb	r2, r3
 800f304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f30a:	e000      	b.n	800f30e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f30c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f30e:	4b08      	ldr	r3, [pc, #32]	; (800f330 <prvProcessReceivedCommands+0x1c0>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	1d39      	adds	r1, r7, #4
 800f314:	2200      	movs	r2, #0
 800f316:	4618      	mov	r0, r3
 800f318:	f7fe f914 	bl	800d544 <xQueueReceive>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f47f af2a 	bne.w	800f178 <prvProcessReceivedCommands+0x8>
	}
}
 800f324:	bf00      	nop
 800f326:	bf00      	nop
 800f328:	3730      	adds	r7, #48	; 0x30
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	20000d00 	.word	0x20000d00

0800f334 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f33a:	e048      	b.n	800f3ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f33c:	4b2d      	ldr	r3, [pc, #180]	; (800f3f4 <prvSwitchTimerLists+0xc0>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f346:	4b2b      	ldr	r3, [pc, #172]	; (800f3f4 <prvSwitchTimerLists+0xc0>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	3304      	adds	r3, #4
 800f354:	4618      	mov	r0, r3
 800f356:	f7fd fcfd 	bl	800cd54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f368:	f003 0304 	and.w	r3, r3, #4
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d02e      	beq.n	800f3ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	699b      	ldr	r3, [r3, #24]
 800f374:	693a      	ldr	r2, [r7, #16]
 800f376:	4413      	add	r3, r2
 800f378:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f37a:	68ba      	ldr	r2, [r7, #8]
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d90e      	bls.n	800f3a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	68ba      	ldr	r2, [r7, #8]
 800f386:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f38e:	4b19      	ldr	r3, [pc, #100]	; (800f3f4 <prvSwitchTimerLists+0xc0>)
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	3304      	adds	r3, #4
 800f396:	4619      	mov	r1, r3
 800f398:	4610      	mov	r0, r2
 800f39a:	f7fd fca2 	bl	800cce2 <vListInsert>
 800f39e:	e016      	b.n	800f3ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	9300      	str	r3, [sp, #0]
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f7ff fd60 	bl	800ee70 <xTimerGenericCommand>
 800f3b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d10a      	bne.n	800f3ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3bc:	f383 8811 	msr	BASEPRI, r3
 800f3c0:	f3bf 8f6f 	isb	sy
 800f3c4:	f3bf 8f4f 	dsb	sy
 800f3c8:	603b      	str	r3, [r7, #0]
}
 800f3ca:	bf00      	nop
 800f3cc:	e7fe      	b.n	800f3cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3ce:	4b09      	ldr	r3, [pc, #36]	; (800f3f4 <prvSwitchTimerLists+0xc0>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d1b1      	bne.n	800f33c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f3d8:	4b06      	ldr	r3, [pc, #24]	; (800f3f4 <prvSwitchTimerLists+0xc0>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f3de:	4b06      	ldr	r3, [pc, #24]	; (800f3f8 <prvSwitchTimerLists+0xc4>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4a04      	ldr	r2, [pc, #16]	; (800f3f4 <prvSwitchTimerLists+0xc0>)
 800f3e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f3e6:	4a04      	ldr	r2, [pc, #16]	; (800f3f8 <prvSwitchTimerLists+0xc4>)
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	6013      	str	r3, [r2, #0]
}
 800f3ec:	bf00      	nop
 800f3ee:	3718      	adds	r7, #24
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	20000cf8 	.word	0x20000cf8
 800f3f8:	20000cfc 	.word	0x20000cfc

0800f3fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f402:	f000 f967 	bl	800f6d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f406:	4b15      	ldr	r3, [pc, #84]	; (800f45c <prvCheckForValidListAndQueue+0x60>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d120      	bne.n	800f450 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f40e:	4814      	ldr	r0, [pc, #80]	; (800f460 <prvCheckForValidListAndQueue+0x64>)
 800f410:	f7fd fc16 	bl	800cc40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f414:	4813      	ldr	r0, [pc, #76]	; (800f464 <prvCheckForValidListAndQueue+0x68>)
 800f416:	f7fd fc13 	bl	800cc40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f41a:	4b13      	ldr	r3, [pc, #76]	; (800f468 <prvCheckForValidListAndQueue+0x6c>)
 800f41c:	4a10      	ldr	r2, [pc, #64]	; (800f460 <prvCheckForValidListAndQueue+0x64>)
 800f41e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f420:	4b12      	ldr	r3, [pc, #72]	; (800f46c <prvCheckForValidListAndQueue+0x70>)
 800f422:	4a10      	ldr	r2, [pc, #64]	; (800f464 <prvCheckForValidListAndQueue+0x68>)
 800f424:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f426:	2300      	movs	r3, #0
 800f428:	9300      	str	r3, [sp, #0]
 800f42a:	4b11      	ldr	r3, [pc, #68]	; (800f470 <prvCheckForValidListAndQueue+0x74>)
 800f42c:	4a11      	ldr	r2, [pc, #68]	; (800f474 <prvCheckForValidListAndQueue+0x78>)
 800f42e:	2110      	movs	r1, #16
 800f430:	200a      	movs	r0, #10
 800f432:	f7fd fd21 	bl	800ce78 <xQueueGenericCreateStatic>
 800f436:	4603      	mov	r3, r0
 800f438:	4a08      	ldr	r2, [pc, #32]	; (800f45c <prvCheckForValidListAndQueue+0x60>)
 800f43a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f43c:	4b07      	ldr	r3, [pc, #28]	; (800f45c <prvCheckForValidListAndQueue+0x60>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d005      	beq.n	800f450 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f444:	4b05      	ldr	r3, [pc, #20]	; (800f45c <prvCheckForValidListAndQueue+0x60>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	490b      	ldr	r1, [pc, #44]	; (800f478 <prvCheckForValidListAndQueue+0x7c>)
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fe fc32 	bl	800dcb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f450:	f000 f970 	bl	800f734 <vPortExitCritical>
}
 800f454:	bf00      	nop
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20000d00 	.word	0x20000d00
 800f460:	20000cd0 	.word	0x20000cd0
 800f464:	20000ce4 	.word	0x20000ce4
 800f468:	20000cf8 	.word	0x20000cf8
 800f46c:	20000cfc 	.word	0x20000cfc
 800f470:	20000dac 	.word	0x20000dac
 800f474:	20000d0c 	.word	0x20000d0c
 800f478:	0802917c 	.word	0x0802917c

0800f47c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f47c:	b480      	push	{r7}
 800f47e:	b085      	sub	sp, #20
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	3b04      	subs	r3, #4
 800f48c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	3b04      	subs	r3, #4
 800f49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	f023 0201 	bic.w	r2, r3, #1
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	3b04      	subs	r3, #4
 800f4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4ac:	4a0c      	ldr	r2, [pc, #48]	; (800f4e0 <pxPortInitialiseStack+0x64>)
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	3b14      	subs	r3, #20
 800f4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3b04      	subs	r3, #4
 800f4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f06f 0202 	mvn.w	r2, #2
 800f4ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	3b20      	subs	r3, #32
 800f4d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3714      	adds	r7, #20
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr
 800f4e0:	0800f4e5 	.word	0x0800f4e5

0800f4e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f4ee:	4b12      	ldr	r3, [pc, #72]	; (800f538 <prvTaskExitError+0x54>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f6:	d00a      	beq.n	800f50e <prvTaskExitError+0x2a>
	__asm volatile
 800f4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fc:	f383 8811 	msr	BASEPRI, r3
 800f500:	f3bf 8f6f 	isb	sy
 800f504:	f3bf 8f4f 	dsb	sy
 800f508:	60fb      	str	r3, [r7, #12]
}
 800f50a:	bf00      	nop
 800f50c:	e7fe      	b.n	800f50c <prvTaskExitError+0x28>
	__asm volatile
 800f50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f512:	f383 8811 	msr	BASEPRI, r3
 800f516:	f3bf 8f6f 	isb	sy
 800f51a:	f3bf 8f4f 	dsb	sy
 800f51e:	60bb      	str	r3, [r7, #8]
}
 800f520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f522:	bf00      	nop
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d0fc      	beq.n	800f524 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f52a:	bf00      	nop
 800f52c:	bf00      	nop
 800f52e:	3714      	adds	r7, #20
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr
 800f538:	20000014 	.word	0x20000014
 800f53c:	00000000 	.word	0x00000000

0800f540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f540:	4b07      	ldr	r3, [pc, #28]	; (800f560 <pxCurrentTCBConst2>)
 800f542:	6819      	ldr	r1, [r3, #0]
 800f544:	6808      	ldr	r0, [r1, #0]
 800f546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f54a:	f380 8809 	msr	PSP, r0
 800f54e:	f3bf 8f6f 	isb	sy
 800f552:	f04f 0000 	mov.w	r0, #0
 800f556:	f380 8811 	msr	BASEPRI, r0
 800f55a:	4770      	bx	lr
 800f55c:	f3af 8000 	nop.w

0800f560 <pxCurrentTCBConst2>:
 800f560:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f564:	bf00      	nop
 800f566:	bf00      	nop

0800f568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f568:	4808      	ldr	r0, [pc, #32]	; (800f58c <prvPortStartFirstTask+0x24>)
 800f56a:	6800      	ldr	r0, [r0, #0]
 800f56c:	6800      	ldr	r0, [r0, #0]
 800f56e:	f380 8808 	msr	MSP, r0
 800f572:	f04f 0000 	mov.w	r0, #0
 800f576:	f380 8814 	msr	CONTROL, r0
 800f57a:	b662      	cpsie	i
 800f57c:	b661      	cpsie	f
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	df00      	svc	0
 800f588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f58a:	bf00      	nop
 800f58c:	e000ed08 	.word	0xe000ed08

0800f590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f596:	4b46      	ldr	r3, [pc, #280]	; (800f6b0 <xPortStartScheduler+0x120>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a46      	ldr	r2, [pc, #280]	; (800f6b4 <xPortStartScheduler+0x124>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d10a      	bne.n	800f5b6 <xPortStartScheduler+0x26>
	__asm volatile
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	f383 8811 	msr	BASEPRI, r3
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	613b      	str	r3, [r7, #16]
}
 800f5b2:	bf00      	nop
 800f5b4:	e7fe      	b.n	800f5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f5b6:	4b3e      	ldr	r3, [pc, #248]	; (800f6b0 <xPortStartScheduler+0x120>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4a3f      	ldr	r2, [pc, #252]	; (800f6b8 <xPortStartScheduler+0x128>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d10a      	bne.n	800f5d6 <xPortStartScheduler+0x46>
	__asm volatile
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	60fb      	str	r3, [r7, #12]
}
 800f5d2:	bf00      	nop
 800f5d4:	e7fe      	b.n	800f5d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f5d6:	4b39      	ldr	r3, [pc, #228]	; (800f6bc <xPortStartScheduler+0x12c>)
 800f5d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	22ff      	movs	r2, #255	; 0xff
 800f5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f5f0:	78fb      	ldrb	r3, [r7, #3]
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f5f8:	b2da      	uxtb	r2, r3
 800f5fa:	4b31      	ldr	r3, [pc, #196]	; (800f6c0 <xPortStartScheduler+0x130>)
 800f5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f5fe:	4b31      	ldr	r3, [pc, #196]	; (800f6c4 <xPortStartScheduler+0x134>)
 800f600:	2207      	movs	r2, #7
 800f602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f604:	e009      	b.n	800f61a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f606:	4b2f      	ldr	r3, [pc, #188]	; (800f6c4 <xPortStartScheduler+0x134>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	4a2d      	ldr	r2, [pc, #180]	; (800f6c4 <xPortStartScheduler+0x134>)
 800f60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f610:	78fb      	ldrb	r3, [r7, #3]
 800f612:	b2db      	uxtb	r3, r3
 800f614:	005b      	lsls	r3, r3, #1
 800f616:	b2db      	uxtb	r3, r3
 800f618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f61a:	78fb      	ldrb	r3, [r7, #3]
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f622:	2b80      	cmp	r3, #128	; 0x80
 800f624:	d0ef      	beq.n	800f606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f626:	4b27      	ldr	r3, [pc, #156]	; (800f6c4 <xPortStartScheduler+0x134>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f1c3 0307 	rsb	r3, r3, #7
 800f62e:	2b04      	cmp	r3, #4
 800f630:	d00a      	beq.n	800f648 <xPortStartScheduler+0xb8>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	60bb      	str	r3, [r7, #8]
}
 800f644:	bf00      	nop
 800f646:	e7fe      	b.n	800f646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f648:	4b1e      	ldr	r3, [pc, #120]	; (800f6c4 <xPortStartScheduler+0x134>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	021b      	lsls	r3, r3, #8
 800f64e:	4a1d      	ldr	r2, [pc, #116]	; (800f6c4 <xPortStartScheduler+0x134>)
 800f650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f652:	4b1c      	ldr	r3, [pc, #112]	; (800f6c4 <xPortStartScheduler+0x134>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f65a:	4a1a      	ldr	r2, [pc, #104]	; (800f6c4 <xPortStartScheduler+0x134>)
 800f65c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	b2da      	uxtb	r2, r3
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f666:	4b18      	ldr	r3, [pc, #96]	; (800f6c8 <xPortStartScheduler+0x138>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a17      	ldr	r2, [pc, #92]	; (800f6c8 <xPortStartScheduler+0x138>)
 800f66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f672:	4b15      	ldr	r3, [pc, #84]	; (800f6c8 <xPortStartScheduler+0x138>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a14      	ldr	r2, [pc, #80]	; (800f6c8 <xPortStartScheduler+0x138>)
 800f678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f67c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f67e:	f000 f8dd 	bl	800f83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f682:	4b12      	ldr	r3, [pc, #72]	; (800f6cc <xPortStartScheduler+0x13c>)
 800f684:	2200      	movs	r2, #0
 800f686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f688:	f000 f8fc 	bl	800f884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f68c:	4b10      	ldr	r3, [pc, #64]	; (800f6d0 <xPortStartScheduler+0x140>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a0f      	ldr	r2, [pc, #60]	; (800f6d0 <xPortStartScheduler+0x140>)
 800f692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f698:	f7ff ff66 	bl	800f568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f69c:	f7fe ff56 	bl	800e54c <vTaskSwitchContext>
	prvTaskExitError();
 800f6a0:	f7ff ff20 	bl	800f4e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3718      	adds	r7, #24
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	e000ed00 	.word	0xe000ed00
 800f6b4:	410fc271 	.word	0x410fc271
 800f6b8:	410fc270 	.word	0x410fc270
 800f6bc:	e000e400 	.word	0xe000e400
 800f6c0:	20000dfc 	.word	0x20000dfc
 800f6c4:	20000e00 	.word	0x20000e00
 800f6c8:	e000ed20 	.word	0xe000ed20
 800f6cc:	20000014 	.word	0x20000014
 800f6d0:	e000ef34 	.word	0xe000ef34

0800f6d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
	__asm volatile
 800f6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6de:	f383 8811 	msr	BASEPRI, r3
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	607b      	str	r3, [r7, #4]
}
 800f6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f6ee:	4b0f      	ldr	r3, [pc, #60]	; (800f72c <vPortEnterCritical+0x58>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	4a0d      	ldr	r2, [pc, #52]	; (800f72c <vPortEnterCritical+0x58>)
 800f6f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f6f8:	4b0c      	ldr	r3, [pc, #48]	; (800f72c <vPortEnterCritical+0x58>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d10f      	bne.n	800f720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f700:	4b0b      	ldr	r3, [pc, #44]	; (800f730 <vPortEnterCritical+0x5c>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	b2db      	uxtb	r3, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00a      	beq.n	800f720 <vPortEnterCritical+0x4c>
	__asm volatile
 800f70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70e:	f383 8811 	msr	BASEPRI, r3
 800f712:	f3bf 8f6f 	isb	sy
 800f716:	f3bf 8f4f 	dsb	sy
 800f71a:	603b      	str	r3, [r7, #0]
}
 800f71c:	bf00      	nop
 800f71e:	e7fe      	b.n	800f71e <vPortEnterCritical+0x4a>
	}
}
 800f720:	bf00      	nop
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr
 800f72c:	20000014 	.word	0x20000014
 800f730:	e000ed04 	.word	0xe000ed04

0800f734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f73a:	4b12      	ldr	r3, [pc, #72]	; (800f784 <vPortExitCritical+0x50>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d10a      	bne.n	800f758 <vPortExitCritical+0x24>
	__asm volatile
 800f742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f746:	f383 8811 	msr	BASEPRI, r3
 800f74a:	f3bf 8f6f 	isb	sy
 800f74e:	f3bf 8f4f 	dsb	sy
 800f752:	607b      	str	r3, [r7, #4]
}
 800f754:	bf00      	nop
 800f756:	e7fe      	b.n	800f756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f758:	4b0a      	ldr	r3, [pc, #40]	; (800f784 <vPortExitCritical+0x50>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	3b01      	subs	r3, #1
 800f75e:	4a09      	ldr	r2, [pc, #36]	; (800f784 <vPortExitCritical+0x50>)
 800f760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f762:	4b08      	ldr	r3, [pc, #32]	; (800f784 <vPortExitCritical+0x50>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d105      	bne.n	800f776 <vPortExitCritical+0x42>
 800f76a:	2300      	movs	r3, #0
 800f76c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	f383 8811 	msr	BASEPRI, r3
}
 800f774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f776:	bf00      	nop
 800f778:	370c      	adds	r7, #12
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	20000014 	.word	0x20000014
	...

0800f790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f790:	f3ef 8009 	mrs	r0, PSP
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	4b15      	ldr	r3, [pc, #84]	; (800f7f0 <pxCurrentTCBConst>)
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	f01e 0f10 	tst.w	lr, #16
 800f7a0:	bf08      	it	eq
 800f7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7aa:	6010      	str	r0, [r2, #0]
 800f7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f7b4:	f380 8811 	msr	BASEPRI, r0
 800f7b8:	f3bf 8f4f 	dsb	sy
 800f7bc:	f3bf 8f6f 	isb	sy
 800f7c0:	f7fe fec4 	bl	800e54c <vTaskSwitchContext>
 800f7c4:	f04f 0000 	mov.w	r0, #0
 800f7c8:	f380 8811 	msr	BASEPRI, r0
 800f7cc:	bc09      	pop	{r0, r3}
 800f7ce:	6819      	ldr	r1, [r3, #0]
 800f7d0:	6808      	ldr	r0, [r1, #0]
 800f7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d6:	f01e 0f10 	tst.w	lr, #16
 800f7da:	bf08      	it	eq
 800f7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7e0:	f380 8809 	msr	PSP, r0
 800f7e4:	f3bf 8f6f 	isb	sy
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	f3af 8000 	nop.w

0800f7f0 <pxCurrentTCBConst>:
 800f7f0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f7f4:	bf00      	nop
 800f7f6:	bf00      	nop

0800f7f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f802:	f383 8811 	msr	BASEPRI, r3
 800f806:	f3bf 8f6f 	isb	sy
 800f80a:	f3bf 8f4f 	dsb	sy
 800f80e:	607b      	str	r3, [r7, #4]
}
 800f810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f812:	f7fe fde1 	bl	800e3d8 <xTaskIncrementTick>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d003      	beq.n	800f824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f81c:	4b06      	ldr	r3, [pc, #24]	; (800f838 <xPortSysTickHandler+0x40>)
 800f81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f822:	601a      	str	r2, [r3, #0]
 800f824:	2300      	movs	r3, #0
 800f826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	f383 8811 	msr	BASEPRI, r3
}
 800f82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f830:	bf00      	nop
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	e000ed04 	.word	0xe000ed04

0800f83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f83c:	b480      	push	{r7}
 800f83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f840:	4b0b      	ldr	r3, [pc, #44]	; (800f870 <vPortSetupTimerInterrupt+0x34>)
 800f842:	2200      	movs	r2, #0
 800f844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f846:	4b0b      	ldr	r3, [pc, #44]	; (800f874 <vPortSetupTimerInterrupt+0x38>)
 800f848:	2200      	movs	r2, #0
 800f84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f84c:	4b0a      	ldr	r3, [pc, #40]	; (800f878 <vPortSetupTimerInterrupt+0x3c>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4a0a      	ldr	r2, [pc, #40]	; (800f87c <vPortSetupTimerInterrupt+0x40>)
 800f852:	fba2 2303 	umull	r2, r3, r2, r3
 800f856:	099b      	lsrs	r3, r3, #6
 800f858:	4a09      	ldr	r2, [pc, #36]	; (800f880 <vPortSetupTimerInterrupt+0x44>)
 800f85a:	3b01      	subs	r3, #1
 800f85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f85e:	4b04      	ldr	r3, [pc, #16]	; (800f870 <vPortSetupTimerInterrupt+0x34>)
 800f860:	2207      	movs	r2, #7
 800f862:	601a      	str	r2, [r3, #0]
}
 800f864:	bf00      	nop
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	e000e010 	.word	0xe000e010
 800f874:	e000e018 	.word	0xe000e018
 800f878:	20000004 	.word	0x20000004
 800f87c:	10624dd3 	.word	0x10624dd3
 800f880:	e000e014 	.word	0xe000e014

0800f884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f894 <vPortEnableVFP+0x10>
 800f888:	6801      	ldr	r1, [r0, #0]
 800f88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f88e:	6001      	str	r1, [r0, #0]
 800f890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f892:	bf00      	nop
 800f894:	e000ed88 	.word	0xe000ed88

0800f898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f89e:	f3ef 8305 	mrs	r3, IPSR
 800f8a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2b0f      	cmp	r3, #15
 800f8a8:	d914      	bls.n	800f8d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8aa:	4a17      	ldr	r2, [pc, #92]	; (800f908 <vPortValidateInterruptPriority+0x70>)
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f8b4:	4b15      	ldr	r3, [pc, #84]	; (800f90c <vPortValidateInterruptPriority+0x74>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	7afa      	ldrb	r2, [r7, #11]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d20a      	bcs.n	800f8d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	607b      	str	r3, [r7, #4]
}
 800f8d0:	bf00      	nop
 800f8d2:	e7fe      	b.n	800f8d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8d4:	4b0e      	ldr	r3, [pc, #56]	; (800f910 <vPortValidateInterruptPriority+0x78>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f8dc:	4b0d      	ldr	r3, [pc, #52]	; (800f914 <vPortValidateInterruptPriority+0x7c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d90a      	bls.n	800f8fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e8:	f383 8811 	msr	BASEPRI, r3
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	603b      	str	r3, [r7, #0]
}
 800f8f6:	bf00      	nop
 800f8f8:	e7fe      	b.n	800f8f8 <vPortValidateInterruptPriority+0x60>
	}
 800f8fa:	bf00      	nop
 800f8fc:	3714      	adds	r7, #20
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop
 800f908:	e000e3f0 	.word	0xe000e3f0
 800f90c:	20000dfc 	.word	0x20000dfc
 800f910:	e000ed0c 	.word	0xe000ed0c
 800f914:	20000e00 	.word	0x20000e00

0800f918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08a      	sub	sp, #40	; 0x28
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f920:	2300      	movs	r3, #0
 800f922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f924:	f7fe fc8a 	bl	800e23c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f928:	4b5b      	ldr	r3, [pc, #364]	; (800fa98 <pvPortMalloc+0x180>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d101      	bne.n	800f934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f930:	f000 f920 	bl	800fb74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f934:	4b59      	ldr	r3, [pc, #356]	; (800fa9c <pvPortMalloc+0x184>)
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	4013      	ands	r3, r2
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f040 8093 	bne.w	800fa68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d01d      	beq.n	800f984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f948:	2208      	movs	r2, #8
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	4413      	add	r3, r2
 800f94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f003 0307 	and.w	r3, r3, #7
 800f956:	2b00      	cmp	r3, #0
 800f958:	d014      	beq.n	800f984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f023 0307 	bic.w	r3, r3, #7
 800f960:	3308      	adds	r3, #8
 800f962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f003 0307 	and.w	r3, r3, #7
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00a      	beq.n	800f984 <pvPortMalloc+0x6c>
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	617b      	str	r3, [r7, #20]
}
 800f980:	bf00      	nop
 800f982:	e7fe      	b.n	800f982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d06e      	beq.n	800fa68 <pvPortMalloc+0x150>
 800f98a:	4b45      	ldr	r3, [pc, #276]	; (800faa0 <pvPortMalloc+0x188>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	429a      	cmp	r2, r3
 800f992:	d869      	bhi.n	800fa68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f994:	4b43      	ldr	r3, [pc, #268]	; (800faa4 <pvPortMalloc+0x18c>)
 800f996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f998:	4b42      	ldr	r3, [pc, #264]	; (800faa4 <pvPortMalloc+0x18c>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f99e:	e004      	b.n	800f9aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d903      	bls.n	800f9bc <pvPortMalloc+0xa4>
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1f1      	bne.n	800f9a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f9bc:	4b36      	ldr	r3, [pc, #216]	; (800fa98 <pvPortMalloc+0x180>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d050      	beq.n	800fa68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9c6:	6a3b      	ldr	r3, [r7, #32]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2208      	movs	r2, #8
 800f9cc:	4413      	add	r3, r2
 800f9ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	6a3b      	ldr	r3, [r7, #32]
 800f9d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9da:	685a      	ldr	r2, [r3, #4]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	1ad2      	subs	r2, r2, r3
 800f9e0:	2308      	movs	r3, #8
 800f9e2:	005b      	lsls	r3, r3, #1
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d91f      	bls.n	800fa28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	f003 0307 	and.w	r3, r3, #7
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00a      	beq.n	800fa10 <pvPortMalloc+0xf8>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	613b      	str	r3, [r7, #16]
}
 800fa0c:	bf00      	nop
 800fa0e:	e7fe      	b.n	800fa0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	685a      	ldr	r2, [r3, #4]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	1ad2      	subs	r2, r2, r3
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa22:	69b8      	ldr	r0, [r7, #24]
 800fa24:	f000 f908 	bl	800fc38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa28:	4b1d      	ldr	r3, [pc, #116]	; (800faa0 <pvPortMalloc+0x188>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	4a1b      	ldr	r2, [pc, #108]	; (800faa0 <pvPortMalloc+0x188>)
 800fa34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa36:	4b1a      	ldr	r3, [pc, #104]	; (800faa0 <pvPortMalloc+0x188>)
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	4b1b      	ldr	r3, [pc, #108]	; (800faa8 <pvPortMalloc+0x190>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d203      	bcs.n	800fa4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa42:	4b17      	ldr	r3, [pc, #92]	; (800faa0 <pvPortMalloc+0x188>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4a18      	ldr	r2, [pc, #96]	; (800faa8 <pvPortMalloc+0x190>)
 800fa48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	685a      	ldr	r2, [r3, #4]
 800fa4e:	4b13      	ldr	r3, [pc, #76]	; (800fa9c <pvPortMalloc+0x184>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	431a      	orrs	r2, r3
 800fa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fa5e:	4b13      	ldr	r3, [pc, #76]	; (800faac <pvPortMalloc+0x194>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3301      	adds	r3, #1
 800fa64:	4a11      	ldr	r2, [pc, #68]	; (800faac <pvPortMalloc+0x194>)
 800fa66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa68:	f7fe fbf6 	bl	800e258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	f003 0307 	and.w	r3, r3, #7
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00a      	beq.n	800fa8c <pvPortMalloc+0x174>
	__asm volatile
 800fa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7a:	f383 8811 	msr	BASEPRI, r3
 800fa7e:	f3bf 8f6f 	isb	sy
 800fa82:	f3bf 8f4f 	dsb	sy
 800fa86:	60fb      	str	r3, [r7, #12]
}
 800fa88:	bf00      	nop
 800fa8a:	e7fe      	b.n	800fa8a <pvPortMalloc+0x172>
	return pvReturn;
 800fa8c:	69fb      	ldr	r3, [r7, #28]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3728      	adds	r7, #40	; 0x28
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	20004a0c 	.word	0x20004a0c
 800fa9c:	20004a20 	.word	0x20004a20
 800faa0:	20004a10 	.word	0x20004a10
 800faa4:	20004a04 	.word	0x20004a04
 800faa8:	20004a14 	.word	0x20004a14
 800faac:	20004a18 	.word	0x20004a18

0800fab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b086      	sub	sp, #24
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d04d      	beq.n	800fb5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fac2:	2308      	movs	r3, #8
 800fac4:	425b      	negs	r3, r3
 800fac6:	697a      	ldr	r2, [r7, #20]
 800fac8:	4413      	add	r3, r2
 800faca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	685a      	ldr	r2, [r3, #4]
 800fad4:	4b24      	ldr	r3, [pc, #144]	; (800fb68 <vPortFree+0xb8>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4013      	ands	r3, r2
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d10a      	bne.n	800faf4 <vPortFree+0x44>
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	60fb      	str	r3, [r7, #12]
}
 800faf0:	bf00      	nop
 800faf2:	e7fe      	b.n	800faf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00a      	beq.n	800fb12 <vPortFree+0x62>
	__asm volatile
 800fafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb00:	f383 8811 	msr	BASEPRI, r3
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	60bb      	str	r3, [r7, #8]
}
 800fb0e:	bf00      	nop
 800fb10:	e7fe      	b.n	800fb10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	685a      	ldr	r2, [r3, #4]
 800fb16:	4b14      	ldr	r3, [pc, #80]	; (800fb68 <vPortFree+0xb8>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4013      	ands	r3, r2
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d01e      	beq.n	800fb5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d11a      	bne.n	800fb5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	685a      	ldr	r2, [r3, #4]
 800fb2c:	4b0e      	ldr	r3, [pc, #56]	; (800fb68 <vPortFree+0xb8>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	43db      	mvns	r3, r3
 800fb32:	401a      	ands	r2, r3
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb38:	f7fe fb80 	bl	800e23c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	685a      	ldr	r2, [r3, #4]
 800fb40:	4b0a      	ldr	r3, [pc, #40]	; (800fb6c <vPortFree+0xbc>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4413      	add	r3, r2
 800fb46:	4a09      	ldr	r2, [pc, #36]	; (800fb6c <vPortFree+0xbc>)
 800fb48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb4a:	6938      	ldr	r0, [r7, #16]
 800fb4c:	f000 f874 	bl	800fc38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fb50:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <vPortFree+0xc0>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	3301      	adds	r3, #1
 800fb56:	4a06      	ldr	r2, [pc, #24]	; (800fb70 <vPortFree+0xc0>)
 800fb58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fb5a:	f7fe fb7d 	bl	800e258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb5e:	bf00      	nop
 800fb60:	3718      	adds	r7, #24
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	20004a20 	.word	0x20004a20
 800fb6c:	20004a10 	.word	0x20004a10
 800fb70:	20004a1c 	.word	0x20004a1c

0800fb74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb74:	b480      	push	{r7}
 800fb76:	b085      	sub	sp, #20
 800fb78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fb7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fb7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb80:	4b27      	ldr	r3, [pc, #156]	; (800fc20 <prvHeapInit+0xac>)
 800fb82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f003 0307 	and.w	r3, r3, #7
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00c      	beq.n	800fba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	3307      	adds	r3, #7
 800fb92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f023 0307 	bic.w	r3, r3, #7
 800fb9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	4a1f      	ldr	r2, [pc, #124]	; (800fc20 <prvHeapInit+0xac>)
 800fba4:	4413      	add	r3, r2
 800fba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fbac:	4a1d      	ldr	r2, [pc, #116]	; (800fc24 <prvHeapInit+0xb0>)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fbb2:	4b1c      	ldr	r3, [pc, #112]	; (800fc24 <prvHeapInit+0xb0>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	68ba      	ldr	r2, [r7, #8]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fbc0:	2208      	movs	r2, #8
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	1a9b      	subs	r3, r3, r2
 800fbc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f023 0307 	bic.w	r3, r3, #7
 800fbce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	4a15      	ldr	r2, [pc, #84]	; (800fc28 <prvHeapInit+0xb4>)
 800fbd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fbd6:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <prvHeapInit+0xb4>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fbde:	4b12      	ldr	r3, [pc, #72]	; (800fc28 <prvHeapInit+0xb4>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	1ad2      	subs	r2, r2, r3
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fbf4:	4b0c      	ldr	r3, [pc, #48]	; (800fc28 <prvHeapInit+0xb4>)
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	4a0a      	ldr	r2, [pc, #40]	; (800fc2c <prvHeapInit+0xb8>)
 800fc02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	4a09      	ldr	r2, [pc, #36]	; (800fc30 <prvHeapInit+0xbc>)
 800fc0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc0c:	4b09      	ldr	r3, [pc, #36]	; (800fc34 <prvHeapInit+0xc0>)
 800fc0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fc12:	601a      	str	r2, [r3, #0]
}
 800fc14:	bf00      	nop
 800fc16:	3714      	adds	r7, #20
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr
 800fc20:	20000e04 	.word	0x20000e04
 800fc24:	20004a04 	.word	0x20004a04
 800fc28:	20004a0c 	.word	0x20004a0c
 800fc2c:	20004a14 	.word	0x20004a14
 800fc30:	20004a10 	.word	0x20004a10
 800fc34:	20004a20 	.word	0x20004a20

0800fc38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc40:	4b28      	ldr	r3, [pc, #160]	; (800fce4 <prvInsertBlockIntoFreeList+0xac>)
 800fc42:	60fb      	str	r3, [r7, #12]
 800fc44:	e002      	b.n	800fc4c <prvInsertBlockIntoFreeList+0x14>
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	60fb      	str	r3, [r7, #12]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d8f7      	bhi.n	800fc46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	68ba      	ldr	r2, [r7, #8]
 800fc60:	4413      	add	r3, r2
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d108      	bne.n	800fc7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	685a      	ldr	r2, [r3, #4]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	441a      	add	r2, r3
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	68ba      	ldr	r2, [r7, #8]
 800fc84:	441a      	add	r2, r3
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d118      	bne.n	800fcc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	4b15      	ldr	r3, [pc, #84]	; (800fce8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d00d      	beq.n	800fcb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	685a      	ldr	r2, [r3, #4]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	441a      	add	r2, r3
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	601a      	str	r2, [r3, #0]
 800fcb4:	e008      	b.n	800fcc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fcb6:	4b0c      	ldr	r3, [pc, #48]	; (800fce8 <prvInsertBlockIntoFreeList+0xb0>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	601a      	str	r2, [r3, #0]
 800fcbe:	e003      	b.n	800fcc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d002      	beq.n	800fcd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcd6:	bf00      	nop
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	20004a04 	.word	0x20004a04
 800fce8:	20004a0c 	.word	0x20004a0c

0800fcec <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800fcf0:	f004 fe28 	bl	8014944 <touchgfx_init>
}
 800fcf4:	bf00      	nop
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800fcfc:	f004 fe4c 	bl	8014998 <touchgfx_taskEntry>
}
 800fd00:	bf00      	nop
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
    {
 800fd0c:	4a04      	ldr	r2, [pc, #16]	; (800fd20 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	601a      	str	r2, [r3, #0]
    }
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4618      	mov	r0, r3
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	08029e48 	.word	0x08029e48

0800fd24 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
    }
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7ff ffe9 	bl	800fd04 <_ZN8touchgfx12FontProviderD1Ev>
 800fd32:	2104      	movs	r1, #4
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f017 ff30 	bl	8027b9a <_ZdlPvj>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800fd50:	887b      	ldrh	r3, [r7, #2]
 800fd52:	2b03      	cmp	r3, #3
 800fd54:	d81e      	bhi.n	800fd94 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800fd56:	a201      	add	r2, pc, #4	; (adr r2, 800fd5c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800fd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd5c:	0800fd6d 	.word	0x0800fd6d
 800fd60:	0800fd77 	.word	0x0800fd77
 800fd64:	0800fd81 	.word	0x0800fd81
 800fd68:	0800fd8b 	.word	0x0800fd8b
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800fd6c:	f003 f884 	bl	8012e78 <_ZN17TypedTextDatabase8getFontsEv>
 800fd70:	4603      	mov	r3, r0
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	e00f      	b.n	800fd96 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800fd76:	f003 f87f 	bl	8012e78 <_ZN17TypedTextDatabase8getFontsEv>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	e00a      	b.n	800fd96 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800fd80:	f003 f87a 	bl	8012e78 <_ZN17TypedTextDatabase8getFontsEv>
 800fd84:	4603      	mov	r3, r0
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	e005      	b.n	800fd96 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::ABOVEDEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800fd8a:	f003 f875 	bl	8012e78 <_ZN17TypedTextDatabase8getFontsEv>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	e000      	b.n	800fd96 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 800fd94:	2300      	movs	r3, #0
    }
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3708      	adds	r7, #8
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop

0800fda0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;        // verdana_10_4bpp
    static const touchgfx::FontId ABOVEDEFAULT = 3; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	4a05      	ldr	r2, [pc, #20]	; (800fdc0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	601a      	str	r2, [r3, #0]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff ffa7 	bl	800fd04 <_ZN8touchgfx12FontProviderD1Ev>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	08029e34 	.word	0x08029e34

0800fdc4 <_ZN23ApplicationFontProviderD0Ev>:
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f7ff ffe7 	bl	800fda0 <_ZN23ApplicationFontProviderD1Ev>
 800fdd2:	2104      	movs	r1, #4
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f017 fee0 	bl	8027b9a <_ZdlPvj>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4618      	mov	r0, r3
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
    {
 800fdec:	4a04      	ldr	r2, [pc, #16]	; (800fe00 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	601a      	str	r2, [r3, #0]
    }
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr
 800fe00:	0802a228 	.word	0x0802a228

0800fe04 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
    }
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7ff ffe9 	bl	800fde4 <_ZN8touchgfx4FontD1Ev>
 800fe12:	2110      	movs	r1, #16
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f017 fec0 	bl	8027b9a <_ZdlPvj>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800fe24:	b590      	push	{r4, r7, lr}
 800fe26:	b087      	sub	sp, #28
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800fe30:	887b      	ldrh	r3, [r7, #2]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d101      	bne.n	800fe3a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	e010      	b.n	800fe5c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3308      	adds	r3, #8
 800fe48:	681c      	ldr	r4, [r3, #0]
 800fe4a:	f107 030f 	add.w	r3, r7, #15
 800fe4e:	f107 0210 	add.w	r2, r7, #16
 800fe52:	8879      	ldrh	r1, [r7, #2]
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	47a0      	blx	r4
 800fe58:	6178      	str	r0, [r7, #20]
        return glyph;
 800fe5a:	697b      	ldr	r3, [r7, #20]
    }
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	371c      	adds	r7, #28
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd90      	pop	{r4, r7, pc}

0800fe64 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	895b      	ldrh	r3, [r3, #10]
    }
 800fe70:	4618      	mov	r0, r3
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	899b      	ldrh	r3, [r3, #12]
    }
 800fe88:	4618      	mov	r0, r3
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	889b      	ldrh	r3, [r3, #4]
    }
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800feac:	b480      	push	{r7}
 800feae:	b083      	sub	sp, #12
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	889a      	ldrh	r2, [r3, #4]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	799b      	ldrb	r3, [r3, #6]
 800febc:	b29b      	uxth	r3, r3
 800febe:	4413      	add	r3, r2
 800fec0:	b29b      	uxth	r3, r3
    }
 800fec2:	4618      	mov	r0, r3
 800fec4:	370c      	adds	r7, #12
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800fece:	b480      	push	{r7}
 800fed0:	b083      	sub	sp, #12
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	79db      	ldrb	r3, [r3, #7]
 800feda:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800fede:	b2db      	uxtb	r3, r3
    }
 800fee0:	4618      	mov	r0, r3
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	79db      	ldrb	r3, [r3, #7]
 800fef8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fefc:	b2db      	uxtb	r3, r3
    }
 800fefe:	4618      	mov	r0, r3
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr
	...

0800ff0c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	4a05      	ldr	r2, [pc, #20]	; (800ff2c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7ff ff61 	bl	800fde4 <_ZN8touchgfx4FontD1Ev>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4618      	mov	r0, r3
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	0802bed4 	.word	0x0802bed4

0800ff30 <_ZN8touchgfx9ConstFontD0Ev>:
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7ff ffe7 	bl	800ff0c <_ZN8touchgfx9ConstFontD1Ev>
 800ff3e:	2118      	movs	r1, #24
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f017 fe2a 	bl	8027b9a <_ZdlPvj>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	4a05      	ldr	r2, [pc, #20]	; (800ff70 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	601a      	str	r2, [r3, #0]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff ffd3 	bl	800ff0c <_ZN8touchgfx9ConstFontD1Ev>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	08029e6c 	.word	0x08029e6c

0800ff74 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7ff ffe7 	bl	800ff50 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ff82:	2124      	movs	r1, #36	; 0x24
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f017 fe08 	bl	8027b9a <_ZdlPvj>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3708      	adds	r7, #8
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
    {
 800ff9c:	4a04      	ldr	r2, [pc, #16]	; (800ffb0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	601a      	str	r2, [r3, #0]
    }
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	370c      	adds	r7, #12
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr
 800ffb0:	08029e5c 	.word	0x08029e5c

0800ffb4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
    }
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7ff ffe9 	bl	800ff94 <_ZN8touchgfx9TypedTextD1Ev>
 800ffc2:	2108      	movs	r1, #8
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f017 fde8 	bl	8027b9a <_ZdlPvj>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6a1b      	ldr	r3, [r3, #32]
    }
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b08c      	sub	sp, #48	; 0x30
 800fff0:	af08      	add	r7, sp, #32
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	4611      	mov	r1, r2
 800fff8:	461a      	mov	r2, r3
 800fffa:	460b      	mov	r3, r1
 800fffc:	80fb      	strh	r3, [r7, #6]
 800fffe:	4613      	mov	r3, r2
 8010000:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	88b9      	ldrh	r1, [r7, #4]
 8010006:	88fa      	ldrh	r2, [r7, #6]
 8010008:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801000a:	9306      	str	r3, [sp, #24]
 801000c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801000e:	9305      	str	r3, [sp, #20]
 8010010:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010014:	9304      	str	r3, [sp, #16]
 8010016:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801001a:	9303      	str	r3, [sp, #12]
 801001c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010020:	9302      	str	r3, [sp, #8]
 8010022:	7f3b      	ldrb	r3, [r7, #28]
 8010024:	9301      	str	r3, [sp, #4]
 8010026:	7e3b      	ldrb	r3, [r7, #24]
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	460b      	mov	r3, r1
 801002c:	68b9      	ldr	r1, [r7, #8]
 801002e:	f00b fbc9 	bl	801b7c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8010032:	4a08      	ldr	r2, [pc, #32]	; (8010054 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	601a      	str	r2, [r3, #0]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801003c:	619a      	str	r2, [r3, #24]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010042:	61da      	str	r2, [r3, #28]
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010048:	621a      	str	r2, [r3, #32]
{
}
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}
 8010054:	08029e6c 	.word	0x08029e6c

08010058 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	699b      	ldr	r3, [r3, #24]
 8010066:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	889b      	ldrh	r3, [r3, #4]
 801006c:	0adb      	lsrs	r3, r3, #11
 801006e:	b29b      	uxth	r3, r3
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	4413      	add	r3, r2
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4413      	add	r3, r2
}
 801007e:	4618      	mov	r0, r3
 8010080:	3714      	adds	r7, #20
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr

0801008a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801008a:	b480      	push	{r7}
 801008c:	b089      	sub	sp, #36	; 0x24
 801008e:	af00      	add	r7, sp, #0
 8010090:	60f8      	str	r0, [r7, #12]
 8010092:	460b      	mov	r3, r1
 8010094:	607a      	str	r2, [r7, #4]
 8010096:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d003      	beq.n	80100a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	7b1b      	ldrb	r3, [r3, #12]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	e030      	b.n	801010c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	69da      	ldr	r2, [r3, #28]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	7b5b      	ldrb	r3, [r3, #13]
 80100b6:	021b      	lsls	r3, r3, #8
 80100b8:	b21b      	sxth	r3, r3
 80100ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80100be:	b219      	sxth	r1, r3
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	7adb      	ldrb	r3, [r3, #11]
 80100c4:	b21b      	sxth	r3, r3
 80100c6:	430b      	orrs	r3, r1
 80100c8:	b21b      	sxth	r3, r3
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	4413      	add	r3, r2
 80100d0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	7b1b      	ldrb	r3, [r3, #12]
 80100d6:	837b      	strh	r3, [r7, #26]
 80100d8:	8b7b      	ldrh	r3, [r7, #26]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d015      	beq.n	801010a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	881b      	ldrh	r3, [r3, #0]
 80100e2:	897a      	ldrh	r2, [r7, #10]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d103      	bne.n	80100f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80100ee:	e00d      	b.n	801010c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	897a      	ldrh	r2, [r7, #10]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d306      	bcc.n	8010108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80100fa:	8b7b      	ldrh	r3, [r7, #26]
 80100fc:	3b01      	subs	r3, #1
 80100fe:	837b      	strh	r3, [r7, #26]
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	3304      	adds	r3, #4
 8010104:	61fb      	str	r3, [r7, #28]
 8010106:	e7e7      	b.n	80100d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8010108:	bf00      	nop
        }
    }
    return 0;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	3724      	adds	r7, #36	; 0x24
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8010118:	b580      	push	{r7, lr}
 801011a:	af00      	add	r7, sp, #0
 801011c:	4801      	ldr	r0, [pc, #4]	; (8010124 <__tcf_0+0xc>)
 801011e:	f7ff ff17 	bl	800ff50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010122:	bd80      	pop	{r7, pc}
 8010124:	20004a24 	.word	0x20004a24

08010128 <_Z23getFont_verdana_10_4bppv>:
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b08a      	sub	sp, #40	; 0x28
 801012c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 801012e:	4b1e      	ldr	r3, [pc, #120]	; (80101a8 <_Z23getFont_verdana_10_4bppv+0x80>)
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	f3bf 8f5b 	dmb	ish
 8010136:	b2db      	uxtb	r3, r3
 8010138:	f003 0301 	and.w	r3, r3, #1
 801013c:	2b00      	cmp	r3, #0
 801013e:	bf0c      	ite	eq
 8010140:	2301      	moveq	r3, #1
 8010142:	2300      	movne	r3, #0
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d02a      	beq.n	80101a0 <_Z23getFont_verdana_10_4bppv+0x78>
 801014a:	4817      	ldr	r0, [pc, #92]	; (80101a8 <_Z23getFont_verdana_10_4bppv+0x80>)
 801014c:	f017 fd27 	bl	8027b9e <__cxa_guard_acquire>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	bf14      	ite	ne
 8010156:	2301      	movne	r3, #1
 8010158:	2300      	moveq	r3, #0
 801015a:	b2db      	uxtb	r3, r3
 801015c:	2b00      	cmp	r3, #0
 801015e:	d01f      	beq.n	80101a0 <_Z23getFont_verdana_10_4bppv+0x78>
 8010160:	2300      	movs	r3, #0
 8010162:	9309      	str	r3, [sp, #36]	; 0x24
 8010164:	2300      	movs	r3, #0
 8010166:	9308      	str	r3, [sp, #32]
 8010168:	233f      	movs	r3, #63	; 0x3f
 801016a:	9307      	str	r3, [sp, #28]
 801016c:	4b0f      	ldr	r3, [pc, #60]	; (80101ac <_Z23getFont_verdana_10_4bppv+0x84>)
 801016e:	9306      	str	r3, [sp, #24]
 8010170:	4b0f      	ldr	r3, [pc, #60]	; (80101b0 <_Z23getFont_verdana_10_4bppv+0x88>)
 8010172:	9305      	str	r3, [sp, #20]
 8010174:	2300      	movs	r3, #0
 8010176:	9304      	str	r3, [sp, #16]
 8010178:	2300      	movs	r3, #0
 801017a:	9303      	str	r3, [sp, #12]
 801017c:	2301      	movs	r3, #1
 801017e:	9302      	str	r3, [sp, #8]
 8010180:	2304      	movs	r3, #4
 8010182:	9301      	str	r3, [sp, #4]
 8010184:	2300      	movs	r3, #0
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	230a      	movs	r3, #10
 801018a:	2201      	movs	r2, #1
 801018c:	4909      	ldr	r1, [pc, #36]	; (80101b4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 801018e:	480a      	ldr	r0, [pc, #40]	; (80101b8 <_Z23getFont_verdana_10_4bppv+0x90>)
 8010190:	f7ff ff2c 	bl	800ffec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010194:	4804      	ldr	r0, [pc, #16]	; (80101a8 <_Z23getFont_verdana_10_4bppv+0x80>)
 8010196:	f017 fd0e 	bl	8027bb6 <__cxa_guard_release>
 801019a:	4808      	ldr	r0, [pc, #32]	; (80101bc <_Z23getFont_verdana_10_4bppv+0x94>)
 801019c:	f017 feee 	bl	8027f7c <atexit>
    return verdana_10_4bpp;
 80101a0:	4b05      	ldr	r3, [pc, #20]	; (80101b8 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	20004a48 	.word	0x20004a48
 80101ac:	08030598 	.word	0x08030598
 80101b0:	08029eb8 	.word	0x08029eb8
 80101b4:	08030268 	.word	0x08030268
 80101b8:	20004a24 	.word	0x20004a24
 80101bc:	08010119 	.word	0x08010119

080101c0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 11, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80101c0:	b580      	push	{r7, lr}
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	4801      	ldr	r0, [pc, #4]	; (80101cc <__tcf_0+0xc>)
 80101c6:	f7ff fec3 	bl	800ff50 <_ZN8touchgfx13GeneratedFontD1Ev>
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	20004a4c 	.word	0x20004a4c

080101d0 <_Z23getFont_verdana_20_4bppv>:
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b08a      	sub	sp, #40	; 0x28
 80101d4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 11, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80101d6:	4b1e      	ldr	r3, [pc, #120]	; (8010250 <_Z23getFont_verdana_20_4bppv+0x80>)
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	f3bf 8f5b 	dmb	ish
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	f003 0301 	and.w	r3, r3, #1
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	bf0c      	ite	eq
 80101e8:	2301      	moveq	r3, #1
 80101ea:	2300      	movne	r3, #0
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d02a      	beq.n	8010248 <_Z23getFont_verdana_20_4bppv+0x78>
 80101f2:	4817      	ldr	r0, [pc, #92]	; (8010250 <_Z23getFont_verdana_20_4bppv+0x80>)
 80101f4:	f017 fcd3 	bl	8027b9e <__cxa_guard_acquire>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	bf14      	ite	ne
 80101fe:	2301      	movne	r3, #1
 8010200:	2300      	moveq	r3, #0
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b00      	cmp	r3, #0
 8010206:	d01f      	beq.n	8010248 <_Z23getFont_verdana_20_4bppv+0x78>
 8010208:	2300      	movs	r3, #0
 801020a:	9309      	str	r3, [sp, #36]	; 0x24
 801020c:	2300      	movs	r3, #0
 801020e:	9308      	str	r3, [sp, #32]
 8010210:	233f      	movs	r3, #63	; 0x3f
 8010212:	9307      	str	r3, [sp, #28]
 8010214:	4b0f      	ldr	r3, [pc, #60]	; (8010254 <_Z23getFont_verdana_20_4bppv+0x84>)
 8010216:	9306      	str	r3, [sp, #24]
 8010218:	4b0f      	ldr	r3, [pc, #60]	; (8010258 <_Z23getFont_verdana_20_4bppv+0x88>)
 801021a:	9305      	str	r3, [sp, #20]
 801021c:	2300      	movs	r3, #0
 801021e:	9304      	str	r3, [sp, #16]
 8010220:	2300      	movs	r3, #0
 8010222:	9303      	str	r3, [sp, #12]
 8010224:	2301      	movs	r3, #1
 8010226:	9302      	str	r3, [sp, #8]
 8010228:	2304      	movs	r3, #4
 801022a:	9301      	str	r3, [sp, #4]
 801022c:	2300      	movs	r3, #0
 801022e:	9300      	str	r3, [sp, #0]
 8010230:	2314      	movs	r3, #20
 8010232:	220b      	movs	r2, #11
 8010234:	4909      	ldr	r1, [pc, #36]	; (801025c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8010236:	480a      	ldr	r0, [pc, #40]	; (8010260 <_Z23getFont_verdana_20_4bppv+0x90>)
 8010238:	f7ff fed8 	bl	800ffec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801023c:	4804      	ldr	r0, [pc, #16]	; (8010250 <_Z23getFont_verdana_20_4bppv+0x80>)
 801023e:	f017 fcba 	bl	8027bb6 <__cxa_guard_release>
 8010242:	4808      	ldr	r0, [pc, #32]	; (8010264 <_Z23getFont_verdana_20_4bppv+0x94>)
 8010244:	f017 fe9a 	bl	8027f7c <atexit>
    return verdana_20_4bpp;
 8010248:	4b05      	ldr	r3, [pc, #20]	; (8010260 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 801024a:	4618      	mov	r0, r3
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	20004a70 	.word	0x20004a70
 8010254:	0803059c 	.word	0x0803059c
 8010258:	08029ebc 	.word	0x08029ebc
 801025c:	08030278 	.word	0x08030278
 8010260:	20004a4c 	.word	0x20004a4c
 8010264:	080101c1 	.word	0x080101c1

08010268 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 30, 30, 6, 4, 1, 0, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0);
 8010268:	b580      	push	{r7, lr}
 801026a:	af00      	add	r7, sp, #0
 801026c:	4801      	ldr	r0, [pc, #4]	; (8010274 <__tcf_0+0xc>)
 801026e:	f7ff fe6f 	bl	800ff50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010272:	bd80      	pop	{r7, pc}
 8010274:	20004a74 	.word	0x20004a74

08010278 <_Z23getFont_verdana_30_4bppv>:
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b08a      	sub	sp, #40	; 0x28
 801027c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 30, 30, 6, 4, 1, 0, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0);
 801027e:	4b1e      	ldr	r3, [pc, #120]	; (80102f8 <_Z23getFont_verdana_30_4bppv+0x80>)
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	f3bf 8f5b 	dmb	ish
 8010286:	b2db      	uxtb	r3, r3
 8010288:	f003 0301 	and.w	r3, r3, #1
 801028c:	2b00      	cmp	r3, #0
 801028e:	bf0c      	ite	eq
 8010290:	2301      	moveq	r3, #1
 8010292:	2300      	movne	r3, #0
 8010294:	b2db      	uxtb	r3, r3
 8010296:	2b00      	cmp	r3, #0
 8010298:	d02a      	beq.n	80102f0 <_Z23getFont_verdana_30_4bppv+0x78>
 801029a:	4817      	ldr	r0, [pc, #92]	; (80102f8 <_Z23getFont_verdana_30_4bppv+0x80>)
 801029c:	f017 fc7f 	bl	8027b9e <__cxa_guard_acquire>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	bf14      	ite	ne
 80102a6:	2301      	movne	r3, #1
 80102a8:	2300      	moveq	r3, #0
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d01f      	beq.n	80102f0 <_Z23getFont_verdana_30_4bppv+0x78>
 80102b0:	2300      	movs	r3, #0
 80102b2:	9309      	str	r3, [sp, #36]	; 0x24
 80102b4:	2300      	movs	r3, #0
 80102b6:	9308      	str	r3, [sp, #32]
 80102b8:	233f      	movs	r3, #63	; 0x3f
 80102ba:	9307      	str	r3, [sp, #28]
 80102bc:	4b0f      	ldr	r3, [pc, #60]	; (80102fc <_Z23getFont_verdana_30_4bppv+0x84>)
 80102be:	9306      	str	r3, [sp, #24]
 80102c0:	4b0f      	ldr	r3, [pc, #60]	; (8010300 <_Z23getFont_verdana_30_4bppv+0x88>)
 80102c2:	9305      	str	r3, [sp, #20]
 80102c4:	2301      	movs	r3, #1
 80102c6:	9304      	str	r3, [sp, #16]
 80102c8:	2300      	movs	r3, #0
 80102ca:	9303      	str	r3, [sp, #12]
 80102cc:	2301      	movs	r3, #1
 80102ce:	9302      	str	r3, [sp, #8]
 80102d0:	2304      	movs	r3, #4
 80102d2:	9301      	str	r3, [sp, #4]
 80102d4:	2306      	movs	r3, #6
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	231e      	movs	r3, #30
 80102da:	221e      	movs	r2, #30
 80102dc:	4909      	ldr	r1, [pc, #36]	; (8010304 <_Z23getFont_verdana_30_4bppv+0x8c>)
 80102de:	480a      	ldr	r0, [pc, #40]	; (8010308 <_Z23getFont_verdana_30_4bppv+0x90>)
 80102e0:	f7ff fe84 	bl	800ffec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80102e4:	4804      	ldr	r0, [pc, #16]	; (80102f8 <_Z23getFont_verdana_30_4bppv+0x80>)
 80102e6:	f017 fc66 	bl	8027bb6 <__cxa_guard_release>
 80102ea:	4808      	ldr	r0, [pc, #32]	; (801030c <_Z23getFont_verdana_30_4bppv+0x94>)
 80102ec:	f017 fe46 	bl	8027f7c <atexit>
    return verdana_30_4bpp;
 80102f0:	4b05      	ldr	r3, [pc, #20]	; (8010308 <_Z23getFont_verdana_30_4bppv+0x90>)
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	20004a98 	.word	0x20004a98
 80102fc:	080305a0 	.word	0x080305a0
 8010300:	08029ec0 	.word	0x08029ec0
 8010304:	08030314 	.word	0x08030314
 8010308:	20004a74 	.word	0x20004a74
 801030c:	08010269 	.word	0x08010269

08010310 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8010310:	b580      	push	{r7, lr}
 8010312:	af00      	add	r7, sp, #0
 8010314:	4801      	ldr	r0, [pc, #4]	; (801031c <__tcf_0+0xc>)
 8010316:	f7ff fe1b 	bl	800ff50 <_ZN8touchgfx13GeneratedFontD1Ev>
 801031a:	bd80      	pop	{r7, pc}
 801031c:	20004a9c 	.word	0x20004a9c

08010320 <_Z23getFont_verdana_40_4bppv>:
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b08a      	sub	sp, #40	; 0x28
 8010324:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8010326:	4b1e      	ldr	r3, [pc, #120]	; (80103a0 <_Z23getFont_verdana_40_4bppv+0x80>)
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	f3bf 8f5b 	dmb	ish
 801032e:	b2db      	uxtb	r3, r3
 8010330:	f003 0301 	and.w	r3, r3, #1
 8010334:	2b00      	cmp	r3, #0
 8010336:	bf0c      	ite	eq
 8010338:	2301      	moveq	r3, #1
 801033a:	2300      	movne	r3, #0
 801033c:	b2db      	uxtb	r3, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	d02a      	beq.n	8010398 <_Z23getFont_verdana_40_4bppv+0x78>
 8010342:	4817      	ldr	r0, [pc, #92]	; (80103a0 <_Z23getFont_verdana_40_4bppv+0x80>)
 8010344:	f017 fc2b 	bl	8027b9e <__cxa_guard_acquire>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	bf14      	ite	ne
 801034e:	2301      	movne	r3, #1
 8010350:	2300      	moveq	r3, #0
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b00      	cmp	r3, #0
 8010356:	d01f      	beq.n	8010398 <_Z23getFont_verdana_40_4bppv+0x78>
 8010358:	2300      	movs	r3, #0
 801035a:	9309      	str	r3, [sp, #36]	; 0x24
 801035c:	2300      	movs	r3, #0
 801035e:	9308      	str	r3, [sp, #32]
 8010360:	233f      	movs	r3, #63	; 0x3f
 8010362:	9307      	str	r3, [sp, #28]
 8010364:	4b0f      	ldr	r3, [pc, #60]	; (80103a4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8010366:	9306      	str	r3, [sp, #24]
 8010368:	4b0f      	ldr	r3, [pc, #60]	; (80103a8 <_Z23getFont_verdana_40_4bppv+0x88>)
 801036a:	9305      	str	r3, [sp, #20]
 801036c:	2300      	movs	r3, #0
 801036e:	9304      	str	r3, [sp, #16]
 8010370:	2300      	movs	r3, #0
 8010372:	9303      	str	r3, [sp, #12]
 8010374:	2301      	movs	r3, #1
 8010376:	9302      	str	r3, [sp, #8]
 8010378:	2304      	movs	r3, #4
 801037a:	9301      	str	r3, [sp, #4]
 801037c:	2308      	movs	r3, #8
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	2328      	movs	r3, #40	; 0x28
 8010382:	2210      	movs	r2, #16
 8010384:	4909      	ldr	r1, [pc, #36]	; (80103ac <_Z23getFont_verdana_40_4bppv+0x8c>)
 8010386:	480a      	ldr	r0, [pc, #40]	; (80103b0 <_Z23getFont_verdana_40_4bppv+0x90>)
 8010388:	f7ff fe30 	bl	800ffec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801038c:	4804      	ldr	r0, [pc, #16]	; (80103a0 <_Z23getFont_verdana_40_4bppv+0x80>)
 801038e:	f017 fc12 	bl	8027bb6 <__cxa_guard_release>
 8010392:	4808      	ldr	r0, [pc, #32]	; (80103b4 <_Z23getFont_verdana_40_4bppv+0x94>)
 8010394:	f017 fdf2 	bl	8027f7c <atexit>
    return verdana_40_4bpp;
 8010398:	4b05      	ldr	r3, [pc, #20]	; (80103b0 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 801039a:	4618      	mov	r0, r3
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	20004ac0 	.word	0x20004ac0
 80103a4:	080305a4 	.word	0x080305a4
 80103a8:	08029ec4 	.word	0x08029ec4
 80103ac:	080304b8 	.word	0x080304b8
 80103b0:	20004a9c 	.word	0x20004a9c
 80103b4:	08010311 	.word	0x08010311

080103b8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	4618      	mov	r0, r3
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
    {
    }
 80103da:	bf00      	nop
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr

080103e6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80103e6:	b480      	push	{r7}
 80103e8:	b083      	sub	sp, #12
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
 80103ee:	6039      	str	r1, [r7, #0]
    {
    }
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
    {
    }
 8010406:	bf00      	nop
 8010408:	370c      	adds	r7, #12
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8010412:	b480      	push	{r7}
 8010414:	b083      	sub	sp, #12
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	460b      	mov	r3, r1
 801041c:	70fb      	strb	r3, [r7, #3]
    {
    }
 801041e:	bf00      	nop
 8010420:	370c      	adds	r7, #12
 8010422:	46bd      	mov	sp, r7
 8010424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010428:	4770      	bx	lr

0801042a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 801042a:	b480      	push	{r7}
 801042c:	b083      	sub	sp, #12
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
    {
    }
 8010432:	bf00      	nop
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 801043e:	b480      	push	{r7}
 8010440:	b083      	sub	sp, #12
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
    {
    }
 8010446:	bf00      	nop
 8010448:	370c      	adds	r7, #12
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
	...

08010454 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
    {
 801045c:	4a04      	ldr	r2, [pc, #16]	; (8010470 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	601a      	str	r2, [r3, #0]
    }
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr
 8010470:	08029fd0 	.word	0x08029fd0

08010474 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
    }
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff ffe9 	bl	8010454 <_ZN8touchgfx15UIEventListenerD1Ev>
 8010482:	2104      	movs	r1, #4
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f017 fb88 	bl	8027b9a <_ZdlPvj>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	460b      	mov	r3, r1
 801049e:	70fb      	strb	r3, [r7, #3]
    {
    }
 80104a0:	bf00      	nop
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	683a      	ldr	r2, [r7, #0]
 80104ba:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80104be:	6810      	ldr	r0, [r2, #0]
 80104c0:	6851      	ldr	r1, [r2, #4]
 80104c2:	c303      	stmia	r3!, {r0, r1}
    };
 80104c4:	bf00      	nop
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
    {
 80104d8:	4a04      	ldr	r2, [pc, #16]	; (80104ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	601a      	str	r2, [r3, #0]
    }
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4618      	mov	r0, r3
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	08029fb8 	.word	0x08029fb8

080104f0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
    }
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7ff ffe9 	bl	80104d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80104fe:	2104      	movs	r1, #4
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f017 fb4a 	bl	8027b9a <_ZdlPvj>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010510:	b480      	push	{r7}
 8010512:	af00      	add	r7, sp, #0
    {
        return instance;
 8010514:	4b03      	ldr	r3, [pc, #12]	; (8010524 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010516:	681b      	ldr	r3, [r3, #0]
    }
 8010518:	4618      	mov	r0, r3
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	200060f8 	.word	0x200060f8

08010528 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010528:	b480      	push	{r7}
 801052a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 801052c:	4b0b      	ldr	r3, [pc, #44]	; (801055c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010534:	2b00      	cmp	r3, #0
 8010536:	d008      	beq.n	801054a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010538:	4b08      	ldr	r3, [pc, #32]	; (801055c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d003      	beq.n	801054a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010542:	4b06      	ldr	r3, [pc, #24]	; (801055c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010548:	e002      	b.n	8010550 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 801054a:	4b04      	ldr	r3, [pc, #16]	; (801055c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010550:	4618      	mov	r0, r3
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr
 801055a:	bf00      	nop
 801055c:	200060f8 	.word	0x200060f8

08010560 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8010560:	b480      	push	{r7}
 8010562:	b083      	sub	sp, #12
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8010568:	4a07      	ldr	r2, [pc, #28]	; (8010588 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	601a      	str	r2, [r3, #0]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	605a      	str	r2, [r3, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	721a      	strb	r2, [r3, #8]
    {
    }
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	08029f94 	.word	0x08029f94

0801058c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
    {
 8010594:	4a04      	ldr	r2, [pc, #16]	; (80105a8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	601a      	str	r2, [r3, #0]
    }
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	4618      	mov	r0, r3
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr
 80105a8:	08029f94 	.word	0x08029f94

080105ac <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
    }
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7ff ffe9 	bl	801058c <_ZN8touchgfx10TransitionD1Ev>
 80105ba:	210c      	movs	r1, #12
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f017 faec 	bl	8027b9a <_ZdlPvj>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	4618      	mov	r0, r3
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
    {
    }
 80105d4:	bf00      	nop
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
    {
    }
 80105e8:	bf00      	nop
 80105ea:	370c      	adds	r7, #12
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr

080105f4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
    {
    }
 80105fc:	bf00      	nop
 80105fe:	370c      	adds	r7, #12
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr

08010608 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8010610:	f00a f872 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 8010614:	4603      	mov	r3, r0
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	3230      	adds	r2, #48	; 0x30
 801061a:	6812      	ldr	r2, [r2, #0]
 801061c:	4618      	mov	r0, r3
 801061e:	4790      	blx	r2
    }
 8010620:	bf00      	nop
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	683a      	ldr	r2, [r7, #0]
 8010636:	605a      	str	r2, [r3, #4]
    }
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	4a05      	ldr	r2, [pc, #20]	; (8010664 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	601a      	str	r2, [r3, #0]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff fefd 	bl	8010454 <_ZN8touchgfx15UIEventListenerD1Ev>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4618      	mov	r0, r3
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	0802bd3c 	.word	0x0802bd3c

08010668 <_ZN8touchgfx11ApplicationD0Ev>:
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7ff ffe7 	bl	8010644 <_ZN8touchgfx11ApplicationD1Ev>
 8010676:	f44f 719c 	mov.w	r1, #312	; 0x138
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f017 fa8d 	bl	8027b9a <_ZdlPvj>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4618      	mov	r0, r3
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
	...

0801068c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	4618      	mov	r0, r3
 8010698:	f00a f898 	bl	801a7cc <_ZN8touchgfx11ApplicationC1Ev>
 801069c:	4a09      	ldr	r2, [pc, #36]	; (80106c4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	601a      	str	r2, [r3, #0]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4a04      	ldr	r2, [pc, #16]	; (80106c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80106b6:	6013      	str	r3, [r2, #0]
    }
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4618      	mov	r0, r3
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	08029f50 	.word	0x08029f50
 80106c8:	20006144 	.word	0x20006144

080106cc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 f804 	bl	80106e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80106da:	bf00      	nop
 80106dc:	3708      	adds	r7, #8
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b082      	sub	sp, #8
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d00f      	beq.n	8010714 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	330c      	adds	r3, #12
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4610      	mov	r0, r2
 8010708:	4798      	blx	r3
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d001      	beq.n	8010714 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010710:	2301      	movs	r3, #1
 8010712:	e000      	b.n	8010716 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010714:	2300      	movs	r3, #0
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00e      	beq.n	8010738 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	3308      	adds	r3, #8
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4610      	mov	r0, r2
 801072e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8010738:	bf00      	nop
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8010740:	b480      	push	{r7}
 8010742:	b083      	sub	sp, #12
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	683a      	ldr	r2, [r7, #0]
 801074e:	601a      	str	r2, [r3, #0]
    }
 8010750:	bf00      	nop
 8010752:	370c      	adds	r7, #12
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	4a05      	ldr	r2, [pc, #20]	; (801077c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	601a      	str	r2, [r3, #0]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff ff69 	bl	8010644 <_ZN8touchgfx11ApplicationD1Ev>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	08029f50 	.word	0x08029f50

08010780 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff ffe7 	bl	801075c <_ZN8touchgfx14MVPApplicationD1Ev>
 801078e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f017 fa01 	bl	8027b9a <_ZdlPvj>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4618      	mov	r0, r3
 801079c:	3708      	adds	r7, #8
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
	...

080107a4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	4a08      	ldr	r2, [pc, #32]	; (80107d0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	601a      	str	r2, [r3, #0]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80107b8:	4618      	mov	r0, r3
 80107ba:	f000 fc51 	bl	8011060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff ffcb 	bl	801075c <_ZN8touchgfx14MVPApplicationD1Ev>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4618      	mov	r0, r3
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	08029ef4 	.word	0x08029ef4

080107d4 <_ZN23FrontendApplicationBaseD0Ev>:
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff ffe1 	bl	80107a4 <_ZN23FrontendApplicationBaseD1Ev>
 80107e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f017 f9d7 	bl	8027b9a <_ZdlPvj>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	4618      	mov	r0, r3
 80107f0:	3708      	adds	r7, #8
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80107f6:	b480      	push	{r7}
 80107f8:	b083      	sub	sp, #12
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2201      	movs	r2, #1
 8010802:	721a      	strb	r2, [r3, #8]
    }
 8010804:	bf00      	nop
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	683a      	ldr	r2, [r7, #0]
 801081e:	605a      	str	r2, [r3, #4]
    }
 8010820:	bf00      	nop
 8010822:	370c      	adds	r7, #12
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr

0801082c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/menuscreen_screen/MenuScreenView.hpp>
#include <gui/menuscreen_screen/MenuScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	60b9      	str	r1, [r7, #8]
 8010836:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff ff26 	bl	801068c <_ZN8touchgfx14MVPApplicationC1Ev>
 8010840:	4a13      	ldr	r2, [pc, #76]	; (8010890 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801084c:	4618      	mov	r0, r3
 801084e:	f000 f8e5 	bl	8010a1c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8010862:	f7ff fe55 	bl	8010510 <_ZN8touchgfx3HAL11getInstanceEv>
 8010866:	4603      	mov	r3, r0
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	3208      	adds	r2, #8
 801086c:	6812      	ldr	r2, [r2, #0]
 801086e:	2100      	movs	r1, #0
 8010870:	4618      	mov	r0, r3
 8010872:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8010874:	2000      	movs	r0, #0
 8010876:	f002 fa87 	bl	8012d88 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 801087a:	f7ff fe55 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 801087e:	4603      	mov	r3, r0
 8010880:	4618      	mov	r0, r3
 8010882:	f010 fd48 	bl	8021316 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	4618      	mov	r0, r3
 801088a:	3710      	adds	r7, #16
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	08029ef4 	.word	0x08029ef4

08010894 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4618      	mov	r0, r3
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	683a      	ldr	r2, [r7, #0]
 80108ba:	4611      	mov	r1, r2
 80108bc:	4618      	mov	r0, r3
 80108be:	f7ff ffe9 	bl	8010894 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	685a      	ldr	r2, [r3, #4]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	605a      	str	r2, [r3, #4]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	683a      	ldr	r2, [r7, #0]
 80108ce:	3308      	adds	r3, #8
 80108d0:	3208      	adds	r2, #8
 80108d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>:
 */

// MainScreen

void FrontendApplicationBase::gotoMainScreenScreenNoTransition()
{
 80108e4:	b590      	push	{r4, r7, lr}
 80108e6:	b089      	sub	sp, #36	; 0x24
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenScreenNoTransitionImpl);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80108f2:	4b10      	ldr	r3, [pc, #64]	; (8010934 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv+0x50>)
 80108f4:	61bb      	str	r3, [r7, #24]
 80108f6:	2300      	movs	r3, #0
 80108f8:	61fb      	str	r3, [r7, #28]
 80108fa:	f107 0008 	add.w	r0, r7, #8
 80108fe:	f107 0318 	add.w	r3, r7, #24
 8010902:	cb0c      	ldmia	r3, {r2, r3}
 8010904:	6879      	ldr	r1, [r7, #4]
 8010906:	f000 f8a5 	bl	8010a54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801090a:	f107 0308 	add.w	r3, r7, #8
 801090e:	4619      	mov	r1, r3
 8010910:	4620      	mov	r0, r4
 8010912:	f7ff ffcb 	bl	80108ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010916:	f107 0308 	add.w	r3, r7, #8
 801091a:	4618      	mov	r0, r3
 801091c:	f000 fba0 	bl	8011060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 801092c:	bf00      	nop
 801092e:	3724      	adds	r7, #36	; 0x24
 8010930:	46bd      	mov	sp, r7
 8010932:	bd90      	pop	{r4, r7, pc}
 8010934:	08010939 	.word	0x08010939

08010938 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenScreenNoTransitionImpl()
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af02      	add	r7, sp, #8
 801093e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainScreenView, MainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 801094c:	461a      	mov	r2, r3
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	4b04      	ldr	r3, [pc, #16]	; (8010968 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x30>)
 8010958:	4804      	ldr	r0, [pc, #16]	; (801096c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x34>)
 801095a:	f000 f8ad 	bl	8010ab8 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801095e:	bf00      	nop
 8010960:	3708      	adds	r7, #8
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	20006138 	.word	0x20006138
 801096c:	20006134 	.word	0x20006134

08010970 <_ZN23FrontendApplicationBase32gotoMenuScreenScreenNoTransitionEv>:

// MenuScreen

void FrontendApplicationBase::gotoMenuScreenScreenNoTransition()
{
 8010970:	b590      	push	{r4, r7, lr}
 8010972:	b089      	sub	sp, #36	; 0x24
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMenuScreenScreenNoTransitionImpl);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801097e:	4b10      	ldr	r3, [pc, #64]	; (80109c0 <_ZN23FrontendApplicationBase32gotoMenuScreenScreenNoTransitionEv+0x50>)
 8010980:	61bb      	str	r3, [r7, #24]
 8010982:	2300      	movs	r3, #0
 8010984:	61fb      	str	r3, [r7, #28]
 8010986:	f107 0008 	add.w	r0, r7, #8
 801098a:	f107 0318 	add.w	r3, r7, #24
 801098e:	cb0c      	ldmia	r3, {r2, r3}
 8010990:	6879      	ldr	r1, [r7, #4]
 8010992:	f000 f85f 	bl	8010a54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010996:	f107 0308 	add.w	r3, r7, #8
 801099a:	4619      	mov	r1, r3
 801099c:	4620      	mov	r0, r4
 801099e:	f7ff ff85 	bl	80108ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80109a2:	f107 0308 	add.w	r3, r7, #8
 80109a6:	4618      	mov	r0, r3
 80109a8:	f000 fb5a 	bl	8011060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80109b8:	bf00      	nop
 80109ba:	3724      	adds	r7, #36	; 0x24
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd90      	pop	{r4, r7, pc}
 80109c0:	080109c5 	.word	0x080109c5

080109c4 <_ZN23FrontendApplicationBase36gotoMenuScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMenuScreenScreenNoTransitionImpl()
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af02      	add	r7, sp, #8
 80109ca:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MenuScreenView, MenuScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80109d8:	461a      	mov	r2, r3
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80109e0:	9300      	str	r3, [sp, #0]
 80109e2:	4b04      	ldr	r3, [pc, #16]	; (80109f4 <_ZN23FrontendApplicationBase36gotoMenuScreenScreenNoTransitionImplEv+0x30>)
 80109e4:	4804      	ldr	r0, [pc, #16]	; (80109f8 <_ZN23FrontendApplicationBase36gotoMenuScreenScreenNoTransitionImplEv+0x34>)
 80109e6:	f000 f983 	bl	8010cf0 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80109ea:	bf00      	nop
 80109ec:	3708      	adds	r7, #8
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	20006138 	.word	0x20006138
 80109f8:	20006134 	.word	0x20006134

080109fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	4a04      	ldr	r2, [pc, #16]	; (8010a18 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr
 8010a18:	08029fb8 	.word	0x08029fb8

08010a1c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7ff ffe8 	bl	80109fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010a2c:	4a08      	ldr	r2, [pc, #32]	; (8010a50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	601a      	str	r2, [r3, #0]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2200      	movs	r2, #0
 8010a36:	605a      	str	r2, [r3, #4]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	609a      	str	r2, [r3, #8]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	60da      	str	r2, [r3, #12]
    {
    }
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	4618      	mov	r0, r3
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	08029f38 	.word	0x08029f38

08010a54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	4639      	mov	r1, r7
 8010a60:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7ff ffc8 	bl	80109fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010a6c:	4a08      	ldr	r2, [pc, #32]	; (8010a90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	3308      	adds	r3, #8
 8010a7c:	463a      	mov	r2, r7
 8010a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a82:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3710      	adds	r7, #16
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}
 8010a90:	08029f38 	.word	0x08029f38

08010a94 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7ff fd5e 	bl	8010560 <_ZN8touchgfx10TransitionC1Ev>
 8010aa4:	4a03      	ldr	r2, [pc, #12]	; (8010ab4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	601a      	str	r2, [r3, #0]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4618      	mov	r0, r3
 8010aae:	3708      	adds	r7, #8
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	08029ed0 	.word	0x08029ed0

08010ab8 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010ab8:	b590      	push	{r4, r7, lr}
 8010aba:	b08f      	sub	sp, #60	; 0x3c
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	689a      	ldr	r2, [r3, #8]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	3320      	adds	r3, #32
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4610      	mov	r0, r2
 8010ad6:	4798      	blx	r3
 8010ad8:	4603      	mov	r3, r0
 8010ada:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 8010ade:	d205      	bcs.n	8010aec <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010ae0:	4b7e      	ldr	r3, [pc, #504]	; (8010cdc <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010ae2:	4a7f      	ldr	r2, [pc, #508]	; (8010ce0 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010ae4:	21a7      	movs	r1, #167	; 0xa7
 8010ae6:	487f      	ldr	r0, [pc, #508]	; (8010ce4 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010ae8:	f017 fa2a 	bl	8027f40 <__assert_func>
 8010aec:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	685a      	ldr	r2, [r3, #4]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	3320      	adds	r3, #32
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4610      	mov	r0, r2
 8010afe:	4798      	blx	r3
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b0f      	cmp	r3, #15
 8010b04:	d805      	bhi.n	8010b12 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8010b06:	4b78      	ldr	r3, [pc, #480]	; (8010ce8 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8010b08:	4a75      	ldr	r2, [pc, #468]	; (8010ce0 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010b0a:	21a8      	movs	r1, #168	; 0xa8
 8010b0c:	4875      	ldr	r0, [pc, #468]	; (8010ce4 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010b0e:	f017 fa17 	bl	8027f40 <__assert_func>
 8010b12:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	68da      	ldr	r2, [r3, #12]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	3320      	adds	r3, #32
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4610      	mov	r0, r2
 8010b24:	4798      	blx	r3
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b0b      	cmp	r3, #11
 8010b2a:	d805      	bhi.n	8010b38 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8010b2c:	4b6f      	ldr	r3, [pc, #444]	; (8010cec <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8010b2e:	4a6c      	ldr	r2, [pc, #432]	; (8010ce0 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010b30:	21a9      	movs	r1, #169	; 0xa9
 8010b32:	486c      	ldr	r0, [pc, #432]	; (8010ce4 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010b34:	f017 fa04 	bl	8027f40 <__assert_func>
 8010b38:	bf00      	nop
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	627b      	str	r3, [r7, #36]	; 0x24
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010b46:	f009 fdd7 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f009 fe21 	bl	801a794 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010b52:	6a3b      	ldr	r3, [r7, #32]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d008      	beq.n	8010b6c <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8010b5a:	6a3b      	ldr	r3, [r7, #32]
 8010b5c:	681a      	ldr	r2, [r3, #0]
 8010b5e:	6a3b      	ldr	r3, [r7, #32]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	330c      	adds	r3, #12
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4610      	mov	r0, r2
 8010b6a:	4798      	blx	r3
    if (*currentTrans)
 8010b6c:	6a3b      	ldr	r3, [r7, #32]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d007      	beq.n	8010b84 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8010b74:	6a3b      	ldr	r3, [r7, #32]
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	6a3b      	ldr	r3, [r7, #32]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4610      	mov	r0, r2
 8010b82:	4798      	blx	r3
    if (*currentScreen)
 8010b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d008      	beq.n	8010b9e <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8010b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	3314      	adds	r3, #20
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	4798      	blx	r3
    if (*currentPresenter)
 8010b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d008      	beq.n	8010bb8 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	3304      	adds	r3, #4
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4610      	mov	r0, r2
 8010bb6:	4798      	blx	r3
    if (*currentScreen)
 8010bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d007      	beq.n	8010bd0 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4610      	mov	r0, r2
 8010bce:	4798      	blx	r3
    if (*currentPresenter)
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d008      	beq.n	8010bea <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3308      	adds	r3, #8
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4610      	mov	r0, r2
 8010be8:	4798      	blx	r3
}
 8010bea:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f000 f996 	bl	8010f24 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	200c      	movs	r0, #12
 8010bfe:	f7ff fbdb 	bl	80103b8 <_ZnwjPv>
 8010c02:	4604      	mov	r4, r0
 8010c04:	4620      	mov	r0, r4
 8010c06:	f7ff ff45 	bl	8010a94 <_ZN8touchgfx12NoTransitionC1Ev>
 8010c0a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	2100      	movs	r1, #0
 8010c12:	4618      	mov	r0, r3
 8010c14:	f000 f999 	bl	8010f4a <_ZN8touchgfx17AbstractPartition2atI14MainScreenViewEERT_t>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	f44f 60ea 	mov.w	r0, #1872	; 0x750
 8010c20:	f7ff fbca 	bl	80103b8 <_ZnwjPv>
 8010c24:	4604      	mov	r4, r0
 8010c26:	4620      	mov	r0, r4
 8010c28:	f002 faec 	bl	8013204 <_ZN14MainScreenViewC1Ev>
 8010c2c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	2100      	movs	r1, #0
 8010c34:	4618      	mov	r0, r3
 8010c36:	f000 f99b 	bl	8010f70 <_ZN8touchgfx17AbstractPartition2atI19MainScreenPresenterEERT_t>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	2010      	movs	r0, #16
 8010c40:	f7ff fbba 	bl	80103b8 <_ZnwjPv>
 8010c44:	4604      	mov	r4, r0
 8010c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f002 fa55 	bl	80130f8 <_ZN19MainScreenPresenterC1ER14MainScreenView>
 8010c4e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c54:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c5a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c60:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8010c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	e000      	b.n	8010c70 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	4619      	mov	r1, r3
 8010c72:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010c74:	f7ff fd64 	bl	8010740 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7a:	3304      	adds	r3, #4
 8010c7c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7ff fdc6 	bl	8010810 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f000 f984 	bl	8010f96 <_ZN8touchgfx4ViewI19MainScreenPresenterE4bindERS1_>
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	61fb      	str	r3, [r7, #28]
 8010c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c94:	61bb      	str	r3, [r7, #24]
 8010c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c98:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	330c      	adds	r3, #12
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	69f8      	ldr	r0, [r7, #28]
 8010ca4:	4798      	blx	r3
    newPresenter->activate();
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	69b8      	ldr	r0, [r7, #24]
 8010cae:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010cb0:	6979      	ldr	r1, [r7, #20]
 8010cb2:	69f8      	ldr	r0, [r7, #28]
 8010cb4:	f00b fa2d 	bl	801c112 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	3310      	adds	r3, #16
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	6978      	ldr	r0, [r7, #20]
 8010cc2:	4798      	blx	r3
    newTransition->invalidate();
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	3314      	adds	r3, #20
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	6978      	ldr	r0, [r7, #20]
 8010cce:	4798      	blx	r3
}
 8010cd0:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	373c      	adds	r7, #60	; 0x3c
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd90      	pop	{r4, r7, pc}
 8010cdc:	08029184 	.word	0x08029184
 8010ce0:	08029214 	.word	0x08029214
 8010ce4:	08029320 	.word	0x08029320
 8010ce8:	08029364 	.word	0x08029364
 8010cec:	08029408 	.word	0x08029408

08010cf0 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b08f      	sub	sp, #60	; 0x3c
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
 8010cfc:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	689a      	ldr	r2, [r3, #8]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	3320      	adds	r3, #32
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4610      	mov	r0, r2
 8010d0e:	4798      	blx	r3
 8010d10:	4603      	mov	r3, r0
 8010d12:	2bdb      	cmp	r3, #219	; 0xdb
 8010d14:	d805      	bhi.n	8010d22 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8010d16:	4b7e      	ldr	r3, [pc, #504]	; (8010f10 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8010d18:	4a7e      	ldr	r2, [pc, #504]	; (8010f14 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010d1a:	21a7      	movs	r1, #167	; 0xa7
 8010d1c:	487e      	ldr	r0, [pc, #504]	; (8010f18 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010d1e:	f017 f90f 	bl	8027f40 <__assert_func>
 8010d22:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	685a      	ldr	r2, [r3, #4]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	3320      	adds	r3, #32
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4610      	mov	r0, r2
 8010d34:	4798      	blx	r3
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b0f      	cmp	r3, #15
 8010d3a:	d805      	bhi.n	8010d48 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8010d3c:	4b77      	ldr	r3, [pc, #476]	; (8010f1c <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010d3e:	4a75      	ldr	r2, [pc, #468]	; (8010f14 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010d40:	21a8      	movs	r1, #168	; 0xa8
 8010d42:	4875      	ldr	r0, [pc, #468]	; (8010f18 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010d44:	f017 f8fc 	bl	8027f40 <__assert_func>
 8010d48:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	68da      	ldr	r2, [r3, #12]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3320      	adds	r3, #32
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	4610      	mov	r0, r2
 8010d5a:	4798      	blx	r3
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	2b0b      	cmp	r3, #11
 8010d60:	d805      	bhi.n	8010d6e <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8010d62:	4b6f      	ldr	r3, [pc, #444]	; (8010f20 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8010d64:	4a6b      	ldr	r2, [pc, #428]	; (8010f14 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010d66:	21a9      	movs	r1, #169	; 0xa9
 8010d68:	486b      	ldr	r0, [pc, #428]	; (8010f18 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010d6a:	f017 f8e9 	bl	8027f40 <__assert_func>
 8010d6e:	bf00      	nop
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	627b      	str	r3, [r7, #36]	; 0x24
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010d7c:	f009 fcbc 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 8010d80:	4603      	mov	r3, r0
 8010d82:	4618      	mov	r0, r3
 8010d84:	f009 fd06 	bl	801a794 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010d88:	6a3b      	ldr	r3, [r7, #32]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d008      	beq.n	8010da2 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8010d90:	6a3b      	ldr	r3, [r7, #32]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	6a3b      	ldr	r3, [r7, #32]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	330c      	adds	r3, #12
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	4610      	mov	r0, r2
 8010da0:	4798      	blx	r3
    if (*currentTrans)
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d007      	beq.n	8010dba <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8010daa:	6a3b      	ldr	r3, [r7, #32]
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	6a3b      	ldr	r3, [r7, #32]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4610      	mov	r0, r2
 8010db8:	4798      	blx	r3
    if (*currentScreen)
 8010dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d008      	beq.n	8010dd4 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8010dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3314      	adds	r3, #20
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	4798      	blx	r3
    if (*currentPresenter)
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d008      	beq.n	8010dee <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8010ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	3304      	adds	r3, #4
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4610      	mov	r0, r2
 8010dec:	4798      	blx	r3
    if (*currentScreen)
 8010dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d007      	beq.n	8010e06 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8010df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4610      	mov	r0, r2
 8010e04:	4798      	blx	r3
    if (*currentPresenter)
 8010e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d008      	beq.n	8010e20 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	3308      	adds	r3, #8
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	4798      	blx	r3
}
 8010e20:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	2100      	movs	r1, #0
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f000 f87b 	bl	8010f24 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	4619      	mov	r1, r3
 8010e32:	200c      	movs	r0, #12
 8010e34:	f7ff fac0 	bl	80103b8 <_ZnwjPv>
 8010e38:	4604      	mov	r4, r0
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	f7ff fe2a 	bl	8010a94 <_ZN8touchgfx12NoTransitionC1Ev>
 8010e40:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	2100      	movs	r1, #0
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f000 f8b2 	bl	8010fb2 <_ZN8touchgfx17AbstractPartition2atI14MenuScreenViewEERT_t>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	4619      	mov	r1, r3
 8010e52:	20dc      	movs	r0, #220	; 0xdc
 8010e54:	f7ff fab0 	bl	80103b8 <_ZnwjPv>
 8010e58:	4604      	mov	r4, r0
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f002 fb36 	bl	80134cc <_ZN14MenuScreenViewC1Ev>
 8010e60:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	2100      	movs	r1, #0
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 f8b5 	bl	8010fd8 <_ZN8touchgfx17AbstractPartition2atI19MenuScreenPresenterEERT_t>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	4619      	mov	r1, r3
 8010e72:	2010      	movs	r0, #16
 8010e74:	f7ff faa0 	bl	80103b8 <_ZnwjPv>
 8010e78:	4604      	mov	r4, r0
 8010e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f002 facf 	bl	8013420 <_ZN19MenuScreenPresenterC1ER14MenuScreenView>
 8010e82:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e88:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e8e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e94:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d002      	beq.n	8010ea2 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8010e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9e:	3304      	adds	r3, #4
 8010ea0:	e000      	b.n	8010ea4 <_ZN8touchgfx14makeTransitionI14MenuScreenView19MenuScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010ea8:	f7ff fc4a 	bl	8010740 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eae:	3304      	adds	r3, #4
 8010eb0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7ff fcac 	bl	8010810 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f000 f89e 	bl	8010ffe <_ZN8touchgfx4ViewI19MenuScreenPresenterE4bindERS1_>
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec4:	61fb      	str	r3, [r7, #28]
 8010ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec8:	61bb      	str	r3, [r7, #24]
 8010eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ecc:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	330c      	adds	r3, #12
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	69f8      	ldr	r0, [r7, #28]
 8010ed8:	4798      	blx	r3
    newPresenter->activate();
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	69b8      	ldr	r0, [r7, #24]
 8010ee2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010ee4:	6979      	ldr	r1, [r7, #20]
 8010ee6:	69f8      	ldr	r0, [r7, #28]
 8010ee8:	f00b f913 	bl	801c112 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	3310      	adds	r3, #16
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	6978      	ldr	r0, [r7, #20]
 8010ef6:	4798      	blx	r3
    newTransition->invalidate();
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	3314      	adds	r3, #20
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	6978      	ldr	r0, [r7, #20]
 8010f02:	4798      	blx	r3
}
 8010f04:	bf00      	nop
    return newPresenter;
 8010f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	373c      	adds	r7, #60	; 0x3c
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd90      	pop	{r4, r7, pc}
 8010f10:	08029184 	.word	0x08029184
 8010f14:	080294ac 	.word	0x080294ac
 8010f18:	08029320 	.word	0x08029320
 8010f1c:	08029364 	.word	0x08029364
 8010f20:	08029408 	.word	0x08029408

08010f24 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	3324      	adds	r3, #36	; 0x24
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	887a      	ldrh	r2, [r7, #2]
 8010f3a:	4611      	mov	r1, r2
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	4798      	blx	r3
 8010f40:	4603      	mov	r3, r0
    }
 8010f42:	4618      	mov	r0, r3
 8010f44:	3708      	adds	r7, #8
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}

08010f4a <_ZN8touchgfx17AbstractPartition2atI14MainScreenViewEERT_t>:
    T& at(const uint16_t index)
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	b082      	sub	sp, #8
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
 8010f52:	460b      	mov	r3, r1
 8010f54:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	3324      	adds	r3, #36	; 0x24
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	887a      	ldrh	r2, [r7, #2]
 8010f60:	4611      	mov	r1, r2
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	4798      	blx	r3
 8010f66:	4603      	mov	r3, r0
    }
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <_ZN8touchgfx17AbstractPartition2atI19MainScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	460b      	mov	r3, r1
 8010f7a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	3324      	adds	r3, #36	; 0x24
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	887a      	ldrh	r2, [r7, #2]
 8010f86:	4611      	mov	r1, r2
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	4798      	blx	r3
 8010f8c:	4603      	mov	r3, r0
    }
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3708      	adds	r7, #8
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}

08010f96 <_ZN8touchgfx4ViewI19MainScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8010f96:	b480      	push	{r7}
 8010f98:	b083      	sub	sp, #12
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6078      	str	r0, [r7, #4]
 8010f9e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	683a      	ldr	r2, [r7, #0]
 8010fa4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010fa6:	bf00      	nop
 8010fa8:	370c      	adds	r7, #12
 8010faa:	46bd      	mov	sp, r7
 8010fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb0:	4770      	bx	lr

08010fb2 <_ZN8touchgfx17AbstractPartition2atI14MenuScreenViewEERT_t>:
    T& at(const uint16_t index)
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b082      	sub	sp, #8
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
 8010fba:	460b      	mov	r3, r1
 8010fbc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	3324      	adds	r3, #36	; 0x24
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	887a      	ldrh	r2, [r7, #2]
 8010fc8:	4611      	mov	r1, r2
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	4798      	blx	r3
 8010fce:	4603      	mov	r3, r0
    }
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <_ZN8touchgfx17AbstractPartition2atI19MenuScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	3324      	adds	r3, #36	; 0x24
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	887a      	ldrh	r2, [r7, #2]
 8010fee:	4611      	mov	r1, r2
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	4798      	blx	r3
 8010ff4:	4603      	mov	r3, r0
    }
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3708      	adds	r7, #8
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <_ZN8touchgfx4ViewI19MenuScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 8010ffe:	b480      	push	{r7}
 8011000:	b083      	sub	sp, #12
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
 8011006:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	683a      	ldr	r2, [r7, #0]
 801100c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801100e:	bf00      	nop
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
	...

0801101c <_ZN8touchgfx12NoTransitionD1Ev>:
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	4a05      	ldr	r2, [pc, #20]	; (801103c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4618      	mov	r0, r3
 801102e:	f7ff faad 	bl	801058c <_ZN8touchgfx10TransitionD1Ev>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	4618      	mov	r0, r3
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	08029ed0 	.word	0x08029ed0

08011040 <_ZN8touchgfx12NoTransitionD0Ev>:
 8011040:	b580      	push	{r7, lr}
 8011042:	b082      	sub	sp, #8
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f7ff ffe7 	bl	801101c <_ZN8touchgfx12NoTransitionD1Ev>
 801104e:	210c      	movs	r1, #12
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f016 fda2 	bl	8027b9a <_ZdlPvj>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	4618      	mov	r0, r3
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	4a05      	ldr	r2, [pc, #20]	; (8011080 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	601a      	str	r2, [r3, #0]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff fa2d 	bl	80104d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	08029f38 	.word	0x08029f38

08011084 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7ff ffe7 	bl	8011060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011092:	2110      	movs	r1, #16
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f016 fd80 	bl	8027b9a <_ZdlPvj>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	68d2      	ldr	r2, [r2, #12]
 80110b4:	1052      	asrs	r2, r2, #1
 80110b6:	1899      	adds	r1, r3, r2
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	f003 0301 	and.w	r3, r3, #1
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d102      	bne.n	80110ca <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	e00a      	b.n	80110e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	68d2      	ldr	r2, [r2, #12]
 80110d2:	1052      	asrs	r2, r2, #1
 80110d4:	4413      	add	r3, r2
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	687a      	ldr	r2, [r7, #4]
 80110da:	6892      	ldr	r2, [r2, #8]
 80110dc:	4413      	add	r3, r2
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4608      	mov	r0, r1
 80110e2:	4798      	blx	r3
    }
 80110e4:	bf00      	nop
 80110e6:	3708      	adds	r7, #8
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d010      	beq.n	801111e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	689b      	ldr	r3, [r3, #8]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d107      	bne.n	8011114 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	f003 0301 	and.w	r3, r3, #1
 801110c:	2b00      	cmp	r3, #0
 801110e:	d101      	bne.n	8011114 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011110:	2301      	movs	r3, #1
 8011112:	e000      	b.n	8011116 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011114:	2300      	movs	r3, #0
 8011116:	2b01      	cmp	r3, #1
 8011118:	d001      	beq.n	801111e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801111a:	2301      	movs	r3, #1
 801111c:	e000      	b.n	8011120 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801111e:	2300      	movs	r3, #0
    }
 8011120:	4618      	mov	r0, r3
 8011122:	370c      	adds	r7, #12
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr

0801112c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2200      	movs	r2, #0
 8011138:	801a      	strh	r2, [r3, #0]
        y = 0;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2200      	movs	r2, #0
 801113e:	805a      	strh	r2, [r3, #2]
        width = 0;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	809a      	strh	r2, [r3, #4]
        height = 0;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2200      	movs	r2, #0
 801114a:	80da      	strh	r2, [r3, #6]
    }
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	4618      	mov	r0, r3
 8011150:	370c      	adds	r7, #12
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr

0801115a <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 801115a:	b480      	push	{r7}
 801115c:	b085      	sub	sp, #20
 801115e:	af00      	add	r7, sp, #0
 8011160:	60f8      	str	r0, [r7, #12]
 8011162:	4608      	mov	r0, r1
 8011164:	4611      	mov	r1, r2
 8011166:	461a      	mov	r2, r3
 8011168:	4603      	mov	r3, r0
 801116a:	817b      	strh	r3, [r7, #10]
 801116c:	460b      	mov	r3, r1
 801116e:	813b      	strh	r3, [r7, #8]
 8011170:	4613      	mov	r3, r2
 8011172:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	897a      	ldrh	r2, [r7, #10]
 8011178:	801a      	strh	r2, [r3, #0]
        this->y = y;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	893a      	ldrh	r2, [r7, #8]
 801117e:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	88fa      	ldrh	r2, [r7, #6]
 8011184:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	8b3a      	ldrh	r2, [r7, #24]
 801118a:	80da      	strh	r2, [r3, #6]
    }
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	4618      	mov	r0, r3
 8011190:	3714      	adds	r7, #20
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
	...

0801119c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 801119c:	b580      	push	{r7, lr}
 801119e:	b084      	sub	sp, #16
 80111a0:	af02      	add	r7, sp, #8
 80111a2:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 80111a4:	4a13      	ldr	r2, [pc, #76]	; (80111f4 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	601a      	str	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	1d18      	adds	r0, r3, #4
 80111ae:	2300      	movs	r3, #0
 80111b0:	9300      	str	r3, [sp, #0]
 80111b2:	2300      	movs	r3, #0
 80111b4:	2200      	movs	r2, #0
 80111b6:	2100      	movs	r1, #0
 80111b8:	f7ff ffcf 	bl	801115a <_ZN8touchgfx4RectC1Essss>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	330c      	adds	r3, #12
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7ff ffb3 	bl	801112c <_ZN8touchgfx4RectC1Ev>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2200      	movs	r2, #0
 80111ca:	615a      	str	r2, [r3, #20]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	619a      	str	r2, [r3, #24]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2200      	movs	r2, #0
 80111d6:	61da      	str	r2, [r3, #28]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2200      	movs	r2, #0
 80111dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2201      	movs	r2, #1
 80111e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	0802be70 	.word	0x0802be70

080111f8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
    {
 8011200:	4a04      	ldr	r2, [pc, #16]	; (8011214 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	601a      	str	r2, [r3, #0]
    }
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4618      	mov	r0, r3
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr
 8011214:	0802be70 	.word	0x0802be70

08011218 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
    }
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7ff ffe9 	bl	80111f8 <_ZN8touchgfx8DrawableD1Ev>
 8011226:	2128      	movs	r1, #40	; 0x28
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f016 fcb6 	bl	8027b9a <_ZdlPvj>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	460b      	mov	r3, r1
 8011242:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	887a      	ldrh	r2, [r7, #2]
 8011248:	809a      	strh	r2, [r3, #4]
    }
 801124a:	bf00      	nop
 801124c:	370c      	adds	r7, #12
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr

08011256 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8011256:	b480      	push	{r7}
 8011258:	b083      	sub	sp, #12
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
 801125e:	460b      	mov	r3, r1
 8011260:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	887a      	ldrh	r2, [r7, #2]
 8011266:	80da      	strh	r2, [r3, #6]
    }
 8011268:	bf00      	nop
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr

08011274 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
 801127c:	460b      	mov	r3, r1
 801127e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	887a      	ldrh	r2, [r7, #2]
 8011284:	811a      	strh	r2, [r3, #8]
    }
 8011286:	bf00      	nop
 8011288:	370c      	adds	r7, #12
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr

08011292 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8011292:	b480      	push	{r7}
 8011294:	b083      	sub	sp, #12
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
 801129a:	460b      	mov	r3, r1
 801129c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	887a      	ldrh	r2, [r7, #2]
 80112a2:	815a      	strh	r2, [r3, #10]
    }
 80112a4:	bf00      	nop
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
    {
    }
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]
    {
    }
 80112ce:	bf00      	nop
 80112d0:	370c      	adds	r7, #12
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr

080112da <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 80112da:	b480      	push	{r7}
 80112dc:	b083      	sub	sp, #12
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
 80112e2:	6039      	str	r1, [r7, #0]
    {
    }
 80112e4:	bf00      	nop
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr

080112f0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
    {
    }
 80112fa:	bf00      	nop
 80112fc:	370c      	adds	r7, #12
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr

08011306 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8011306:	b480      	push	{r7}
 8011308:	b083      	sub	sp, #12
 801130a:	af00      	add	r7, sp, #0
 801130c:	6078      	str	r0, [r7, #4]
    {
    }
 801130e:	bf00      	nop
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801131a:	b580      	push	{r7, lr}
 801131c:	b082      	sub	sp, #8
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
 8011322:	460b      	mov	r3, r1
 8011324:	807b      	strh	r3, [r7, #2]
 8011326:	4613      	mov	r3, r2
 8011328:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	3350      	adds	r3, #80	; 0x50
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	8879      	ldrh	r1, [r7, #2]
 8011334:	687a      	ldr	r2, [r7, #4]
 8011336:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801133a:	b292      	uxth	r2, r2
 801133c:	1a8a      	subs	r2, r1, r2
 801133e:	b292      	uxth	r2, r2
 8011340:	b210      	sxth	r0, r2
 8011342:	8839      	ldrh	r1, [r7, #0]
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801134a:	b292      	uxth	r2, r2
 801134c:	1a8a      	subs	r2, r1, r2
 801134e:	b292      	uxth	r2, r2
 8011350:	b212      	sxth	r2, r2
 8011352:	4601      	mov	r1, r0
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	4798      	blx	r3
    }
 8011358:	bf00      	nop
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 801136c:	4618      	mov	r0, r3
 801136e:	370c      	adds	r7, #12
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	4a05      	ldr	r2, [pc, #20]	; (8011398 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	601a      	str	r2, [r3, #0]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff ff35 	bl	80111f8 <_ZN8touchgfx8DrawableD1Ev>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	4618      	mov	r0, r3
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	0802ab0c 	.word	0x0802ab0c

0801139c <_ZN8touchgfx9ContainerD0Ev>:
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f7ff ffe7 	bl	8011378 <_ZN8touchgfx9ContainerD1Ev>
 80113aa:	212c      	movs	r1, #44	; 0x2c
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f016 fbf4 	bl	8027b9a <_ZdlPvj>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	4618      	mov	r0, r3
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
        color = col;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	683a      	ldr	r2, [r7, #0]
 80113ca:	601a      	str	r2, [r3, #0]
    }
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	4618      	mov	r0, r3
 80113d0:	370c      	adds	r7, #12
 80113d2:	46bd      	mov	sp, r7
 80113d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d8:	4770      	bx	lr

080113da <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80113da:	b480      	push	{r7}
 80113dc:	b083      	sub	sp, #12
 80113de:	af00      	add	r7, sp, #0
 80113e0:	6078      	str	r0, [r7, #4]
 80113e2:	460b      	mov	r3, r1
 80113e4:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	887a      	ldrh	r2, [r7, #2]
 80113ea:	801a      	strh	r2, [r3, #0]
    {
    }
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4618      	mov	r0, r3
 80113f0:	370c      	adds	r7, #12
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr

080113fa <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 80113fa:	b480      	push	{r7}
 80113fc:	b083      	sub	sp, #12
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
        return 0;
 8011402:	2300      	movs	r3, #0
    }
 8011404:	4618      	mov	r0, r3
 8011406:	370c      	adds	r7, #12
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr

08011410 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	4608      	mov	r0, r1
 801141a:	4611      	mov	r1, r2
 801141c:	461a      	mov	r2, r3
 801141e:	4603      	mov	r3, r0
 8011420:	817b      	strh	r3, [r7, #10]
 8011422:	460b      	mov	r3, r1
 8011424:	813b      	strh	r3, [r7, #8]
 8011426:	4613      	mov	r3, r2
 8011428:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 801142a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801142e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011432:	4619      	mov	r1, r3
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f000 f80c 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 801143a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011442:	4619      	mov	r1, r3
 8011444:	68f8      	ldr	r0, [r7, #12]
 8011446:	f000 f822 	bl	801148e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 801144a:	bf00      	nop
 801144c:	3710      	adds	r7, #16
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8011452:	b580      	push	{r7, lr}
 8011454:	b082      	sub	sp, #8
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
 801145a:	460b      	mov	r3, r1
 801145c:	807b      	strh	r3, [r7, #2]
 801145e:	4613      	mov	r3, r2
 8011460:	803b      	strh	r3, [r7, #0]
        setX(x);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	332c      	adds	r3, #44	; 0x2c
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801146e:	4611      	mov	r1, r2
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	4798      	blx	r3
        setY(y);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	3330      	adds	r3, #48	; 0x30
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011480:	4611      	mov	r1, r2
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	4798      	blx	r3
    }
 8011486:	bf00      	nop
 8011488:	3708      	adds	r7, #8
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 801148e:	b580      	push	{r7, lr}
 8011490:	b082      	sub	sp, #8
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
 8011496:	460b      	mov	r3, r1
 8011498:	807b      	strh	r3, [r7, #2]
 801149a:	4613      	mov	r3, r2
 801149c:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	3334      	adds	r3, #52	; 0x34
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80114aa:	4611      	mov	r1, r2
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	4798      	blx	r3
        setHeight(height);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	3338      	adds	r3, #56	; 0x38
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80114bc:	4611      	mov	r1, r2
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	4798      	blx	r3
    }
 80114c2:	bf00      	nop
 80114c4:	3708      	adds	r7, #8
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80114ca:	b480      	push	{r7}
 80114cc:	b083      	sub	sp, #12
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	460b      	mov	r3, r1
 80114d4:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	78fa      	ldrb	r2, [r7, #3]
 80114da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80114de:	bf00      	nop
 80114e0:	370c      	adds	r7, #12
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr

080114ea <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 80114ea:	b480      	push	{r7}
 80114ec:	b083      	sub	sp, #12
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	6078      	str	r0, [r7, #4]
        return visible;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80114f8:	4618      	mov	r0, r3
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
        return touchable;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8011512:	4618      	mov	r0, r3
 8011514:	370c      	adds	r7, #12
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801151e:	b480      	push	{r7}
 8011520:	b083      	sub	sp, #12
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801152c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011534:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801153c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 801153e:	bf00      	nop
 8011540:	370c      	adds	r7, #12
 8011542:	46bd      	mov	sp, r7
 8011544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011548:	4770      	bx	lr

0801154a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801154a:	b580      	push	{r7, lr}
 801154c:	b084      	sub	sp, #16
 801154e:	af00      	add	r7, sp, #0
 8011550:	60f8      	str	r0, [r7, #12]
 8011552:	60b9      	str	r1, [r7, #8]
 8011554:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f7ff ffe1 	bl	801151e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	68fa      	ldr	r2, [r7, #12]
 8011568:	601a      	str	r2, [r3, #0]
    }
 801156a:	bf00      	nop
 801156c:	3710      	adds	r7, #16
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
	...

08011574 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
    {
 801157c:	4a06      	ldr	r2, [pc, #24]	; (8011598 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	601a      	str	r2, [r3, #0]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	3304      	adds	r3, #4
 8011586:	4618      	mov	r0, r3
 8011588:	f7ff fef6 	bl	8011378 <_ZN8touchgfx9ContainerD1Ev>
    }
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	4618      	mov	r0, r3
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	0802bf64 	.word	0x0802bf64

0801159c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
    }
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7ff ffe5 	bl	8011574 <_ZN8touchgfx6ScreenD1Ev>
 80115aa:	213c      	movs	r1, #60	; 0x3c
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f016 faf4 	bl	8027b9a <_ZdlPvj>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
    {
    }
 80115c4:	bf00      	nop
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
    {
    }
 80115d8:	bf00      	nop
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
    {
    }
 80115ec:	bf00      	nop
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
    {
    }
 8011600:	bf00      	nop
 8011602:	370c      	adds	r7, #12
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	460b      	mov	r3, r1
 8011616:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011618:	bf00      	nop
 801161a:	370c      	adds	r7, #12
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr

08011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	3304      	adds	r3, #4
 8011632:	6839      	ldr	r1, [r7, #0]
 8011634:	4618      	mov	r0, r3
 8011636:	f004 fb3d 	bl	8015cb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801163a:	bf00      	nop
 801163c:	3708      	adds	r7, #8
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}

08011642 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8011642:	b580      	push	{r7, lr}
 8011644:	b084      	sub	sp, #16
 8011646:	af00      	add	r7, sp, #0
 8011648:	60f8      	str	r0, [r7, #12]
 801164a:	607b      	str	r3, [r7, #4]
 801164c:	460b      	mov	r3, r1
 801164e:	817b      	strh	r3, [r7, #10]
 8011650:	4613      	mov	r3, r2
 8011652:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	4618      	mov	r0, r3
 8011658:	f7ff ff47 	bl	80114ea <_ZNK8touchgfx8Drawable9isVisibleEv>
 801165c:	4603      	mov	r3, r0
 801165e:	2b00      	cmp	r3, #0
 8011660:	d008      	beq.n	8011674 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	4618      	mov	r0, r3
 8011666:	f7ff ff4d 	bl	8011504 <_ZNK8touchgfx8Drawable11isTouchableEv>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d001      	beq.n	8011674 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8011670:	2301      	movs	r3, #1
 8011672:	e000      	b.n	8011676 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8011674:	2300      	movs	r3, #0
 8011676:	2b00      	cmp	r3, #0
 8011678:	d002      	beq.n	8011680 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	601a      	str	r2, [r3, #0]
        }
    }
 8011680:	bf00      	nop
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4618      	mov	r0, r3
 8011694:	f7ff fd82 	bl	801119c <_ZN8touchgfx8DrawableC1Ev>
 8011698:	4a03      	ldr	r2, [pc, #12]	; (80116a8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	0802a090 	.word	0x0802a090

080116ac <_ZN8touchgfx6WidgetD1Ev>:
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	4a05      	ldr	r2, [pc, #20]	; (80116cc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	601a      	str	r2, [r3, #0]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	4618      	mov	r0, r3
 80116be:	f7ff fd9b 	bl	80111f8 <_ZN8touchgfx8DrawableD1Ev>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4618      	mov	r0, r3
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	0802a090 	.word	0x0802a090

080116d0 <_ZN8touchgfx6WidgetD0Ev>:
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f7ff ffe7 	bl	80116ac <_ZN8touchgfx6WidgetD1Ev>
 80116de:	2128      	movs	r1, #40	; 0x28
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f016 fa5a 	bl	8027b9a <_ZdlPvj>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4618      	mov	r0, r3
 80116fc:	2326      	movs	r3, #38	; 0x26
 80116fe:	461a      	mov	r2, r3
 8011700:	2100      	movs	r1, #0
 8011702:	f016 fca9 	bl	8028058 <memset>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4618      	mov	r0, r3
 801170a:	f7ff ffbd 	bl	8011688 <_ZN8touchgfx6WidgetC1Ev>
 801170e:	4a0a      	ldr	r2, [pc, #40]	; (8011738 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	601a      	str	r2, [r3, #0]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	629a      	str	r2, [r3, #40]	; 0x28
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2200      	movs	r2, #0
 801171e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2101      	movs	r1, #1
 8011726:	4618      	mov	r0, r3
 8011728:	f7ff fecf 	bl	80114ca <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	4618      	mov	r0, r3
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	0802b580 	.word	0x0802b580

0801173c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	683a      	ldr	r2, [r7, #0]
 801174a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801174c:	bf00      	nop
 801174e:	370c      	adds	r7, #12
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	4a05      	ldr	r2, [pc, #20]	; (8011778 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	601a      	str	r2, [r3, #0]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff ff9f 	bl	80116ac <_ZN8touchgfx6WidgetD1Ev>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	4618      	mov	r0, r3
 8011772:	3708      	adds	r7, #8
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	0802b580 	.word	0x0802b580

0801177c <_ZN8touchgfx14AbstractButtonD0Ev>:
 801177c:	b580      	push	{r7, lr}
 801177e:	b082      	sub	sp, #8
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f7ff ffe7 	bl	8011758 <_ZN8touchgfx14AbstractButtonD1Ev>
 801178a:	2130      	movs	r1, #48	; 0x30
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f016 fa04 	bl	8027b9a <_ZdlPvj>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4618      	mov	r0, r3
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff ffa2 	bl	80116f0 <_ZN8touchgfx14AbstractButtonC1Ev>
 80117ac:	4a0c      	ldr	r2, [pc, #48]	; (80117e0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	601a      	str	r2, [r3, #0]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	332e      	adds	r3, #46	; 0x2e
 80117b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7ff fe0d 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	3330      	adds	r3, #48	; 0x30
 80117c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7ff fe06 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	22ff      	movs	r2, #255	; 0xff
 80117d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	4618      	mov	r0, r3
 80117da:	3708      	adds	r7, #8
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}
 80117e0:	0802ba80 	.word	0x0802ba80

080117e4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	4618      	mov	r0, r3
 80117f0:	2326      	movs	r3, #38	; 0x26
 80117f2:	461a      	mov	r2, r3
 80117f4:	2100      	movs	r1, #0
 80117f6:	f016 fc2f 	bl	8028058 <memset>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7ff ff43 	bl	8011688 <_ZN8touchgfx6WidgetC1Ev>
 8011802:	4a09      	ldr	r2, [pc, #36]	; (8011828 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	601a      	str	r2, [r3, #0]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	22ff      	movs	r2, #255	; 0xff
 801180c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3328      	adds	r3, #40	; 0x28
 8011814:	2100      	movs	r1, #0
 8011816:	4618      	mov	r0, r3
 8011818:	f7ff fdd0 	bl	80113bc <_ZN8touchgfx9colortypeC1Em>
    {
    }
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4618      	mov	r0, r3
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	0802b850 	.word	0x0802b850

0801182c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	683a      	ldr	r2, [r7, #0]
 801183a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801183c:	bf00      	nop
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	4618      	mov	r0, r3
 8011856:	2326      	movs	r3, #38	; 0x26
 8011858:	461a      	mov	r2, r3
 801185a:	2100      	movs	r1, #0
 801185c:	f016 fbfc 	bl	8028058 <memset>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4618      	mov	r0, r3
 8011864:	f7ff ff10 	bl	8011688 <_ZN8touchgfx6WidgetC1Ev>
 8011868:	4a0b      	ldr	r2, [pc, #44]	; (8011898 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	601a      	str	r2, [r3, #0]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	3326      	adds	r3, #38	; 0x26
 8011872:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011876:	4618      	mov	r0, r3
 8011878:	f7ff fdaf 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	22ff      	movs	r2, #255	; 0xff
 8011880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bitmap);
 8011884:	6839      	ldr	r1, [r7, #0]
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f007 fa36 	bl	8018cf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	4618      	mov	r0, r3
 8011890:	3708      	adds	r7, #8
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	0802bbcc 	.word	0x0802bbcc

0801189c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	460b      	mov	r3, r1
 80118a6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80118a8:	4a06      	ldr	r2, [pc, #24]	; (80118c4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	601a      	str	r2, [r3, #0]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	887a      	ldrh	r2, [r7, #2]
 80118b2:	809a      	strh	r2, [r3, #4]
    }
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	4618      	mov	r0, r3
 80118b8:	370c      	adds	r7, #12
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr
 80118c2:	bf00      	nop
 80118c4:	08029e5c 	.word	0x08029e5c

080118c8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	4618      	mov	r0, r3
 80118d4:	2326      	movs	r3, #38	; 0x26
 80118d6:	461a      	mov	r2, r3
 80118d8:	2100      	movs	r1, #0
 80118da:	f016 fbbd 	bl	8028058 <memset>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7ff fed1 	bl	8011688 <_ZN8touchgfx6WidgetC1Ev>
 80118e6:	4a14      	ldr	r2, [pc, #80]	; (8011938 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	601a      	str	r2, [r3, #0]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	3328      	adds	r3, #40	; 0x28
 80118f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7ff ffd1 	bl	801189c <_ZN8touchgfx9TypedTextC1Et>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	3330      	adds	r3, #48	; 0x30
 80118fe:	2100      	movs	r1, #0
 8011900:	4618      	mov	r0, r3
 8011902:	f7ff fd5b 	bl	80113bc <_ZN8touchgfx9colortypeC1Em>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2200      	movs	r2, #0
 801190a:	869a      	strh	r2, [r3, #52]	; 0x34
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	22ff      	movs	r2, #255	; 0xff
 8011910:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2200      	movs	r2, #0
 8011918:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2200      	movs	r2, #0
 8011920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	4618      	mov	r0, r3
 8011930:	3708      	adds	r7, #8
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	0802b7a8 	.word	0x0802b7a8

0801193c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	4a08      	ldr	r2, [pc, #32]	; (8011968 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	601a      	str	r2, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	3328      	adds	r3, #40	; 0x28
 801194e:	4618      	mov	r0, r3
 8011950:	f7fe fb20 	bl	800ff94 <_ZN8touchgfx9TypedTextD1Ev>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff fea8 	bl	80116ac <_ZN8touchgfx6WidgetD1Ev>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	4618      	mov	r0, r3
 8011960:	3708      	adds	r7, #8
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop
 8011968:	0802b7a8 	.word	0x0802b7a8

0801196c <_ZN8touchgfx8TextAreaD0Ev>:
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7ff ffe1 	bl	801193c <_ZN8touchgfx8TextAreaD1Ev>
 801197a:	213c      	movs	r1, #60	; 0x3c
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f016 f90c 	bl	8027b9a <_ZdlPvj>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4618      	mov	r0, r3
 8011986:	3708      	adds	r7, #8
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}

0801198c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	4618      	mov	r0, r3
 8011998:	f7ff ff96 	bl	80118c8 <_ZN8touchgfx8TextAreaC1Ev>
 801199c:	4a05      	ldr	r2, [pc, #20]	; (80119b4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	601a      	str	r2, [r3, #0]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2200      	movs	r2, #0
 80119a6:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	4618      	mov	r0, r3
 80119ac:	3708      	adds	r7, #8
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}
 80119b2:	bf00      	nop
 80119b4:	0802bb24 	.word	0x0802bb24

080119b8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	683a      	ldr	r2, [r7, #0]
 80119c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80119c8:	bf00      	nop
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr

080119d4 <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>:
class View : public Screen
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	4a05      	ldr	r2, [pc, #20]	; (80119f4 <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev+0x20>)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	601a      	str	r2, [r3, #0]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7ff fdc5 	bl	8011574 <_ZN8touchgfx6ScreenD1Ev>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4618      	mov	r0, r3
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	0802a044 	.word	0x0802a044

080119f8 <_ZN8touchgfx4ViewI19MainScreenPresenterED0Ev>:
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7ff ffe7 	bl	80119d4 <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>
 8011a06:	2140      	movs	r1, #64	; 0x40
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f016 f8c6 	bl	8027b9a <_ZdlPvj>
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	4618      	mov	r0, r3
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <_ZN18MainScreenViewBaseD1Ev>:

class MainScreenViewBase : public touchgfx::View<MainScreenPresenter>
{
public:
    MainScreenViewBase();
    virtual ~MainScreenViewBase() {}
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	4a2b      	ldr	r2, [pc, #172]	; (8011ad0 <_ZN18MainScreenViewBaseD1Ev+0xb8>)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f000 fced 	bl	801240c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f000 fe31 	bl	80126a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8011a44:	4618      	mov	r0, r3
 8011a46:	f000 fe2b 	bl	80126a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011a50:	4618      	mov	r0, r3
 8011a52:	f000 fe25 	bl	80126a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7ff ff6d 	bl	801193c <_ZN8touchgfx8TextAreaD1Ev>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7ff ff67 	bl	801193c <_ZN8touchgfx8TextAreaD1Ev>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7ff ff61 	bl	801193c <_ZN8touchgfx8TextAreaD1Ev>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8011a80:	4618      	mov	r0, r3
 8011a82:	f000 fdeb 	bl	801265c <_ZN8touchgfx6ButtonD1Ev>
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f000 fdb5 	bl	80125fc <_ZN8touchgfx5GaugeD1Ev>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f000 fdaf 	bl	80125fc <_ZN8touchgfx5GaugeD1Ev>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	3398      	adds	r3, #152	; 0x98
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f000 fdaa 	bl	80125fc <_ZN8touchgfx5GaugeD1Ev>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	336c      	adds	r3, #108	; 0x6c
 8011aac:	4618      	mov	r0, r3
 8011aae:	f000 fcf1 	bl	8012494 <_ZN8touchgfx5ImageD1Ev>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	3340      	adds	r3, #64	; 0x40
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f000 fcca 	bl	8012450 <_ZN8touchgfx3BoxD1Ev>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7ff ff88 	bl	80119d4 <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3708      	adds	r7, #8
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	08029ff8 	.word	0x08029ff8

08011ad4 <_ZN18MainScreenViewBaseD0Ev>:
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7ff ff9b 	bl	8011a18 <_ZN18MainScreenViewBaseD1Ev>
 8011ae2:	f44f 61ea 	mov.w	r1, #1872	; 0x750
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f016 f857 	bl	8027b9a <_ZdlPvj>
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	4618      	mov	r0, r3
 8011af0:	3708      	adds	r7, #8
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <_ZN18MainScreenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8011af6:	b580      	push	{r7, lr}
 8011af8:	b082      	sub	sp, #8
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8011afe:	f008 fdfb 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 8011b02:	4603      	mov	r3, r0
    }
 8011b04:	4618      	mov	r0, r3
 8011b06:	3708      	adds	r7, #8
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8011b0c:	b590      	push	{r4, r7, lr}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	4603      	mov	r3, r0
 8011b14:	71fb      	strb	r3, [r7, #7]
 8011b16:	460b      	mov	r3, r1
 8011b18:	71bb      	strb	r3, [r7, #6]
 8011b1a:	4613      	mov	r3, r2
 8011b1c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8011b1e:	f7fe fcf7 	bl	8010510 <_ZN8touchgfx3HAL11getInstanceEv>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d105      	bne.n	8011b34 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8011b28:	4b0a      	ldr	r3, [pc, #40]	; (8011b54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8011b2a:	4a0b      	ldr	r2, [pc, #44]	; (8011b58 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8011b2c:	2135      	movs	r1, #53	; 0x35
 8011b2e:	480b      	ldr	r0, [pc, #44]	; (8011b5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8011b30:	f016 fa06 	bl	8027f40 <__assert_func>
 8011b34:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8011b36:	f7fe fcf7 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8011b3a:	6803      	ldr	r3, [r0, #0]
 8011b3c:	3328      	adds	r3, #40	; 0x28
 8011b3e:	681c      	ldr	r4, [r3, #0]
 8011b40:	797b      	ldrb	r3, [r7, #5]
 8011b42:	79ba      	ldrb	r2, [r7, #6]
 8011b44:	79f9      	ldrb	r1, [r7, #7]
 8011b46:	47a0      	blx	r4
 8011b48:	4603      	mov	r3, r0
    }
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	370c      	adds	r7, #12
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd90      	pop	{r4, r7, pc}
 8011b52:	bf00      	nop
 8011b54:	080295b8 	.word	0x080295b8
 8011b58:	080295fc 	.word	0x080295fc
 8011b5c:	08029658 	.word	0x08029658

08011b60 <_ZN18MainScreenViewBaseC1Ev>:
#include <gui_generated/mainscreen_screen/MainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

MainScreenViewBase::MainScreenViewBase() :
 8011b60:	b590      	push	{r4, r7, lr}
 8011b62:	b0b3      	sub	sp, #204	; 0xcc
 8011b64:	af02      	add	r7, sp, #8
 8011b66:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f000 fbe8 	bl	8012340 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev>
 8011b70:	4adc      	ldr	r2, [pc, #880]	; (8011ee4 <_ZN18MainScreenViewBaseC1Ev+0x384>)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	601a      	str	r2, [r3, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	3340      	adds	r3, #64	; 0x40
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7ff fe32 	bl	80117e4 <_ZN8touchgfx3BoxC1Ev>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8011b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7ff fc23 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 8011b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b98:	4619      	mov	r1, r3
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f7ff fe54 	bl	8011848 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	3398      	adds	r3, #152	; 0x98
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f006 fd9f 	bl	80186e8 <_ZN8touchgfx5GaugeC1Ev>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f006 fd99 	bl	80186e8 <_ZN8touchgfx5GaugeC1Ev>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f006 fd93 	bl	80186e8 <_ZN8touchgfx5GaugeC1Ev>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7ff fde7 	bl	801179c <_ZN8touchgfx6ButtonC1Ev>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7ff fe77 	bl	80118c8 <_ZN8touchgfx8TextAreaC1Ev>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7ff fe71 	bl	80118c8 <_ZN8touchgfx8TextAreaC1Ev>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7ff fe6b 	bl	80118c8 <_ZN8touchgfx8TextAreaC1Ev>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7ff fec7 	bl	801198c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7ff fec1 	bl	801198c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7ff febb 	bl	801198c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f503 60e8 	add.w	r0, r3, #1856	; 0x740
 8011c1c:	4bb2      	ldr	r3, [pc, #712]	; (8011ee8 <_ZN18MainScreenViewBaseC1Ev+0x388>)
 8011c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c20:	2300      	movs	r3, #0
 8011c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c28:	cb0c      	ldmia	r3, {r2, r3}
 8011c2a:	6879      	ldr	r1, [r7, #4]
 8011c2c:	f000 fbae 	bl	801238c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 800, 480);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011c36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8011c40:	2200      	movs	r2, #0
 8011c42:	2100      	movs	r1, #0
 8011c44:	f7ff fbe4 	bl	8011410 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011c4e:	2200      	movs	r2, #0
 8011c50:	2100      	movs	r1, #0
 8011c52:	2000      	movs	r0, #0
 8011c54:	f7ff ff5a 	bl	8011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	f7ff fde5 	bl	801182c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    bg.setXY(0, 0);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	336c      	adds	r3, #108	; 0x6c
 8011c66:	2200      	movs	r2, #0
 8011c68:	2100      	movs	r1, #0
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7ff fbf1 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    bg.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8011c76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7ff fbac 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 8011c82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c86:	4619      	mov	r1, r3
 8011c88:	4620      	mov	r0, r4
 8011c8a:	f007 f835 	bl	8018cf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    gaugeCO2.setBackground(touchgfx::Bitmap(BITMAP_GAUGE_NOCTLR_ID));
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8011c94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c98:	2104      	movs	r1, #4
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7ff fb9d 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 8011ca0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f003 ff08 	bl	8015abc <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gaugeCO2.setPosition(419, 16, 365, 194);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8011cb2:	23c2      	movs	r3, #194	; 0xc2
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	f240 136d 	movw	r3, #365	; 0x16d
 8011cba:	2210      	movs	r2, #16
 8011cbc:	f240 11a3 	movw	r1, #419	; 0x1a3
 8011cc0:	f7ff fba6 	bl	8011410 <_ZN8touchgfx8Drawable11setPositionEssss>
    gaugeCO2.setCenter(189, 170);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	3398      	adds	r3, #152	; 0x98
 8011cc8:	22aa      	movs	r2, #170	; 0xaa
 8011cca:	21bd      	movs	r1, #189	; 0xbd
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f006 fdb6 	bl	801883e <_ZN8touchgfx5Gauge9setCenterEii>
    gaugeCO2.setStartEndAngle(-90, 90);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	3398      	adds	r3, #152	; 0x98
 8011cd6:	225a      	movs	r2, #90	; 0x5a
 8011cd8:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f006 fe33 	bl	8018948 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gaugeCO2.setRange(0, 2000);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8011ce8:	2300      	movs	r3, #0
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	2300      	movs	r3, #0
 8011cee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	f003 fe3a 	bl	801596c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gaugeCO2.setValue(1000);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	3398      	adds	r3, #152	; 0x98
 8011cfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011d00:	4618      	mov	r0, r3
 8011d02:	f006 fdcb 	bl	801889c <_ZN8touchgfx5Gauge8setValueEi>
    gaugeCO2.setNeedle(BITMAP_CTRL_ID, 10, 170);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8011d0c:	23aa      	movs	r3, #170	; 0xaa
 8011d0e:	220a      	movs	r2, #10
 8011d10:	2101      	movs	r1, #1
 8011d12:	f006 fd7f 	bl	8018814 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gaugeCO2.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	3398      	adds	r3, #152	; 0x98
 8011d1a:	2101      	movs	r1, #1
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f006 fd1b 	bl	8018758 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gaugeCO2.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	3398      	adds	r3, #152	; 0x98
 8011d26:	2101      	movs	r1, #1
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f006 fd18 	bl	801875e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    gaugeTemp.setBackground(touchgfx::Bitmap(BITMAP_CTRL_SMALL_ID));
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f503 740e 	add.w	r4, r3, #568	; 0x238
 8011d34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011d38:	2103      	movs	r1, #3
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff fb4d 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 8011d40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011d44:	4619      	mov	r1, r3
 8011d46:	4620      	mov	r0, r4
 8011d48:	f003 feb8 	bl	8015abc <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gaugeTemp.setPosition(17, 314, 251, 133);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f503 700e 	add.w	r0, r3, #568	; 0x238
 8011d52:	2385      	movs	r3, #133	; 0x85
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	23fb      	movs	r3, #251	; 0xfb
 8011d58:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8011d5c:	2111      	movs	r1, #17
 8011d5e:	f7ff fb57 	bl	8011410 <_ZN8touchgfx8Drawable11setPositionEssss>
    gaugeTemp.setCenter(126, 130);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011d68:	2282      	movs	r2, #130	; 0x82
 8011d6a:	217e      	movs	r1, #126	; 0x7e
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f006 fd66 	bl	801883e <_ZN8touchgfx5Gauge9setCenterEii>
    gaugeTemp.setStartEndAngle(-90, 90);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011d78:	225a      	movs	r2, #90	; 0x5a
 8011d7a:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f006 fde2 	bl	8018948 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gaugeTemp.setRange(0, 50);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f503 700e 	add.w	r0, r3, #568	; 0x238
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	2232      	movs	r2, #50	; 0x32
 8011d92:	2100      	movs	r1, #0
 8011d94:	f003 fdea 	bl	801596c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gaugeTemp.setValue(25);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011d9e:	2119      	movs	r1, #25
 8011da0:	4618      	mov	r0, r3
 8011da2:	f006 fd7b 	bl	801889c <_ZN8touchgfx5Gauge8setValueEi>
    gaugeTemp.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011dac:	494f      	ldr	r1, [pc, #316]	; (8011eec <_ZN18MainScreenViewBaseC1Ev+0x38c>)
 8011dae:	4618      	mov	r0, r3
 8011db0:	f003 fd45 	bl	801583e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>
    gaugeTemp.setNeedle(BITMAP_CTRL_FOR_SMALL_ID, 10, 129);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f503 700e 	add.w	r0, r3, #568	; 0x238
 8011dba:	2381      	movs	r3, #129	; 0x81
 8011dbc:	220a      	movs	r2, #10
 8011dbe:	2102      	movs	r1, #2
 8011dc0:	f006 fd28 	bl	8018814 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gaugeTemp.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011dca:	2101      	movs	r1, #1
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f006 fcc3 	bl	8018758 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gaugeTemp.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011dd8:	2101      	movs	r1, #1
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f006 fcbf 	bl	801875e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    gaugeHum.setBackground(touchgfx::Bitmap(BITMAP_CTRL_SMALL_ID));
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f503 7476 	add.w	r4, r3, #984	; 0x3d8
 8011de6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011dea:	2103      	movs	r1, #3
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7ff faf4 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 8011df2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011df6:	4619      	mov	r1, r3
 8011df8:	4620      	mov	r0, r4
 8011dfa:	f003 fe5f 	bl	8015abc <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gaugeHum.setPosition(485, 306, 251, 133);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 8011e04:	2385      	movs	r3, #133	; 0x85
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	23fb      	movs	r3, #251	; 0xfb
 8011e0a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011e0e:	f240 11e5 	movw	r1, #485	; 0x1e5
 8011e12:	f7ff fafd 	bl	8011410 <_ZN8touchgfx8Drawable11setPositionEssss>
    gaugeHum.setCenter(126, 130);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011e1c:	2282      	movs	r2, #130	; 0x82
 8011e1e:	217e      	movs	r1, #126	; 0x7e
 8011e20:	4618      	mov	r0, r3
 8011e22:	f006 fd0c 	bl	801883e <_ZN8touchgfx5Gauge9setCenterEii>
    gaugeHum.setStartEndAngle(-90, 90);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011e2c:	225a      	movs	r2, #90	; 0x5a
 8011e2e:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8011e32:	4618      	mov	r0, r3
 8011e34:	f006 fd88 	bl	8018948 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gaugeHum.setRange(0, 100);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 8011e3e:	2300      	movs	r3, #0
 8011e40:	9300      	str	r3, [sp, #0]
 8011e42:	2300      	movs	r3, #0
 8011e44:	2264      	movs	r2, #100	; 0x64
 8011e46:	2100      	movs	r1, #0
 8011e48:	f003 fd90 	bl	801596c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gaugeHum.setValue(25);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011e52:	2119      	movs	r1, #25
 8011e54:	4618      	mov	r0, r3
 8011e56:	f006 fd21 	bl	801889c <_ZN8touchgfx5Gauge8setValueEi>
    gaugeHum.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011e60:	4922      	ldr	r1, [pc, #136]	; (8011eec <_ZN18MainScreenViewBaseC1Ev+0x38c>)
 8011e62:	4618      	mov	r0, r3
 8011e64:	f003 fceb 	bl	801583e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>
    gaugeHum.setNeedle(BITMAP_CTRL_FOR_SMALL_ID, 10, 129);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 8011e6e:	2381      	movs	r3, #129	; 0x81
 8011e70:	220a      	movs	r2, #10
 8011e72:	2102      	movs	r1, #2
 8011e74:	f006 fcce 	bl	8018814 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gaugeHum.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011e7e:	2101      	movs	r1, #1
 8011e80:	4618      	mov	r0, r3
 8011e82:	f006 fc69 	bl	8018758 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gaugeHum.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8011e8c:	2101      	movs	r1, #1
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f006 fc65 	bl	801875e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    buttonSettings.setXY(17, 16);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8011e9a:	2210      	movs	r2, #16
 8011e9c:	2111      	movs	r1, #17
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7ff fad7 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSettings.setBitmaps(touchgfx::Bitmap(BITMAP_SETTINGS_BUTTON_ID), touchgfx::Bitmap(BITMAP_SETTINGS_BUTTON_ACTIVE_ID));
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f503 64af 	add.w	r4, r3, #1400	; 0x578
 8011eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011eae:	2107      	movs	r1, #7
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff fa92 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 8011eb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011eba:	2108      	movs	r1, #8
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7ff fa8c 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 8011ec2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011ec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011eca:	4619      	mov	r1, r3
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f006 fd5d 	bl	801898c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonSettings.setAction(buttonCallback);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f503 62af 	add.w	r2, r3, #1400	; 0x578
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8011ede:	4619      	mov	r1, r3
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	e005      	b.n	8011ef0 <_ZN18MainScreenViewBaseC1Ev+0x390>
 8011ee4:	08029ff8 	.word	0x08029ff8
 8011ee8:	08012315 	.word	0x08012315
 8011eec:	0801c17d 	.word	0x0801c17d
 8011ef0:	f7ff fc24 	bl	801173c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    temp.setXY(42, 439);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8011efa:	f240 12b7 	movw	r2, #439	; 0x1b7
 8011efe:	212a      	movs	r1, #42	; 0x2a
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7ff faa6 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    temp.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f203 54ac 	addw	r4, r3, #1452	; 0x5ac
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	2100      	movs	r1, #0
 8011f10:	2000      	movs	r0, #0
 8011f12:	f7ff fdfb 	bl	8011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f16:	4603      	mov	r3, r0
 8011f18:	67bc      	str	r4, [r7, #120]	; 0x78
 8011f1a:	623b      	str	r3, [r7, #32]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8011f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f1e:	6a3a      	ldr	r2, [r7, #32]
 8011f20:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011f22:	bf00      	nop
    temp.setLinespacing(0);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8011f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f2e:	2300      	movs	r3, #0
 8011f30:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8011f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f38:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8011f3c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011f3e:	bf00      	nop
    temp.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f203 54ac 	addw	r4, r3, #1452	; 0x5ac
 8011f46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7ff fca5 	bl	801189c <_ZN8touchgfx9TypedTextC1Et>
 8011f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f56:	4619      	mov	r1, r3
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f006 fb6a 	bl	8018632 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7fe f816 	bl	800ff94 <_ZN8touchgfx9TypedTextD1Ev>

    hum.setXY(527, 439);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8011f6e:	f240 12b7 	movw	r2, #439	; 0x1b7
 8011f72:	f240 210f 	movw	r1, #527	; 0x20f
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7ff fa6b 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    hum.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f503 64bd 	add.w	r4, r3, #1512	; 0x5e8
 8011f82:	2200      	movs	r2, #0
 8011f84:	2100      	movs	r1, #0
 8011f86:	2000      	movs	r0, #0
 8011f88:	f7ff fdc0 	bl	8011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
 8011f92:	61fb      	str	r3, [r7, #28]
        this->color = color;
 8011f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f98:	69fa      	ldr	r2, [r7, #28]
 8011f9a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011f9c:	bf00      	nop
    hum.setLinespacing(0);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8011fa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011fa8:	2300      	movs	r3, #0
 8011faa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        linespace = space;
 8011fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011fb2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011fb6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011fb8:	bf00      	nop
    hum.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f503 64bd 	add.w	r4, r3, #1512	; 0x5e8
 8011fc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fc4:	2101      	movs	r1, #1
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7ff fc68 	bl	801189c <_ZN8touchgfx9TypedTextC1Et>
 8011fcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f006 fb2d 	bl	8018632 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011fd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fd ffd9 	bl	800ff94 <_ZN8touchgfx9TypedTextD1Ev>

    CO2.setXY(559, 199);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8011fe8:	22c7      	movs	r2, #199	; 0xc7
 8011fea:	f240 212f 	movw	r1, #559	; 0x22f
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7ff fa2f 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    CO2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f203 6424 	addw	r4, r3, #1572	; 0x624
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	2100      	movs	r1, #0
 8011ffe:	2000      	movs	r0, #0
 8012000:	f7ff fd84 	bl	8011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012004:	4603      	mov	r3, r0
 8012006:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801200a:	61bb      	str	r3, [r7, #24]
        this->color = color;
 801200c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012010:	69ba      	ldr	r2, [r7, #24]
 8012012:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012014:	bf00      	nop
    CO2.setLinespacing(0);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f203 6324 	addw	r3, r3, #1572	; 0x624
 801201c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012020:	2300      	movs	r3, #0
 8012022:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        linespace = space;
 8012026:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801202a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 801202e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012030:	bf00      	nop
    CO2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f203 6424 	addw	r4, r3, #1572	; 0x624
 8012038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801203c:	2102      	movs	r1, #2
 801203e:	4618      	mov	r0, r3
 8012040:	f7ff fc2c 	bl	801189c <_ZN8touchgfx9TypedTextC1Et>
 8012044:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012048:	4619      	mov	r1, r3
 801204a:	4620      	mov	r0, r4
 801204c:	f006 faf1 	bl	8018632 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012050:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012054:	4618      	mov	r0, r3
 8012056:	f7fd ff9d 	bl	800ff94 <_ZN8touchgfx9TypedTextD1Ev>

    TempValue.setXY(112, 396);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8012060:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8012064:	2170      	movs	r1, #112	; 0x70
 8012066:	4618      	mov	r0, r3
 8012068:	f7ff f9f3 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    TempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f503 64cc 	add.w	r4, r3, #1632	; 0x660
 8012072:	2200      	movs	r2, #0
 8012074:	2100      	movs	r1, #0
 8012076:	2000      	movs	r0, #0
 8012078:	f7ff fd48 	bl	8011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801207c:	4603      	mov	r3, r0
 801207e:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 8012082:	617b      	str	r3, [r7, #20]
        this->color = color;
 8012084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012088:	697a      	ldr	r2, [r7, #20]
 801208a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801208c:	bf00      	nop
    TempValue.setLinespacing(0);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8012094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012098:	2300      	movs	r3, #0
 801209a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        linespace = space;
 801209e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80120a2:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80120a6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80120a8:	bf00      	nop
    TempValueBuffer[0] = 0;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2200      	movs	r2, #0
 80120ae:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
    TempValue.setWildcard(TempValueBuffer);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f503 62cc 	add.w	r2, r3, #1632	; 0x660
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80120be:	4619      	mov	r1, r3
 80120c0:	4610      	mov	r0, r2
 80120c2:	f7ff fc79 	bl	80119b8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TempValue.resizeToCurrentText();
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80120cc:	4618      	mov	r0, r3
 80120ce:	f006 fa93 	bl	80185f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    TempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f503 64cc 	add.w	r4, r3, #1632	; 0x660
 80120d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80120dc:	2103      	movs	r1, #3
 80120de:	4618      	mov	r0, r3
 80120e0:	f7ff fbdc 	bl	801189c <_ZN8touchgfx9TypedTextC1Et>
 80120e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80120e8:	4619      	mov	r1, r3
 80120ea:	4620      	mov	r0, r4
 80120ec:	f006 faa1 	bl	8018632 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80120f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7fd ff4d 	bl	800ff94 <_ZN8touchgfx9TypedTextD1Ev>

    co2Value.setXY(516, 144);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8012100:	2290      	movs	r2, #144	; 0x90
 8012102:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012106:	4618      	mov	r0, r3
 8012108:	f7ff f9a3 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    co2Value.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 8012112:	2200      	movs	r2, #0
 8012114:	2100      	movs	r1, #0
 8012116:	2000      	movs	r0, #0
 8012118:	f7ff fcf8 	bl	8011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801211c:	4603      	mov	r3, r0
 801211e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8012122:	613b      	str	r3, [r7, #16]
        this->color = color;
 8012124:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012128:	693a      	ldr	r2, [r7, #16]
 801212a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801212c:	bf00      	nop
    co2Value.setLinespacing(0);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8012134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012138:	2300      	movs	r3, #0
 801213a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        linespace = space;
 801213e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012142:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8012146:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012148:	bf00      	nop
    co2ValueBuffer[0] = 0;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2200      	movs	r2, #0
 801214e:	f8a3 272a 	strh.w	r2, [r3, #1834]	; 0x72a
    co2Value.setWildcard(co2ValueBuffer);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f503 62d4 	add.w	r2, r3, #1696	; 0x6a0
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f203 732a 	addw	r3, r3, #1834	; 0x72a
 801215e:	4619      	mov	r1, r3
 8012160:	4610      	mov	r0, r2
 8012162:	f7ff fc29 	bl	80119b8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    co2Value.resizeToCurrentText();
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 801216c:	4618      	mov	r0, r3
 801216e:	f006 fa43 	bl	80185f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    co2Value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 8012178:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801217c:	2104      	movs	r1, #4
 801217e:	4618      	mov	r0, r3
 8012180:	f7ff fb8c 	bl	801189c <_ZN8touchgfx9TypedTextC1Et>
 8012184:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012188:	4619      	mov	r1, r3
 801218a:	4620      	mov	r0, r4
 801218c:	f006 fa51 	bl	8018632 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012190:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012194:	4618      	mov	r0, r3
 8012196:	f7fd fefd 	bl	800ff94 <_ZN8touchgfx9TypedTextD1Ev>

    humValue.setXY(584, 402);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80121a0:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80121a4:	f44f 7112 	mov.w	r1, #584	; 0x248
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7ff f952 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    humValue.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f503 64dc 	add.w	r4, r3, #1760	; 0x6e0
 80121b4:	2200      	movs	r2, #0
 80121b6:	2100      	movs	r1, #0
 80121b8:	2000      	movs	r0, #0
 80121ba:	f7ff fca7 	bl	8011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80121be:	4603      	mov	r3, r0
 80121c0:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 80121c4:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80121c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80121ca:	68fa      	ldr	r2, [r7, #12]
 80121cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80121ce:	bf00      	nop
    humValue.setLinespacing(0);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80121d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80121da:	2300      	movs	r3, #0
 80121dc:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 80121e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80121e4:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80121e8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80121ea:	bf00      	nop
    humValueBuffer[0] = 0;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2200      	movs	r2, #0
 80121f0:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
    humValue.setWildcard(humValueBuffer);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f503 62dc 	add.w	r2, r3, #1760	; 0x6e0
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8012200:	4619      	mov	r1, r3
 8012202:	4610      	mov	r0, r2
 8012204:	f7ff fbd8 	bl	80119b8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    humValue.resizeToCurrentText();
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 801220e:	4618      	mov	r0, r3
 8012210:	f006 f9f2 	bl	80185f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    humValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f503 64dc 	add.w	r4, r3, #1760	; 0x6e0
 801221a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801221e:	2105      	movs	r1, #5
 8012220:	4618      	mov	r0, r3
 8012222:	f7ff fb3b 	bl	801189c <_ZN8touchgfx9TypedTextC1Et>
 8012226:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801222a:	4619      	mov	r1, r3
 801222c:	4620      	mov	r0, r4
 801222e:	f006 fa00 	bl	8018632 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012232:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012236:	4618      	mov	r0, r3
 8012238:	f7fd feac 	bl	800ff94 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	3340      	adds	r3, #64	; 0x40
 8012242:	4619      	mov	r1, r3
 8012244:	4610      	mov	r0, r2
 8012246:	f7ff f9ed 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(bg);
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	336c      	adds	r3, #108	; 0x6c
 8012250:	4619      	mov	r1, r3
 8012252:	4610      	mov	r0, r2
 8012254:	f7ff f9e6 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gaugeCO2);
 8012258:	687a      	ldr	r2, [r7, #4]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	3398      	adds	r3, #152	; 0x98
 801225e:	4619      	mov	r1, r3
 8012260:	4610      	mov	r0, r2
 8012262:	f7ff f9df 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gaugeTemp);
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 801226e:	4619      	mov	r1, r3
 8012270:	4610      	mov	r0, r2
 8012272:	f7ff f9d7 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gaugeHum);
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 801227e:	4619      	mov	r1, r3
 8012280:	4610      	mov	r0, r2
 8012282:	f7ff f9cf 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonSettings);
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801228e:	4619      	mov	r1, r3
 8012290:	4610      	mov	r0, r2
 8012292:	f7ff f9c7 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(temp);
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 801229e:	4619      	mov	r1, r3
 80122a0:	4610      	mov	r0, r2
 80122a2:	f7ff f9bf 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(hum);
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 80122ae:	4619      	mov	r1, r3
 80122b0:	4610      	mov	r0, r2
 80122b2:	f7ff f9b7 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CO2);
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80122be:	4619      	mov	r1, r3
 80122c0:	4610      	mov	r0, r2
 80122c2:	f7ff f9af 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TempValue);
 80122c6:	687a      	ldr	r2, [r7, #4]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80122ce:	4619      	mov	r1, r3
 80122d0:	4610      	mov	r0, r2
 80122d2:	f7ff f9a7 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(co2Value);
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80122de:	4619      	mov	r1, r3
 80122e0:	4610      	mov	r0, r2
 80122e2:	f7ff f99f 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humValue);
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80122ee:	4619      	mov	r1, r3
 80122f0:	4610      	mov	r0, r2
 80122f2:	f7ff f997 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	4618      	mov	r0, r3
 80122fa:	37c4      	adds	r7, #196	; 0xc4
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd90      	pop	{r4, r7, pc}

08012300 <_ZN18MainScreenViewBase11setupScreenEv>:

void MainScreenViewBase::setupScreen()
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]

}
 8012308:	bf00      	nop
 801230a:	370c      	adds	r7, #12
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr

08012314 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonSettings)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8012324:	683a      	ldr	r2, [r7, #0]
 8012326:	429a      	cmp	r2, r3
 8012328:	d106      	bne.n	8012338 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //ShowMenu
        //When buttonSettings clicked change screen to MenuScreen
        //Go to MenuScreen with no screen transition
        application().gotoMenuScreenScreenNoTransition();
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7ff fbe3 	bl	8011af6 <_ZN18MainScreenViewBase11applicationEv>
 8012330:	4603      	mov	r3, r0
 8012332:	4618      	mov	r0, r3
 8012334:	f7fe fb1c 	bl	8010970 <_ZN23FrontendApplicationBase32gotoMenuScreenScreenNoTransitionEv>
    }
}
 8012338:	bf00      	nop
 801233a:	3708      	adds	r7, #8
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev>:
    View()
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	f009 fd66 	bl	801be1c <_ZN8touchgfx6ScreenC1Ev>
 8012350:	4a05      	ldr	r2, [pc, #20]	; (8012368 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev+0x28>)
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	601a      	str	r2, [r3, #0]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	4618      	mov	r0, r3
 8012360:	3708      	adds	r7, #8
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	0802a044 	.word	0x0802a044

0801236c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801236c:	b480      	push	{r7}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	4a04      	ldr	r2, [pc, #16]	; (8012388 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	4618      	mov	r0, r3
 801237e:	370c      	adds	r7, #12
 8012380:	46bd      	mov	sp, r7
 8012382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012386:	4770      	bx	lr
 8012388:	0802a078 	.word	0x0802a078

0801238c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	4639      	mov	r1, r7
 8012398:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	4618      	mov	r0, r3
 80123a0:	f7ff ffe4 	bl	801236c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80123a4:	4a08      	ldr	r2, [pc, #32]	; (80123c8 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	68ba      	ldr	r2, [r7, #8]
 80123ae:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	3308      	adds	r3, #8
 80123b4:	463a      	mov	r2, r7
 80123b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	4618      	mov	r0, r3
 80123c2:	3710      	adds	r7, #16
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	0802a02c 	.word	0x0802a02c

080123cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80123cc:	b480      	push	{r7}
 80123ce:	b083      	sub	sp, #12
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
    }
 80123d4:	4a04      	ldr	r2, [pc, #16]	; (80123e8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	601a      	str	r2, [r3, #0]
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	4618      	mov	r0, r3
 80123de:	370c      	adds	r7, #12
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr
 80123e8:	0802a078 	.word	0x0802a078

080123ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
    }
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7ff ffe9 	bl	80123cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80123fa:	2104      	movs	r1, #4
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f015 fbcc 	bl	8027b9a <_ZdlPvj>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	4618      	mov	r0, r3
 8012406:	3708      	adds	r7, #8
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	4a05      	ldr	r2, [pc, #20]	; (801242c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	601a      	str	r2, [r3, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	f7ff ffd5 	bl	80123cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	4618      	mov	r0, r3
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	0802a02c 	.word	0x0802a02c

08012430 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7ff ffe7 	bl	801240c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801243e:	2110      	movs	r1, #16
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f015 fbaa 	bl	8027b9a <_ZdlPvj>
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	4a05      	ldr	r2, [pc, #20]	; (8012470 <_ZN8touchgfx3BoxD1Ev+0x20>)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	601a      	str	r2, [r3, #0]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4618      	mov	r0, r3
 8012462:	f7ff f923 	bl	80116ac <_ZN8touchgfx6WidgetD1Ev>
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4618      	mov	r0, r3
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	0802b850 	.word	0x0802b850

08012474 <_ZN8touchgfx3BoxD0Ev>:
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f7ff ffe7 	bl	8012450 <_ZN8touchgfx3BoxD1Ev>
 8012482:	212c      	movs	r1, #44	; 0x2c
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f015 fb88 	bl	8027b9a <_ZdlPvj>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4618      	mov	r0, r3
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	4a05      	ldr	r2, [pc, #20]	; (80124b4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	601a      	str	r2, [r3, #0]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7ff f901 	bl	80116ac <_ZN8touchgfx6WidgetD1Ev>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4618      	mov	r0, r3
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	0802bbcc 	.word	0x0802bbcc

080124b8 <_ZN8touchgfx5ImageD0Ev>:
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7ff ffe7 	bl	8012494 <_ZN8touchgfx5ImageD1Ev>
 80124c6:	212c      	movs	r1, #44	; 0x2c
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f015 fb66 	bl	8027b9a <_ZdlPvj>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	4618      	mov	r0, r3
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	4a0a      	ldr	r2, [pc, #40]	; (801250c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	601a      	str	r2, [r3, #0]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	3358      	adds	r3, #88	; 0x58
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fe ff44 	bl	8011378 <_ZN8touchgfx9ContainerD1Ev>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	332c      	adds	r3, #44	; 0x2c
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7ff ffcd 	bl	8012494 <_ZN8touchgfx5ImageD1Ev>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fe ff3b 	bl	8011378 <_ZN8touchgfx9ContainerD1Ev>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	4618      	mov	r0, r3
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	0802a918 	.word	0x0802a918

08012510 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f7ff ffdd 	bl	80124d8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801251e:	21b0      	movs	r1, #176	; 0xb0
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f015 fb3a 	bl	8027b9a <_ZdlPvj>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	4618      	mov	r0, r3
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	4a05      	ldr	r2, [pc, #20]	; (8012550 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	601a      	str	r2, [r3, #0]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	4618      	mov	r0, r3
 8012542:	f7ff ffa7 	bl	8012494 <_ZN8touchgfx5ImageD1Ev>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4618      	mov	r0, r3
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	0802b5ec 	.word	0x0802b5ec

08012554 <_ZN8touchgfx13TextureMapperD0Ev>:
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f7ff ffe7 	bl	8012530 <_ZN8touchgfx13TextureMapperD1Ev>
 8012562:	2190      	movs	r1, #144	; 0x90
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f015 fb18 	bl	8027b9a <_ZdlPvj>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	4a05      	ldr	r2, [pc, #20]	; (8012594 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	601a      	str	r2, [r3, #0]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	f7ff f891 	bl	80116ac <_ZN8touchgfx6WidgetD1Ev>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	3708      	adds	r7, #8
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	0802b4b4 	.word	0x0802b4b4

08012598 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ff ffe7 	bl	8012574 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80125a6:	2130      	movs	r1, #48	; 0x30
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f015 faf6 	bl	8027b9a <_ZdlPvj>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4618      	mov	r0, r3
 80125b2:	3708      	adds	r7, #8
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	4a05      	ldr	r2, [pc, #20]	; (80125d8 <_ZN8touchgfx6CircleD1Ev+0x20>)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	601a      	str	r2, [r3, #0]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7ff ffd3 	bl	8012574 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4618      	mov	r0, r3
 80125d2:	3708      	adds	r7, #8
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	0802b3d4 	.word	0x0802b3d4

080125dc <_ZN8touchgfx6CircleD0Ev>:
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7ff ffe7 	bl	80125b8 <_ZN8touchgfx6CircleD1Ev>
 80125ea:	214c      	movs	r1, #76	; 0x4c
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f015 fad4 	bl	8027b9a <_ZdlPvj>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	4618      	mov	r0, r3
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	4a0b      	ldr	r2, [pc, #44]	; (8012634 <_ZN8touchgfx5GaugeD1Ev+0x38>)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012610:	4618      	mov	r0, r3
 8012612:	f7ff ffd1 	bl	80125b8 <_ZN8touchgfx6CircleD1Ev>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	33b0      	adds	r3, #176	; 0xb0
 801261a:	4618      	mov	r0, r3
 801261c:	f7ff ff88 	bl	8012530 <_ZN8touchgfx13TextureMapperD1Ev>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	4618      	mov	r0, r3
 8012624:	f7ff ff58 	bl	80124d8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	4618      	mov	r0, r3
 801262c:	3708      	adds	r7, #8
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	0802b8f8 	.word	0x0802b8f8

08012638 <_ZN8touchgfx5GaugeD0Ev>:
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f7ff ffdb 	bl	80125fc <_ZN8touchgfx5GaugeD1Ev>
 8012646:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f015 faa5 	bl	8027b9a <_ZdlPvj>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	4618      	mov	r0, r3
 8012654:	3708      	adds	r7, #8
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
	...

0801265c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	4a05      	ldr	r2, [pc, #20]	; (801267c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	601a      	str	r2, [r3, #0]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	4618      	mov	r0, r3
 801266e:	f7ff f873 	bl	8011758 <_ZN8touchgfx14AbstractButtonD1Ev>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4618      	mov	r0, r3
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	0802ba80 	.word	0x0802ba80

08012680 <_ZN8touchgfx6ButtonD0Ev>:
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7ff ffe7 	bl	801265c <_ZN8touchgfx6ButtonD1Ev>
 801268e:	2134      	movs	r1, #52	; 0x34
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f015 fa82 	bl	8027b9a <_ZdlPvj>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	4618      	mov	r0, r3
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	4a05      	ldr	r2, [pc, #20]	; (80126c0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	601a      	str	r2, [r3, #0]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7ff f943 	bl	801193c <_ZN8touchgfx8TextAreaD1Ev>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4618      	mov	r0, r3
 80126ba:	3708      	adds	r7, #8
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	0802bb24 	.word	0x0802bb24

080126c4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f7ff ffe7 	bl	80126a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80126d2:	2140      	movs	r1, #64	; 0x40
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f015 fa60 	bl	8027b9a <_ZdlPvj>
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	4618      	mov	r0, r3
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	68d2      	ldr	r2, [r2, #12]
 80126f6:	1052      	asrs	r2, r2, #1
 80126f8:	1898      	adds	r0, r3, r2
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	68db      	ldr	r3, [r3, #12]
 80126fe:	f003 0301 	and.w	r3, r3, #1
 8012702:	2b00      	cmp	r3, #0
 8012704:	d102      	bne.n	801270c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	689b      	ldr	r3, [r3, #8]
 801270a:	e00a      	b.n	8012722 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	68d2      	ldr	r2, [r2, #12]
 8012714:	1052      	asrs	r2, r2, #1
 8012716:	4413      	add	r3, r2
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	6892      	ldr	r2, [r2, #8]
 801271e:	4413      	add	r3, r2
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	6839      	ldr	r1, [r7, #0]
 8012724:	4798      	blx	r3
    }
 8012726:	bf00      	nop
 8012728:	3708      	adds	r7, #8
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}

0801272e <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801272e:	b480      	push	{r7}
 8012730:	b083      	sub	sp, #12
 8012732:	af00      	add	r7, sp, #0
 8012734:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d010      	beq.n	8012760 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d107      	bne.n	8012756 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	f003 0301 	and.w	r3, r3, #1
 801274e:	2b00      	cmp	r3, #0
 8012750:	d101      	bne.n	8012756 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012752:	2301      	movs	r3, #1
 8012754:	e000      	b.n	8012758 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8012756:	2300      	movs	r3, #0
 8012758:	2b01      	cmp	r3, #1
 801275a:	d001      	beq.n	8012760 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801275c:	2301      	movs	r3, #1
 801275e:	e000      	b.n	8012762 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012760:	2300      	movs	r3, #0
    }
 8012762:	4618      	mov	r0, r3
 8012764:	370c      	adds	r7, #12
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr
	...

08012770 <_ZN8touchgfx4ViewI19MenuScreenPresenterED1Ev>:
class View : public Screen
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	4a05      	ldr	r2, [pc, #20]	; (8012790 <_ZN8touchgfx4ViewI19MenuScreenPresenterED1Ev+0x20>)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	601a      	str	r2, [r3, #0]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	f7fe fef7 	bl	8011574 <_ZN8touchgfx6ScreenD1Ev>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4618      	mov	r0, r3
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	0802a140 	.word	0x0802a140

08012794 <_ZN8touchgfx4ViewI19MenuScreenPresenterED0Ev>:
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f7ff ffe7 	bl	8012770 <_ZN8touchgfx4ViewI19MenuScreenPresenterED1Ev>
 80127a2:	2140      	movs	r1, #64	; 0x40
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f015 f9f8 	bl	8027b9a <_ZdlPvj>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4618      	mov	r0, r3
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <_ZN18MenuScreenViewBaseD1Ev>:

class MenuScreenViewBase : public touchgfx::View<MenuScreenPresenter>
{
public:
    MenuScreenViewBase();
    virtual ~MenuScreenViewBase() {}
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	4a0f      	ldr	r2, [pc, #60]	; (80127fc <_ZN18MenuScreenViewBaseD1Ev+0x48>)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	601a      	str	r2, [r3, #0]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	33cc      	adds	r3, #204	; 0xcc
 80127c6:	4618      	mov	r0, r3
 80127c8:	f000 f932 	bl	8012a30 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	3398      	adds	r3, #152	; 0x98
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff ff43 	bl	801265c <_ZN8touchgfx6ButtonD1Ev>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	336c      	adds	r3, #108	; 0x6c
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff fe5a 	bl	8012494 <_ZN8touchgfx5ImageD1Ev>
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	3340      	adds	r3, #64	; 0x40
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7ff fe33 	bl	8012450 <_ZN8touchgfx3BoxD1Ev>
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7ff ffbf 	bl	8012770 <_ZN8touchgfx4ViewI19MenuScreenPresenterED1Ev>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	4618      	mov	r0, r3
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	0802a0f4 	.word	0x0802a0f4

08012800 <_ZN18MenuScreenViewBaseD0Ev>:
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f7ff ffd3 	bl	80127b4 <_ZN18MenuScreenViewBaseD1Ev>
 801280e:	21dc      	movs	r1, #220	; 0xdc
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f015 f9c2 	bl	8027b9a <_ZdlPvj>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4618      	mov	r0, r3
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <_ZN18MenuScreenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8012828:	f007 ff66 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 801282c:	4603      	mov	r3, r0
    }
 801282e:	4618      	mov	r0, r3
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
	...

08012838 <_ZN18MenuScreenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/menuscreen_screen/MenuScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

MenuScreenViewBase::MenuScreenViewBase() :
 8012838:	b590      	push	{r4, r7, lr}
 801283a:	b08b      	sub	sp, #44	; 0x2c
 801283c:	af02      	add	r7, sp, #8
 801283e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MenuScreenViewBase::buttonCallbackHandler)
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	f000 f8be 	bl	80129c4 <_ZN8touchgfx4ViewI19MenuScreenPresenterEC1Ev>
 8012848:	4a4c      	ldr	r2, [pc, #304]	; (801297c <_ZN18MenuScreenViewBaseC1Ev+0x144>)
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	601a      	str	r2, [r3, #0]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	3340      	adds	r3, #64	; 0x40
 8012852:	4618      	mov	r0, r3
 8012854:	f7fe ffc6 	bl	80117e4 <_ZN8touchgfx3BoxC1Ev>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801285e:	f107 0308 	add.w	r3, r7, #8
 8012862:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012866:	4618      	mov	r0, r3
 8012868:	f7fe fdb7 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 801286c:	f107 0308 	add.w	r3, r7, #8
 8012870:	4619      	mov	r1, r3
 8012872:	4620      	mov	r0, r4
 8012874:	f7fe ffe8 	bl	8011848 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	3398      	adds	r3, #152	; 0x98
 801287c:	4618      	mov	r0, r3
 801287e:	f7fe ff8d 	bl	801179c <_ZN8touchgfx6ButtonC1Ev>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 8012888:	4b3d      	ldr	r3, [pc, #244]	; (8012980 <_ZN18MenuScreenViewBaseC1Ev+0x148>)
 801288a:	60fb      	str	r3, [r7, #12]
 801288c:	2300      	movs	r3, #0
 801288e:	613b      	str	r3, [r7, #16]
 8012890:	f107 030c 	add.w	r3, r7, #12
 8012894:	cb0c      	ldmia	r3, {r2, r3}
 8012896:	6879      	ldr	r1, [r7, #4]
 8012898:	f000 f8aa 	bl	80129f0 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 800, 480);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80128a2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80128ac:	2200      	movs	r2, #0
 80128ae:	2100      	movs	r1, #0
 80128b0:	f7fe fdae 	bl	8011410 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80128ba:	2200      	movs	r2, #0
 80128bc:	2100      	movs	r1, #0
 80128be:	2000      	movs	r0, #0
 80128c0:	f7ff f924 	bl	8011b0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80128c4:	4603      	mov	r3, r0
 80128c6:	4619      	mov	r1, r3
 80128c8:	4620      	mov	r0, r4
 80128ca:	f7fe ffaf 	bl	801182c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	336c      	adds	r3, #108	; 0x6c
 80128d2:	2200      	movs	r2, #0
 80128d4:	2100      	movs	r1, #0
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fe fdbb 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80128e2:	f107 0314 	add.w	r3, r7, #20
 80128e6:	2100      	movs	r1, #0
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7fe fd76 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 80128ee:	f107 0314 	add.w	r3, r7, #20
 80128f2:	4619      	mov	r1, r3
 80128f4:	4620      	mov	r0, r4
 80128f6:	f006 f9ff 	bl	8018cf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    button1.setXY(19, 16);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	3398      	adds	r3, #152	; 0x98
 80128fe:	2210      	movs	r2, #16
 8012900:	2113      	movs	r1, #19
 8012902:	4618      	mov	r0, r3
 8012904:	f7fe fda5 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RETURN_ID), touchgfx::Bitmap(BITMAP_RETURN_ACTIVE_ID));
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 801290e:	f107 0318 	add.w	r3, r7, #24
 8012912:	2105      	movs	r1, #5
 8012914:	4618      	mov	r0, r3
 8012916:	f7fe fd60 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 801291a:	f107 031c 	add.w	r3, r7, #28
 801291e:	2106      	movs	r1, #6
 8012920:	4618      	mov	r0, r3
 8012922:	f7fe fd5a 	bl	80113da <_ZN8touchgfx6BitmapC1Et>
 8012926:	f107 021c 	add.w	r2, r7, #28
 801292a:	f107 0318 	add.w	r3, r7, #24
 801292e:	4619      	mov	r1, r3
 8012930:	4620      	mov	r0, r4
 8012932:	f006 f82b 	bl	801898c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f103 0298 	add.w	r2, r3, #152	; 0x98
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	33cc      	adds	r3, #204	; 0xcc
 8012940:	4619      	mov	r1, r3
 8012942:	4610      	mov	r0, r2
 8012944:	f7fe fefa 	bl	801173c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3340      	adds	r3, #64	; 0x40
 801294e:	4619      	mov	r1, r3
 8012950:	4610      	mov	r0, r2
 8012952:	f7fe fe67 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	336c      	adds	r3, #108	; 0x6c
 801295c:	4619      	mov	r1, r3
 801295e:	4610      	mov	r0, r2
 8012960:	f7fe fe60 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	3398      	adds	r3, #152	; 0x98
 801296a:	4619      	mov	r1, r3
 801296c:	4610      	mov	r0, r2
 801296e:	f7fe fe59 	bl	8011624 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	4618      	mov	r0, r3
 8012976:	3724      	adds	r7, #36	; 0x24
 8012978:	46bd      	mov	sp, r7
 801297a:	bd90      	pop	{r4, r7, pc}
 801297c:	0802a0f4 	.word	0x0802a0f4
 8012980:	08012999 	.word	0x08012999

08012984 <_ZN18MenuScreenViewBase11setupScreenEv>:

void MenuScreenViewBase::setupScreen()
{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]

}
 801298c:	bf00      	nop
 801298e:	370c      	adds	r7, #12
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <_ZN18MenuScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MenuScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3398      	adds	r3, #152	; 0x98
 80129a6:	683a      	ldr	r2, [r7, #0]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d106      	bne.n	80129ba <_ZN18MenuScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //ReturnToMainScreen
        //When button1 clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f7ff ff37 	bl	8012820 <_ZN18MenuScreenViewBase11applicationEv>
 80129b2:	4603      	mov	r3, r0
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7fd ff95 	bl	80108e4 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
}
 80129ba:	bf00      	nop
 80129bc:	3708      	adds	r7, #8
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
	...

080129c4 <_ZN8touchgfx4ViewI19MenuScreenPresenterEC1Ev>:
    View()
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f009 fa24 	bl	801be1c <_ZN8touchgfx6ScreenC1Ev>
 80129d4:	4a05      	ldr	r2, [pc, #20]	; (80129ec <_ZN8touchgfx4ViewI19MenuScreenPresenterEC1Ev+0x28>)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	601a      	str	r2, [r3, #0]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2200      	movs	r2, #0
 80129de:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	0802a140 	.word	0x0802a140

080129f0 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b084      	sub	sp, #16
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	60f8      	str	r0, [r7, #12]
 80129f8:	60b9      	str	r1, [r7, #8]
 80129fa:	4639      	mov	r1, r7
 80129fc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7ff fcb2 	bl	801236c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8012a08:	4a08      	ldr	r2, [pc, #32]	; (8012a2c <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	68ba      	ldr	r2, [r7, #8]
 8012a12:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	3308      	adds	r3, #8
 8012a18:	463a      	mov	r2, r7
 8012a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	4618      	mov	r0, r3
 8012a26:	3710      	adds	r7, #16
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	0802a128 	.word	0x0802a128

08012a30 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
 8012a38:	4a05      	ldr	r2, [pc, #20]	; (8012a50 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	601a      	str	r2, [r3, #0]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7ff fcc3 	bl	80123cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	0802a128 	.word	0x0802a128

08012a54 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f7ff ffe7 	bl	8012a30 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012a62:	2110      	movs	r1, #16
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f015 f898 	bl	8027b9a <_ZdlPvj>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3708      	adds	r7, #8
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	68d2      	ldr	r2, [r2, #12]
 8012a86:	1052      	asrs	r2, r2, #1
 8012a88:	1898      	adds	r0, r3, r2
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	68db      	ldr	r3, [r3, #12]
 8012a8e:	f003 0301 	and.w	r3, r3, #1
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d102      	bne.n	8012a9c <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	689b      	ldr	r3, [r3, #8]
 8012a9a:	e00a      	b.n	8012ab2 <_ZN8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	687a      	ldr	r2, [r7, #4]
 8012aa2:	68d2      	ldr	r2, [r2, #12]
 8012aa4:	1052      	asrs	r2, r2, #1
 8012aa6:	4413      	add	r3, r2
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	687a      	ldr	r2, [r7, #4]
 8012aac:	6892      	ldr	r2, [r2, #8]
 8012aae:	4413      	add	r3, r2
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	6839      	ldr	r1, [r7, #0]
 8012ab4:	4798      	blx	r3
    }
 8012ab6:	bf00      	nop
 8012ab8:	3708      	adds	r7, #8
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}

08012abe <_ZNK8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8012abe:	b480      	push	{r7}
 8012ac0:	b083      	sub	sp, #12
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d010      	beq.n	8012af0 <_ZNK8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	689b      	ldr	r3, [r3, #8]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d107      	bne.n	8012ae6 <_ZNK8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	68db      	ldr	r3, [r3, #12]
 8012ada:	f003 0301 	and.w	r3, r3, #1
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d101      	bne.n	8012ae6 <_ZNK8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	e000      	b.n	8012ae8 <_ZNK8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d001      	beq.n	8012af0 <_ZNK8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012aec:	2301      	movs	r3, #1
 8012aee:	e000      	b.n	8012af2 <_ZNK8touchgfx8CallbackI18MenuScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012af0:	2300      	movs	r3, #0
    }
 8012af2:	4618      	mov	r0, r3
 8012af4:	370c      	adds	r7, #12
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr
	...

08012b00 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012b00:	b480      	push	{r7}
 8012b02:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012b04:	4b02      	ldr	r3, [pc, #8]	; (8012b10 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr
 8012b10:	0802a16c 	.word	0x0802a16c

08012b14 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012b14:	b480      	push	{r7}
 8012b16:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012b18:	2309      	movs	r3, #9
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr

08012b24 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8012b24:	b480      	push	{r7}
 8012b26:	b085      	sub	sp, #20
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	60f8      	str	r0, [r7, #12]
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	607a      	str	r2, [r7, #4]
 8012b30:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8012b32:	2300      	movs	r3, #0
    }
 8012b34:	4618      	mov	r0, r3
 8012b36:	3714      	adds	r7, #20
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8012b40:	b480      	push	{r7}
 8012b42:	b083      	sub	sp, #12
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012b48:	2300      	movs	r3, #0
    }
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	370c      	adds	r7, #12
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr
	...

08012b58 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012b58:	b480      	push	{r7}
 8012b5a:	b085      	sub	sp, #20
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	60f8      	str	r0, [r7, #12]
 8012b60:	60b9      	str	r1, [r7, #8]
 8012b62:	4613      	mov	r3, r2
 8012b64:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8012b66:	4a07      	ldr	r2, [pc, #28]	; (8012b84 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012b6c:	4a06      	ldr	r2, [pc, #24]	; (8012b88 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012b72:	4a06      	ldr	r2, [pc, #24]	; (8012b8c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012b74:	88fb      	ldrh	r3, [r7, #6]
 8012b76:	8013      	strh	r3, [r2, #0]
    }
 8012b78:	bf00      	nop
 8012b7a:	3714      	adds	r7, #20
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr
 8012b84:	20006148 	.word	0x20006148
 8012b88:	20006150 	.word	0x20006150
 8012b8c:	2000614c 	.word	0x2000614c

08012b90 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012b90:	b40e      	push	{r1, r2, r3}
 8012b92:	b580      	push	{r7, lr}
 8012b94:	b085      	sub	sp, #20
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8012b9a:	f107 0320 	add.w	r3, r7, #32
 8012b9e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	69fa      	ldr	r2, [r7, #28]
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f008 fc42 	bl	801b430 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012bac:	4603      	mov	r3, r0
 8012bae:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012bb0:	89fb      	ldrh	r3, [r7, #14]
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012bbc:	b003      	add	sp, #12
 8012bbe:	4770      	bx	lr

08012bc0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012bc0:	b40c      	push	{r2, r3}
 8012bc2:	b580      	push	{r7, lr}
 8012bc4:	b084      	sub	sp, #16
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
 8012bca:	460b      	mov	r3, r1
 8012bcc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8012bce:	f107 031c 	add.w	r3, r7, #28
 8012bd2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8012bd4:	78f9      	ldrb	r1, [r7, #3]
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	69ba      	ldr	r2, [r7, #24]
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f008 fc28 	bl	801b430 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012be0:	4603      	mov	r3, r0
 8012be2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012be4:	89fb      	ldrh	r3, [r7, #14]
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3710      	adds	r7, #16
 8012bea:	46bd      	mov	sp, r7
 8012bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012bf0:	b002      	add	sp, #8
 8012bf2:	4770      	bx	lr

08012bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b08a      	sub	sp, #40	; 0x28
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d016      	beq.n	8012c36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	331a      	adds	r3, #26
 8012c0c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	8adb      	ldrh	r3, [r3, #22]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d105      	bne.n	8012c22 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8012c16:	4b43      	ldr	r3, [pc, #268]	; (8012d24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012c18:	4a43      	ldr	r2, [pc, #268]	; (8012d28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012c1a:	21c0      	movs	r1, #192	; 0xc0
 8012c1c:	4843      	ldr	r0, [pc, #268]	; (8012d2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012c1e:	f015 f98f 	bl	8027f40 <__assert_func>
            return buffer[pos];
 8012c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c24:	8a9b      	ldrh	r3, [r3, #20]
 8012c26:	461a      	mov	r2, r3
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d001      	beq.n	8012c36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012c32:	2301      	movs	r3, #1
 8012c34:	e000      	b.n	8012c38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8012c36:	2300      	movs	r3, #0
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d06a      	beq.n	8012d12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f009 fff3 	bl	801cc28 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	331a      	adds	r3, #26
 8012c46:	623b      	str	r3, [r7, #32]
 8012c48:	2301      	movs	r3, #1
 8012c4a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8012c4c:	6a3b      	ldr	r3, [r7, #32]
 8012c4e:	8adb      	ldrh	r3, [r3, #22]
 8012c50:	8bfa      	ldrh	r2, [r7, #30]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d305      	bcc.n	8012c62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8012c56:	4b36      	ldr	r3, [pc, #216]	; (8012d30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8012c58:	4a36      	ldr	r2, [pc, #216]	; (8012d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8012c5a:	21c5      	movs	r1, #197	; 0xc5
 8012c5c:	4833      	ldr	r0, [pc, #204]	; (8012d2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012c5e:	f015 f96f 	bl	8027f40 <__assert_func>
            const uint16_t index = pos + offset;
 8012c62:	6a3b      	ldr	r3, [r7, #32]
 8012c64:	8a9a      	ldrh	r2, [r3, #20]
 8012c66:	8bfb      	ldrh	r3, [r7, #30]
 8012c68:	4413      	add	r3, r2
 8012c6a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8012c6c:	8bbb      	ldrh	r3, [r7, #28]
 8012c6e:	2b09      	cmp	r3, #9
 8012c70:	d801      	bhi.n	8012c76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8012c72:	8bbb      	ldrh	r3, [r7, #28]
 8012c74:	e001      	b.n	8012c7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8012c76:	8bbb      	ldrh	r3, [r7, #28]
 8012c78:	3b0a      	subs	r3, #10
 8012c7a:	6a3a      	ldr	r2, [r7, #32]
 8012c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c80:	f640 123f 	movw	r2, #2367	; 0x93f
 8012c84:	4293      	cmp	r3, r2
 8012c86:	bf0c      	ite	eq
 8012c88:	2301      	moveq	r3, #1
 8012c8a:	2300      	movne	r3, #0
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d03f      	beq.n	8012d12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	331a      	adds	r3, #26
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	321a      	adds	r2, #26
 8012c9a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	8ad2      	ldrh	r2, [r2, #22]
 8012ca0:	2a00      	cmp	r2, #0
 8012ca2:	d105      	bne.n	8012cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8012ca4:	4b1f      	ldr	r3, [pc, #124]	; (8012d24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012ca6:	4a20      	ldr	r2, [pc, #128]	; (8012d28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012ca8:	21c0      	movs	r1, #192	; 0xc0
 8012caa:	4820      	ldr	r0, [pc, #128]	; (8012d2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012cac:	f015 f948 	bl	8027f40 <__assert_func>
            return buffer[pos];
 8012cb0:	68ba      	ldr	r2, [r7, #8]
 8012cb2:	8a92      	ldrh	r2, [r2, #20]
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8012cbc:	613b      	str	r3, [r7, #16]
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	8adb      	ldrh	r3, [r3, #22]
 8012cc6:	2b01      	cmp	r3, #1
 8012cc8:	d806      	bhi.n	8012cd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8012cca:	4b1b      	ldr	r3, [pc, #108]	; (8012d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8012ccc:	4a1b      	ldr	r2, [pc, #108]	; (8012d3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8012cce:	f240 110d 	movw	r1, #269	; 0x10d
 8012cd2:	4816      	ldr	r0, [pc, #88]	; (8012d2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012cd4:	f015 f934 	bl	8027f40 <__assert_func>
            const uint16_t index = pos + 1;
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	8a9b      	ldrh	r3, [r3, #20]
 8012cdc:	3301      	adds	r3, #1
 8012cde:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8012ce0:	89bb      	ldrh	r3, [r7, #12]
 8012ce2:	2b09      	cmp	r3, #9
 8012ce4:	d801      	bhi.n	8012cea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8012ce6:	89bb      	ldrh	r3, [r7, #12]
 8012ce8:	e000      	b.n	8012cec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8012cea:	2300      	movs	r3, #0
 8012cec:	693a      	ldr	r2, [r7, #16]
 8012cee:	89f9      	ldrh	r1, [r7, #14]
 8012cf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8012cf4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	331a      	adds	r3, #26
 8012cfa:	61bb      	str	r3, [r7, #24]
 8012cfc:	f640 133f 	movw	r3, #2367	; 0x93f
 8012d00:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	8a9b      	ldrh	r3, [r3, #20]
 8012d06:	4619      	mov	r1, r3
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	8afa      	ldrh	r2, [r7, #22]
 8012d0c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8012d10:	bf00      	nop
        }
    }
    return getNextChar();
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f009 fe6c 	bl	801c9f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012d18:	4603      	mov	r3, r0
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3728      	adds	r7, #40	; 0x28
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	08029698 	.word	0x08029698
 8012d28:	080296a4 	.word	0x080296a4
 8012d2c:	08029750 	.word	0x08029750
 8012d30:	08029798 	.word	0x08029798
 8012d34:	080297a8 	.word	0x080297a8
 8012d38:	0802987c 	.word	0x0802987c
 8012d3c:	08029888 	.word	0x08029888

08012d40 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f009 fe0b 	bl	801c964 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8012d4e:	bf00      	nop
 8012d50:	3708      	adds	r7, #8
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}

08012d56 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8012d56:	b580      	push	{r7, lr}
 8012d58:	b088      	sub	sp, #32
 8012d5a:	af02      	add	r7, sp, #8
 8012d5c:	60f8      	str	r0, [r7, #12]
 8012d5e:	1d38      	adds	r0, r7, #4
 8012d60:	e880 0006 	stmia.w	r0, {r1, r2}
 8012d64:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8012d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d6a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8012d6c:	1d39      	adds	r1, r7, #4
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	9301      	str	r3, [sp, #4]
 8012d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	6a3b      	ldr	r3, [r7, #32]
 8012d78:	683a      	ldr	r2, [r7, #0]
 8012d7a:	68f8      	ldr	r0, [r7, #12]
 8012d7c:	f007 f83a 	bl	8019df4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8012d80:	bf00      	nop
 8012d82:	3718      	adds	r7, #24
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8012d88:	b590      	push	{r4, r7, lr}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	4603      	mov	r3, r0
 8012d90:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012d92:	2300      	movs	r3, #0
 8012d94:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012d96:	88fb      	ldrh	r3, [r7, #6]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d127      	bne.n	8012dec <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012d9c:	88fb      	ldrh	r3, [r7, #6]
 8012d9e:	4a1e      	ldr	r2, [pc, #120]	; (8012e18 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d016      	beq.n	8012dd6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012da8:	88fb      	ldrh	r3, [r7, #6]
 8012daa:	4a1b      	ldr	r2, [pc, #108]	; (8012e18 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012db0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	68ba      	ldr	r2, [r7, #8]
 8012db8:	4413      	add	r3, r2
 8012dba:	4a18      	ldr	r2, [pc, #96]	; (8012e1c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012dbc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	68ba      	ldr	r2, [r7, #8]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	4a16      	ldr	r2, [pc, #88]	; (8012e20 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012dc8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	689b      	ldr	r3, [r3, #8]
 8012dce:	68ba      	ldr	r2, [r7, #8]
 8012dd0:	4413      	add	r3, r2
 8012dd2:	60fb      	str	r3, [r7, #12]
 8012dd4:	e00a      	b.n	8012dec <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012dd6:	4b11      	ldr	r3, [pc, #68]	; (8012e1c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012dd8:	4a12      	ldr	r2, [pc, #72]	; (8012e24 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8012dda:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012ddc:	4a12      	ldr	r2, [pc, #72]	; (8012e28 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012dde:	4b10      	ldr	r3, [pc, #64]	; (8012e20 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012de0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012de2:	88fb      	ldrh	r3, [r7, #6]
 8012de4:	4a11      	ldr	r2, [pc, #68]	; (8012e2c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012dea:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d00d      	beq.n	8012e0e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012df2:	4a0f      	ldr	r2, [pc, #60]	; (8012e30 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012df4:	88fb      	ldrh	r3, [r7, #6]
 8012df6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012df8:	f000 f83e 	bl	8012e78 <_ZN17TypedTextDatabase8getFontsEv>
 8012dfc:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012dfe:	f000 f833 	bl	8012e68 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012e02:	4603      	mov	r3, r0
 8012e04:	461a      	mov	r2, r3
 8012e06:	4621      	mov	r1, r4
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f7ff fea5 	bl	8012b58 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012e0e:	bf00      	nop
 8012e10:	3714      	adds	r7, #20
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd90      	pop	{r4, r7, pc}
 8012e16:	bf00      	nop
 8012e18:	20004ac4 	.word	0x20004ac4
 8012e1c:	20004acc 	.word	0x20004acc
 8012e20:	20004ad0 	.word	0x20004ad0
 8012e24:	080c23dc 	.word	0x080c23dc
 8012e28:	080c23c4 	.word	0x080c23c4
 8012e2c:	080c243c 	.word	0x080c243c
 8012e30:	20004ac8 	.word	0x20004ac8

08012e34 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012e34:	b480      	push	{r7}
 8012e36:	b083      	sub	sp, #12
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012e40:	4b07      	ldr	r3, [pc, #28]	; (8012e60 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	4b07      	ldr	r3, [pc, #28]	; (8012e64 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012e46:	6819      	ldr	r1, [r3, #0]
 8012e48:	887b      	ldrh	r3, [r7, #2]
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	440b      	add	r3, r1
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	005b      	lsls	r3, r3, #1
 8012e52:	4413      	add	r3, r2
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	370c      	adds	r7, #12
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr
 8012e60:	20004acc 	.word	0x20004acc
 8012e64:	20004ad0 	.word	0x20004ad0

08012e68 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012e68:	b480      	push	{r7}
 8012e6a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012e6c:	2306      	movs	r3, #6
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr

08012e78 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012e78:	b480      	push	{r7}
 8012e7a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8012e7c:	4b02      	ldr	r3, [pc, #8]	; (8012e88 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr
 8012e88:	20004ad4 	.word	0x20004ad4

08012e8c <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_30_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d118      	bne.n	8012ece <_Z41__static_initialization_and_destruction_0ii+0x42>
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	d113      	bne.n	8012ece <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 8012ea6:	f7fd f993 	bl	80101d0 <_Z23getFont_verdana_20_4bppv>
 8012eaa:	4603      	mov	r3, r0
};
 8012eac:	4a0a      	ldr	r2, [pc, #40]	; (8012ed8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012eae:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8012eb0:	f7fd fa36 	bl	8010320 <_Z23getFont_verdana_40_4bppv>
 8012eb4:	4603      	mov	r3, r0
};
 8012eb6:	4a08      	ldr	r2, [pc, #32]	; (8012ed8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012eb8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8012eba:	f7fd f935 	bl	8010128 <_Z23getFont_verdana_10_4bppv>
 8012ebe:	4603      	mov	r3, r0
};
 8012ec0:	4a05      	ldr	r2, [pc, #20]	; (8012ed8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012ec2:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_30_4bpp())
 8012ec4:	f7fd f9d8 	bl	8010278 <_Z23getFont_verdana_30_4bppv>
 8012ec8:	4603      	mov	r3, r0
};
 8012eca:	4a03      	ldr	r2, [pc, #12]	; (8012ed8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012ecc:	60d3      	str	r3, [r2, #12]
}  // namespace TypedTextDatabase
 8012ece:	bf00      	nop
 8012ed0:	3708      	adds	r7, #8
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	20004ad4 	.word	0x20004ad4

08012edc <_GLOBAL__sub_I_touchgfx_fonts>:
 8012edc:	b580      	push	{r7, lr}
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012ee4:	2001      	movs	r0, #1
 8012ee6:	f7ff ffd1 	bl	8012e8c <_Z41__static_initialization_and_destruction_0ii>
 8012eea:	bd80      	pop	{r7, pc}

08012eec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	4a05      	ldr	r2, [pc, #20]	; (8012f0c <_ZN19FrontendApplicationD1Ev+0x20>)
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	601a      	str	r2, [r3, #0]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fd fc51 	bl	80107a4 <_ZN23FrontendApplicationBaseD1Ev>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	4618      	mov	r0, r3
 8012f06:	3708      	adds	r7, #8
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	0802a278 	.word	0x0802a278

08012f10 <_ZN19FrontendApplicationD0Ev>:
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b082      	sub	sp, #8
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff ffe7 	bl	8012eec <_ZN19FrontendApplicationD1Ev>
 8012f1e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f014 fe39 	bl	8027b9a <_ZdlPvj>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3708      	adds	r7, #8
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}

08012f32 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012f32:	b580      	push	{r7, lr}
 8012f34:	b082      	sub	sp, #8
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012f40:	4618      	mov	r0, r3
 8012f42:	f000 fafb 	bl	801353c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f007 fab7 	bl	801a4bc <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012f4e:	bf00      	nop
 8012f50:	3708      	adds	r7, #8
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
	...

08012f58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	68b9      	ldr	r1, [r7, #8]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fd fc5e 	bl	801082c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012f70:	4a03      	ldr	r2, [pc, #12]	; (8012f80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	601a      	str	r2, [r3, #0]
{

}
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	3710      	adds	r7, #16
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}
 8012f80:	0802a278 	.word	0x0802a278

08012f84 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012f84:	b480      	push	{r7}
 8012f86:	b083      	sub	sp, #12
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
    {
    }
 8012f8c:	bf00      	nop
 8012f8e:	370c      	adds	r7, #12
 8012f90:	46bd      	mov	sp, r7
 8012f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f96:	4770      	bx	lr

08012f98 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012f98:	b480      	push	{r7}
 8012f9a:	b083      	sub	sp, #12
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
    {
    }
 8012fa0:	bf00      	nop
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr

08012fac <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012fac:	b480      	push	{r7}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
    {
 8012fb4:	4a04      	ldr	r2, [pc, #16]	; (8012fc8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	601a      	str	r2, [r3, #0]
    }
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	370c      	adds	r7, #12
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr
 8012fc8:	0802a300 	.word	0x0802a300

08012fcc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
    }
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f7ff ffe9 	bl	8012fac <_ZN8touchgfx9PresenterD1Ev>
 8012fda:	2104      	movs	r1, #4
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f014 fddc 	bl	8027b9a <_ZdlPvj>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3708      	adds	r7, #8
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
    {
 8012ff4:	4a04      	ldr	r2, [pc, #16]	; (8013008 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	601a      	str	r2, [r3, #0]
    }
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	370c      	adds	r7, #12
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr
 8013008:	0802a300 	.word	0x0802a300

0801300c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801300c:	b480      	push	{r7}
 801300e:	b083      	sub	sp, #12
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	4a06      	ldr	r2, [pc, #24]	; (8013030 <_ZN13ModelListenerC1Ev+0x24>)
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	601a      	str	r2, [r3, #0]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2200      	movs	r2, #0
 801301e:	605a      	str	r2, [r3, #4]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	4618      	mov	r0, r3
 8013024:	370c      	adds	r7, #12
 8013026:	46bd      	mov	sp, r7
 8013028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302c:	4770      	bx	lr
 801302e:	bf00      	nop
 8013030:	0802a2ec 	.word	0x0802a2ec

08013034 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013034:	b480      	push	{r7}
 8013036:	b083      	sub	sp, #12
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	4a04      	ldr	r2, [pc, #16]	; (8013050 <_ZN13ModelListenerD1Ev+0x1c>)
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	601a      	str	r2, [r3, #0]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4618      	mov	r0, r3
 8013046:	370c      	adds	r7, #12
 8013048:	46bd      	mov	sp, r7
 801304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304e:	4770      	bx	lr
 8013050:	0802a2ec 	.word	0x0802a2ec

08013054 <_ZN13ModelListenerD0Ev>:
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7ff ffe9 	bl	8013034 <_ZN13ModelListenerD1Ev>
 8013062:	2108      	movs	r1, #8
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f014 fd98 	bl	8027b9a <_ZdlPvj>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	4618      	mov	r0, r3
 801306e:	3708      	adds	r7, #8
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}

08013074 <_ZN13ModelListener14setClimateDataEiii>:

    virtual void setClimateData(int temp, int co2, int hum){}
 8013074:	b480      	push	{r7}
 8013076:	b085      	sub	sp, #20
 8013078:	af00      	add	r7, sp, #0
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	60b9      	str	r1, [r7, #8]
 801307e:	607a      	str	r2, [r7, #4]
 8013080:	603b      	str	r3, [r7, #0]
 8013082:	bf00      	nop
 8013084:	3714      	adds	r7, #20
 8013086:	46bd      	mov	sp, r7
 8013088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308c:	4770      	bx	lr
	...

08013090 <_ZN19MainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainScreenPresenter() {};
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	4a09      	ldr	r2, [pc, #36]	; (80130c0 <_ZN19MainScreenPresenterD1Ev+0x30>)
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	601a      	str	r2, [r3, #0]
 801309e:	4a09      	ldr	r2, [pc, #36]	; (80130c4 <_ZN19MainScreenPresenterD1Ev+0x34>)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	605a      	str	r2, [r3, #4]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	3304      	adds	r3, #4
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7ff ffc3 	bl	8013034 <_ZN13ModelListenerD1Ev>
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7ff ff7b 	bl	8012fac <_ZN8touchgfx9PresenterD1Ev>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	4618      	mov	r0, r3
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	0802a2bc 	.word	0x0802a2bc
 80130c4:	0802a2d8 	.word	0x0802a2d8

080130c8 <_ZThn4_N19MainScreenPresenterD1Ev>:
 80130c8:	f1a0 0004 	sub.w	r0, r0, #4
 80130cc:	e7e0      	b.n	8013090 <_ZN19MainScreenPresenterD1Ev>
 80130ce:	bf00      	nop

080130d0 <_ZN19MainScreenPresenterD0Ev>:
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b082      	sub	sp, #8
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7ff ffd9 	bl	8013090 <_ZN19MainScreenPresenterD1Ev>
 80130de:	2110      	movs	r1, #16
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f014 fd5a 	bl	8027b9a <_ZdlPvj>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	4618      	mov	r0, r3
 80130ea:	3708      	adds	r7, #8
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <_ZThn4_N19MainScreenPresenterD0Ev>:
 80130f0:	f1a0 0004 	sub.w	r0, r0, #4
 80130f4:	e7ec      	b.n	80130d0 <_ZN19MainScreenPresenterD0Ev>
	...

080130f8 <_ZN19MainScreenPresenterC1ER14MainScreenView>:
#include <gui/mainscreen_screen/MainScreenView.hpp>
#include <gui/mainscreen_screen/MainScreenPresenter.hpp>

MainScreenPresenter::MainScreenPresenter(MainScreenView& v)
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
    : view(v)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	4618      	mov	r0, r3
 8013106:	f7ff ff71 	bl	8012fec <_ZN8touchgfx9PresenterC1Ev>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	3304      	adds	r3, #4
 801310e:	4618      	mov	r0, r3
 8013110:	f7ff ff7c 	bl	801300c <_ZN13ModelListenerC1Ev>
 8013114:	4a06      	ldr	r2, [pc, #24]	; (8013130 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x38>)
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	601a      	str	r2, [r3, #0]
 801311a:	4a06      	ldr	r2, [pc, #24]	; (8013134 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x3c>)
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	605a      	str	r2, [r3, #4]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	683a      	ldr	r2, [r7, #0]
 8013124:	60da      	str	r2, [r3, #12]
{

}
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	4618      	mov	r0, r3
 801312a:	3708      	adds	r7, #8
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}
 8013130:	0802a2bc 	.word	0x0802a2bc
 8013134:	0802a2d8 	.word	0x0802a2d8

08013138 <_ZN19MainScreenPresenter8activateEv>:

void MainScreenPresenter::activate()
{
 8013138:	b480      	push	{r7}
 801313a:	b083      	sub	sp, #12
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]

}
 8013140:	bf00      	nop
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <_ZN19MainScreenPresenter10deactivateEv>:

void MainScreenPresenter::deactivate()
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]

}
 8013154:	bf00      	nop
 8013156:	370c      	adds	r7, #12
 8013158:	46bd      	mov	sp, r7
 801315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315e:	4770      	bx	lr

08013160 <_ZN19MainScreenPresenter14setClimateDataEiii>:

void MainScreenPresenter::setClimateData(int temp, int co2, int hum)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	607a      	str	r2, [r7, #4]
 801316c:	603b      	str	r3, [r7, #0]
  view.updateCO2(co2);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	68da      	ldr	r2, [r3, #12]
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	68db      	ldr	r3, [r3, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	3330      	adds	r3, #48	; 0x30
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	6879      	ldr	r1, [r7, #4]
 801317e:	4610      	mov	r0, r2
 8013180:	4798      	blx	r3
  view.updateTemperature(temp);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	68da      	ldr	r2, [r3, #12]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	68db      	ldr	r3, [r3, #12]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	332c      	adds	r3, #44	; 0x2c
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	68b9      	ldr	r1, [r7, #8]
 8013192:	4610      	mov	r0, r2
 8013194:	4798      	blx	r3
  view.updateHumidity(hum);
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	68da      	ldr	r2, [r3, #12]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	68db      	ldr	r3, [r3, #12]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	3334      	adds	r3, #52	; 0x34
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	6839      	ldr	r1, [r7, #0]
 80131a6:	4610      	mov	r0, r2
 80131a8:	4798      	blx	r3
  //view.updateTxt(value);
  //if(value==254) view.printSpace();
}
 80131aa:	bf00      	nop
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <_ZThn4_N19MainScreenPresenter14setClimateDataEiii>:

    void setClimateData(int temp, int co2, int hum);
 80131b2:	f1a0 0004 	sub.w	r0, r0, #4
 80131b6:	f7ff bfd3 	b.w	8013160 <_ZN19MainScreenPresenter14setClimateDataEiii>
	...

080131bc <_ZN14MainScreenViewD1Ev>:

class MainScreenView : public MainScreenViewBase
{
public:
    MainScreenView();
    virtual ~MainScreenView() {}
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	4a05      	ldr	r2, [pc, #20]	; (80131dc <_ZN14MainScreenViewD1Ev+0x20>)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	601a      	str	r2, [r3, #0]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fe fc23 	bl	8011a18 <_ZN18MainScreenViewBaseD1Ev>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4618      	mov	r0, r3
 80131d6:	3708      	adds	r7, #8
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}
 80131dc:	0802a318 	.word	0x0802a318

080131e0 <_ZN14MainScreenViewD0Ev>:
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7ff ffe7 	bl	80131bc <_ZN14MainScreenViewD1Ev>
 80131ee:	f44f 61ea 	mov.w	r1, #1872	; 0x750
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f014 fcd1 	bl	8027b9a <_ZdlPvj>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	4618      	mov	r0, r3
 80131fc:	3708      	adds	r7, #8
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
	...

08013204 <_ZN14MainScreenViewC1Ev>:
#include <gui/mainscreen_screen/MainScreenView.hpp>

MainScreenView::MainScreenView()
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	4618      	mov	r0, r3
 8013210:	f7fe fca6 	bl	8011b60 <_ZN18MainScreenViewBaseC1Ev>
 8013214:	4a03      	ldr	r2, [pc, #12]	; (8013224 <_ZN14MainScreenViewC1Ev+0x20>)
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	601a      	str	r2, [r3, #0]
{

}
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	0802a318 	.word	0x0802a318

08013228 <_ZN14MainScreenView17updateTemperatureEi>:

void MainScreenView::updateTemperature(int newValue)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
  gaugeTemp.updateValue(newValue, 20);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8013238:	2214      	movs	r2, #20
 801323a:	6839      	ldr	r1, [r7, #0]
 801323c:	4618      	mov	r0, r3
 801323e:	f002 fb33 	bl	80158a8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
  Unicode::snprintf(TempValueBuffer, TEMPVALUE_SIZE, "     ");
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8013248:	4a11      	ldr	r2, [pc, #68]	; (8013290 <_ZN14MainScreenView17updateTemperatureEi+0x68>)
 801324a:	2105      	movs	r1, #5
 801324c:	4618      	mov	r0, r3
 801324e:	f00a fbf5 	bl	801da3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
  TempValue.invalidate();
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8013258:	4618      	mov	r0, r3
 801325a:	f008 f9f3 	bl	801b644 <_ZNK8touchgfx8Drawable10invalidateEv>
  Unicode::snprintf(TempValueBuffer, TEMPVALUE_SIZE, "%d", newValue);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f503 60e4 	add.w	r0, r3, #1824	; 0x720
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	4a0b      	ldr	r2, [pc, #44]	; (8013294 <_ZN14MainScreenView17updateTemperatureEi+0x6c>)
 8013268:	2105      	movs	r1, #5
 801326a:	f00a fbe7 	bl	801da3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
  TempValue.resizeToCurrentText();
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8013274:	4618      	mov	r0, r3
 8013276:	f005 f9bf 	bl	80185f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
  TempValue.invalidate();
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8013280:	4618      	mov	r0, r3
 8013282:	f008 f9df 	bl	801b644 <_ZNK8touchgfx8Drawable10invalidateEv>
  /*memset(textArea1Buffer, 0, TEXTAREA1_SIZE);
  screenView::printSpace();
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", newValue);
    textArea1.resizeToCurrentText();
    textArea1.invalidate();*/
}
 8013286:	bf00      	nop
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	0802993c 	.word	0x0802993c
 8013294:	08029944 	.word	0x08029944

08013298 <_ZN14MainScreenView9updateCO2Ei>:

void MainScreenView::updateCO2(int newValue)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	6039      	str	r1, [r7, #0]
  gaugeCO2.updateValue(newValue, 20);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	3398      	adds	r3, #152	; 0x98
 80132a6:	2214      	movs	r2, #20
 80132a8:	6839      	ldr	r1, [r7, #0]
 80132aa:	4618      	mov	r0, r3
 80132ac:	f002 fafc 	bl	80158a8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
  Unicode::snprintf(co2ValueBuffer, CO2VALUE_SIZE, "     ");
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f203 732a 	addw	r3, r3, #1834	; 0x72a
 80132b6:	4a11      	ldr	r2, [pc, #68]	; (80132fc <_ZN14MainScreenView9updateCO2Ei+0x64>)
 80132b8:	2105      	movs	r1, #5
 80132ba:	4618      	mov	r0, r3
 80132bc:	f00a fbbe 	bl	801da3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
  co2Value.invalidate();
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80132c6:	4618      	mov	r0, r3
 80132c8:	f008 f9bc 	bl	801b644 <_ZNK8touchgfx8Drawable10invalidateEv>
  Unicode::snprintf(co2ValueBuffer, CO2VALUE_SIZE, "%d", newValue);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f203 702a 	addw	r0, r3, #1834	; 0x72a
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	4a0a      	ldr	r2, [pc, #40]	; (8013300 <_ZN14MainScreenView9updateCO2Ei+0x68>)
 80132d6:	2105      	movs	r1, #5
 80132d8:	f00a fbb0 	bl	801da3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
  co2Value.resizeToCurrentText();
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80132e2:	4618      	mov	r0, r3
 80132e4:	f005 f988 	bl	80185f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
  co2Value.invalidate();
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80132ee:	4618      	mov	r0, r3
 80132f0:	f008 f9a8 	bl	801b644 <_ZNK8touchgfx8Drawable10invalidateEv>
  /*memset(textArea1Buffer, 0, TEXTAREA1_SIZE);
  screenView::printSpace();
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", newValue);
    textArea1.resizeToCurrentText();
    textArea1.invalidate();*/
}
 80132f4:	bf00      	nop
 80132f6:	3708      	adds	r7, #8
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	0802993c 	.word	0x0802993c
 8013300:	08029944 	.word	0x08029944

08013304 <_ZN14MainScreenView14updateHumidityEi>:

void MainScreenView::updateHumidity(int newValue)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
  gaugeHum.updateValue(newValue, 20);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8013314:	2214      	movs	r2, #20
 8013316:	6839      	ldr	r1, [r7, #0]
 8013318:	4618      	mov	r0, r3
 801331a:	f002 fac5 	bl	80158a8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
  Unicode::snprintf(humValueBuffer, HUMVALUE_SIZE, "     ");
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8013324:	4a11      	ldr	r2, [pc, #68]	; (801336c <_ZN14MainScreenView14updateHumidityEi+0x68>)
 8013326:	2105      	movs	r1, #5
 8013328:	4618      	mov	r0, r3
 801332a:	f00a fb87 	bl	801da3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
  humValue.invalidate();
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8013334:	4618      	mov	r0, r3
 8013336:	f008 f985 	bl	801b644 <_ZNK8touchgfx8Drawable10invalidateEv>
  Unicode::snprintf(humValueBuffer, HUMVALUE_SIZE, "%d", newValue);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f203 7034 	addw	r0, r3, #1844	; 0x734
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	4a0b      	ldr	r2, [pc, #44]	; (8013370 <_ZN14MainScreenView14updateHumidityEi+0x6c>)
 8013344:	2105      	movs	r1, #5
 8013346:	f00a fb79 	bl	801da3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
  humValue.resizeToCurrentText();
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8013350:	4618      	mov	r0, r3
 8013352:	f005 f951 	bl	80185f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
  humValue.invalidate();
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 801335c:	4618      	mov	r0, r3
 801335e:	f008 f971 	bl	801b644 <_ZNK8touchgfx8Drawable10invalidateEv>
  /*memset(textArea1Buffer, 0, TEXTAREA1_SIZE);
  screenView::printSpace();
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", newValue);
    textArea1.resizeToCurrentText();
    textArea1.invalidate();*/
}
 8013362:	bf00      	nop
 8013364:	3708      	adds	r7, #8
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop
 801336c:	0802993c 	.word	0x0802993c
 8013370:	08029944 	.word	0x08029944

08013374 <_ZN14MainScreenView10printSpaceEv>:

void MainScreenView::printSpace()
{
 8013374:	b480      	push	{r7}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
  /*
  Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "     ");
  //textArea1.setWidth(3);
  textArea1.invalidate();*/
}
 801337c:	bf00      	nop
 801337e:	370c      	adds	r7, #12
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr

08013388 <_ZN14MainScreenView11setupScreenEv>:

void MainScreenView::setupScreen()
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
    MainScreenViewBase::setupScreen();
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	4618      	mov	r0, r3
 8013394:	f7fe ffb4 	bl	8012300 <_ZN18MainScreenViewBase11setupScreenEv>
}
 8013398:	bf00      	nop
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <_ZN14MainScreenView14tearDownScreenEv>:

void MainScreenView::tearDownScreen()
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
    MainScreenViewBase::tearDownScreen();
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7fe f91a 	bl	80115e4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80133b0:	bf00      	nop
 80133b2:	3708      	adds	r7, #8
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <_ZN19MenuScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MenuScreenPresenter() {};
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	4a09      	ldr	r2, [pc, #36]	; (80133e8 <_ZN19MenuScreenPresenterD1Ev+0x30>)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	601a      	str	r2, [r3, #0]
 80133c6:	4a09      	ldr	r2, [pc, #36]	; (80133ec <_ZN19MenuScreenPresenterD1Ev+0x34>)
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	605a      	str	r2, [r3, #4]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	3304      	adds	r3, #4
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7ff fe2f 	bl	8013034 <_ZN13ModelListenerD1Ev>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	4618      	mov	r0, r3
 80133da:	f7ff fde7 	bl	8012fac <_ZN8touchgfx9PresenterD1Ev>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	4618      	mov	r0, r3
 80133e2:	3708      	adds	r7, #8
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	0802a35c 	.word	0x0802a35c
 80133ec:	0802a374 	.word	0x0802a374

080133f0 <_ZThn4_N19MenuScreenPresenterD1Ev>:
 80133f0:	f1a0 0004 	sub.w	r0, r0, #4
 80133f4:	e7e0      	b.n	80133b8 <_ZN19MenuScreenPresenterD1Ev>
 80133f6:	bf00      	nop

080133f8 <_ZN19MenuScreenPresenterD0Ev>:
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7ff ffd9 	bl	80133b8 <_ZN19MenuScreenPresenterD1Ev>
 8013406:	2110      	movs	r1, #16
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f014 fbc6 	bl	8027b9a <_ZdlPvj>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4618      	mov	r0, r3
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}

08013418 <_ZThn4_N19MenuScreenPresenterD0Ev>:
 8013418:	f1a0 0004 	sub.w	r0, r0, #4
 801341c:	e7ec      	b.n	80133f8 <_ZN19MenuScreenPresenterD0Ev>
	...

08013420 <_ZN19MenuScreenPresenterC1ER14MenuScreenView>:
#include <gui/menuscreen_screen/MenuScreenView.hpp>
#include <gui/menuscreen_screen/MenuScreenPresenter.hpp>

MenuScreenPresenter::MenuScreenPresenter(MenuScreenView& v)
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	6039      	str	r1, [r7, #0]
    : view(v)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	4618      	mov	r0, r3
 801342e:	f7ff fddd 	bl	8012fec <_ZN8touchgfx9PresenterC1Ev>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	3304      	adds	r3, #4
 8013436:	4618      	mov	r0, r3
 8013438:	f7ff fde8 	bl	801300c <_ZN13ModelListenerC1Ev>
 801343c:	4a06      	ldr	r2, [pc, #24]	; (8013458 <_ZN19MenuScreenPresenterC1ER14MenuScreenView+0x38>)
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	601a      	str	r2, [r3, #0]
 8013442:	4a06      	ldr	r2, [pc, #24]	; (801345c <_ZN19MenuScreenPresenterC1ER14MenuScreenView+0x3c>)
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	605a      	str	r2, [r3, #4]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	683a      	ldr	r2, [r7, #0]
 801344c:	60da      	str	r2, [r3, #12]
{

}
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	4618      	mov	r0, r3
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	0802a35c 	.word	0x0802a35c
 801345c:	0802a374 	.word	0x0802a374

08013460 <_ZN19MenuScreenPresenter8activateEv>:

void MenuScreenPresenter::activate()
{
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]

}
 8013468:	bf00      	nop
 801346a:	370c      	adds	r7, #12
 801346c:	46bd      	mov	sp, r7
 801346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013472:	4770      	bx	lr

08013474 <_ZN19MenuScreenPresenter10deactivateEv>:

void MenuScreenPresenter::deactivate()
{
 8013474:	b480      	push	{r7}
 8013476:	b083      	sub	sp, #12
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]

}
 801347c:	bf00      	nop
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <_ZN14MenuScreenViewD1Ev>:

class MenuScreenView : public MenuScreenViewBase
{
public:
    MenuScreenView();
    virtual ~MenuScreenView() {}
 8013488:	b580      	push	{r7, lr}
 801348a:	b082      	sub	sp, #8
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	4a05      	ldr	r2, [pc, #20]	; (80134a8 <_ZN14MenuScreenViewD1Ev+0x20>)
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	601a      	str	r2, [r3, #0]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4618      	mov	r0, r3
 801349a:	f7ff f98b 	bl	80127b4 <_ZN18MenuScreenViewBaseD1Ev>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4618      	mov	r0, r3
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	0802a388 	.word	0x0802a388

080134ac <_ZN14MenuScreenViewD0Ev>:
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b082      	sub	sp, #8
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7ff ffe7 	bl	8013488 <_ZN14MenuScreenViewD1Ev>
 80134ba:	21dc      	movs	r1, #220	; 0xdc
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f014 fb6c 	bl	8027b9a <_ZdlPvj>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	4618      	mov	r0, r3
 80134c6:	3708      	adds	r7, #8
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <_ZN14MenuScreenViewC1Ev>:
#include <gui/menuscreen_screen/MenuScreenView.hpp>

MenuScreenView::MenuScreenView()
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b082      	sub	sp, #8
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7ff f9ae 	bl	8012838 <_ZN18MenuScreenViewBaseC1Ev>
 80134dc:	4a03      	ldr	r2, [pc, #12]	; (80134ec <_ZN14MenuScreenViewC1Ev+0x20>)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	601a      	str	r2, [r3, #0]
{

}
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	4618      	mov	r0, r3
 80134e6:	3708      	adds	r7, #8
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}
 80134ec:	0802a388 	.word	0x0802a388

080134f0 <_ZN14MenuScreenView11setupScreenEv>:

void MenuScreenView::setupScreen()
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
    MenuScreenViewBase::setupScreen();
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7ff fa42 	bl	8012984 <_ZN18MenuScreenViewBase11setupScreenEv>
}
 8013500:	bf00      	nop
 8013502:	3708      	adds	r7, #8
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}

08013508 <_ZN14MenuScreenView14tearDownScreenEv>:

void MenuScreenView::tearDownScreen()
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
    MenuScreenViewBase::tearDownScreen();
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	4618      	mov	r0, r3
 8013514:	f7fe f866 	bl	80115e4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013518:	bf00      	nop
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <_ZN5ModelC1Ev>:
#include "cmsis_os.h"

extern osMessageQueueId_t climateQueueHandle;
unsigned int counter = 0;

Model::Model() : modelListener(0)
 8013520:	b480      	push	{r7}
 8013522:	b083      	sub	sp, #12
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2200      	movs	r2, #0
 801352c:	601a      	str	r2, [r3, #0]
{

}
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	4618      	mov	r0, r3
 8013532:	370c      	adds	r7, #12
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr

0801353c <_ZN5Model4tickEv>:

void Model::tick()
{
 801353c:	b590      	push	{r4, r7, lr}
 801353e:	b087      	sub	sp, #28
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  climateData climate;
  if(osMessageQueueGet(climateQueueHandle, &climate, NULL, 0U) == osOK)
 8013544:	4b0f      	ldr	r3, [pc, #60]	; (8013584 <_ZN5Model4tickEv+0x48>)
 8013546:	6818      	ldr	r0, [r3, #0]
 8013548:	f107 0108 	add.w	r1, r7, #8
 801354c:	2300      	movs	r3, #0
 801354e:	2200      	movs	r2, #0
 8013550:	f7f9 fae4 	bl	800cb1c <osMessageQueueGet>
 8013554:	4603      	mov	r3, r0
 8013556:	2b00      	cmp	r3, #0
 8013558:	bf0c      	ite	eq
 801355a:	2301      	moveq	r3, #1
 801355c:	2300      	movne	r3, #0
 801355e:	b2db      	uxtb	r3, r3
 8013560:	2b00      	cmp	r3, #0
 8013562:	d00a      	beq.n	801357a <_ZN5Model4tickEv+0x3e>
  {
    modelListener->setClimateData(climate.temperature, climate.co2, climate.humidity);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6818      	ldr	r0, [r3, #0]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	3308      	adds	r3, #8
 8013570:	681c      	ldr	r4, [r3, #0]
 8013572:	68b9      	ldr	r1, [r7, #8]
 8013574:	693a      	ldr	r2, [r7, #16]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	47a0      	blx	r4
  }
	//modelListener->setClimateData(counter);
	//counter++;
	//if(counter==255) counter = 0;
}
 801357a:	bf00      	nop
 801357c:	371c      	adds	r7, #28
 801357e:	46bd      	mov	sp, r7
 8013580:	bd90      	pop	{r4, r7, pc}
 8013582:	bf00      	nop
 8013584:	200066a4 	.word	0x200066a4

08013588 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013588:	b480      	push	{r7}
 801358a:	b083      	sub	sp, #12
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
    {
 8013590:	4a04      	ldr	r2, [pc, #16]	; (80135a4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	601a      	str	r2, [r3, #0]
    }
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	4618      	mov	r0, r3
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr
 80135a4:	0802a3d4 	.word	0x0802a3d4

080135a8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b082      	sub	sp, #8
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
    }
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7ff ffe9 	bl	8013588 <_ZN8touchgfx15TouchControllerD1Ev>
 80135b6:	2104      	movs	r1, #4
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f014 faee 	bl	8027b9a <_ZdlPvj>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	4618      	mov	r0, r3
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "gt911.h""

void STM32TouchController::init()
{
 80135c8:	b480      	push	{r7}
 80135ca:	b083      	sub	sp, #12
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80135d0:	bf00      	nop
 80135d2:	370c      	adds	r7, #12
 80135d4:	46bd      	mov	sp, r7
 80135d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135da:	4770      	bx	lr

080135dc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	uint16_t X, Y;
	bool touchDetected = gt911_TS_DetectTouch(GT911_ADDR, &X, &Y);
 80135e8:	f107 0212 	add.w	r2, r7, #18
 80135ec:	f107 0314 	add.w	r3, r7, #20
 80135f0:	4619      	mov	r1, r3
 80135f2:	20ba      	movs	r0, #186	; 0xba
 80135f4:	f001 ffcc 	bl	8015590 <gt911_TS_DetectTouch>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	bf14      	ite	ne
 80135fe:	2301      	movne	r3, #1
 8013600:	2300      	moveq	r3, #0
 8013602:	75fb      	strb	r3, [r7, #23]
	x = (int32_t)X;
 8013604:	8abb      	ldrh	r3, [r7, #20]
 8013606:	461a      	mov	r2, r3
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	601a      	str	r2, [r3, #0]
	y = (int32_t)Y;
 801360c:	8a7b      	ldrh	r3, [r7, #18]
 801360e:	461a      	mov	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	601a      	str	r2, [r3, #0]
    return touchDetected;
 8013614:	7dfb      	ldrb	r3, [r7, #23]
}
 8013616:	4618      	mov	r0, r3
 8013618:	3718      	adds	r7, #24
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
	...

08013620 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	4a05      	ldr	r2, [pc, #20]	; (8013640 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	f7ff ffa9 	bl	8013588 <_ZN8touchgfx15TouchControllerD1Ev>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4618      	mov	r0, r3
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	0802a3bc 	.word	0x0802a3bc

08013644 <_ZN20STM32TouchControllerD0Ev>:
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7ff ffe7 	bl	8013620 <_ZN20STM32TouchControllerD1Ev>
 8013652:	2104      	movs	r1, #4
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f014 faa0 	bl	8027b9a <_ZdlPvj>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4618      	mov	r0, r3
 801365e:	3708      	adds	r7, #8
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}

08013664 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
 801366a:	4603      	mov	r3, r0
 801366c:	71fb      	strb	r3, [r7, #7]

}
 801366e:	bf00      	nop
 8013670:	370c      	adds	r7, #12
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr

0801367a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801367a:	b480      	push	{r7}
 801367c:	b083      	sub	sp, #12
 801367e:	af00      	add	r7, sp, #0
 8013680:	4603      	mov	r3, r0
 8013682:	71fb      	strb	r3, [r7, #7]

}
 8013684:	bf00      	nop
 8013686:	370c      	adds	r7, #12
 8013688:	46bd      	mov	sp, r7
 801368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368e:	4770      	bx	lr

08013690 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013690:	b480      	push	{r7}
 8013692:	b083      	sub	sp, #12
 8013694:	af00      	add	r7, sp, #0
 8013696:	4603      	mov	r3, r0
 8013698:	71fb      	strb	r3, [r7, #7]

}
 801369a:	bf00      	nop
 801369c:	370c      	adds	r7, #12
 801369e:	46bd      	mov	sp, r7
 80136a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a4:	4770      	bx	lr
	...

080136a8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80136a8:	b480      	push	{r7}
 80136aa:	b083      	sub	sp, #12
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
    {
 80136b0:	4a04      	ldr	r2, [pc, #16]	; (80136c4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	601a      	str	r2, [r3, #0]
    }
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	4618      	mov	r0, r3
 80136ba:	370c      	adds	r7, #12
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr
 80136c4:	0802adb0 	.word	0x0802adb0

080136c8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
    }
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f7ff ffe9 	bl	80136a8 <_ZN8touchgfx3HALD1Ev>
 80136d6:	217c      	movs	r1, #124	; 0x7c
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f014 fa5e 	bl	8027b9a <_ZdlPvj>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4618      	mov	r0, r3
 80136e2:	3708      	adds	r7, #8
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80136e8:	b480      	push	{r7}
 80136ea:	b083      	sub	sp, #12
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	460b      	mov	r3, r1
 80136f2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	78fa      	ldrb	r2, [r7, #3]
 80136f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2201      	movs	r2, #1
 8013700:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013704:	bf00      	nop
 8013706:	370c      	adds	r7, #12
 8013708:	46bd      	mov	sp, r7
 801370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370e:	4770      	bx	lr

08013710 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801371e:	2b00      	cmp	r3, #0
 8013720:	d009      	beq.n	8013736 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	685a      	ldr	r2, [r3, #4]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	4610      	mov	r0, r2
 8013730:	4798      	blx	r3
 8013732:	4603      	mov	r3, r0
 8013734:	e000      	b.n	8013738 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8013736:	2300      	movs	r3, #0
        }
    }
 8013738:	4618      	mov	r0, r3
 801373a:	3708      	adds	r7, #8
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8013740:	b580      	push	{r7, lr}
 8013742:	b082      	sub	sp, #8
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f003 f971 	bl	8016a30 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	3390      	adds	r3, #144	; 0x90
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	4798      	blx	r3
    }
 801375a:	bf00      	nop
 801375c:	3708      	adds	r7, #8
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8013762:	b480      	push	{r7}
 8013764:	b083      	sub	sp, #12
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
 801376a:	6039      	str	r1, [r7, #0]
    {
        return false;
 801376c:	2300      	movs	r3, #0
    }
 801376e:	4618      	mov	r0, r3
 8013770:	370c      	adds	r7, #12
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr
	...

0801377c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	60b9      	str	r1, [r7, #8]
 8013786:	607a      	str	r2, [r7, #4]
 8013788:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d106      	bne.n	801379e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013790:	4b11      	ldr	r3, [pc, #68]	; (80137d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013792:	4a12      	ldr	r2, [pc, #72]	; (80137dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013794:	f240 216b 	movw	r1, #619	; 0x26b
 8013798:	4811      	ldr	r0, [pc, #68]	; (80137e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801379a:	f014 fbd1 	bl	8027f40 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	68ba      	ldr	r2, [r7, #8]
 80137a2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	687a      	ldr	r2, [r7, #4]
 80137a8:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	683a      	ldr	r2, [r7, #0]
 80137ae:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	bf14      	ite	ne
 80137b6:	2301      	movne	r3, #1
 80137b8:	2300      	moveq	r3, #0
 80137ba:	b2da      	uxtb	r2, r3
 80137bc:	4b09      	ldr	r3, [pc, #36]	; (80137e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80137be:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	bf14      	ite	ne
 80137c6:	2301      	movne	r3, #1
 80137c8:	2300      	moveq	r3, #0
 80137ca:	b2da      	uxtb	r2, r3
 80137cc:	4b06      	ldr	r3, [pc, #24]	; (80137e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80137ce:	701a      	strb	r2, [r3, #0]
    }
 80137d0:	bf00      	nop
 80137d2:	3710      	adds	r7, #16
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	08029948 	.word	0x08029948
 80137dc:	08029980 	.word	0x08029980
 80137e0:	080299d0 	.word	0x080299d0
 80137e4:	200060f4 	.word	0x200060f4
 80137e8:	200060f5 	.word	0x200060f5

080137ec <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80137f4:	2300      	movs	r3, #0
    }
 80137f6:	4618      	mov	r0, r3
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr

08013802 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8013802:	b580      	push	{r7, lr}
 8013804:	b082      	sub	sp, #8
 8013806:	af00      	add	r7, sp, #0
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	460b      	mov	r3, r1
 801380c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013812:	2b00      	cmp	r3, #0
 8013814:	d004      	beq.n	8013820 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801381a:	887a      	ldrh	r2, [r7, #2]
 801381c:	4610      	mov	r0, r2
 801381e:	4798      	blx	r3
        }
    }
 8013820:	bf00      	nop
 8013822:	3708      	adds	r7, #8
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}

08013828 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	685a      	ldr	r2, [r3, #4]
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	3318      	adds	r3, #24
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	4610      	mov	r0, r2
 8013840:	4798      	blx	r3
 8013842:	4603      	mov	r3, r0
    }
 8013844:	4618      	mov	r0, r3
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801384c:	b480      	push	{r7}
 801384e:	b083      	sub	sp, #12
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013860:	429a      	cmp	r2, r3
 8013862:	d017      	beq.n	8013894 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013864:	4b1a      	ldr	r3, [pc, #104]	; (80138d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d12a      	bne.n	80138c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801386c:	4b19      	ldr	r3, [pc, #100]	; (80138d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801386e:	881a      	ldrh	r2, [r3, #0]
 8013870:	4b19      	ldr	r3, [pc, #100]	; (80138d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013872:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013874:	4b19      	ldr	r3, [pc, #100]	; (80138dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013876:	881a      	ldrh	r2, [r3, #0]
 8013878:	4b19      	ldr	r3, [pc, #100]	; (80138e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801387a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801387c:	4b16      	ldr	r3, [pc, #88]	; (80138d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801387e:	881a      	ldrh	r2, [r3, #0]
 8013880:	4b16      	ldr	r3, [pc, #88]	; (80138dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013882:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013884:	4b16      	ldr	r3, [pc, #88]	; (80138e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013886:	881a      	ldrh	r2, [r3, #0]
 8013888:	4b12      	ldr	r3, [pc, #72]	; (80138d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801388a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801388c:	4b10      	ldr	r3, [pc, #64]	; (80138d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801388e:	2201      	movs	r2, #1
 8013890:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013892:	e016      	b.n	80138c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013894:	4b0e      	ldr	r3, [pc, #56]	; (80138d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d012      	beq.n	80138c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801389c:	4b0f      	ldr	r3, [pc, #60]	; (80138dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801389e:	881a      	ldrh	r2, [r3, #0]
 80138a0:	4b0d      	ldr	r3, [pc, #52]	; (80138d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80138a2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80138a4:	4b0b      	ldr	r3, [pc, #44]	; (80138d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80138a6:	881a      	ldrh	r2, [r3, #0]
 80138a8:	4b0d      	ldr	r3, [pc, #52]	; (80138e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80138aa:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80138ac:	4b0c      	ldr	r3, [pc, #48]	; (80138e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80138ae:	881a      	ldrh	r2, [r3, #0]
 80138b0:	4b0a      	ldr	r3, [pc, #40]	; (80138dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80138b2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80138b4:	4b08      	ldr	r3, [pc, #32]	; (80138d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80138b6:	881a      	ldrh	r2, [r3, #0]
 80138b8:	4b06      	ldr	r3, [pc, #24]	; (80138d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80138ba:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80138bc:	4b04      	ldr	r3, [pc, #16]	; (80138d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80138be:	2200      	movs	r2, #0
 80138c0:	701a      	strb	r2, [r3, #0]
    }
 80138c2:	bf00      	nop
 80138c4:	370c      	adds	r7, #12
 80138c6:	46bd      	mov	sp, r7
 80138c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138cc:	4770      	bx	lr
 80138ce:	bf00      	nop
 80138d0:	200060ee 	.word	0x200060ee
 80138d4:	200060ea 	.word	0x200060ea
 80138d8:	200060f0 	.word	0x200060f0
 80138dc:	200060ec 	.word	0x200060ec
 80138e0:	200060f2 	.word	0x200060f2

080138e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	4618      	mov	r0, r3
 80138f0:	f002 fb25 	bl	8015f3e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80138f4:	bf00      	nop
 80138f6:	3708      	adds	r7, #8
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	4a05      	ldr	r2, [pc, #20]	; (801391c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	601a      	str	r2, [r3, #0]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	4618      	mov	r0, r3
 801390e:	f7ff fecb 	bl	80136a8 <_ZN8touchgfx3HALD1Ev>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	4618      	mov	r0, r3
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	0802a5f0 	.word	0x0802a5f0

08013920 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013920:	b580      	push	{r7, lr}
 8013922:	b082      	sub	sp, #8
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7ff ffe7 	bl	80138fc <_ZN20TouchGFXGeneratedHALD1Ev>
 801392e:	217c      	movs	r1, #124	; 0x7c
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f014 f932 	bl	8027b9a <_ZdlPvj>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4618      	mov	r0, r3
 801393a:	3708      	adds	r7, #8
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	4618      	mov	r0, r3
 801394c:	f7ff ffca 	bl	80138e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013950:	bf00      	nop
 8013952:	3708      	adds	r7, #8
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}

08013958 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	4618      	mov	r0, r3
 8013964:	f001 fade 	bl	8014f24 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013968:	bf00      	nop
 801396a:	3708      	adds	r7, #8
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}

08013970 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	4618      	mov	r0, r3
 801397c:	f001 fb5e 	bl	801503c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013980:	4603      	mov	r3, r0
}
 8013982:	4618      	mov	r0, r3
 8013984:	3708      	adds	r7, #8
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}

0801398a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801398a:	b580      	push	{r7, lr}
 801398c:	b082      	sub	sp, #8
 801398e:	af00      	add	r7, sp, #0
 8013990:	6078      	str	r0, [r7, #4]
 8013992:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6839      	ldr	r1, [r7, #0]
 8013998:	4618      	mov	r0, r3
 801399a:	f001 fb5d 	bl	8015058 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801399e:	bf00      	nop
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b082      	sub	sp, #8
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
 80139ae:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6839      	ldr	r1, [r7, #0]
 80139b4:	4618      	mov	r0, r3
 80139b6:	f001 fb65 	bl	8015084 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80139ba:	bf00      	nop
 80139bc:	3708      	adds	r7, #8
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}

080139c2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80139c2:	b580      	push	{r7, lr}
 80139c4:	b084      	sub	sp, #16
 80139c6:	af00      	add	r7, sp, #0
 80139c8:	60f8      	str	r0, [r7, #12]
 80139ca:	60b9      	str	r1, [r7, #8]
 80139cc:	607a      	str	r2, [r7, #4]
 80139ce:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80139d0:	68f8      	ldr	r0, [r7, #12]
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	687a      	ldr	r2, [r7, #4]
 80139d6:	68b9      	ldr	r1, [r7, #8]
 80139d8:	f001 fba2 	bl	8015120 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80139dc:	4603      	mov	r3, r0
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3710      	adds	r7, #16
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}

080139e6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80139e6:	b580      	push	{r7, lr}
 80139e8:	b082      	sub	sp, #8
 80139ea:	af00      	add	r7, sp, #0
 80139ec:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	4618      	mov	r0, r3
 80139f2:	f001 fac9 	bl	8014f88 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80139f6:	bf00      	nop
 80139f8:	3708      	adds	r7, #8
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b082      	sub	sp, #8
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f001 facd 	bl	8014fa8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013a0e:	bf00      	nop
 8013a10:	3708      	adds	r7, #8
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}

08013a16 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8013a16:	b580      	push	{r7, lr}
 8013a18:	b082      	sub	sp, #8
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f001 facf 	bl	8014fc4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8013a26:	bf00      	nop
 8013a28:	3708      	adds	r7, #8
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}

08013a2e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013a2e:	b580      	push	{r7, lr}
 8013a30:	b082      	sub	sp, #8
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f001 fad1 	bl	8014fe0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013a3e:	bf00      	nop
 8013a40:	3708      	adds	r7, #8
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
	...

08013a48 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	4a05      	ldr	r2, [pc, #20]	; (8013a68 <_ZN11TouchGFXHALD1Ev+0x20>)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	601a      	str	r2, [r3, #0]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7ff ff4f 	bl	80138fc <_ZN20TouchGFXGeneratedHALD1Ev>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	4618      	mov	r0, r3
 8013a62:	3708      	adds	r7, #8
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	0802a3ec 	.word	0x0802a3ec

08013a6c <_ZN11TouchGFXHALD0Ev>:
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f7ff ffe7 	bl	8013a48 <_ZN11TouchGFXHALD1Ev>
 8013a7a:	217c      	movs	r1, #124	; 0x7c
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f014 f88c 	bl	8027b9a <_ZdlPvj>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4618      	mov	r0, r3
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8013a90:	2200      	movs	r2, #0
 8013a92:	2101      	movs	r1, #1
 8013a94:	2001      	movs	r0, #1
 8013a96:	f7f8 fe4d 	bl	800c734 <osSemaphoreNew>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	4a0f      	ldr	r2, [pc, #60]	; (8013adc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013a9e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8013aa0:	4b0e      	ldr	r3, [pc, #56]	; (8013adc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d105      	bne.n	8013ab4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8013aa8:	4b0d      	ldr	r3, [pc, #52]	; (8013ae0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8013aaa:	4a0e      	ldr	r2, [pc, #56]	; (8013ae4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013aac:	2125      	movs	r1, #37	; 0x25
 8013aae:	480e      	ldr	r0, [pc, #56]	; (8013ae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013ab0:	f014 fa46 	bl	8027f40 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	2104      	movs	r1, #4
 8013ab8:	2001      	movs	r0, #1
 8013aba:	f7f8 ff5b 	bl	800c974 <osMessageQueueNew>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	4a0a      	ldr	r2, [pc, #40]	; (8013aec <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013ac2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8013ac4:	4b09      	ldr	r3, [pc, #36]	; (8013aec <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d105      	bne.n	8013ad8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8013acc:	4b08      	ldr	r3, [pc, #32]	; (8013af0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8013ace:	4a05      	ldr	r2, [pc, #20]	; (8013ae4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013ad0:	2129      	movs	r1, #41	; 0x29
 8013ad2:	4805      	ldr	r0, [pc, #20]	; (8013ae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013ad4:	f014 fa34 	bl	8027f40 <__assert_func>
}
 8013ad8:	bf00      	nop
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	20004ae4 	.word	0x20004ae4
 8013ae0:	08029a14 	.word	0x08029a14
 8013ae4:	08029a60 	.word	0x08029a60
 8013ae8:	08029a90 	.word	0x08029a90
 8013aec:	20004ae8 	.word	0x20004ae8
 8013af0:	08029abc 	.word	0x08029abc

08013af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8013af8:	4b04      	ldr	r3, [pc, #16]	; (8013b0c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	f04f 31ff 	mov.w	r1, #4294967295
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7f8 fea1 	bl	800c848 <osSemaphoreAcquire>
}
 8013b06:	bf00      	nop
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20004ae4 	.word	0x20004ae4

08013b10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8013b14:	4b03      	ldr	r3, [pc, #12]	; (8013b24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7f8 fee7 	bl	800c8ec <osSemaphoreRelease>
}
 8013b1e:	bf00      	nop
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	bf00      	nop
 8013b24:	20004ae4 	.word	0x20004ae4

08013b28 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8013b2c:	4b03      	ldr	r3, [pc, #12]	; (8013b3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2100      	movs	r1, #0
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7f8 fe88 	bl	800c848 <osSemaphoreAcquire>
}
 8013b38:	bf00      	nop
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	20004ae4 	.word	0x20004ae4

08013b40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8013b44:	4b03      	ldr	r3, [pc, #12]	; (8013b54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7f8 fecf 	bl	800c8ec <osSemaphoreRelease>
}
 8013b4e:	bf00      	nop
 8013b50:	bd80      	pop	{r7, pc}
 8013b52:	bf00      	nop
 8013b54:	20004ae4 	.word	0x20004ae4

08013b58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8013b5c:	4b04      	ldr	r3, [pc, #16]	; (8013b70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8013b5e:	6818      	ldr	r0, [r3, #0]
 8013b60:	2300      	movs	r3, #0
 8013b62:	2200      	movs	r2, #0
 8013b64:	4903      	ldr	r1, [pc, #12]	; (8013b74 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8013b66:	f7f8 ff79 	bl	800ca5c <osMessageQueuePut>
}
 8013b6a:	bf00      	nop
 8013b6c:	bd80      	pop	{r7, pc}
 8013b6e:	bf00      	nop
 8013b70:	20004ae8 	.word	0x20004ae8
 8013b74:	20000018 	.word	0x20000018

08013b78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b082      	sub	sp, #8
 8013b7c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8013b7e:	4b09      	ldr	r3, [pc, #36]	; (8013ba4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013b80:	6818      	ldr	r0, [r3, #0]
 8013b82:	1d39      	adds	r1, r7, #4
 8013b84:	2300      	movs	r3, #0
 8013b86:	2200      	movs	r2, #0
 8013b88:	f7f8 ffc8 	bl	800cb1c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8013b8c:	4b05      	ldr	r3, [pc, #20]	; (8013ba4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013b8e:	6818      	ldr	r0, [r3, #0]
 8013b90:	1d39      	adds	r1, r7, #4
 8013b92:	f04f 33ff 	mov.w	r3, #4294967295
 8013b96:	2200      	movs	r2, #0
 8013b98:	f7f8 ffc0 	bl	800cb1c <osMessageQueueGet>
}
 8013b9c:	bf00      	nop
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	20004ae8 	.word	0x20004ae8

08013ba8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	4603      	mov	r3, r0
 8013bb0:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8013bb2:	88fb      	ldrh	r3, [r7, #6]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7f8 fda2 	bl	800c6fe <osDelay>
}
 8013bba:	bf00      	nop
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
	...

08013bc4 <__NVIC_EnableIRQ>:
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	4603      	mov	r3, r0
 8013bcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	db0b      	blt.n	8013bee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013bd6:	88fb      	ldrh	r3, [r7, #6]
 8013bd8:	f003 021f 	and.w	r2, r3, #31
 8013bdc:	4907      	ldr	r1, [pc, #28]	; (8013bfc <__NVIC_EnableIRQ+0x38>)
 8013bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013be2:	095b      	lsrs	r3, r3, #5
 8013be4:	2001      	movs	r0, #1
 8013be6:	fa00 f202 	lsl.w	r2, r0, r2
 8013bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013bee:	bf00      	nop
 8013bf0:	370c      	adds	r7, #12
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr
 8013bfa:	bf00      	nop
 8013bfc:	e000e100 	.word	0xe000e100

08013c00 <__NVIC_DisableIRQ>:
{
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	db12      	blt.n	8013c38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013c12:	88fb      	ldrh	r3, [r7, #6]
 8013c14:	f003 021f 	and.w	r2, r3, #31
 8013c18:	490a      	ldr	r1, [pc, #40]	; (8013c44 <__NVIC_DisableIRQ+0x44>)
 8013c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013c1e:	095b      	lsrs	r3, r3, #5
 8013c20:	2001      	movs	r0, #1
 8013c22:	fa00 f202 	lsl.w	r2, r0, r2
 8013c26:	3320      	adds	r3, #32
 8013c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013c2c:	f3bf 8f4f 	dsb	sy
}
 8013c30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013c32:	f3bf 8f6f 	isb	sy
}
 8013c36:	bf00      	nop
}
 8013c38:	bf00      	nop
 8013c3a:	370c      	adds	r7, #12
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr
 8013c44:	e000e100 	.word	0xe000e100

08013c48 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
        : color(0)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2200      	movs	r2, #0
 8013c54:	601a      	str	r2, [r3, #0]
    }
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	370c      	adds	r7, #12
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr

08013c64 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8013c64:	b480      	push	{r7}
 8013c66:	b083      	sub	sp, #12
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
        return color;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
    }
 8013c70:	4618      	mov	r0, r3
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
    {
 8013c84:	4a04      	ldr	r2, [pc, #16]	; (8013c98 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	601a      	str	r2, [r3, #0]
    }
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	370c      	adds	r7, #12
 8013c90:	46bd      	mov	sp, r7
 8013c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c96:	4770      	bx	lr
 8013c98:	0802a4f8 	.word	0x0802a4f8

08013c9c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
    }
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f7ff ffe9 	bl	8013c7c <_ZN8touchgfx9DMA_QueueD1Ev>
 8013caa:	2104      	movs	r1, #4
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f013 ff74 	bl	8027b9a <_ZdlPvj>
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}

08013cbc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	3344      	adds	r3, #68	; 0x44
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	4798      	blx	r3
    }
 8013cd0:	bf00      	nop
 8013cd2:	3708      	adds	r7, #8
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}

08013cd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8013cd8:	b480      	push	{r7}
 8013cda:	b083      	sub	sp, #12
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
    {
 8013ce0:	4a04      	ldr	r2, [pc, #16]	; (8013cf4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	601a      	str	r2, [r3, #0]
    }
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	370c      	adds	r7, #12
 8013cec:	46bd      	mov	sp, r7
 8013cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf2:	4770      	bx	lr
 8013cf4:	0802b1fc 	.word	0x0802b1fc

08013cf8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
    }
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f7ff ffe9 	bl	8013cd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013d06:	210c      	movs	r1, #12
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f013 ff46 	bl	8027b9a <_ZdlPvj>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	4618      	mov	r0, r3
 8013d12:	3708      	adds	r7, #8
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013d18:	b480      	push	{r7}
 8013d1a:	b083      	sub	sp, #12
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013d22:	4a09      	ldr	r2, [pc, #36]	; (8013d48 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	601a      	str	r2, [r3, #0]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	683a      	ldr	r2, [r7, #0]
 8013d2c:	605a      	str	r2, [r3, #4]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	721a      	strb	r2, [r3, #8]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2200      	movs	r2, #0
 8013d38:	725a      	strb	r2, [r3, #9]
    {
    }
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	370c      	adds	r7, #12
 8013d40:	46bd      	mov	sp, r7
 8013d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d46:	4770      	bx	lr
 8013d48:	0802b1fc 	.word	0x0802b1fc

08013d4c <_ZN10STM32H7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8013d54:	2301      	movs	r3, #1
    }
 8013d56:	4618      	mov	r0, r3
 8013d58:	370c      	adds	r7, #12
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr

08013d62 <_ZN10STM32H7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013d62:	b580      	push	{r7, lr}
 8013d64:	b082      	sub	sp, #8
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	3328      	adds	r3, #40	; 0x28
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	4610      	mov	r0, r2
 8013d76:	4798      	blx	r3
    }
 8013d78:	bf00      	nop
 8013d7a:	3708      	adds	r7, #8
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	685a      	ldr	r2, [r3, #4]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	685b      	ldr	r3, [r3, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	3314      	adds	r3, #20
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	4610      	mov	r0, r2
 8013d98:	4798      	blx	r3
    }
 8013d9a:	bf00      	nop
 8013d9c:	3708      	adds	r7, #8
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	bd80      	pop	{r7, pc}

08013da2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013da2:	b580      	push	{r7, lr}
 8013da4:	b082      	sub	sp, #8
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 8013daa:	f7fc fbb1 	bl	8010510 <_ZN8touchgfx3HAL11getInstanceEv>
 8013dae:	4603      	mov	r3, r0
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7ff ffe5 	bl	8013d80 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013db6:	bf00      	nop
 8013db8:	3708      	adds	r7, #8
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}

08013dbe <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b082      	sub	sp, #8
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	3318      	adds	r3, #24
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7ff ff3c 	bl	8013c48 <_ZN8touchgfx9colortypeC1Ev>
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3708      	adds	r7, #8
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
	...

08013ddc <_ZN10STM32H7DMAC1Ev>:
}

STM32H7DMA::STM32H7DMA()
 8013ddc:	b5b0      	push	{r4, r5, r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	330c      	adds	r3, #12
 8013dea:	4619      	mov	r1, r3
 8013dec:	4610      	mov	r0, r2
 8013dee:	f7ff ff93 	bl	8013d18 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8013df2:	4a0e      	ldr	r2, [pc, #56]	; (8013e2c <_ZN10STM32H7DMAC1Ev+0x50>)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	601a      	str	r2, [r3, #0]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	f103 000c 	add.w	r0, r3, #12
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	3320      	adds	r3, #32
 8013e02:	2260      	movs	r2, #96	; 0x60
 8013e04:	4619      	mov	r1, r3
 8013e06:	f002 ff73 	bl	8016cf0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	3320      	adds	r3, #32
 8013e0e:	245f      	movs	r4, #95	; 0x5f
 8013e10:	461d      	mov	r5, r3
 8013e12:	2c00      	cmp	r4, #0
 8013e14:	db05      	blt.n	8013e22 <_ZN10STM32H7DMAC1Ev+0x46>
 8013e16:	4628      	mov	r0, r5
 8013e18:	f7ff ffd1 	bl	8013dbe <_ZN8touchgfx6BlitOpC1Ev>
 8013e1c:	3520      	adds	r5, #32
 8013e1e:	3c01      	subs	r4, #1
 8013e20:	e7f7      	b.n	8013e12 <_ZN10STM32H7DMAC1Ev+0x36>
{
}
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8013e2c:	0802a4a8 	.word	0x0802a4a8

08013e30 <_ZN10STM32H7DMAD1Ev>:

STM32H7DMA::~STM32H7DMA()
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	4a09      	ldr	r2, [pc, #36]	; (8013e60 <_ZN10STM32H7DMAD1Ev+0x30>)
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013e3e:	205a      	movs	r0, #90	; 0x5a
 8013e40:	f7ff fede 	bl	8013c00 <__NVIC_DisableIRQ>
STM32H7DMA::~STM32H7DMA()
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	330c      	adds	r3, #12
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f000 fab1 	bl	80143b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7ff ff41 	bl	8013cd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3708      	adds	r7, #8
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	0802a4a8 	.word	0x0802a4a8

08013e64 <_ZN10STM32H7DMAD0Ev>:
STM32H7DMA::~STM32H7DMA()
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
}
 8013e6c:	6878      	ldr	r0, [r7, #4]
 8013e6e:	f7ff ffdf 	bl	8013e30 <_ZN10STM32H7DMAD1Ev>
 8013e72:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f013 fe8f 	bl	8027b9a <_ZdlPvj>
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
	...

08013e88 <_ZN10STM32H7DMA10initializeEv>:

void STM32H7DMA::initialize()
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8013e90:	4b12      	ldr	r3, [pc, #72]	; (8013edc <_ZN10STM32H7DMA10initializeEv+0x54>)
 8013e92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013e96:	4a11      	ldr	r2, [pc, #68]	; (8013edc <_ZN10STM32H7DMA10initializeEv+0x54>)
 8013e98:	f043 0310 	orr.w	r3, r3, #16
 8013e9c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8013ea0:	4b0e      	ldr	r3, [pc, #56]	; (8013edc <_ZN10STM32H7DMA10initializeEv+0x54>)
 8013ea2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013ea6:	f003 0310 	and.w	r3, r3, #16
 8013eaa:	60fb      	str	r3, [r7, #12]
 8013eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8013eae:	4b0b      	ldr	r3, [pc, #44]	; (8013edc <_ZN10STM32H7DMA10initializeEv+0x54>)
 8013eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013eb2:	4a0a      	ldr	r2, [pc, #40]	; (8013edc <_ZN10STM32H7DMA10initializeEv+0x54>)
 8013eb4:	f043 0310 	orr.w	r3, r3, #16
 8013eb8:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8013eba:	4b08      	ldr	r3, [pc, #32]	; (8013edc <_ZN10STM32H7DMA10initializeEv+0x54>)
 8013ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ebe:	4a07      	ldr	r2, [pc, #28]	; (8013edc <_ZN10STM32H7DMA10initializeEv+0x54>)
 8013ec0:	f023 0310 	bic.w	r3, r3, #16
 8013ec4:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013ec6:	4b06      	ldr	r3, [pc, #24]	; (8013ee0 <_ZN10STM32H7DMA10initializeEv+0x58>)
 8013ec8:	4a06      	ldr	r2, [pc, #24]	; (8013ee4 <_ZN10STM32H7DMA10initializeEv+0x5c>)
 8013eca:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013ecc:	205a      	movs	r0, #90	; 0x5a
 8013ece:	f7ff fe79 	bl	8013bc4 <__NVIC_EnableIRQ>
}
 8013ed2:	bf00      	nop
 8013ed4:	3710      	adds	r7, #16
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}
 8013eda:	bf00      	nop
 8013edc:	58024400 	.word	0x58024400
 8013ee0:	20006784 	.word	0x20006784
 8013ee4:	08013da3 	.word	0x08013da3

08013ee8 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32H7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	460b      	mov	r3, r1
 8013ef2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	60fb      	str	r3, [r7, #12]

    switch (format)
 8013ef8:	78fb      	ldrb	r3, [r7, #3]
 8013efa:	2b0b      	cmp	r3, #11
 8013efc:	d826      	bhi.n	8013f4c <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8013efe:	a201      	add	r2, pc, #4	; (adr r2, 8013f04 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f04:	08013f41 	.word	0x08013f41
 8013f08:	08013f3b 	.word	0x08013f3b
 8013f0c:	08013f35 	.word	0x08013f35
 8013f10:	08013f4d 	.word	0x08013f4d
 8013f14:	08013f4d 	.word	0x08013f4d
 8013f18:	08013f4d 	.word	0x08013f4d
 8013f1c:	08013f4d 	.word	0x08013f4d
 8013f20:	08013f47 	.word	0x08013f47
 8013f24:	08013f47 	.word	0x08013f47
 8013f28:	08013f47 	.word	0x08013f47
 8013f2c:	08013f47 	.word	0x08013f47
 8013f30:	08013f47 	.word	0x08013f47
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013f34:	2300      	movs	r3, #0
 8013f36:	60fb      	str	r3, [r7, #12]
        break;
 8013f38:	e00e      	b.n	8013f58 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	60fb      	str	r3, [r7, #12]
        break;
 8013f3e:	e00b      	b.n	8013f58 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8013f40:	2302      	movs	r3, #2
 8013f42:	60fb      	str	r3, [r7, #12]
        break;
 8013f44:	e008      	b.n	8013f58 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8013f46:	2305      	movs	r3, #5
 8013f48:	60fb      	str	r3, [r7, #12]
        break;
 8013f4a:	e005      	b.n	8013f58 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013f4c:	4b05      	ldr	r3, [pc, #20]	; (8013f64 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8013f4e:	4a06      	ldr	r2, [pc, #24]	; (8013f68 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8013f50:	2165      	movs	r1, #101	; 0x65
 8013f52:	4806      	ldr	r0, [pc, #24]	; (8013f6c <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8013f54:	f013 fff4 	bl	8027f40 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8013f58:	68fb      	ldr	r3, [r7, #12]
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3710      	adds	r7, #16
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	08029b00 	.word	0x08029b00
 8013f68:	08029b1c 	.word	0x08029b1c
 8013f6c:	08029b68 	.word	0x08029b68

08013f70 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32H7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b084      	sub	sp, #16
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	460b      	mov	r3, r1
 8013f7a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8013f80:	78fb      	ldrb	r3, [r7, #3]
 8013f82:	2b0a      	cmp	r3, #10
 8013f84:	d821      	bhi.n	8013fca <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8013f86:	a201      	add	r2, pc, #4	; (adr r2, 8013f8c <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f8c:	08013fc5 	.word	0x08013fc5
 8013f90:	08013fbf 	.word	0x08013fbf
 8013f94:	08013fb9 	.word	0x08013fb9
 8013f98:	08013fcb 	.word	0x08013fcb
 8013f9c:	08013fcb 	.word	0x08013fcb
 8013fa0:	08013fcb 	.word	0x08013fcb
 8013fa4:	08013fcb 	.word	0x08013fcb
 8013fa8:	08013fbf 	.word	0x08013fbf
 8013fac:	08013fbf 	.word	0x08013fbf
 8013fb0:	08013fbf 	.word	0x08013fbf
 8013fb4:	08013fbf 	.word	0x08013fbf
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	60fb      	str	r3, [r7, #12]
        break;
 8013fbc:	e00b      	b.n	8013fd6 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	60fb      	str	r3, [r7, #12]
        break;
 8013fc2:	e008      	b.n	8013fd6 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8013fc4:	2302      	movs	r3, #2
 8013fc6:	60fb      	str	r3, [r7, #12]
        break;
 8013fc8:	e005      	b.n	8013fd6 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013fca:	4b05      	ldr	r3, [pc, #20]	; (8013fe0 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8013fcc:	4a05      	ldr	r2, [pc, #20]	; (8013fe4 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8013fce:	2186      	movs	r1, #134	; 0x86
 8013fd0:	4805      	ldr	r0, [pc, #20]	; (8013fe8 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8013fd2:	f013 ffb5 	bl	8027f40 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3710      	adds	r7, #16
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	08029b00 	.word	0x08029b00
 8013fe4:	08029b94 	.word	0x08029b94
 8013fe8:	08029b68 	.word	0x08029b68

08013fec <_ZN10STM32H7DMA11getBlitCapsEv>:

BlitOperations STM32H7DMA::getBlitCaps()
{
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8013ff4:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	370c      	adds	r7, #12
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014002:	4770      	bx	lr

08014004 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32H7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8014004:	b590      	push	{r4, r7, lr}
 8014006:	b089      	sub	sp, #36	; 0x24
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	7f5b      	ldrb	r3, [r3, #29]
 8014012:	4619      	mov	r1, r3
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f7ff ff67 	bl	8013ee8 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801401a:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	7f9b      	ldrb	r3, [r3, #30]
 8014020:	4619      	mov	r1, r3
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	f7ff ff60 	bl	8013ee8 <_ZN10STM32H7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014028:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	7f9b      	ldrb	r3, [r3, #30]
 801402e:	4619      	mov	r1, r3
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f7ff ff9d 	bl	8013f70 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014036:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	8adb      	ldrh	r3, [r3, #22]
 801403c:	461a      	mov	r2, r3
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	8a1b      	ldrh	r3, [r3, #16]
 8014042:	1ad2      	subs	r2, r2, r3
 8014044:	4b97      	ldr	r3, [pc, #604]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014046:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	8adb      	ldrh	r3, [r3, #22]
 801404c:	461a      	mov	r2, r3
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	8a1b      	ldrh	r3, [r3, #16]
 8014052:	1ad2      	subs	r2, r2, r3
 8014054:	4b93      	ldr	r3, [pc, #588]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014056:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	8a9b      	ldrh	r3, [r3, #20]
 801405c:	461a      	mov	r2, r3
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	8a1b      	ldrh	r3, [r3, #16]
 8014062:	1ad2      	subs	r2, r2, r3
 8014064:	4b8f      	ldr	r3, [pc, #572]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014066:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014068:	4a8e      	ldr	r2, [pc, #568]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	8a5b      	ldrh	r3, [r3, #18]
 8014072:	461a      	mov	r2, r3
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	8a1b      	ldrh	r3, [r3, #16]
 8014078:	041b      	lsls	r3, r3, #16
 801407a:	431a      	orrs	r2, r3
 801407c:	4b89      	ldr	r3, [pc, #548]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801407e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	68da      	ldr	r2, [r3, #12]
 8014084:	4b87      	ldr	r3, [pc, #540]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014086:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	685a      	ldr	r2, [r3, #4]
 801408c:	4b85      	ldr	r3, [pc, #532]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801408e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014098:	d02f      	beq.n	80140fa <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
 801409a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801409e:	f200 80bb 	bhi.w	8014218 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
 80140a2:	2b80      	cmp	r3, #128	; 0x80
 80140a4:	d00e      	beq.n	80140c4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 80140a6:	2b80      	cmp	r3, #128	; 0x80
 80140a8:	f200 80b6 	bhi.w	8014218 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
 80140ac:	2b40      	cmp	r3, #64	; 0x40
 80140ae:	f000 809e 	beq.w	80141ee <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 80140b2:	2b40      	cmp	r3, #64	; 0x40
 80140b4:	f200 80b0 	bhi.w	8014218 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
 80140b8:	2b04      	cmp	r3, #4
 80140ba:	d039      	beq.n	8014130 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12c>
 80140bc:	2b20      	cmp	r3, #32
 80140be:	f000 8096 	beq.w	80141ee <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 80140c2:	e0a9      	b.n	8014218 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	7f1b      	ldrb	r3, [r3, #28]
 80140c8:	061b      	lsls	r3, r3, #24
 80140ca:	4619      	mov	r1, r3
 80140cc:	4a75      	ldr	r2, [pc, #468]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80140ce:	4b76      	ldr	r3, [pc, #472]	; (80142a8 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80140d0:	430b      	orrs	r3, r1
 80140d2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	3318      	adds	r3, #24
 80140d8:	4c72      	ldr	r4, [pc, #456]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80140da:	4618      	mov	r0, r3
 80140dc:	f7ff fdc2 	bl	8013c64 <_ZNK8touchgfx9colortypecvmEv>
 80140e0:	4603      	mov	r3, r0
 80140e2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80140e4:	4a6f      	ldr	r2, [pc, #444]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80140e6:	69bb      	ldr	r3, [r7, #24]
 80140e8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	68da      	ldr	r2, [r3, #12]
 80140ee:	4b6d      	ldr	r3, [pc, #436]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80140f0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80140f2:	4b6c      	ldr	r3, [pc, #432]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80140f4:	4a6d      	ldr	r2, [pc, #436]	; (80142ac <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80140f6:	601a      	str	r2, [r3, #0]
        break;
 80140f8:	e0cf      	b.n	801429a <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	7f1b      	ldrb	r3, [r3, #28]
 80140fe:	061b      	lsls	r3, r3, #24
 8014100:	4619      	mov	r1, r3
 8014102:	4a68      	ldr	r2, [pc, #416]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014104:	4b6a      	ldr	r3, [pc, #424]	; (80142b0 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8014106:	430b      	orrs	r3, r1
 8014108:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	3318      	adds	r3, #24
 801410e:	4c65      	ldr	r4, [pc, #404]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014110:	4618      	mov	r0, r3
 8014112:	f7ff fda7 	bl	8013c64 <_ZNK8touchgfx9colortypecvmEv>
 8014116:	4603      	mov	r3, r0
 8014118:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801411a:	4a62      	ldr	r2, [pc, #392]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801411c:	69bb      	ldr	r3, [r7, #24]
 801411e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	68da      	ldr	r2, [r3, #12]
 8014124:	4b5f      	ldr	r3, [pc, #380]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014126:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014128:	4b5e      	ldr	r3, [pc, #376]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801412a:	4a60      	ldr	r2, [pc, #384]	; (80142ac <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801412c:	601a      	str	r2, [r3, #0]
        break;
 801412e:	e0b4      	b.n	801429a <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	7f1b      	ldrb	r3, [r3, #28]
 8014134:	061b      	lsls	r3, r3, #24
 8014136:	461a      	mov	r2, r3
 8014138:	69fb      	ldr	r3, [r7, #28]
 801413a:	4313      	orrs	r3, r2
 801413c:	4a59      	ldr	r2, [pc, #356]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014142:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014144:	4a57      	ldr	r2, [pc, #348]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014146:	69bb      	ldr	r3, [r7, #24]
 8014148:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	68da      	ldr	r2, [r3, #12]
 801414e:	4b55      	ldr	r3, [pc, #340]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014150:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	7f5b      	ldrb	r3, [r3, #29]
 8014156:	2b0b      	cmp	r3, #11
 8014158:	d145      	bne.n	80141e6 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	689b      	ldr	r3, [r3, #8]
 801415e:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8014160:	693b      	ldr	r3, [r7, #16]
 8014162:	1d1a      	adds	r2, r3, #4
 8014164:	4b4f      	ldr	r3, [pc, #316]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014166:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	881b      	ldrh	r3, [r3, #0]
 801416c:	b2db      	uxtb	r3, r3
 801416e:	2b00      	cmp	r3, #0
 8014170:	d002      	beq.n	8014178 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x174>
 8014172:	2b01      	cmp	r3, #1
 8014174:	d00d      	beq.n	8014192 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
 8014176:	e01a      	b.n	80141ae <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1aa>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014178:	4b4a      	ldr	r3, [pc, #296]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801417a:	69da      	ldr	r2, [r3, #28]
 801417c:	4b4d      	ldr	r3, [pc, #308]	; (80142b4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 801417e:	4013      	ands	r3, r2
 8014180:	693a      	ldr	r2, [r7, #16]
 8014182:	8852      	ldrh	r2, [r2, #2]
 8014184:	3a01      	subs	r2, #1
 8014186:	0212      	lsls	r2, r2, #8
 8014188:	4611      	mov	r1, r2
 801418a:	4a46      	ldr	r2, [pc, #280]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801418c:	430b      	orrs	r3, r1
 801418e:	61d3      	str	r3, [r2, #28]
                break;
 8014190:	e013      	b.n	80141ba <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b6>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014192:	4b44      	ldr	r3, [pc, #272]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014194:	69da      	ldr	r2, [r3, #28]
 8014196:	4b47      	ldr	r3, [pc, #284]	; (80142b4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8014198:	4013      	ands	r3, r2
 801419a:	693a      	ldr	r2, [r7, #16]
 801419c:	8852      	ldrh	r2, [r2, #2]
 801419e:	3a01      	subs	r2, #1
 80141a0:	0212      	lsls	r2, r2, #8
 80141a2:	4313      	orrs	r3, r2
 80141a4:	4a3f      	ldr	r2, [pc, #252]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80141a6:	f043 0310 	orr.w	r3, r3, #16
 80141aa:	61d3      	str	r3, [r2, #28]
                break;
 80141ac:	e005      	b.n	80141ba <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b6>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80141ae:	4b42      	ldr	r3, [pc, #264]	; (80142b8 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80141b0:	4a42      	ldr	r2, [pc, #264]	; (80142bc <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 80141b2:	21fa      	movs	r1, #250	; 0xfa
 80141b4:	4842      	ldr	r0, [pc, #264]	; (80142c0 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80141b6:	f013 fec3 	bl	8027f40 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80141ba:	4b3a      	ldr	r3, [pc, #232]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80141bc:	69db      	ldr	r3, [r3, #28]
 80141be:	4a39      	ldr	r2, [pc, #228]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80141c0:	f043 0320 	orr.w	r3, r3, #32
 80141c4:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80141c6:	4b37      	ldr	r3, [pc, #220]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80141c8:	69db      	ldr	r3, [r3, #28]
 80141ca:	f003 0320 	and.w	r3, r3, #32
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	bf14      	ite	ne
 80141d2:	2301      	movne	r3, #1
 80141d4:	2300      	moveq	r3, #0
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d001      	beq.n	80141e0 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
                __NOP();
 80141dc:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80141de:	e7f2      	b.n	80141c6 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80141e0:	4b30      	ldr	r3, [pc, #192]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80141e2:	2210      	movs	r2, #16
 80141e4:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80141e6:	4b2f      	ldr	r3, [pc, #188]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80141e8:	4a30      	ldr	r2, [pc, #192]	; (80142ac <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80141ea:	601a      	str	r2, [r3, #0]
        break;
 80141ec:	e055      	b.n	801429a <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	7f1b      	ldrb	r3, [r3, #28]
 80141f2:	061b      	lsls	r3, r3, #24
 80141f4:	461a      	mov	r2, r3
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	4313      	orrs	r3, r2
 80141fa:	4a2a      	ldr	r2, [pc, #168]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80141fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014200:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014202:	4a28      	ldr	r2, [pc, #160]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014204:	69bb      	ldr	r3, [r7, #24]
 8014206:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	68da      	ldr	r2, [r3, #12]
 801420c:	4b25      	ldr	r3, [pc, #148]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801420e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014210:	4b24      	ldr	r3, [pc, #144]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014212:	4a26      	ldr	r2, [pc, #152]	; (80142ac <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014214:	601a      	str	r2, [r3, #0]
        break;
 8014216:	e040      	b.n	801429a <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	7f1b      	ldrb	r3, [r3, #28]
 801421c:	061b      	lsls	r3, r3, #24
 801421e:	461a      	mov	r2, r3
 8014220:	69fb      	ldr	r3, [r7, #28]
 8014222:	4313      	orrs	r3, r2
 8014224:	4a1f      	ldr	r2, [pc, #124]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801422a:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	7f5b      	ldrb	r3, [r3, #29]
 8014230:	2b0b      	cmp	r3, #11
 8014232:	d12d      	bne.n	8014290 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	689b      	ldr	r3, [r3, #8]
 8014238:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	1d1a      	adds	r2, r3, #4
 801423e:	4b19      	ldr	r3, [pc, #100]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014240:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014242:	4b18      	ldr	r3, [pc, #96]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014244:	69da      	ldr	r2, [r3, #28]
 8014246:	4b1b      	ldr	r3, [pc, #108]	; (80142b4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8014248:	4013      	ands	r3, r2
 801424a:	68fa      	ldr	r2, [r7, #12]
 801424c:	8852      	ldrh	r2, [r2, #2]
 801424e:	3a01      	subs	r2, #1
 8014250:	0212      	lsls	r2, r2, #8
 8014252:	4313      	orrs	r3, r2
 8014254:	4a13      	ldr	r2, [pc, #76]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014256:	f043 0310 	orr.w	r3, r3, #16
 801425a:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 801425c:	4b11      	ldr	r3, [pc, #68]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801425e:	69db      	ldr	r3, [r3, #28]
 8014260:	4a10      	ldr	r2, [pc, #64]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014262:	f043 0320 	orr.w	r3, r3, #32
 8014266:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8014268:	4b0e      	ldr	r3, [pc, #56]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801426a:	69db      	ldr	r3, [r3, #28]
 801426c:	f003 0320 	and.w	r3, r3, #32
 8014270:	2b00      	cmp	r3, #0
 8014272:	bf14      	ite	ne
 8014274:	2301      	movne	r3, #1
 8014276:	2300      	moveq	r3, #0
 8014278:	b2db      	uxtb	r3, r3
 801427a:	2b00      	cmp	r3, #0
 801427c:	d001      	beq.n	8014282 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
            {
                __NOP();
 801427e:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8014280:	e7f2      	b.n	8014268 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8014282:	4b08      	ldr	r3, [pc, #32]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014284:	2210      	movs	r2, #16
 8014286:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014288:	4b06      	ldr	r3, [pc, #24]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801428a:	4a0e      	ldr	r2, [pc, #56]	; (80142c4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 801428c:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 801428e:	e003      	b.n	8014298 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8014290:	4b04      	ldr	r3, [pc, #16]	; (80142a4 <_ZN10STM32H7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014292:	f240 2201 	movw	r2, #513	; 0x201
 8014296:	601a      	str	r2, [r3, #0]
        break;
 8014298:	bf00      	nop
    }
}
 801429a:	bf00      	nop
 801429c:	3724      	adds	r7, #36	; 0x24
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd90      	pop	{r4, r7, pc}
 80142a2:	bf00      	nop
 80142a4:	52001000 	.word	0x52001000
 80142a8:	0002000a 	.word	0x0002000a
 80142ac:	00020201 	.word	0x00020201
 80142b0:	00020009 	.word	0x00020009
 80142b4:	ffff00ef 	.word	0xffff00ef
 80142b8:	08029be4 	.word	0x08029be4
 80142bc:	08029c00 	.word	0x08029c00
 80142c0:	08029b68 	.word	0x08029b68
 80142c4:	00010201 	.word	0x00010201

080142c8 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32H7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32H7DMA::setupDataFill(const BlitOp& blitOp)
{
 80142c8:	b590      	push	{r4, r7, lr}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	7f9b      	ldrb	r3, [r3, #30]
 80142d6:	4619      	mov	r1, r3
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f7ff fe49 	bl	8013f70 <_ZN10STM32H7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80142de:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80142e0:	4a2f      	ldr	r2, [pc, #188]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	8a5b      	ldrh	r3, [r3, #18]
 80142ea:	461a      	mov	r2, r3
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	8a1b      	ldrh	r3, [r3, #16]
 80142f0:	041b      	lsls	r3, r3, #16
 80142f2:	431a      	orrs	r2, r3
 80142f4:	4b2a      	ldr	r3, [pc, #168]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80142f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	68da      	ldr	r2, [r3, #12]
 80142fc:	4b28      	ldr	r3, [pc, #160]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80142fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	8adb      	ldrh	r3, [r3, #22]
 8014304:	461a      	mov	r2, r3
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	8a1b      	ldrh	r3, [r3, #16]
 801430a:	1ad2      	subs	r2, r2, r3
 801430c:	4b24      	ldr	r3, [pc, #144]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801430e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	2b08      	cmp	r3, #8
 8014316:	d12e      	bne.n	8014376 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	8adb      	ldrh	r3, [r3, #22]
 801431c:	461a      	mov	r2, r3
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	8a1b      	ldrh	r3, [r3, #16]
 8014322:	1ad2      	subs	r2, r2, r3
 8014324:	4b1e      	ldr	r3, [pc, #120]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014326:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	8adb      	ldrh	r3, [r3, #22]
 801432c:	461a      	mov	r2, r3
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	8a1b      	ldrh	r3, [r3, #16]
 8014332:	1ad2      	subs	r2, r2, r3
 8014334:	4b1a      	ldr	r3, [pc, #104]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014336:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014338:	4a19      	ldr	r2, [pc, #100]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	7f1b      	ldrb	r3, [r3, #28]
 8014342:	061b      	lsls	r3, r3, #24
 8014344:	4619      	mov	r1, r3
 8014346:	4a16      	ldr	r2, [pc, #88]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014348:	4b16      	ldr	r3, [pc, #88]	; (80143a4 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 801434a:	430b      	orrs	r3, r1
 801434c:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	3318      	adds	r3, #24
 8014352:	4c13      	ldr	r4, [pc, #76]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014354:	4618      	mov	r0, r3
 8014356:	f7ff fc85 	bl	8013c64 <_ZNK8touchgfx9colortypecvmEv>
 801435a:	4603      	mov	r3, r0
 801435c:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	68da      	ldr	r2, [r3, #12]
 8014362:	4b0f      	ldr	r3, [pc, #60]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014364:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	68da      	ldr	r2, [r3, #12]
 801436a:	4b0d      	ldr	r3, [pc, #52]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801436c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        DMA2D->CR = (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND);
 801436e:	4b0c      	ldr	r3, [pc, #48]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014370:	4a0d      	ldr	r2, [pc, #52]	; (80143a8 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8014372:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        DMA2D->CR = (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M);
    }
}
 8014374:	e010      	b.n	8014398 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014376:	4a0a      	ldr	r2, [pc, #40]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 801437c:	4b08      	ldr	r3, [pc, #32]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801437e:	2200      	movs	r2, #0
 8014380:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	3318      	adds	r3, #24
 8014386:	4c06      	ldr	r4, [pc, #24]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014388:	4618      	mov	r0, r3
 801438a:	f7ff fc6b 	bl	8013c64 <_ZNK8touchgfx9colortypecvmEv>
 801438e:	4603      	mov	r3, r0
 8014390:	63a3      	str	r3, [r4, #56]	; 0x38
        DMA2D->CR = (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M);
 8014392:	4b03      	ldr	r3, [pc, #12]	; (80143a0 <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8014394:	4a05      	ldr	r2, [pc, #20]	; (80143ac <_ZN10STM32H7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8014396:	601a      	str	r2, [r3, #0]
}
 8014398:	bf00      	nop
 801439a:	3714      	adds	r7, #20
 801439c:	46bd      	mov	sp, r7
 801439e:	bd90      	pop	{r4, r7, pc}
 80143a0:	52001000 	.word	0x52001000
 80143a4:	00010009 	.word	0x00010009
 80143a8:	00020201 	.word	0x00020201
 80143ac:	00030201 	.word	0x00030201

080143b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	4a05      	ldr	r2, [pc, #20]	; (80143d0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	601a      	str	r2, [r3, #0]
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7ff fc5b 	bl	8013c7c <_ZN8touchgfx9DMA_QueueD1Ev>
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	4618      	mov	r0, r3
 80143ca:	3708      	adds	r7, #8
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}
 80143d0:	0802b24c 	.word	0x0802b24c

080143d4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f7ff ffe7 	bl	80143b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80143e2:	2114      	movs	r1, #20
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f013 fbd8 	bl	8027b9a <_ZdlPvj>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	4618      	mov	r0, r3
 80143ee:	3708      	adds	r7, #8
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}

080143f4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80143f4:	b480      	push	{r7}
 80143f6:	b083      	sub	sp, #12
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80143fc:	4a04      	ldr	r2, [pc, #16]	; (8014410 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6013      	str	r3, [r2, #0]
    }
 8014402:	bf00      	nop
 8014404:	370c      	adds	r7, #12
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr
 801440e:	bf00      	nop
 8014410:	20006154 	.word	0x20006154

08014414 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014414:	b480      	push	{r7}
 8014416:	b085      	sub	sp, #20
 8014418:	af00      	add	r7, sp, #0
 801441a:	60f8      	str	r0, [r7, #12]
 801441c:	60b9      	str	r1, [r7, #8]
 801441e:	607a      	str	r2, [r7, #4]
 8014420:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014422:	4a0b      	ldr	r2, [pc, #44]	; (8014450 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	601a      	str	r2, [r3, #0]
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	68ba      	ldr	r2, [r7, #8]
 801442c:	605a      	str	r2, [r3, #4]
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	609a      	str	r2, [r3, #8]
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	683a      	ldr	r2, [r7, #0]
 8014438:	60da      	str	r2, [r3, #12]
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	69ba      	ldr	r2, [r7, #24]
 801443e:	611a      	str	r2, [r3, #16]
    {
    }
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	4618      	mov	r0, r3
 8014444:	3714      	adds	r7, #20
 8014446:	46bd      	mov	sp, r7
 8014448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444c:	4770      	bx	lr
 801444e:	bf00      	nop
 8014450:	0802a5e0 	.word	0x0802a5e0

08014454 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
    {
 801445c:	4a04      	ldr	r2, [pc, #16]	; (8014470 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	601a      	str	r2, [r3, #0]
    }
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	4618      	mov	r0, r3
 8014466:	370c      	adds	r7, #12
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr
 8014470:	0802a5e0 	.word	0x0802a5e0

08014474 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
    }
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f7ff ffe9 	bl	8014454 <_ZN8touchgfx7MVPHeapD1Ev>
 8014482:	2114      	movs	r1, #20
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f013 fb88 	bl	8027b9a <_ZdlPvj>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	4618      	mov	r0, r3
 801448e:	3708      	adds	r7, #8
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}

08014494 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014494:	b480      	push	{r7}
 8014496:	b083      	sub	sp, #12
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
    {
 801449c:	4a04      	ldr	r2, [pc, #16]	; (80144b0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	601a      	str	r2, [r3, #0]
    }
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	4618      	mov	r0, r3
 80144a6:	370c      	adds	r7, #12
 80144a8:	46bd      	mov	sp, r7
 80144aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ae:	4770      	bx	lr
 80144b0:	0802bc34 	.word	0x0802bc34

080144b4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
    }
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f7ff ffe9 	bl	8014494 <_ZN8touchgfx3LCDD1Ev>
 80144c2:	2108      	movs	r1, #8
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f013 fb68 	bl	8027b9a <_ZdlPvj>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	4618      	mov	r0, r3
 80144ce:	3708      	adds	r7, #8
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}

080144d4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80144d4:	b480      	push	{r7}
 80144d6:	b083      	sub	sp, #12
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2200      	movs	r2, #0
 80144e0:	801a      	strh	r2, [r3, #0]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	2200      	movs	r2, #0
 80144e6:	805a      	strh	r2, [r3, #2]
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2200      	movs	r2, #0
 80144ec:	809a      	strh	r2, [r3, #4]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2200      	movs	r2, #0
 80144f2:	80da      	strh	r2, [r3, #6]
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2200      	movs	r2, #0
 80144f8:	811a      	strh	r2, [r3, #8]
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2200      	movs	r2, #0
 80144fe:	815a      	strh	r2, [r3, #10]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2200      	movs	r2, #0
 8014504:	819a      	strh	r2, [r3, #12]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2200      	movs	r2, #0
 801450a:	739a      	strb	r2, [r3, #14]
        {
        }
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	4618      	mov	r0, r3
 8014510:	370c      	adds	r7, #12
 8014512:	46bd      	mov	sp, r7
 8014514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014518:	4770      	bx	lr

0801451a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801451a:	b580      	push	{r7, lr}
 801451c:	b082      	sub	sp, #8
 801451e:	af00      	add	r7, sp, #0
 8014520:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	4618      	mov	r0, r3
 8014526:	f7ff ffd5 	bl	80144d4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2200      	movs	r2, #0
 801452e:	611a      	str	r2, [r3, #16]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2200      	movs	r2, #0
 8014534:	829a      	strh	r2, [r3, #20]
    {
    }
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	4618      	mov	r0, r3
 801453a:	3708      	adds	r7, #8
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	607a      	str	r2, [r7, #4]
 801454c:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 801454e:	4a4a      	ldr	r2, [pc, #296]	; (8014678 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	601a      	str	r2, [r3, #0]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	68ba      	ldr	r2, [r7, #8]
 8014558:	605a      	str	r2, [r3, #4]
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	609a      	str	r2, [r3, #8]
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	683a      	ldr	r2, [r7, #0]
 8014564:	60da      	str	r2, [r3, #12]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2200      	movs	r2, #0
 801456a:	611a      	str	r2, [r3, #16]
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	2200      	movs	r2, #0
 8014570:	615a      	str	r2, [r3, #20]
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2200      	movs	r2, #0
 8014576:	619a      	str	r2, [r3, #24]
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	331c      	adds	r3, #28
 801457c:	4618      	mov	r0, r3
 801457e:	f7ff ffcc 	bl	801451a <_ZN8touchgfx8GesturesC1Ev>
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	2200      	movs	r2, #0
 8014586:	639a      	str	r2, [r3, #56]	; 0x38
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2200      	movs	r2, #0
 801458c:	63da      	str	r2, [r3, #60]	; 0x3c
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2200      	movs	r2, #0
 8014592:	641a      	str	r2, [r3, #64]	; 0x40
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2200      	movs	r2, #0
 8014598:	645a      	str	r2, [r3, #68]	; 0x44
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2200      	movs	r2, #0
 801459e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2201      	movs	r2, #1
 80145a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2200      	movs	r2, #0
 80145ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	2200      	movs	r2, #0
 80145b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	3350      	adds	r3, #80	; 0x50
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fc fdb5 	bl	801112c <_ZN8touchgfx4RectC1Ev>
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	2201      	movs	r2, #1
 80145c6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	2200      	movs	r2, #0
 80145ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	2200      	movs	r2, #0
 80145d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	2201      	movs	r2, #1
 80145de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	2200      	movs	r2, #0
 80145e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2200      	movs	r2, #0
 80145ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	2200      	movs	r2, #0
 80145f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	2200      	movs	r2, #0
 80145fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	2200      	movs	r2, #0
 8014606:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	2200      	movs	r2, #0
 801460e:	671a      	str	r2, [r3, #112]	; 0x70
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2200      	movs	r2, #0
 8014614:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2200      	movs	r2, #0
 801461c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	2201      	movs	r2, #1
 8014624:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	2201      	movs	r2, #1
 801462c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8014630:	4a12      	ldr	r2, [pc, #72]	; (801467c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014636:	4a12      	ldr	r2, [pc, #72]	; (8014680 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8014638:	8b3b      	ldrh	r3, [r7, #24]
 801463a:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801463c:	4a11      	ldr	r2, [pc, #68]	; (8014684 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 801463e:	8bbb      	ldrh	r3, [r7, #28]
 8014640:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014642:	4b11      	ldr	r3, [pc, #68]	; (8014688 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8014644:	2200      	movs	r2, #0
 8014646:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014648:	4b0d      	ldr	r3, [pc, #52]	; (8014680 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 801464a:	881a      	ldrh	r2, [r3, #0]
 801464c:	4b0f      	ldr	r3, [pc, #60]	; (801468c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 801464e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014650:	4b0c      	ldr	r3, [pc, #48]	; (8014684 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8014652:	881a      	ldrh	r2, [r3, #0]
 8014654:	4b0e      	ldr	r3, [pc, #56]	; (8014690 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 8014656:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014658:	8b3a      	ldrh	r2, [r7, #24]
 801465a:	8bbb      	ldrh	r3, [r7, #28]
 801465c:	429a      	cmp	r2, r3
 801465e:	bf34      	ite	cc
 8014660:	2301      	movcc	r3, #1
 8014662:	2300      	movcs	r3, #0
 8014664:	b2db      	uxtb	r3, r3
 8014666:	461a      	mov	r2, r3
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	4618      	mov	r0, r3
 8014672:	3710      	adds	r7, #16
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	0802adb0 	.word	0x0802adb0
 801467c:	200060f8 	.word	0x200060f8
 8014680:	200060ea 	.word	0x200060ea
 8014684:	200060ec 	.word	0x200060ec
 8014688:	200060ee 	.word	0x200060ee
 801468c:	200060f0 	.word	0x200060f0
 8014690:	200060f2 	.word	0x200060f2

08014694 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenScreenNoTransition();
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7fc f91f 	bl	80108e4 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
 80146a6:	bf00      	nop
 80146a8:	3708      	adds	r7, #8
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
	...

080146b0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b086      	sub	sp, #24
 80146b4:	af02      	add	r7, sp, #8
 80146b6:	60f8      	str	r0, [r7, #12]
 80146b8:	60b9      	str	r1, [r7, #8]
 80146ba:	607a      	str	r2, [r7, #4]
 80146bc:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80146be:	68f8      	ldr	r0, [r7, #12]
 80146c0:	69bb      	ldr	r3, [r7, #24]
 80146c2:	9300      	str	r3, [sp, #0]
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	687a      	ldr	r2, [r7, #4]
 80146c8:	68b9      	ldr	r1, [r7, #8]
 80146ca:	f7ff fea3 	bl	8014414 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80146ce:	4a04      	ldr	r2, [pc, #16]	; (80146e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	601a      	str	r2, [r3, #0]
    {

    }
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	4618      	mov	r0, r3
 80146d8:	3710      	adds	r7, #16
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	bf00      	nop
 80146e0:	0802a5cc 	.word	0x0802a5cc

080146e4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80146e4:	b580      	push	{r7, lr}
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	4801      	ldr	r0, [pc, #4]	; (80146f0 <__tcf_0+0xc>)
 80146ea:	f000 f95f 	bl	80149ac <_ZN12FrontendHeapD1Ev>
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	20004aec 	.word	0x20004aec

080146f4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80146f4:	b580      	push	{r7, lr}
 80146f6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80146f8:	4b12      	ldr	r3, [pc, #72]	; (8014744 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	f3bf 8f5b 	dmb	ish
 8014700:	b2db      	uxtb	r3, r3
 8014702:	f003 0301 	and.w	r3, r3, #1
 8014706:	2b00      	cmp	r3, #0
 8014708:	bf0c      	ite	eq
 801470a:	2301      	moveq	r3, #1
 801470c:	2300      	movne	r3, #0
 801470e:	b2db      	uxtb	r3, r3
 8014710:	2b00      	cmp	r3, #0
 8014712:	d013      	beq.n	801473c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8014714:	480b      	ldr	r0, [pc, #44]	; (8014744 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014716:	f013 fa42 	bl	8027b9e <__cxa_guard_acquire>
 801471a:	4603      	mov	r3, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	bf14      	ite	ne
 8014720:	2301      	movne	r3, #1
 8014722:	2300      	moveq	r3, #0
 8014724:	b2db      	uxtb	r3, r3
 8014726:	2b00      	cmp	r3, #0
 8014728:	d008      	beq.n	801473c <_ZN12FrontendHeap11getInstanceEv+0x48>
 801472a:	4807      	ldr	r0, [pc, #28]	; (8014748 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 801472c:	f000 f868 	bl	8014800 <_ZN12FrontendHeapC1Ev>
 8014730:	4804      	ldr	r0, [pc, #16]	; (8014744 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014732:	f013 fa40 	bl	8027bb6 <__cxa_guard_release>
 8014736:	4805      	ldr	r0, [pc, #20]	; (801474c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8014738:	f013 fc20 	bl	8027f7c <atexit>
        return instance;
 801473c:	4b02      	ldr	r3, [pc, #8]	; (8014748 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 801473e:	4618      	mov	r0, r3
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	200053e0 	.word	0x200053e0
 8014748:	20004aec 	.word	0x20004aec
 801474c:	080146e5 	.word	0x080146e5

08014750 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	4a05      	ldr	r2, [pc, #20]	; (8014770 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	601a      	str	r2, [r3, #0]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	4618      	mov	r0, r3
 8014762:	f7ff fe77 	bl	8014454 <_ZN8touchgfx7MVPHeapD1Ev>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	4618      	mov	r0, r3
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	0802a5cc 	.word	0x0802a5cc

08014774 <_ZN16FrontendHeapBaseD0Ev>:
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7ff ffe7 	bl	8014750 <_ZN16FrontendHeapBaseD1Ev>
 8014782:	2114      	movs	r1, #20
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f013 fa08 	bl	8027b9a <_ZdlPvj>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	4618      	mov	r0, r3
 801478e:	3708      	adds	r7, #8
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	4618      	mov	r0, r3
 80147a0:	f001 f818 	bl	80157d4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80147a4:	4a03      	ldr	r2, [pc, #12]	; (80147b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	601a      	str	r2, [r3, #0]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	4618      	mov	r0, r3
 80147ae:	3708      	adds	r7, #8
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}
 80147b4:	0802a598 	.word	0x0802a598

080147b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	4618      	mov	r0, r3
 80147c4:	f001 f806 	bl	80157d4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80147c8:	4a03      	ldr	r2, [pc, #12]	; (80147d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	601a      	str	r2, [r3, #0]
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	4618      	mov	r0, r3
 80147d2:	3708      	adds	r7, #8
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	0802a564 	.word	0x0802a564

080147dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	4618      	mov	r0, r3
 80147e8:	f000 fff4 	bl	80157d4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80147ec:	4a03      	ldr	r2, [pc, #12]	; (80147fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	601a      	str	r2, [r3, #0]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4618      	mov	r0, r3
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	0802a530 	.word	0x0802a530

08014800 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014800:	b590      	push	{r4, r7, lr}
 8014802:	b085      	sub	sp, #20
 8014804:	af02      	add	r7, sp, #8
 8014806:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f103 0114 	add.w	r1, r3, #20
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f203 7484 	addw	r4, r3, #1924	; 0x784
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f203 739c 	addw	r3, r3, #1948	; 0x79c
                     app(model, *this)
 8014822:	9300      	str	r3, [sp, #0]
 8014824:	4623      	mov	r3, r4
 8014826:	f7ff ff43 	bl	80146b0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801482a:	4a18      	ldr	r2, [pc, #96]	; (801488c <_ZN12FrontendHeapC1Ev+0x8c>)
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	601a      	str	r2, [r3, #0]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	3314      	adds	r3, #20
 8014834:	4618      	mov	r0, r3
 8014836:	f7ff ffad 	bl	8014794 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	332c      	adds	r3, #44	; 0x2c
 801483e:	4618      	mov	r0, r3
 8014840:	f7ff ffba 	bl	80147b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f203 7384 	addw	r3, r3, #1924	; 0x784
 801484a:	4618      	mov	r0, r3
 801484c:	f7ff ffc6 	bl	80147dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8014856:	4618      	mov	r0, r3
 8014858:	f7fe fe62 	bl	8013520 <_ZN5ModelC1Ev>
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f203 709c 	addw	r0, r3, #1948	; 0x79c
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8014868:	687a      	ldr	r2, [r7, #4]
 801486a:	4619      	mov	r1, r3
 801486c:	f7fe fb74 	bl	8012f58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8014870:	687a      	ldr	r2, [r7, #4]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f203 739c 	addw	r3, r3, #1948	; 0x79c
 8014878:	4619      	mov	r1, r3
 801487a:	4610      	mov	r0, r2
 801487c:	f7ff ff0a 	bl	8014694 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	4618      	mov	r0, r3
 8014884:	370c      	adds	r7, #12
 8014886:	46bd      	mov	sp, r7
 8014888:	bd90      	pop	{r4, r7, pc}
 801488a:	bf00      	nop
 801488c:	0802a51c 	.word	0x0802a51c

08014890 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8014890:	b580      	push	{r7, lr}
 8014892:	b086      	sub	sp, #24
 8014894:	af02      	add	r7, sp, #8
 8014896:	60f8      	str	r0, [r7, #12]
 8014898:	60b9      	str	r1, [r7, #8]
 801489a:	607a      	str	r2, [r7, #4]
 801489c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	8bbb      	ldrh	r3, [r7, #28]
 80148a2:	9301      	str	r3, [sp, #4]
 80148a4:	8b3b      	ldrh	r3, [r7, #24]
 80148a6:	9300      	str	r3, [sp, #0]
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	687a      	ldr	r2, [r7, #4]
 80148ac:	68b9      	ldr	r1, [r7, #8]
 80148ae:	f7ff fe47 	bl	8014540 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80148b2:	4a04      	ldr	r2, [pc, #16]	; (80148c4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	601a      	str	r2, [r3, #0]
    }
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	4618      	mov	r0, r3
 80148bc:	3710      	adds	r7, #16
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd80      	pop	{r7, pc}
 80148c2:	bf00      	nop
 80148c4:	0802a5f0 	.word	0x0802a5f0

080148c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b086      	sub	sp, #24
 80148cc:	af02      	add	r7, sp, #8
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	60b9      	str	r1, [r7, #8]
 80148d2:	607a      	str	r2, [r7, #4]
 80148d4:	603b      	str	r3, [r7, #0]
 80148d6:	68f8      	ldr	r0, [r7, #12]
 80148d8:	8bbb      	ldrh	r3, [r7, #28]
 80148da:	9301      	str	r3, [sp, #4]
 80148dc:	8b3b      	ldrh	r3, [r7, #24]
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	687a      	ldr	r2, [r7, #4]
 80148e4:	68b9      	ldr	r1, [r7, #8]
 80148e6:	f7ff ffd3 	bl	8014890 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80148ea:	4a04      	ldr	r2, [pc, #16]	; (80148fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	601a      	str	r2, [r3, #0]
    }
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	4618      	mov	r0, r3
 80148f4:	3710      	adds	r7, #16
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	0802a3ec 	.word	0x0802a3ec

08014900 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014900:	b480      	push	{r7}
 8014902:	b083      	sub	sp, #12
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	4a04      	ldr	r2, [pc, #16]	; (801491c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	601a      	str	r2, [r3, #0]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	370c      	adds	r7, #12
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr
 801491c:	0802a3d4 	.word	0x0802a3d4

08014920 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	4618      	mov	r0, r3
 801492c:	f7ff ffe8 	bl	8014900 <_ZN8touchgfx15TouchControllerC1Ev>
 8014930:	4a03      	ldr	r2, [pc, #12]	; (8014940 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	601a      	str	r2, [r3, #0]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	4618      	mov	r0, r3
 801493a:	3708      	adds	r7, #8
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}
 8014940:	0802a3bc 	.word	0x0802a3bc

08014944 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8014944:	b590      	push	{r4, r7, lr}
 8014946:	b085      	sub	sp, #20
 8014948:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801494a:	f7fe f8d9 	bl	8012b00 <_ZN14BitmapDatabase11getInstanceEv>
 801494e:	4604      	mov	r4, r0
 8014950:	f7fe f8e0 	bl	8012b14 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014954:	4603      	mov	r3, r0
 8014956:	4619      	mov	r1, r3
 8014958:	2300      	movs	r3, #0
 801495a:	9300      	str	r3, [sp, #0]
 801495c:	2300      	movs	r3, #0
 801495e:	2200      	movs	r2, #0
 8014960:	4620      	mov	r0, r4
 8014962:	f009 f937 	bl	801dbd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8014966:	4809      	ldr	r0, [pc, #36]	; (801498c <touchgfx_init+0x48>)
 8014968:	f7ff fd44 	bl	80143f4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 801496c:	2000      	movs	r0, #0
 801496e:	f7fe fa0b 	bl	8012d88 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8014972:	4807      	ldr	r0, [pc, #28]	; (8014990 <touchgfx_init+0x4c>)
 8014974:	f009 f870 	bl	801da58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014978:	f7ff febc 	bl	80146f4 <_ZN12FrontendHeap11getInstanceEv>
 801497c:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 801497e:	4805      	ldr	r0, [pc, #20]	; (8014994 <touchgfx_init+0x50>)
 8014980:	f7fe ffea 	bl	8013958 <_ZN11TouchGFXHAL10initializeEv>
}
 8014984:	bf00      	nop
 8014986:	370c      	adds	r7, #12
 8014988:	46bd      	mov	sp, r7
 801498a:	bd90      	pop	{r4, r7, pc}
 801498c:	20006060 	.word	0x20006060
 8014990:	2000001c 	.word	0x2000001c
 8014994:	20006064 	.word	0x20006064

08014998 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014998:	b580      	push	{r7, lr}
 801499a:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 801499c:	4802      	ldr	r0, [pc, #8]	; (80149a8 <touchgfx_taskEntry+0x10>)
 801499e:	f001 fafe 	bl	8015f9e <_ZN8touchgfx3HAL9taskEntryEv>
}
 80149a2:	bf00      	nop
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	20006064 	.word	0x20006064

080149ac <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	4a10      	ldr	r2, [pc, #64]	; (80149f8 <_ZN12FrontendHeapD1Ev+0x4c>)
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	601a      	str	r2, [r3, #0]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f203 739c 	addw	r3, r3, #1948	; 0x79c
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fe fa93 	bl	8012eec <_ZN19FrontendApplicationD1Ev>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f203 7384 	addw	r3, r3, #1924	; 0x784
 80149cc:	4618      	mov	r0, r3
 80149ce:	f000 f827 	bl	8014a20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	332c      	adds	r3, #44	; 0x2c
 80149d6:	4618      	mov	r0, r3
 80149d8:	f000 f844 	bl	8014a64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	3314      	adds	r3, #20
 80149e0:	4618      	mov	r0, r3
 80149e2:	f000 f863 	bl	8014aac <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7ff feb1 	bl	8014750 <_ZN16FrontendHeapBaseD1Ev>
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	4618      	mov	r0, r3
 80149f2:	3708      	adds	r7, #8
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	0802a51c 	.word	0x0802a51c

080149fc <_ZN12FrontendHeapD0Ev>:
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f7ff ffd1 	bl	80149ac <_ZN12FrontendHeapD1Ev>
 8014a0a:	f640 01f4 	movw	r1, #2292	; 0x8f4
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f013 f8c3 	bl	8027b9a <_ZdlPvj>
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	4618      	mov	r0, r3
 8014a18:	3708      	adds	r7, #8
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
	...

08014a20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	4a05      	ldr	r2, [pc, #20]	; (8014a40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	601a      	str	r2, [r3, #0]
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	4618      	mov	r0, r3
 8014a32:	f000 fecd 	bl	80157d0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3708      	adds	r7, #8
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	0802a530 	.word	0x0802a530

08014a44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7ff ffe7 	bl	8014a20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014a52:	2114      	movs	r1, #20
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f013 f8a0 	bl	8027b9a <_ZdlPvj>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3708      	adds	r7, #8
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	4a05      	ldr	r2, [pc, #20]	; (8014a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	601a      	str	r2, [r3, #0]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	4618      	mov	r0, r3
 8014a76:	f000 feab 	bl	80157d0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3708      	adds	r7, #8
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}
 8014a84:	0802a564 	.word	0x0802a564

08014a88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f7ff ffe7 	bl	8014a64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014a96:	f44f 61eb 	mov.w	r1, #1880	; 0x758
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f013 f87d 	bl	8027b9a <_ZdlPvj>
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3708      	adds	r7, #8
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}
	...

08014aac <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b082      	sub	sp, #8
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	4a05      	ldr	r2, [pc, #20]	; (8014acc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	601a      	str	r2, [r3, #0]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	4618      	mov	r0, r3
 8014abe:	f000 fe87 	bl	80157d0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3708      	adds	r7, #8
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}
 8014acc:	0802a598 	.word	0x0802a598

08014ad0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f7ff ffe7 	bl	8014aac <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014ade:	2118      	movs	r1, #24
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	f013 f85a 	bl	8027b9a <_ZdlPvj>
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3708      	adds	r7, #8
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}

08014af0 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	4a05      	ldr	r2, [pc, #20]	; (8014b10 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	601a      	str	r2, [r3, #0]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7ff fcc7 	bl	8014494 <_ZN8touchgfx3LCDD1Ev>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3708      	adds	r7, #8
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}
 8014b10:	0802cdf8 	.word	0x0802cdf8

08014b14 <_ZN8touchgfx8LCD24bppD0Ev>:
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b082      	sub	sp, #8
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f7ff ffe7 	bl	8014af0 <_ZN8touchgfx8LCD24bppD1Ev>
 8014b22:	2158      	movs	r1, #88	; 0x58
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f013 f838 	bl	8027b9a <_ZdlPvj>
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3708      	adds	r7, #8
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <_Z41__static_initialization_and_destruction_0ii>:
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af02      	add	r7, sp, #8
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d119      	bne.n	8014b78 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	d114      	bne.n	8014b78 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014b4e:	4818      	ldr	r0, [pc, #96]	; (8014bb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014b50:	f7ff fee6 	bl	8014920 <_ZN20STM32TouchControllerC1Ev>
static STM32H7DMA dma;
 8014b54:	4817      	ldr	r0, [pc, #92]	; (8014bb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014b56:	f7ff f941 	bl	8013ddc <_ZN10STM32H7DMAC1Ev>
static LCD24bpp display;
 8014b5a:	4817      	ldr	r0, [pc, #92]	; (8014bb8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014b5c:	f00b fa8e 	bl	802007c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8014b60:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014b64:	9301      	str	r3, [sp, #4]
 8014b66:	f44f 7348 	mov.w	r3, #800	; 0x320
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	4b10      	ldr	r3, [pc, #64]	; (8014bb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014b6e:	4a12      	ldr	r2, [pc, #72]	; (8014bb8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014b70:	4910      	ldr	r1, [pc, #64]	; (8014bb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014b72:	4812      	ldr	r0, [pc, #72]	; (8014bbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014b74:	f7ff fea8 	bl	80148c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d113      	bne.n	8014ba6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b84:	4293      	cmp	r3, r2
 8014b86:	d10e      	bne.n	8014ba6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014b88:	480c      	ldr	r0, [pc, #48]	; (8014bbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014b8a:	f7fe ff5d 	bl	8013a48 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014b8e:	480c      	ldr	r0, [pc, #48]	; (8014bc0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014b90:	f7fb f906 	bl	800fda0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8014b94:	4808      	ldr	r0, [pc, #32]	; (8014bb8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014b96:	f7ff ffab 	bl	8014af0 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32H7DMA dma;
 8014b9a:	4806      	ldr	r0, [pc, #24]	; (8014bb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014b9c:	f7ff f948 	bl	8013e30 <_ZN10STM32H7DMAD1Ev>
static STM32TouchController tc;
 8014ba0:	4803      	ldr	r0, [pc, #12]	; (8014bb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014ba2:	f7fe fd3d 	bl	8013620 <_ZN20STM32TouchControllerD1Ev>
}
 8014ba6:	bf00      	nop
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	200053e4 	.word	0x200053e4
 8014bb4:	200053e8 	.word	0x200053e8
 8014bb8:	20006008 	.word	0x20006008
 8014bbc:	20006064 	.word	0x20006064
 8014bc0:	2000001c 	.word	0x2000001c

08014bc4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8014bc4:	b480      	push	{r7}
 8014bc6:	b083      	sub	sp, #12
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014bcc:	2301      	movs	r3, #1
    }
 8014bce:	4618      	mov	r0, r3
 8014bd0:	370c      	adds	r7, #12
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd8:	4770      	bx	lr

08014bda <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8014bda:	b480      	push	{r7}
 8014bdc:	b083      	sub	sp, #12
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014be2:	230c      	movs	r3, #12
    }
 8014be4:	4618      	mov	r0, r3
 8014be6:	370c      	adds	r7, #12
 8014be8:	46bd      	mov	sp, r7
 8014bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bee:	4770      	bx	lr

08014bf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8014bf0:	b480      	push	{r7}
 8014bf2:	b083      	sub	sp, #12
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014bfc:	887a      	ldrh	r2, [r7, #2]
 8014bfe:	4613      	mov	r3, r2
 8014c00:	005b      	lsls	r3, r3, #1
 8014c02:	4413      	add	r3, r2
 8014c04:	009b      	lsls	r3, r3, #2
 8014c06:	3308      	adds	r3, #8
 8014c08:	687a      	ldr	r2, [r7, #4]
 8014c0a:	4413      	add	r3, r2
    }
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	370c      	adds	r7, #12
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr

08014c18 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8014c18:	b480      	push	{r7}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	460b      	mov	r3, r1
 8014c22:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014c24:	887a      	ldrh	r2, [r7, #2]
 8014c26:	4613      	mov	r3, r2
 8014c28:	005b      	lsls	r3, r3, #1
 8014c2a:	4413      	add	r3, r2
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	3308      	adds	r3, #8
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	4413      	add	r3, r2
    }
 8014c34:	4618      	mov	r0, r3
 8014c36:	370c      	adds	r7, #12
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr

08014c40 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014c40:	b480      	push	{r7}
 8014c42:	b083      	sub	sp, #12
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014c48:	2301      	movs	r3, #1
    }
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	370c      	adds	r7, #12
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c54:	4770      	bx	lr

08014c56 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014c56:	b480      	push	{r7}
 8014c58:	b083      	sub	sp, #12
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014c5e:	f44f 63ea 	mov.w	r3, #1872	; 0x750
    }
 8014c62:	4618      	mov	r0, r3
 8014c64:	370c      	adds	r7, #12
 8014c66:	46bd      	mov	sp, r7
 8014c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6c:	4770      	bx	lr

08014c6e <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014c6e:	b480      	push	{r7}
 8014c70:	b083      	sub	sp, #12
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	6078      	str	r0, [r7, #4]
 8014c76:	460b      	mov	r3, r1
 8014c78:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014c7a:	887b      	ldrh	r3, [r7, #2]
 8014c7c:	f44f 62ea 	mov.w	r2, #1872	; 0x750
 8014c80:	fb02 f303 	mul.w	r3, r2, r3
 8014c84:	3308      	adds	r3, #8
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	4413      	add	r3, r2
    }
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	370c      	adds	r7, #12
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c94:	4770      	bx	lr

08014c96 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014c96:	b480      	push	{r7}
 8014c98:	b083      	sub	sp, #12
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014ca2:	887b      	ldrh	r3, [r7, #2]
 8014ca4:	f44f 62ea 	mov.w	r2, #1872	; 0x750
 8014ca8:	fb02 f303 	mul.w	r3, r2, r3
 8014cac:	3308      	adds	r3, #8
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	4413      	add	r3, r2
    }
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	370c      	adds	r7, #12
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbc:	4770      	bx	lr

08014cbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014cbe:	b480      	push	{r7}
 8014cc0:	b083      	sub	sp, #12
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014cc6:	2301      	movs	r3, #1
    }
 8014cc8:	4618      	mov	r0, r3
 8014cca:	370c      	adds	r7, #12
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr

08014cd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014cdc:	2310      	movs	r3, #16
    }
 8014cde:	4618      	mov	r0, r3
 8014ce0:	370c      	adds	r7, #12
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce8:	4770      	bx	lr

08014cea <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014cea:	b480      	push	{r7}
 8014cec:	b083      	sub	sp, #12
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
 8014cf2:	460b      	mov	r3, r1
 8014cf4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014cf6:	887b      	ldrh	r3, [r7, #2]
 8014cf8:	011b      	lsls	r3, r3, #4
 8014cfa:	3308      	adds	r3, #8
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	4413      	add	r3, r2
    }
 8014d00:	4618      	mov	r0, r3
 8014d02:	370c      	adds	r7, #12
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19MenuScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014d0c:	b480      	push	{r7}
 8014d0e:	b083      	sub	sp, #12
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	460b      	mov	r3, r1
 8014d16:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014d18:	887b      	ldrh	r3, [r7, #2]
 8014d1a:	011b      	lsls	r3, r3, #4
 8014d1c:	3308      	adds	r3, #8
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	4413      	add	r3, r2
    }
 8014d22:	4618      	mov	r0, r3
 8014d24:	370c      	adds	r7, #12
 8014d26:	46bd      	mov	sp, r7
 8014d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2c:	4770      	bx	lr

08014d2e <_GLOBAL__sub_I_touchgfx_init>:
 8014d2e:	b580      	push	{r7, lr}
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d36:	2001      	movs	r0, #1
 8014d38:	f7ff fefc 	bl	8014b34 <_Z41__static_initialization_and_destruction_0ii>
 8014d3c:	bd80      	pop	{r7, pc}

08014d3e <_GLOBAL__sub_D_touchgfx_init>:
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d46:	2000      	movs	r0, #0
 8014d48:	f7ff fef4 	bl	8014b34 <_Z41__static_initialization_and_destruction_0ii>
 8014d4c:	bd80      	pop	{r7, pc}

08014d4e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014d4e:	b580      	push	{r7, lr}
 8014d50:	b082      	sub	sp, #8
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	3318      	adds	r3, #24
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	4798      	blx	r3
    }
 8014d62:	bf00      	nop
 8014d64:	3708      	adds	r7, #8
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}

08014d6a <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8014d6a:	b480      	push	{r7}
 8014d6c:	b083      	sub	sp, #12
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	6078      	str	r0, [r7, #4]
 8014d72:	460b      	mov	r3, r1
 8014d74:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	78fa      	ldrb	r2, [r7, #3]
 8014d7a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014d7e:	bf00      	nop
 8014d80:	370c      	adds	r7, #12
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr

08014d8a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014d8a:	b480      	push	{r7}
 8014d8c:	b083      	sub	sp, #12
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014d98:	3301      	adds	r3, #1
 8014d9a:	b2da      	uxtb	r2, r3
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014da2:	bf00      	nop
 8014da4:	370c      	adds	r7, #12
 8014da6:	46bd      	mov	sp, r7
 8014da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dac:	4770      	bx	lr
	...

08014db0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b082      	sub	sp, #8
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	460b      	mov	r3, r1
 8014dba:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014dbc:	78fb      	ldrb	r3, [r7, #3]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d002      	beq.n	8014dc8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014dc2:	78fb      	ldrb	r3, [r7, #3]
 8014dc4:	2b02      	cmp	r3, #2
 8014dc6:	d105      	bne.n	8014dd4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	78fa      	ldrb	r2, [r7, #3]
 8014dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	e027      	b.n	8014e24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014dd4:	78fb      	ldrb	r3, [r7, #3]
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d123      	bne.n	8014e22 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d014      	beq.n	8014e0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	3380      	adds	r3, #128	; 0x80
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	4798      	blx	r3
 8014dee:	4603      	mov	r3, r0
 8014df0:	461a      	mov	r2, r3
 8014df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d008      	beq.n	8014e0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014dfa:	4b0c      	ldr	r3, [pc, #48]	; (8014e2c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014dfc:	781b      	ldrb	r3, [r3, #0]
 8014dfe:	f083 0301 	eor.w	r3, r3, #1
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d001      	beq.n	8014e0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014e08:	2301      	movs	r3, #1
 8014e0a:	e000      	b.n	8014e0e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d005      	beq.n	8014e1e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	78fa      	ldrb	r2, [r7, #3]
 8014e16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	e002      	b.n	8014e24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	e000      	b.n	8014e24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014e22:	2300      	movs	r3, #0
    }
 8014e24:	4618      	mov	r0, r3
 8014e26:	3708      	adds	r7, #8
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	200060f4 	.word	0x200060f4

08014e30 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8014e30:	b480      	push	{r7}
 8014e32:	b083      	sub	sp, #12
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	683a      	ldr	r2, [r7, #0]
 8014e3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014e40:	bf00      	nop
 8014e42:	370c      	adds	r7, #12
 8014e44:	46bd      	mov	sp, r7
 8014e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4a:	4770      	bx	lr

08014e4c <__NVIC_EnableIRQ>:
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b083      	sub	sp, #12
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	4603      	mov	r3, r0
 8014e54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	db0b      	blt.n	8014e76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014e5e:	88fb      	ldrh	r3, [r7, #6]
 8014e60:	f003 021f 	and.w	r2, r3, #31
 8014e64:	4907      	ldr	r1, [pc, #28]	; (8014e84 <__NVIC_EnableIRQ+0x38>)
 8014e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014e6a:	095b      	lsrs	r3, r3, #5
 8014e6c:	2001      	movs	r0, #1
 8014e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8014e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014e76:	bf00      	nop
 8014e78:	370c      	adds	r7, #12
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e80:	4770      	bx	lr
 8014e82:	bf00      	nop
 8014e84:	e000e100 	.word	0xe000e100

08014e88 <__NVIC_DisableIRQ>:
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b083      	sub	sp, #12
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	4603      	mov	r3, r0
 8014e90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	db12      	blt.n	8014ec0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014e9a:	88fb      	ldrh	r3, [r7, #6]
 8014e9c:	f003 021f 	and.w	r2, r3, #31
 8014ea0:	490a      	ldr	r1, [pc, #40]	; (8014ecc <__NVIC_DisableIRQ+0x44>)
 8014ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ea6:	095b      	lsrs	r3, r3, #5
 8014ea8:	2001      	movs	r0, #1
 8014eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8014eae:	3320      	adds	r3, #32
 8014eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014eb4:	f3bf 8f4f 	dsb	sy
}
 8014eb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014eba:	f3bf 8f6f 	isb	sy
}
 8014ebe:	bf00      	nop
}
 8014ec0:	bf00      	nop
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr
 8014ecc:	e000e100 	.word	0xe000e100

08014ed0 <__NVIC_SetPriority>:
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	6039      	str	r1, [r7, #0]
 8014eda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	db0a      	blt.n	8014efa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	b2da      	uxtb	r2, r3
 8014ee8:	490c      	ldr	r1, [pc, #48]	; (8014f1c <__NVIC_SetPriority+0x4c>)
 8014eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014eee:	0112      	lsls	r2, r2, #4
 8014ef0:	b2d2      	uxtb	r2, r2
 8014ef2:	440b      	add	r3, r1
 8014ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014ef8:	e00a      	b.n	8014f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	b2da      	uxtb	r2, r3
 8014efe:	4908      	ldr	r1, [pc, #32]	; (8014f20 <__NVIC_SetPriority+0x50>)
 8014f00:	88fb      	ldrh	r3, [r7, #6]
 8014f02:	f003 030f 	and.w	r3, r3, #15
 8014f06:	3b04      	subs	r3, #4
 8014f08:	0112      	lsls	r2, r2, #4
 8014f0a:	b2d2      	uxtb	r2, r2
 8014f0c:	440b      	add	r3, r1
 8014f0e:	761a      	strb	r2, [r3, #24]
}
 8014f10:	bf00      	nop
 8014f12:	370c      	adds	r7, #12
 8014f14:	46bd      	mov	sp, r7
 8014f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1a:	4770      	bx	lr
 8014f1c:	e000e100 	.word	0xe000e100
 8014f20:	e000ed00 	.word	0xe000ed00

08014f24 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014f24:	b5b0      	push	{r4, r5, r7, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f001 faf6 	bl	8016520 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8014f34:	687d      	ldr	r5, [r7, #4]
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	334c      	adds	r3, #76	; 0x4c
 8014f3c:	681c      	ldr	r4, [r3, #0]
 8014f3e:	f005 fbdb 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 8014f42:	4603      	mov	r3, r0
 8014f44:	4619      	mov	r1, r3
 8014f46:	4628      	mov	r0, r5
 8014f48:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	490d      	ldr	r1, [pc, #52]	; (8014f84 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7ff ff6e 	bl	8014e30 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2101      	movs	r1, #1
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7ff ff29 	bl	8014db0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	3370      	adds	r3, #112	; 0x70
 8014f66:	681c      	ldr	r4, [r3, #0]
 8014f68:	2300      	movs	r3, #0
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014f70:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2101      	movs	r1, #1
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7ff fef7 	bl	8014d6a <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014f7c:	bf00      	nop
 8014f7e:	3708      	adds	r7, #8
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bdb0      	pop	{r4, r5, r7, pc}
 8014f84:	08013ba9 	.word	0x08013ba9

08014f88 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014f90:	2109      	movs	r1, #9
 8014f92:	205a      	movs	r0, #90	; 0x5a
 8014f94:	f7ff ff9c 	bl	8014ed0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014f98:	2109      	movs	r1, #9
 8014f9a:	2058      	movs	r0, #88	; 0x58
 8014f9c:	f7ff ff98 	bl	8014ed0 <__NVIC_SetPriority>
}
 8014fa0:	bf00      	nop
 8014fa2:	3708      	adds	r7, #8
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}

08014fa8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014fb0:	205a      	movs	r0, #90	; 0x5a
 8014fb2:	f7ff ff4b 	bl	8014e4c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014fb6:	2058      	movs	r0, #88	; 0x58
 8014fb8:	f7ff ff48 	bl	8014e4c <__NVIC_EnableIRQ>
}
 8014fbc:	bf00      	nop
 8014fbe:	3708      	adds	r7, #8
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}

08014fc4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014fcc:	205a      	movs	r0, #90	; 0x5a
 8014fce:	f7ff ff5b 	bl	8014e88 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014fd2:	2058      	movs	r0, #88	; 0x58
 8014fd4:	f7ff ff58 	bl	8014e88 <__NVIC_DisableIRQ>
}
 8014fd8:	bf00      	nop
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014fe8:	4b11      	ldr	r3, [pc, #68]	; (8015030 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014fea:	68db      	ldr	r3, [r3, #12]
 8014fec:	b29b      	uxth	r3, r3
 8014fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	3b01      	subs	r3, #1
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	4b0e      	ldr	r3, [pc, #56]	; (8015034 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014ffa:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014ffc:	4b0c      	ldr	r3, [pc, #48]	; (8015030 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014ffe:	691b      	ldr	r3, [r3, #16]
 8015000:	b29b      	uxth	r3, r3
 8015002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015006:	b29b      	uxth	r3, r3
 8015008:	3b01      	subs	r3, #1
 801500a:	b29a      	uxth	r2, r3
 801500c:	4b0a      	ldr	r3, [pc, #40]	; (8015038 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801500e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015010:	4b08      	ldr	r3, [pc, #32]	; (8015034 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015012:	881a      	ldrh	r2, [r3, #0]
 8015014:	4b06      	ldr	r3, [pc, #24]	; (8015030 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015016:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015018:	4b05      	ldr	r3, [pc, #20]	; (8015030 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801501c:	4a04      	ldr	r2, [pc, #16]	; (8015030 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801501e:	f043 0301 	orr.w	r3, r3, #1
 8015022:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015024:	bf00      	nop
 8015026:	370c      	adds	r7, #12
 8015028:	46bd      	mov	sp, r7
 801502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502e:	4770      	bx	lr
 8015030:	50001000 	.word	0x50001000
 8015034:	200060e0 	.word	0x200060e0
 8015038:	200060e2 	.word	0x200060e2

0801503c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801503c:	b480      	push	{r7}
 801503e:	b083      	sub	sp, #12
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015044:	4b03      	ldr	r3, [pc, #12]	; (8015054 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8015046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015048:	4618      	mov	r0, r3
 801504a:	370c      	adds	r7, #12
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr
 8015054:	50001084 	.word	0x50001084

08015058 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015058:	b480      	push	{r7}
 801505a:	b083      	sub	sp, #12
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015062:	4a06      	ldr	r2, [pc, #24]	; (801507c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015068:	4b05      	ldr	r3, [pc, #20]	; (8015080 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801506a:	2201      	movs	r2, #1
 801506c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801506e:	bf00      	nop
 8015070:	370c      	adds	r7, #12
 8015072:	46bd      	mov	sp, r7
 8015074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015078:	4770      	bx	lr
 801507a:	bf00      	nop
 801507c:	50001084 	.word	0x50001084
 8015080:	50001000 	.word	0x50001000

08015084 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b086      	sub	sp, #24
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6839      	ldr	r1, [r7, #0]
 8015092:	4618      	mov	r0, r3
 8015094:	f000 ff59 	bl	8015f4a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015098:	4b20      	ldr	r3, [pc, #128]	; (801511c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 801509a:	2200      	movs	r2, #0
 801509c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80150a0:	f3bf 8f4f 	dsb	sy
}
 80150a4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80150a6:	4b1d      	ldr	r3, [pc, #116]	; (801511c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 80150a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150ac:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	0b5b      	lsrs	r3, r3, #13
 80150b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80150b6:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	08db      	lsrs	r3, r3, #3
 80150bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80150c0:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80150c2:	693b      	ldr	r3, [r7, #16]
 80150c4:	015a      	lsls	r2, r3, #5
 80150c6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80150ca:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80150cc:	68fa      	ldr	r2, [r7, #12]
 80150ce:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80150d0:	4912      	ldr	r1, [pc, #72]	; (801511c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 80150d2:	4313      	orrs	r3, r2
 80150d4:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	1e5a      	subs	r2, r3, #1
 80150dc:	60fa      	str	r2, [r7, #12]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	bf14      	ite	ne
 80150e2:	2301      	movne	r3, #1
 80150e4:	2300      	moveq	r3, #0
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d000      	beq.n	80150ee <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 80150ec:	e7e9      	b.n	80150c2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	1e5a      	subs	r2, r3, #1
 80150f2:	613a      	str	r2, [r7, #16]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	bf14      	ite	ne
 80150f8:	2301      	movne	r3, #1
 80150fa:	2300      	moveq	r3, #0
 80150fc:	b2db      	uxtb	r3, r3
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d000      	beq.n	8015104 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8015102:	e7d9      	b.n	80150b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8015104:	f3bf 8f4f 	dsb	sy
}
 8015108:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801510a:	f3bf 8f6f 	isb	sy
}
 801510e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8015110:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8015112:	bf00      	nop
 8015114:	3718      	adds	r7, #24
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}
 801511a:	bf00      	nop
 801511c:	e000ed00 	.word	0xe000ed00

08015120 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	607a      	str	r2, [r7, #4]
 801512c:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	68b9      	ldr	r1, [r7, #8]
 8015136:	f001 f83c 	bl	80161b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801513a:	4603      	mov	r3, r0
}
 801513c:	4618      	mov	r0, r3
 801513e:	3710      	adds	r7, #16
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}

08015144 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015144:	b480      	push	{r7}
 8015146:	b085      	sub	sp, #20
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801514c:	4b0d      	ldr	r3, [pc, #52]	; (8015184 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015150:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015152:	4b0c      	ldr	r3, [pc, #48]	; (8015184 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015154:	68db      	ldr	r3, [r3, #12]
 8015156:	b29b      	uxth	r3, r3
 8015158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801515c:	b29b      	uxth	r3, r3
 801515e:	3301      	adds	r3, #1
 8015160:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8015162:	89fa      	ldrh	r2, [r7, #14]
 8015164:	89bb      	ldrh	r3, [r7, #12]
 8015166:	429a      	cmp	r2, r3
 8015168:	d304      	bcc.n	8015174 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 801516a:	89fa      	ldrh	r2, [r7, #14]
 801516c:	89bb      	ldrh	r3, [r7, #12]
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	b29b      	uxth	r3, r3
 8015172:	e000      	b.n	8015176 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8015174:	2300      	movs	r3, #0
}
 8015176:	4618      	mov	r0, r3
 8015178:	3714      	adds	r7, #20
 801517a:	46bd      	mov	sp, r7
 801517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015180:	4770      	bx	lr
 8015182:	bf00      	nop
 8015184:	50001000 	.word	0x50001000

08015188 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8015188:	b480      	push	{r7}
 801518a:	b087      	sub	sp, #28
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015190:	4b21      	ldr	r3, [pc, #132]	; (8015218 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015192:	2200      	movs	r2, #0
 8015194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015198:	f3bf 8f4f 	dsb	sy
}
 801519c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 801519e:	4b1e      	ldr	r3, [pc, #120]	; (8015218 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 80151a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151a4:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	0b5b      	lsrs	r3, r3, #13
 80151aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80151ae:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	08db      	lsrs	r3, r3, #3
 80151b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80151b8:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	015a      	lsls	r2, r3, #5
 80151be:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80151c2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80151c4:	68fa      	ldr	r2, [r7, #12]
 80151c6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80151c8:	4913      	ldr	r1, [pc, #76]	; (8015218 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 80151ca:	4313      	orrs	r3, r2
 80151cc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	1e5a      	subs	r2, r3, #1
 80151d4:	60fa      	str	r2, [r7, #12]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	bf14      	ite	ne
 80151da:	2301      	movne	r3, #1
 80151dc:	2300      	moveq	r3, #0
 80151de:	b2db      	uxtb	r3, r3
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d000      	beq.n	80151e6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x5e>
      do {
 80151e4:	e7e9      	b.n	80151ba <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x32>
    } while(sets-- != 0U);
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	1e5a      	subs	r2, r3, #1
 80151ea:	613a      	str	r2, [r7, #16]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	bf14      	ite	ne
 80151f0:	2301      	movne	r3, #1
 80151f2:	2300      	moveq	r3, #0
 80151f4:	b2db      	uxtb	r3, r3
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d000      	beq.n	80151fc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
    do {
 80151fa:	e7d9      	b.n	80151b0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 80151fc:	f3bf 8f4f 	dsb	sy
}
 8015200:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015202:	f3bf 8f6f 	isb	sy
}
 8015206:	bf00      	nop
}
 8015208:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 801520a:	bf00      	nop
 801520c:	371c      	adds	r7, #28
 801520e:	46bd      	mov	sp, r7
 8015210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015214:	4770      	bx	lr
 8015216:	bf00      	nop
 8015218:	e000ed00 	.word	0xe000ed00

0801521c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 801521c:	b480      	push	{r7}
 801521e:	b087      	sub	sp, #28
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015224:	4b21      	ldr	r3, [pc, #132]	; (80152ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8015226:	2200      	movs	r2, #0
 8015228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801522c:	f3bf 8f4f 	dsb	sy
}
 8015230:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8015232:	4b1e      	ldr	r3, [pc, #120]	; (80152ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8015234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015238:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801523a:	697b      	ldr	r3, [r7, #20]
 801523c:	0b5b      	lsrs	r3, r3, #13
 801523e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015242:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	08db      	lsrs	r3, r3, #3
 8015248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801524c:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801524e:	693b      	ldr	r3, [r7, #16]
 8015250:	015a      	lsls	r2, r3, #5
 8015252:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015256:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015258:	68fa      	ldr	r2, [r7, #12]
 801525a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801525c:	4913      	ldr	r1, [pc, #76]	; (80152ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 801525e:	4313      	orrs	r3, r2
 8015260:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	1e5a      	subs	r2, r3, #1
 8015268:	60fa      	str	r2, [r7, #12]
 801526a:	2b00      	cmp	r3, #0
 801526c:	bf14      	ite	ne
 801526e:	2301      	movne	r3, #1
 8015270:	2300      	moveq	r3, #0
 8015272:	b2db      	uxtb	r3, r3
 8015274:	2b00      	cmp	r3, #0
 8015276:	d000      	beq.n	801527a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x5e>
      do {
 8015278:	e7e9      	b.n	801524e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x32>
    } while(sets-- != 0U);
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	1e5a      	subs	r2, r3, #1
 801527e:	613a      	str	r2, [r7, #16]
 8015280:	2b00      	cmp	r3, #0
 8015282:	bf14      	ite	ne
 8015284:	2301      	movne	r3, #1
 8015286:	2300      	moveq	r3, #0
 8015288:	b2db      	uxtb	r3, r3
 801528a:	2b00      	cmp	r3, #0
 801528c:	d000      	beq.n	8015290 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
    do {
 801528e:	e7d9      	b.n	8015244 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8015290:	f3bf 8f4f 	dsb	sy
}
 8015294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015296:	f3bf 8f6f 	isb	sy
}
 801529a:	bf00      	nop
}
 801529c:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 801529e:	bf00      	nop
 80152a0:	371c      	adds	r7, #28
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr
 80152aa:	bf00      	nop
 80152ac:	e000ed00 	.word	0xe000ed00

080152b0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80152b8:	4b1a      	ldr	r3, [pc, #104]	; (8015324 <HAL_LTDC_LineEventCallback+0x74>)
 80152ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152bc:	4a1a      	ldr	r2, [pc, #104]	; (8015328 <HAL_LTDC_LineEventCallback+0x78>)
 80152be:	8812      	ldrh	r2, [r2, #0]
 80152c0:	4293      	cmp	r3, r2
 80152c2:	bf0c      	ite	eq
 80152c4:	2301      	moveq	r3, #1
 80152c6:	2300      	movne	r3, #0
 80152c8:	b2db      	uxtb	r3, r3
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d017      	beq.n	80152fe <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80152ce:	4b17      	ldr	r3, [pc, #92]	; (801532c <HAL_LTDC_LineEventCallback+0x7c>)
 80152d0:	881b      	ldrh	r3, [r3, #0]
 80152d2:	4619      	mov	r1, r3
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f7ee ff8b 	bl	80041f0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80152da:	f7fb f919 	bl	8010510 <_ZN8touchgfx3HAL11getInstanceEv>
 80152de:	4603      	mov	r3, r0
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7ff fd52 	bl	8014d8a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80152e6:	f7fe fc37 	bl	8013b58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80152ea:	f7fb f911 	bl	8010510 <_ZN8touchgfx3HAL11getInstanceEv>
 80152ee:	4603      	mov	r3, r0
 80152f0:	4618      	mov	r0, r3
 80152f2:	f001 fb9d 	bl	8016a30 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80152f6:	2000      	movs	r0, #0
 80152f8:	f7fe f9b4 	bl	8013664 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80152fc:	e00e      	b.n	801531c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80152fe:	4b0a      	ldr	r3, [pc, #40]	; (8015328 <HAL_LTDC_LineEventCallback+0x78>)
 8015300:	881b      	ldrh	r3, [r3, #0]
 8015302:	4619      	mov	r1, r3
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f7ee ff73 	bl	80041f0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801530a:	2000      	movs	r0, #0
 801530c:	f7fe f9b5 	bl	801367a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015310:	f7fb f8fe 	bl	8010510 <_ZN8touchgfx3HAL11getInstanceEv>
 8015314:	4603      	mov	r3, r0
 8015316:	4618      	mov	r0, r3
 8015318:	f7ff fd19 	bl	8014d4e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 801531c:	bf00      	nop
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	50001000 	.word	0x50001000
 8015328:	200060e0 	.word	0x200060e0
 801532c:	200060e2 	.word	0x200060e2

08015330 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b08a      	sub	sp, #40	; 0x28
 8015334:	af04      	add	r7, sp, #16
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	4608      	mov	r0, r1
 801533a:	4611      	mov	r1, r2
 801533c:	461a      	mov	r2, r3
 801533e:	4603      	mov	r3, r0
 8015340:	72fb      	strb	r3, [r7, #11]
 8015342:	460b      	mov	r3, r1
 8015344:	813b      	strh	r3, [r7, #8]
 8015346:	4613      	mov	r3, r2
 8015348:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 801534a:	2300      	movs	r3, #0
 801534c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 801534e:	7afb      	ldrb	r3, [r7, #11]
 8015350:	b299      	uxth	r1, r3
 8015352:	88f8      	ldrh	r0, [r7, #6]
 8015354:	893a      	ldrh	r2, [r7, #8]
 8015356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801535a:	9302      	str	r3, [sp, #8]
 801535c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801535e:	9301      	str	r3, [sp, #4]
 8015360:	6a3b      	ldr	r3, [r7, #32]
 8015362:	9300      	str	r3, [sp, #0]
 8015364:	4603      	mov	r3, r0
 8015366:	68f8      	ldr	r0, [r7, #12]
 8015368:	f7ee f9ae 	bl	80036c8 <HAL_I2C_Mem_Read>
 801536c:	4603      	mov	r3, r0
 801536e:	75fb      	strb	r3, [r7, #23]
  if(status != HAL_OK)
  {
    /* I2C error occurred */
    //I2Cx_Error(i2c_handler, Addr);
  }
  return status;
 8015370:	7dfb      	ldrb	r3, [r7, #23]
}
 8015372:	4618      	mov	r0, r3
 8015374:	3718      	adds	r7, #24
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 801537a:	b580      	push	{r7, lr}
 801537c:	b08a      	sub	sp, #40	; 0x28
 801537e:	af04      	add	r7, sp, #16
 8015380:	60f8      	str	r0, [r7, #12]
 8015382:	4608      	mov	r0, r1
 8015384:	4611      	mov	r1, r2
 8015386:	461a      	mov	r2, r3
 8015388:	4603      	mov	r3, r0
 801538a:	72fb      	strb	r3, [r7, #11]
 801538c:	460b      	mov	r3, r1
 801538e:	813b      	strh	r3, [r7, #8]
 8015390:	4613      	mov	r3, r2
 8015392:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8015394:	2300      	movs	r3, #0
 8015396:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8015398:	7afb      	ldrb	r3, [r7, #11]
 801539a:	b299      	uxth	r1, r3
 801539c:	88f8      	ldrh	r0, [r7, #6]
 801539e:	893a      	ldrh	r2, [r7, #8]
 80153a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153a4:	9302      	str	r3, [sp, #8]
 80153a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153a8:	9301      	str	r3, [sp, #4]
 80153aa:	6a3b      	ldr	r3, [r7, #32]
 80153ac:	9300      	str	r3, [sp, #0]
 80153ae:	4603      	mov	r3, r0
 80153b0:	68f8      	ldr	r0, [r7, #12]
 80153b2:	f7ee f875 	bl	80034a0 <HAL_I2C_Mem_Write>
 80153b6:	4603      	mov	r3, r0
 80153b8:	75fb      	strb	r3, [r7, #23]
  if(status != HAL_OK)
  {
    /* Re-Initiaize the I2C Bus */
    //I2Cx_Error(i2c_handler, Addr);
  }
  return status;
 80153ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3718      	adds	r7, #24
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}

080153c4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint16_t Reg, uint8_t Value)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b084      	sub	sp, #16
 80153c8:	af02      	add	r7, sp, #8
 80153ca:	4603      	mov	r3, r0
 80153cc:	71fb      	strb	r3, [r7, #7]
 80153ce:	460b      	mov	r3, r1
 80153d0:	80bb      	strh	r3, [r7, #4]
 80153d2:	4613      	mov	r3, r2
 80153d4:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 1);
 80153d6:	88ba      	ldrh	r2, [r7, #4]
 80153d8:	79f9      	ldrb	r1, [r7, #7]
 80153da:	2301      	movs	r3, #1
 80153dc:	9301      	str	r3, [sp, #4]
 80153de:	1dbb      	adds	r3, r7, #6
 80153e0:	9300      	str	r3, [sp, #0]
 80153e2:	2302      	movs	r3, #2
 80153e4:	4803      	ldr	r0, [pc, #12]	; (80153f4 <TS_IO_Write+0x30>)
 80153e6:	f7ff ffc8 	bl	801537a <I2Cx_WriteMultiple>
}
 80153ea:	bf00      	nop
 80153ec:	3708      	adds	r7, #8
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}
 80153f2:	bf00      	nop
 80153f4:	200063e8 	.word	0x200063e8

080153f8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b086      	sub	sp, #24
 80153fc:	af02      	add	r7, sp, #8
 80153fe:	4603      	mov	r3, r0
 8015400:	460a      	mov	r2, r1
 8015402:	71fb      	strb	r3, [r7, #7]
 8015404:	4613      	mov	r3, r2
 8015406:	80bb      	strh	r3, [r7, #4]
  uint8_t read_value = 0;
 8015408:	2300      	movs	r3, #0
 801540a:	73fb      	strb	r3, [r7, #15]
  I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 1);
 801540c:	88ba      	ldrh	r2, [r7, #4]
 801540e:	79f9      	ldrb	r1, [r7, #7]
 8015410:	2301      	movs	r3, #1
 8015412:	9301      	str	r3, [sp, #4]
 8015414:	f107 030f 	add.w	r3, r7, #15
 8015418:	9300      	str	r3, [sp, #0]
 801541a:	2302      	movs	r3, #2
 801541c:	4803      	ldr	r0, [pc, #12]	; (801542c <TS_IO_Read+0x34>)
 801541e:	f7ff ff87 	bl	8015330 <I2Cx_ReadMultiple>
  return read_value;
 8015422:	7bfb      	ldrb	r3, [r7, #15]
}
 8015424:	4618      	mov	r0, r3
 8015426:	3710      	adds	r7, #16
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}
 801542c:	200063e8 	.word	0x200063e8

08015430 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f7ed f9b5 	bl	80027a8 <HAL_Delay>
}
 801543e:	bf00      	nop
 8015440:	3708      	adds	r7, #8
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}
	...

08015448 <gt911_TS_Start>:
 * @retval None.
 */
uint16_t max_l=0, max_m=0;
uint16_t config_ver = 0;
void gt911_TS_Start(uint16_t DeviceAddr)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b0b2      	sub	sp, #200	; 0xc8
 801544c:	af00      	add	r7, sp, #0
 801544e:	4603      	mov	r3, r0
 8015450:	80fb      	strh	r3, [r7, #6]
	uint8_t CTP_CFG_GT911[] =  {
 8015452:	4a4d      	ldr	r2, [pc, #308]	; (8015588 <gt911_TS_Start+0x140>)
 8015454:	f107 0308 	add.w	r3, r7, #8
 8015458:	4611      	mov	r1, r2
 801545a:	22ba      	movs	r2, #186	; 0xba
 801545c:	4618      	mov	r0, r3
 801545e:	f012 fded 	bl	802803c <memcpy>
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x24,0x01
	};//186
	//uint8_t teste[2] = {0, 0};
	/* Minimum static configuration of GT911 */
	gt911_TS_Configure(DeviceAddr);
 8015462:	88fb      	ldrh	r3, [r7, #6]
 8015464:	4618      	mov	r0, r3
 8015466:	f000 f921 	bl	80156ac <gt911_TS_Configure>

	/* By default set GT911 IC in Polling mode : no INT generation on GT911 for new touch available */
	/* Note TS_INT is active low                                                                      */
	//gt911_TS_DisableIT(DeviceAddr);

	uint8_t chksum = 0;
 801546a:	2300      	movs	r3, #0
 801546c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	config_ver = TS_IO_Read(DeviceAddr, 0x8047);
 8015470:	88fb      	ldrh	r3, [r7, #6]
 8015472:	b2db      	uxtb	r3, r3
 8015474:	f248 0147 	movw	r1, #32839	; 0x8047
 8015478:	4618      	mov	r0, r3
 801547a:	f7ff ffbd 	bl	80153f8 <TS_IO_Read>
 801547e:	4603      	mov	r3, r0
 8015480:	b29a      	uxth	r2, r3
 8015482:	4b42      	ldr	r3, [pc, #264]	; (801558c <gt911_TS_Start+0x144>)
 8015484:	801a      	strh	r2, [r3, #0]
	TS_IO_Write(DeviceAddr, 0x8047, config_ver+1);
 8015486:	88fb      	ldrh	r3, [r7, #6]
 8015488:	b2d8      	uxtb	r0, r3
 801548a:	4b40      	ldr	r3, [pc, #256]	; (801558c <gt911_TS_Start+0x144>)
 801548c:	881b      	ldrh	r3, [r3, #0]
 801548e:	b2db      	uxtb	r3, r3
 8015490:	3301      	adds	r3, #1
 8015492:	b2db      	uxtb	r3, r3
 8015494:	461a      	mov	r2, r3
 8015496:	f248 0147 	movw	r1, #32839	; 0x8047
 801549a:	f7ff ff93 	bl	80153c4 <TS_IO_Write>
	//	//Reads current touch number register velue:
	//	touch_number = TS_IO_Read(DeviceAddr, 0x804C);

	//Writes the number of touch points config register:
	TS_IO_Write(DeviceAddr, 0x804C, 0x01);
 801549e:	88fb      	ldrh	r3, [r7, #6]
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	2201      	movs	r2, #1
 80154a4:	f248 014c 	movw	r1, #32844	; 0x804c
 80154a8:	4618      	mov	r0, r3
 80154aa:	f7ff ff8b 	bl	80153c4 <TS_IO_Write>

	TS_IO_Write(DeviceAddr, 0x8048, 0x20);
 80154ae:	88fb      	ldrh	r3, [r7, #6]
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	2220      	movs	r2, #32
 80154b4:	f248 0148 	movw	r1, #32840	; 0x8048
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7ff ff83 	bl	80153c4 <TS_IO_Write>
	TS_IO_Write(DeviceAddr, 0x8049, 0x03);
 80154be:	88fb      	ldrh	r3, [r7, #6]
 80154c0:	b2db      	uxtb	r3, r3
 80154c2:	2203      	movs	r2, #3
 80154c4:	f248 0149 	movw	r1, #32841	; 0x8049
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7ff ff7b 	bl	80153c4 <TS_IO_Write>
	TS_IO_Write(DeviceAddr, 0x804A, 0xE0);
 80154ce:	88fb      	ldrh	r3, [r7, #6]
 80154d0:	b2db      	uxtb	r3, r3
 80154d2:	22e0      	movs	r2, #224	; 0xe0
 80154d4:	f248 014a 	movw	r1, #32842	; 0x804a
 80154d8:	4618      	mov	r0, r3
 80154da:	f7ff ff73 	bl	80153c4 <TS_IO_Write>
	TS_IO_Write(DeviceAddr, 0x804B, 0x01);
 80154de:	88fb      	ldrh	r3, [r7, #6]
 80154e0:	b2db      	uxtb	r3, r3
 80154e2:	2201      	movs	r2, #1
 80154e4:	f248 014b 	movw	r1, #32843	; 0x804b
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7ff ff6b 	bl	80153c4 <TS_IO_Write>

	//Calculates new checksum:
	for(uint16_t reg = 0x8047; reg <= 0x80FE; ++reg)
 80154ee:	f248 0347 	movw	r3, #32839	; 0x8047
 80154f2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80154f6:	e013      	b.n	8015520 <gt911_TS_Start+0xd8>
	{
		chksum += TS_IO_Read(DeviceAddr, reg);
 80154f8:	88fb      	ldrh	r3, [r7, #6]
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8015500:	4611      	mov	r1, r2
 8015502:	4618      	mov	r0, r3
 8015504:	f7ff ff78 	bl	80153f8 <TS_IO_Read>
 8015508:	4603      	mov	r3, r0
 801550a:	461a      	mov	r2, r3
 801550c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8015510:	4413      	add	r3, r2
 8015512:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	for(uint16_t reg = 0x8047; reg <= 0x80FE; ++reg)
 8015516:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 801551a:	3301      	adds	r3, #1
 801551c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8015520:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8015524:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8015528:	4293      	cmp	r3, r2
 801552a:	d9e5      	bls.n	80154f8 <gt911_TS_Start+0xb0>
	}
	chksum = ~chksum +1;
 801552c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8015530:	425b      	negs	r3, r3
 8015532:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	TS_IO_Write(DeviceAddr, 0x80FF, chksum);
 8015536:	88fb      	ldrh	r3, [r7, #6]
 8015538:	b2db      	uxtb	r3, r3
 801553a:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 801553e:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8015542:	4618      	mov	r0, r3
 8015544:	f7ff ff3e 	bl	80153c4 <TS_IO_Write>
	TS_IO_Write(DeviceAddr, 0x8100, 0x01);
 8015548:	88fb      	ldrh	r3, [r7, #6]
 801554a:	b2db      	uxtb	r3, r3
 801554c:	2201      	movs	r2, #1
 801554e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8015552:	4618      	mov	r0, r3
 8015554:	f7ff ff36 	bl	80153c4 <TS_IO_Write>

	TS_IO_Write(DeviceAddr, 0x8041, 0x00);
 8015558:	88fb      	ldrh	r3, [r7, #6]
 801555a:	b2db      	uxtb	r3, r3
 801555c:	2200      	movs	r2, #0
 801555e:	f248 0141 	movw	r1, #32833	; 0x8041
 8015562:	4618      	mov	r0, r3
 8015564:	f7ff ff2e 	bl	80153c4 <TS_IO_Write>

	TS_IO_Delay(10);
 8015568:	200a      	movs	r0, #10
 801556a:	f7ff ff61 	bl	8015430 <TS_IO_Delay>

	//Cleans the status register for the new touch read
	TS_IO_Write(DeviceAddr, GT911_TP_STAT_REG, 0);
 801556e:	88fb      	ldrh	r3, [r7, #6]
 8015570:	b2db      	uxtb	r3, r3
 8015572:	2200      	movs	r2, #0
 8015574:	f248 114e 	movw	r1, #33102	; 0x814e
 8015578:	4618      	mov	r0, r3
 801557a:	f7ff ff23 	bl	80153c4 <TS_IO_Write>

	/* By default set GT911 IC in Polling mode : no INT generation on GT911 for new touch available */
	/* Note TS_INT is active low                                                                      */
	//gt911_TS_DisableIT(DeviceAddr);
}
 801557e:	bf00      	nop
 8015580:	37c8      	adds	r7, #200	; 0xc8
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	08029c40 	.word	0x08029c40
 801558c:	200060e6 	.word	0x200060e6

08015590 <gt911_TS_DetectTouch>:
 */

uint8_t coordinates[4] = {0, 0, 0, 0};

uint8_t gt911_TS_DetectTouch(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b086      	sub	sp, #24
 8015594:	af00      	add	r7, sp, #0
 8015596:	4603      	mov	r3, r0
 8015598:	60b9      	str	r1, [r7, #8]
 801559a:	607a      	str	r2, [r7, #4]
 801559c:	81fb      	strh	r3, [r7, #14]
	volatile uint8_t nbTouch = 0;
 801559e:	2300      	movs	r3, #0
 80155a0:	75fb      	strb	r3, [r7, #23]
	volatile uint8_t touch_status = 0;
 80155a2:	2300      	movs	r3, #0
 80155a4:	75bb      	strb	r3, [r7, #22]
	volatile uint8_t ucReadData = 0;
 80155a6:	2300      	movs	r3, #0
 80155a8:	757b      	strb	r3, [r7, #21]
	static uint16_t coord;

	//Read register GT911_TD_STAT_REG to check number of touches detection
	touch_status = TS_IO_Read(DeviceAddr, GT911_TP_STAT_REG);
 80155aa:	89fb      	ldrh	r3, [r7, #14]
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	f248 114e 	movw	r1, #33102	; 0x814e
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7ff ff20 	bl	80153f8 <TS_IO_Read>
 80155b8:	4603      	mov	r3, r0
 80155ba:	75bb      	strb	r3, [r7, #22]
	//touch_status = TS_IO_Read(DeviceAddr, 0x81A8);
	nbTouch = touch_status & GT911_4LSB_MASK; //Just the 4 LSB refers to active touch points
 80155bc:	7dbb      	ldrb	r3, [r7, #22]
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	f003 030f 	and.w	r3, r3, #15
 80155c4:	b2db      	uxtb	r3, r3
 80155c6:	75fb      	strb	r3, [r7, #23]

	if(touch_status)
 80155c8:	7dbb      	ldrb	r3, [r7, #22]
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d05f      	beq.n	8015690 <gt911_TS_DetectTouch+0x100>
	{
		ucReadData = TS_IO_Read(DeviceAddr, 0x8150);
 80155d0:	89fb      	ldrh	r3, [r7, #14]
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	f248 1150 	movw	r1, #33104	; 0x8150
 80155d8:	4618      	mov	r0, r3
 80155da:	f7ff ff0d 	bl	80153f8 <TS_IO_Read>
 80155de:	4603      	mov	r3, r0
 80155e0:	757b      	strb	r3, [r7, #21]
		coord = (ucReadData & GT911_TOUCH_POS_LSB_MASK) >> GT911_TOUCH_POS_LSB_SHIFT;
 80155e2:	7d7b      	ldrb	r3, [r7, #21]
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	4b2e      	ldr	r3, [pc, #184]	; (80156a4 <gt911_TS_DetectTouch+0x114>)
 80155ea:	801a      	strh	r2, [r3, #0]
		/* Read high part of X position */
		ucReadData = TS_IO_Read(DeviceAddr, 0x8151);
 80155ec:	89fb      	ldrh	r3, [r7, #14]
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	f248 1151 	movw	r1, #33105	; 0x8151
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7ff feff 	bl	80153f8 <TS_IO_Read>
 80155fa:	4603      	mov	r3, r0
 80155fc:	757b      	strb	r3, [r7, #21]
		coord |= ((ucReadData & GT911_TOUCH_POS_MSB_MASK) >> GT911_TOUCH_POS_MSB_SHIFT) << 8;
 80155fe:	7d7b      	ldrb	r3, [r7, #21]
 8015600:	b2db      	uxtb	r3, r3
 8015602:	021b      	lsls	r3, r3, #8
 8015604:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8015608:	b21a      	sxth	r2, r3
 801560a:	4b26      	ldr	r3, [pc, #152]	; (80156a4 <gt911_TS_DetectTouch+0x114>)
 801560c:	881b      	ldrh	r3, [r3, #0]
 801560e:	b21b      	sxth	r3, r3
 8015610:	4313      	orrs	r3, r2
 8015612:	b21b      	sxth	r3, r3
 8015614:	b29a      	uxth	r2, r3
 8015616:	4b23      	ldr	r3, [pc, #140]	; (80156a4 <gt911_TS_DetectTouch+0x114>)
 8015618:	801a      	strh	r2, [r3, #0]
		/* Send back ready X position to caller */
		*X = coord;
 801561a:	4b22      	ldr	r3, [pc, #136]	; (80156a4 <gt911_TS_DetectTouch+0x114>)
 801561c:	881a      	ldrh	r2, [r3, #0]
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	801a      	strh	r2, [r3, #0]

		/* Read low part of Y position */
		ucReadData = TS_IO_Read(DeviceAddr, 0x8152);
 8015622:	89fb      	ldrh	r3, [r7, #14]
 8015624:	b2db      	uxtb	r3, r3
 8015626:	f248 1152 	movw	r1, #33106	; 0x8152
 801562a:	4618      	mov	r0, r3
 801562c:	f7ff fee4 	bl	80153f8 <TS_IO_Read>
 8015630:	4603      	mov	r3, r0
 8015632:	757b      	strb	r3, [r7, #21]
		coord = (ucReadData & GT911_TOUCH_POS_LSB_MASK) >> GT911_TOUCH_POS_LSB_SHIFT;
 8015634:	7d7b      	ldrb	r3, [r7, #21]
 8015636:	b2db      	uxtb	r3, r3
 8015638:	b29a      	uxth	r2, r3
 801563a:	4b1a      	ldr	r3, [pc, #104]	; (80156a4 <gt911_TS_DetectTouch+0x114>)
 801563c:	801a      	strh	r2, [r3, #0]
		/* Read high part of Y position */
		ucReadData = TS_IO_Read(DeviceAddr, 0x8153);
 801563e:	89fb      	ldrh	r3, [r7, #14]
 8015640:	b2db      	uxtb	r3, r3
 8015642:	f248 1153 	movw	r1, #33107	; 0x8153
 8015646:	4618      	mov	r0, r3
 8015648:	f7ff fed6 	bl	80153f8 <TS_IO_Read>
 801564c:	4603      	mov	r3, r0
 801564e:	757b      	strb	r3, [r7, #21]
		coord |= ((ucReadData & GT911_TOUCH_POS_MSB_MASK) >> GT911_TOUCH_POS_MSB_SHIFT) << 8;
 8015650:	7d7b      	ldrb	r3, [r7, #21]
 8015652:	b2db      	uxtb	r3, r3
 8015654:	021b      	lsls	r3, r3, #8
 8015656:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801565a:	b21a      	sxth	r2, r3
 801565c:	4b11      	ldr	r3, [pc, #68]	; (80156a4 <gt911_TS_DetectTouch+0x114>)
 801565e:	881b      	ldrh	r3, [r3, #0]
 8015660:	b21b      	sxth	r3, r3
 8015662:	4313      	orrs	r3, r2
 8015664:	b21b      	sxth	r3, r3
 8015666:	b29a      	uxth	r2, r3
 8015668:	4b0e      	ldr	r3, [pc, #56]	; (80156a4 <gt911_TS_DetectTouch+0x114>)
 801566a:	801a      	strh	r2, [r3, #0]
		/* Send back ready Y position to caller */
		*Y = coord;
 801566c:	4b0d      	ldr	r3, [pc, #52]	; (80156a4 <gt911_TS_DetectTouch+0x114>)
 801566e:	881a      	ldrh	r2, [r3, #0]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	801a      	strh	r2, [r3, #0]

		//Cleans the status register for the new touch read
		TS_IO_Write(DeviceAddr, GT911_TP_STAT_REG, 0);
 8015674:	89fb      	ldrh	r3, [r7, #14]
 8015676:	b2db      	uxtb	r3, r3
 8015678:	2200      	movs	r2, #0
 801567a:	f248 114e 	movw	r1, #33102	; 0x814e
 801567e:	4618      	mov	r0, r3
 8015680:	f7ff fea0 	bl	80153c4 <TS_IO_Write>

		//Is data ready for reading and touch detected?
		if(nbTouch > 1)
 8015684:	7dfb      	ldrb	r3, [r7, #23]
 8015686:	b2db      	uxtb	r3, r3
 8015688:	2b01      	cmp	r3, #1
 801568a:	d901      	bls.n	8015690 <gt911_TS_DetectTouch+0x100>
		{
			nbTouch = 0;
 801568c:	2300      	movs	r3, #0
 801568e:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Update gt911 driver internal global : current number of active touches */
	gt911_ts_handle.currActiveTouchNb = nbTouch;
 8015690:	7dfb      	ldrb	r3, [r7, #23]
 8015692:	b2da      	uxtb	r2, r3
 8015694:	4b04      	ldr	r3, [pc, #16]	; (80156a8 <gt911_TS_DetectTouch+0x118>)
 8015696:	705a      	strb	r2, [r3, #1]

	return(nbTouch);
 8015698:	7dfb      	ldrb	r3, [r7, #23]
 801569a:	b2db      	uxtb	r3, r3
}
 801569c:	4618      	mov	r0, r3
 801569e:	3718      	adds	r7, #24
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	200060e8 	.word	0x200060e8
 80156a8:	200060e4 	.word	0x200060e4

080156ac <gt911_TS_Configure>:
 * @brief  Basic static configuration of TouchScreen
 * @param  DeviceAddr: GT911 Device address for communication on I2C Bus.
 * @retval Status GT911_STATUS_OK or GT911_STATUS_NOT_OK.
 */
static uint32_t gt911_TS_Configure(uint16_t DeviceAddr)
{
 80156ac:	b480      	push	{r7}
 80156ae:	b085      	sub	sp, #20
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	4603      	mov	r3, r0
 80156b4:	80fb      	strh	r3, [r7, #6]
	uint32_t status = GT911_STATUS_OK;
 80156b6:	2300      	movs	r3, #0
 80156b8:	60fb      	str	r3, [r7, #12]

	/* Nothing special to be done for GT911 */

	return(status);
 80156ba:	68fb      	ldr	r3, [r7, #12]
}
 80156bc:	4618      	mov	r0, r3
 80156be:	3714      	adds	r7, #20
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr

080156c8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80156c8:	8880      	ldrh	r0, [r0, #4]
 80156ca:	4770      	bx	lr

080156cc <_ZN8touchgfx17AbstractPartition5clearEv>:
 80156cc:	2300      	movs	r3, #0
 80156ce:	8083      	strh	r3, [r0, #4]
 80156d0:	4770      	bx	lr
	...

080156d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80156d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156d6:	6803      	ldr	r3, [r0, #0]
 80156d8:	460e      	mov	r6, r1
 80156da:	2100      	movs	r1, #0
 80156dc:	4605      	mov	r5, r0
 80156de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156e0:	4798      	blx	r3
 80156e2:	4604      	mov	r4, r0
 80156e4:	682b      	ldr	r3, [r5, #0]
 80156e6:	4628      	mov	r0, r5
 80156e8:	1b34      	subs	r4, r6, r4
 80156ea:	6a1b      	ldr	r3, [r3, #32]
 80156ec:	b2a4      	uxth	r4, r4
 80156ee:	4798      	blx	r3
 80156f0:	88ab      	ldrh	r3, [r5, #4]
 80156f2:	fbb4 f4f0 	udiv	r4, r4, r0
 80156f6:	42a3      	cmp	r3, r4
 80156f8:	d805      	bhi.n	8015706 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80156fa:	4b0e      	ldr	r3, [pc, #56]	; (8015734 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80156fc:	2120      	movs	r1, #32
 80156fe:	4a0e      	ldr	r2, [pc, #56]	; (8015738 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015700:	480e      	ldr	r0, [pc, #56]	; (801573c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8015702:	f012 fc1d 	bl	8027f40 <__assert_func>
 8015706:	682b      	ldr	r3, [r5, #0]
 8015708:	2100      	movs	r1, #0
 801570a:	4628      	mov	r0, r5
 801570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801570e:	4798      	blx	r3
 8015710:	682b      	ldr	r3, [r5, #0]
 8015712:	4607      	mov	r7, r0
 8015714:	4628      	mov	r0, r5
 8015716:	6a1b      	ldr	r3, [r3, #32]
 8015718:	4798      	blx	r3
 801571a:	1bf3      	subs	r3, r6, r7
 801571c:	b29b      	uxth	r3, r3
 801571e:	fbb3 f2f0 	udiv	r2, r3, r0
 8015722:	fb02 3010 	mls	r0, r2, r0, r3
 8015726:	b118      	cbz	r0, 8015730 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015728:	4b05      	ldr	r3, [pc, #20]	; (8015740 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801572a:	2121      	movs	r1, #33	; 0x21
 801572c:	4a02      	ldr	r2, [pc, #8]	; (8015738 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801572e:	e7e7      	b.n	8015700 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8015730:	4620      	mov	r0, r4
 8015732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015734:	0802a6a4 	.word	0x0802a6a4
 8015738:	0802a812 	.word	0x0802a812
 801573c:	0802a6b9 	.word	0x0802a6b9
 8015740:	0802a6e7 	.word	0x0802a6e7

08015744 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015744:	b538      	push	{r3, r4, r5, lr}
 8015746:	6803      	ldr	r3, [r0, #0]
 8015748:	460d      	mov	r5, r1
 801574a:	4604      	mov	r4, r0
 801574c:	6a1b      	ldr	r3, [r3, #32]
 801574e:	4798      	blx	r3
 8015750:	4285      	cmp	r5, r0
 8015752:	d905      	bls.n	8015760 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015754:	4b0c      	ldr	r3, [pc, #48]	; (8015788 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015756:	2132      	movs	r1, #50	; 0x32
 8015758:	4a0c      	ldr	r2, [pc, #48]	; (801578c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801575a:	480d      	ldr	r0, [pc, #52]	; (8015790 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801575c:	f012 fbf0 	bl	8027f40 <__assert_func>
 8015760:	6823      	ldr	r3, [r4, #0]
 8015762:	4620      	mov	r0, r4
 8015764:	88a5      	ldrh	r5, [r4, #4]
 8015766:	69db      	ldr	r3, [r3, #28]
 8015768:	4798      	blx	r3
 801576a:	4285      	cmp	r5, r0
 801576c:	d303      	bcc.n	8015776 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801576e:	4b09      	ldr	r3, [pc, #36]	; (8015794 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015770:	2133      	movs	r1, #51	; 0x33
 8015772:	4a06      	ldr	r2, [pc, #24]	; (801578c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015774:	e7f1      	b.n	801575a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015776:	6823      	ldr	r3, [r4, #0]
 8015778:	4620      	mov	r0, r4
 801577a:	88a1      	ldrh	r1, [r4, #4]
 801577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801577e:	4798      	blx	r3
 8015780:	88a3      	ldrh	r3, [r4, #4]
 8015782:	3301      	adds	r3, #1
 8015784:	80a3      	strh	r3, [r4, #4]
 8015786:	bd38      	pop	{r3, r4, r5, pc}
 8015788:	0802a761 	.word	0x0802a761
 801578c:	0802a855 	.word	0x0802a855
 8015790:	0802a6b9 	.word	0x0802a6b9
 8015794:	0802a778 	.word	0x0802a778

08015798 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015798:	b570      	push	{r4, r5, r6, lr}
 801579a:	6803      	ldr	r3, [r0, #0]
 801579c:	4616      	mov	r6, r2
 801579e:	4604      	mov	r4, r0
 80157a0:	460d      	mov	r5, r1
 80157a2:	6a1b      	ldr	r3, [r3, #32]
 80157a4:	4798      	blx	r3
 80157a6:	4286      	cmp	r6, r0
 80157a8:	d905      	bls.n	80157b6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80157aa:	4b06      	ldr	r3, [pc, #24]	; (80157c4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80157ac:	213c      	movs	r1, #60	; 0x3c
 80157ae:	4a06      	ldr	r2, [pc, #24]	; (80157c8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80157b0:	4806      	ldr	r0, [pc, #24]	; (80157cc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80157b2:	f012 fbc5 	bl	8027f40 <__assert_func>
 80157b6:	6823      	ldr	r3, [r4, #0]
 80157b8:	4629      	mov	r1, r5
 80157ba:	4620      	mov	r0, r4
 80157bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157c2:	4718      	bx	r3
 80157c4:	0802a761 	.word	0x0802a761
 80157c8:	0802a7c8 	.word	0x0802a7c8
 80157cc:	0802a6b9 	.word	0x0802a6b9

080157d0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80157d0:	4770      	bx	lr
	...

080157d4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80157d4:	4a02      	ldr	r2, [pc, #8]	; (80157e0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80157d6:	6002      	str	r2, [r0, #0]
 80157d8:	2200      	movs	r2, #0
 80157da:	8082      	strh	r2, [r0, #4]
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop
 80157e0:	0802a79c 	.word	0x0802a79c

080157e4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80157e4:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 80157e8:	4770      	bx	lr

080157ea <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80157ea:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80157ee:	4770      	bx	lr

080157f0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80157f0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80157f4:	4770      	bx	lr

080157f6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80157f6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 80157fa:	4770      	bx	lr

080157fc <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 80157fc:	b510      	push	{r4, lr}
 80157fe:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8015802:	600c      	str	r4, [r1, #0]
 8015804:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8015808:	6011      	str	r1, [r2, #0]
 801580a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 801580e:	801a      	strh	r2, [r3, #0]
 8015810:	9b02      	ldr	r3, [sp, #8]
 8015812:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8015816:	801a      	strh	r2, [r3, #0]
 8015818:	bd10      	pop	{r4, pc}

0801581a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 801581a:	b510      	push	{r4, lr}
 801581c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8015820:	600c      	str	r4, [r1, #0]
 8015822:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8015826:	6011      	str	r1, [r2, #0]
 8015828:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 801582c:	801a      	strh	r2, [r3, #0]
 801582e:	bd10      	pop	{r4, pc}

08015830 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8015830:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8015834:	600b      	str	r3, [r1, #0]
 8015836:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801583a:	6013      	str	r3, [r2, #0]
 801583c:	4770      	bx	lr

0801583e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 801583e:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8015842:	4770      	bx	lr

08015844 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8015844:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8015848:	4770      	bx	lr

0801584a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801584a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801584c:	460d      	mov	r5, r1
 801584e:	4614      	mov	r4, r2
 8015850:	9908      	ldr	r1, [sp, #32]
 8015852:	6802      	ldr	r2, [r0, #0]
 8015854:	9100      	str	r1, [sp, #0]
 8015856:	a902      	add	r1, sp, #8
 8015858:	f8d2 609c 	ldr.w	r6, [r2, #156]	; 0x9c
 801585c:	aa03      	add	r2, sp, #12
 801585e:	47b0      	blx	r6
 8015860:	9b02      	ldr	r3, [sp, #8]
 8015862:	802b      	strh	r3, [r5, #0]
 8015864:	9b03      	ldr	r3, [sp, #12]
 8015866:	8023      	strh	r3, [r4, #0]
 8015868:	b004      	add	sp, #16
 801586a:	bd70      	pop	{r4, r5, r6, pc}

0801586c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 801586c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801586e:	4614      	mov	r4, r2
 8015870:	6802      	ldr	r2, [r0, #0]
 8015872:	460d      	mov	r5, r1
 8015874:	4669      	mov	r1, sp
 8015876:	f8d2 60a0 	ldr.w	r6, [r2, #160]	; 0xa0
 801587a:	aa01      	add	r2, sp, #4
 801587c:	47b0      	blx	r6
 801587e:	9b00      	ldr	r3, [sp, #0]
 8015880:	802b      	strh	r3, [r5, #0]
 8015882:	9b01      	ldr	r3, [sp, #4]
 8015884:	8023      	strh	r3, [r4, #0]
 8015886:	b002      	add	sp, #8
 8015888:	bd70      	pop	{r4, r5, r6, pc}

0801588a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 801588a:	6803      	ldr	r3, [r0, #0]
 801588c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801588e:	460d      	mov	r5, r1
 8015890:	4614      	mov	r4, r2
 8015892:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015896:	aa01      	add	r2, sp, #4
 8015898:	4669      	mov	r1, sp
 801589a:	4798      	blx	r3
 801589c:	9b00      	ldr	r3, [sp, #0]
 801589e:	802b      	strh	r3, [r5, #0]
 80158a0:	9b01      	ldr	r3, [sp, #4]
 80158a2:	8023      	strh	r3, [r4, #0]
 80158a4:	b003      	add	sp, #12
 80158a6:	bd30      	pop	{r4, r5, pc}

080158a8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80158a8:	b570      	push	{r4, r5, r6, lr}
 80158aa:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80158ae:	4604      	mov	r4, r0
 80158b0:	4616      	mov	r6, r2
 80158b2:	428d      	cmp	r5, r1
 80158b4:	bfb8      	it	lt
 80158b6:	460d      	movlt	r5, r1
 80158b8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80158bc:	428d      	cmp	r5, r1
 80158be:	bfa8      	it	ge
 80158c0:	460d      	movge	r5, r1
 80158c2:	b99a      	cbnz	r2, 80158ec <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 80158c4:	6803      	ldr	r3, [r0, #0]
 80158c6:	4629      	mov	r1, r5
 80158c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80158cc:	4798      	blx	r3
 80158ce:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80158d2:	b338      	cbz	r0, 8015924 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 80158d4:	6803      	ldr	r3, [r0, #0]
 80158d6:	68db      	ldr	r3, [r3, #12]
 80158d8:	4798      	blx	r3
 80158da:	b318      	cbz	r0, 8015924 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 80158dc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80158e0:	4621      	mov	r1, r4
 80158e2:	6803      	ldr	r3, [r0, #0]
 80158e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158e8:	689b      	ldr	r3, [r3, #8]
 80158ea:	4718      	bx	r3
 80158ec:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	dd04      	ble.n	80158fe <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x56>
 80158f4:	f004 ff00 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 80158f8:	4621      	mov	r1, r4
 80158fa:	f004 ff35 	bl	801a768 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80158fe:	6823      	ldr	r3, [r4, #0]
 8015900:	4620      	mov	r0, r4
 8015902:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015906:	4798      	blx	r3
 8015908:	2300      	movs	r3, #0
 801590a:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 801590e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8015912:	e9c4 0526 	strd	r0, r5, [r4, #152]	; 0x98
 8015916:	f004 feef 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 801591a:	4621      	mov	r1, r4
 801591c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015920:	f004 bef0 	b.w	801a704 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8015924:	bd70      	pop	{r4, r5, r6, pc}

08015926 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015926:	b510      	push	{r4, lr}
 8015928:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801592c:	4604      	mov	r4, r0
 801592e:	4299      	cmp	r1, r3
 8015930:	bfb8      	it	lt
 8015932:	4619      	movlt	r1, r3
 8015934:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8015938:	4299      	cmp	r1, r3
 801593a:	bfa8      	it	ge
 801593c:	4619      	movge	r1, r3
 801593e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8015942:	428b      	cmp	r3, r1
 8015944:	d010      	beq.n	8015968 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015946:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 801594a:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 801594e:	b158      	cbz	r0, 8015968 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015950:	6803      	ldr	r3, [r0, #0]
 8015952:	68db      	ldr	r3, [r3, #12]
 8015954:	4798      	blx	r3
 8015956:	b138      	cbz	r0, 8015968 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015958:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 801595c:	4621      	mov	r1, r4
 801595e:	6803      	ldr	r3, [r0, #0]
 8015960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015964:	689b      	ldr	r3, [r3, #8]
 8015966:	4718      	bx	r3
 8015968:	bd10      	pop	{r4, pc}
	...

0801596c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 801596c:	4291      	cmp	r1, r2
 801596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015972:	4604      	mov	r4, r0
 8015974:	460e      	mov	r6, r1
 8015976:	4615      	mov	r5, r2
 8015978:	4698      	mov	r8, r3
 801597a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801597e:	db05      	blt.n	801598c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8015980:	4b11      	ldr	r3, [pc, #68]	; (80159c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8015982:	2149      	movs	r1, #73	; 0x49
 8015984:	4a11      	ldr	r2, [pc, #68]	; (80159cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8015986:	4812      	ldr	r0, [pc, #72]	; (80159d0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8015988:	f012 fada 	bl	8027f40 <__assert_func>
 801598c:	6803      	ldr	r3, [r0, #0]
 801598e:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8015992:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8015996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801599a:	4798      	blx	r3
 801599c:	f1b8 0f00 	cmp.w	r8, #0
 80159a0:	d10c      	bne.n	80159bc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 80159a2:	1bad      	subs	r5, r5, r6
 80159a4:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 80159a8:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 80159ac:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 80159b0:	42bb      	cmp	r3, r7
 80159b2:	d806      	bhi.n	80159c2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 80159b4:	4b07      	ldr	r3, [pc, #28]	; (80159d4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 80159b6:	2156      	movs	r1, #86	; 0x56
 80159b8:	4a04      	ldr	r2, [pc, #16]	; (80159cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80159ba:	e7e4      	b.n	8015986 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 80159bc:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 80159c0:	e7f2      	b.n	80159a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 80159c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159c6:	bf00      	nop
 80159c8:	0802a893 	.word	0x0802a893
 80159cc:	0802a9e0 	.word	0x0802a9e0
 80159d0:	0802a89d 	.word	0x0802a89d
 80159d4:	0802a8f4 	.word	0x0802a8f4

080159d8 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 80159d8:	b570      	push	{r4, r5, r6, lr}
 80159da:	4604      	mov	r4, r0
 80159dc:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 80159e0:	2100      	movs	r1, #0
 80159e2:	3001      	adds	r0, #1
 80159e4:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 80159e8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80159ec:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 80159f0:	b280      	uxth	r0, r0
 80159f2:	1ad2      	subs	r2, r2, r3
 80159f4:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80159f8:	b212      	sxth	r2, r2
 80159fa:	47a8      	blx	r5
 80159fc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8015a00:	6823      	ldr	r3, [r4, #0]
 8015a02:	4401      	add	r1, r0
 8015a04:	4620      	mov	r0, r4
 8015a06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015a0a:	4798      	blx	r3
 8015a0c:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 8015a10:	429a      	cmp	r2, r3
 8015a12:	db16      	blt.n	8015a42 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015a14:	2300      	movs	r3, #0
 8015a16:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
 8015a1a:	f004 fe6d 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 8015a1e:	4621      	mov	r1, r4
 8015a20:	f004 fea2 	bl	801a768 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8015a24:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015a28:	b158      	cbz	r0, 8015a42 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015a2a:	6803      	ldr	r3, [r0, #0]
 8015a2c:	68db      	ldr	r3, [r3, #12]
 8015a2e:	4798      	blx	r3
 8015a30:	b138      	cbz	r0, 8015a42 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015a32:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015a36:	4621      	mov	r1, r4
 8015a38:	6803      	ldr	r3, [r0, #0]
 8015a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a3e:	689b      	ldr	r3, [r3, #8]
 8015a40:	4718      	bx	r3
 8015a42:	bd70      	pop	{r4, r5, r6, pc}

08015a44 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8015a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a46:	4604      	mov	r4, r0
 8015a48:	460d      	mov	r5, r1
 8015a4a:	b1a9      	cbz	r1, 8015a78 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8015a4c:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8015a50:	ab01      	add	r3, sp, #4
 8015a52:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8015a56:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8015a5a:	1b89      	subs	r1, r1, r6
 8015a5c:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8015a60:	1a12      	subs	r2, r2, r0
 8015a62:	1a38      	subs	r0, r7, r0
 8015a64:	f005 ffcc 	bl	801ba00 <_ZN8touchgfx6muldivElllRl>
 8015a68:	4629      	mov	r1, r5
 8015a6a:	ab01      	add	r3, sp, #4
 8015a6c:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8015a70:	4430      	add	r0, r6
 8015a72:	f005 ffc5 	bl	801ba00 <_ZN8touchgfx6muldivElllRl>
 8015a76:	b285      	uxth	r5, r0
 8015a78:	4628      	mov	r0, r5
 8015a7a:	b003      	add	sp, #12
 8015a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a7e <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8015a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a82:	4604      	mov	r4, r0
 8015a84:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8015a88:	4698      	mov	r8, r3
 8015a8a:	460e      	mov	r6, r1
 8015a8c:	4615      	mov	r5, r2
 8015a8e:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8015a92:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015a96:	4619      	mov	r1, r3
 8015a98:	463a      	mov	r2, r7
 8015a9a:	3058      	adds	r0, #88	; 0x58
 8015a9c:	f7fb fcf7 	bl	801148e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015aa0:	4446      	add	r6, r8
 8015aa2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015aa6:	443d      	add	r5, r7
 8015aa8:	42b3      	cmp	r3, r6
 8015aaa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015aae:	bfb8      	it	lt
 8015ab0:	8126      	strhlt	r6, [r4, #8]
 8015ab2:	42ab      	cmp	r3, r5
 8015ab4:	bfb8      	it	lt
 8015ab6:	8165      	strhlt	r5, [r4, #10]
 8015ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015abc <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8015abc:	b510      	push	{r4, lr}
 8015abe:	4604      	mov	r4, r0
 8015ac0:	302c      	adds	r0, #44	; 0x2c
 8015ac2:	f003 f919 	bl	8018cf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015ac6:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8015aca:	4620      	mov	r0, r4
 8015acc:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8015ad0:	f7fb fcdd 	bl	801148e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015ad4:	bd10      	pop	{r4, pc}
	...

08015ad8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015ad8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015adc:	4604      	mov	r4, r0
 8015ade:	2500      	movs	r5, #0
 8015ae0:	f7fb fb5c 	bl	801119c <_ZN8touchgfx8DrawableC1Ev>
 8015ae4:	4b23      	ldr	r3, [pc, #140]	; (8015b74 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8015ae6:	4626      	mov	r6, r4
 8015ae8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8015aec:	af02      	add	r7, sp, #8
 8015aee:	2226      	movs	r2, #38	; 0x26
 8015af0:	4629      	mov	r1, r5
 8015af2:	62a5      	str	r5, [r4, #40]	; 0x28
 8015af4:	f846 3b2c 	str.w	r3, [r6], #44
 8015af8:	4630      	mov	r0, r6
 8015afa:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8015afe:	f012 faab 	bl	8028058 <memset>
 8015b02:	4630      	mov	r0, r6
 8015b04:	f7fb fb4a 	bl	801119c <_ZN8touchgfx8DrawableC1Ev>
 8015b08:	4b1b      	ldr	r3, [pc, #108]	; (8015b78 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8015b0a:	4639      	mov	r1, r7
 8015b0c:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015b10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015b12:	4630      	mov	r0, r6
 8015b14:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8015b18:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8015b1c:	f003 f8ec 	bl	8018cf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015b20:	4638      	mov	r0, r7
 8015b22:	f7fb fb3b 	bl	801119c <_ZN8touchgfx8DrawableC1Ev>
 8015b26:	4b15      	ldr	r3, [pc, #84]	; (8015b7c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8015b28:	4629      	mov	r1, r5
 8015b2a:	4630      	mov	r0, r6
 8015b2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8015b2e:	2364      	movs	r3, #100	; 0x64
 8015b30:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8015b34:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8015b38:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8015b3c:	4b10      	ldr	r3, [pc, #64]	; (8015b80 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8015b3e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8015b42:	e9c4 3525 	strd	r3, r5, [r4, #148]	; 0x94
 8015b46:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8015b4a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8015b4e:	f7fb fb73 	bl	8011238 <_ZN8touchgfx8Drawable4setXEs>
 8015b52:	4629      	mov	r1, r5
 8015b54:	4630      	mov	r0, r6
 8015b56:	f7fb fb7e 	bl	8011256 <_ZN8touchgfx8Drawable4setYEs>
 8015b5a:	4631      	mov	r1, r6
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f000 f8a9 	bl	8015cb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015b62:	4620      	mov	r0, r4
 8015b64:	4639      	mov	r1, r7
 8015b66:	f000 f8a5 	bl	8015cb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	b002      	add	sp, #8
 8015b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b72:	bf00      	nop
 8015b74:	0802a918 	.word	0x0802a918
 8015b78:	0802bbcc 	.word	0x0802bbcc
 8015b7c:	0802ab0c 	.word	0x0802ab0c
 8015b80:	0801c11f 	.word	0x0801c11f

08015b84 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015b84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015b86:	2000      	movs	r0, #0
 8015b88:	b12b      	cbz	r3, 8015b96 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015b8a:	b920      	cbnz	r0, 8015b96 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015b8c:	1a5a      	subs	r2, r3, r1
 8015b8e:	699b      	ldr	r3, [r3, #24]
 8015b90:	4250      	negs	r0, r2
 8015b92:	4150      	adcs	r0, r2
 8015b94:	e7f8      	b.n	8015b88 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015b96:	4770      	bx	lr

08015b98 <_ZN8touchgfx9Container9removeAllEv>:
 8015b98:	2200      	movs	r2, #0
 8015b9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015b9c:	b123      	cbz	r3, 8015ba8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015b9e:	6999      	ldr	r1, [r3, #24]
 8015ba0:	6281      	str	r1, [r0, #40]	; 0x28
 8015ba2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015ba6:	e7f8      	b.n	8015b9a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015ba8:	4770      	bx	lr

08015baa <_ZN8touchgfx9Container6unlinkEv>:
 8015baa:	2300      	movs	r3, #0
 8015bac:	6283      	str	r3, [r0, #40]	; 0x28
 8015bae:	4770      	bx	lr

08015bb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bb4:	461f      	mov	r7, r3
 8015bb6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015bba:	460d      	mov	r5, r1
 8015bbc:	4616      	mov	r6, r2
 8015bbe:	b103      	cbz	r3, 8015bc2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015bc0:	6038      	str	r0, [r7, #0]
 8015bc2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015bc4:	b314      	cbz	r4, 8015c0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015bc6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015bca:	b1eb      	cbz	r3, 8015c08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015bcc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015bd0:	428d      	cmp	r5, r1
 8015bd2:	db19      	blt.n	8015c08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015bd4:	b289      	uxth	r1, r1
 8015bd6:	8923      	ldrh	r3, [r4, #8]
 8015bd8:	440b      	add	r3, r1
 8015bda:	b21b      	sxth	r3, r3
 8015bdc:	429d      	cmp	r5, r3
 8015bde:	da13      	bge.n	8015c08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015be0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015be4:	4296      	cmp	r6, r2
 8015be6:	db0f      	blt.n	8015c08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015be8:	b292      	uxth	r2, r2
 8015bea:	8963      	ldrh	r3, [r4, #10]
 8015bec:	4413      	add	r3, r2
 8015bee:	b21b      	sxth	r3, r3
 8015bf0:	429e      	cmp	r6, r3
 8015bf2:	da09      	bge.n	8015c08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	1ab2      	subs	r2, r6, r2
 8015bf8:	1a69      	subs	r1, r5, r1
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015c00:	b212      	sxth	r2, r2
 8015c02:	463b      	mov	r3, r7
 8015c04:	b209      	sxth	r1, r1
 8015c06:	47c0      	blx	r8
 8015c08:	69a4      	ldr	r4, [r4, #24]
 8015c0a:	e7db      	b.n	8015bc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c10 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015c10:	2200      	movs	r2, #0
 8015c12:	8002      	strh	r2, [r0, #0]
 8015c14:	8042      	strh	r2, [r0, #2]
 8015c16:	8082      	strh	r2, [r0, #4]
 8015c18:	80c2      	strh	r2, [r0, #6]
 8015c1a:	4770      	bx	lr

08015c1c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015c1c:	b570      	push	{r4, r5, r6, lr}
 8015c1e:	460d      	mov	r5, r1
 8015c20:	4616      	mov	r6, r2
 8015c22:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c24:	b13c      	cbz	r4, 8015c36 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015c26:	6823      	ldr	r3, [r4, #0]
 8015c28:	4620      	mov	r0, r4
 8015c2a:	4632      	mov	r2, r6
 8015c2c:	4629      	mov	r1, r5
 8015c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c30:	4798      	blx	r3
 8015c32:	69a4      	ldr	r4, [r4, #24]
 8015c34:	e7f6      	b.n	8015c24 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015c36:	bd70      	pop	{r4, r5, r6, pc}

08015c38 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015c38:	b538      	push	{r3, r4, r5, lr}
 8015c3a:	460d      	mov	r5, r1
 8015c3c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c3e:	b134      	cbz	r4, 8015c4e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015c40:	682b      	ldr	r3, [r5, #0]
 8015c42:	4621      	mov	r1, r4
 8015c44:	4628      	mov	r0, r5
 8015c46:	689b      	ldr	r3, [r3, #8]
 8015c48:	4798      	blx	r3
 8015c4a:	69a4      	ldr	r4, [r4, #24]
 8015c4c:	e7f7      	b.n	8015c3e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015c4e:	bd38      	pop	{r3, r4, r5, pc}

08015c50 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015c50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015c52:	b19b      	cbz	r3, 8015c7c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015c54:	428b      	cmp	r3, r1
 8015c56:	d109      	bne.n	8015c6c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015c58:	699a      	ldr	r2, [r3, #24]
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	6159      	str	r1, [r3, #20]
 8015c5e:	6282      	str	r2, [r0, #40]	; 0x28
 8015c60:	b902      	cbnz	r2, 8015c64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015c62:	4770      	bx	lr
 8015c64:	6199      	str	r1, [r3, #24]
 8015c66:	4770      	bx	lr
 8015c68:	4613      	mov	r3, r2
 8015c6a:	b13a      	cbz	r2, 8015c7c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015c6c:	699a      	ldr	r2, [r3, #24]
 8015c6e:	428a      	cmp	r2, r1
 8015c70:	d1fa      	bne.n	8015c68 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015c72:	698a      	ldr	r2, [r1, #24]
 8015c74:	619a      	str	r2, [r3, #24]
 8015c76:	2300      	movs	r3, #0
 8015c78:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015c7c:	4770      	bx	lr

08015c7e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015c7e:	b410      	push	{r4}
 8015c80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015c82:	4604      	mov	r4, r0
 8015c84:	b92b      	cbnz	r3, 8015c92 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015c86:	6803      	ldr	r3, [r0, #0]
 8015c88:	4611      	mov	r1, r2
 8015c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c90:	4718      	bx	r3
 8015c92:	b941      	cbnz	r1, 8015ca6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015c94:	6193      	str	r3, [r2, #24]
 8015c96:	6282      	str	r2, [r0, #40]	; 0x28
 8015c98:	6154      	str	r4, [r2, #20]
 8015c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c9e:	4770      	bx	lr
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	d0f9      	beq.n	8015c9a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015ca6:	4299      	cmp	r1, r3
 8015ca8:	6998      	ldr	r0, [r3, #24]
 8015caa:	d1f9      	bne.n	8015ca0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015cac:	6190      	str	r0, [r2, #24]
 8015cae:	618a      	str	r2, [r1, #24]
 8015cb0:	e7f2      	b.n	8015c98 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015cb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015cb4:	4288      	cmp	r0, r1
 8015cb6:	b508      	push	{r3, lr}
 8015cb8:	d105      	bne.n	8015cc6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015cba:	4b11      	ldr	r3, [pc, #68]	; (8015d00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015cbc:	2123      	movs	r1, #35	; 0x23
 8015cbe:	4a11      	ldr	r2, [pc, #68]	; (8015d04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015cc0:	4811      	ldr	r0, [pc, #68]	; (8015d08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015cc2:	f012 f93d 	bl	8027f40 <__assert_func>
 8015cc6:	694b      	ldr	r3, [r1, #20]
 8015cc8:	b11b      	cbz	r3, 8015cd2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015cca:	4b10      	ldr	r3, [pc, #64]	; (8015d0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015ccc:	2124      	movs	r1, #36	; 0x24
 8015cce:	4a0d      	ldr	r2, [pc, #52]	; (8015d04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015cd0:	e7f6      	b.n	8015cc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015cd2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015cd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015cd8:	b913      	cbnz	r3, 8015ce0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015cda:	6281      	str	r1, [r0, #40]	; 0x28
 8015cdc:	bd08      	pop	{r3, pc}
 8015cde:	4613      	mov	r3, r2
 8015ce0:	699a      	ldr	r2, [r3, #24]
 8015ce2:	b12a      	cbz	r2, 8015cf0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015ce4:	428b      	cmp	r3, r1
 8015ce6:	d1fa      	bne.n	8015cde <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015ce8:	4b09      	ldr	r3, [pc, #36]	; (8015d10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015cea:	2135      	movs	r1, #53	; 0x35
 8015cec:	4a05      	ldr	r2, [pc, #20]	; (8015d04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015cee:	e7e7      	b.n	8015cc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015cf0:	428b      	cmp	r3, r1
 8015cf2:	d103      	bne.n	8015cfc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015cf4:	4b06      	ldr	r3, [pc, #24]	; (8015d10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015cf6:	2138      	movs	r1, #56	; 0x38
 8015cf8:	4a02      	ldr	r2, [pc, #8]	; (8015d04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015cfa:	e7e1      	b.n	8015cc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015cfc:	6199      	str	r1, [r3, #24]
 8015cfe:	e7ed      	b.n	8015cdc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015d00:	0802aa39 	.word	0x0802aa39
 8015d04:	0802ab8c 	.word	0x0802ab8c
 8015d08:	0802aa65 	.word	0x0802aa65
 8015d0c:	0802aa98 	.word	0x0802aa98
 8015d10:	0802aace 	.word	0x0802aace

08015d14 <_ZN8touchgfx4RectaNERKS0_>:
 8015d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d18:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015d1c:	888c      	ldrh	r4, [r1, #4]
 8015d1e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015d22:	443c      	add	r4, r7
 8015d24:	b2a4      	uxth	r4, r4
 8015d26:	fa0f f884 	sxth.w	r8, r4
 8015d2a:	45c1      	cmp	r9, r8
 8015d2c:	da2f      	bge.n	8015d8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015d2e:	8882      	ldrh	r2, [r0, #4]
 8015d30:	444a      	add	r2, r9
 8015d32:	b292      	uxth	r2, r2
 8015d34:	fa0f fe82 	sxth.w	lr, r2
 8015d38:	4577      	cmp	r7, lr
 8015d3a:	da28      	bge.n	8015d8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015d3c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015d40:	88cb      	ldrh	r3, [r1, #6]
 8015d42:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015d46:	442b      	add	r3, r5
 8015d48:	b21b      	sxth	r3, r3
 8015d4a:	429e      	cmp	r6, r3
 8015d4c:	da1f      	bge.n	8015d8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015d4e:	88c3      	ldrh	r3, [r0, #6]
 8015d50:	4433      	add	r3, r6
 8015d52:	b29b      	uxth	r3, r3
 8015d54:	fa0f fc83 	sxth.w	ip, r3
 8015d58:	4565      	cmp	r5, ip
 8015d5a:	da18      	bge.n	8015d8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015d5c:	454f      	cmp	r7, r9
 8015d5e:	bfb8      	it	lt
 8015d60:	464f      	movlt	r7, r9
 8015d62:	42b5      	cmp	r5, r6
 8015d64:	bfb8      	it	lt
 8015d66:	4635      	movlt	r5, r6
 8015d68:	45f0      	cmp	r8, lr
 8015d6a:	bfd8      	it	le
 8015d6c:	4622      	movle	r2, r4
 8015d6e:	1bd2      	subs	r2, r2, r7
 8015d70:	8082      	strh	r2, [r0, #4]
 8015d72:	884a      	ldrh	r2, [r1, #2]
 8015d74:	88c9      	ldrh	r1, [r1, #6]
 8015d76:	8007      	strh	r7, [r0, #0]
 8015d78:	440a      	add	r2, r1
 8015d7a:	8045      	strh	r5, [r0, #2]
 8015d7c:	b292      	uxth	r2, r2
 8015d7e:	b211      	sxth	r1, r2
 8015d80:	458c      	cmp	ip, r1
 8015d82:	bfa8      	it	ge
 8015d84:	4613      	movge	r3, r2
 8015d86:	1b5b      	subs	r3, r3, r5
 8015d88:	80c3      	strh	r3, [r0, #6]
 8015d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d8e:	2300      	movs	r3, #0
 8015d90:	8003      	strh	r3, [r0, #0]
 8015d92:	8043      	strh	r3, [r0, #2]
 8015d94:	8083      	strh	r3, [r0, #4]
 8015d96:	80c3      	strh	r3, [r0, #6]
 8015d98:	e7f7      	b.n	8015d8a <_ZN8touchgfx4RectaNERKS0_+0x76>

08015d9a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015d9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	dd06      	ble.n	8015db0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015da2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015da6:	2800      	cmp	r0, #0
 8015da8:	bfcc      	ite	gt
 8015daa:	2000      	movgt	r0, #0
 8015dac:	2001      	movle	r0, #1
 8015dae:	4770      	bx	lr
 8015db0:	2001      	movs	r0, #1
 8015db2:	4770      	bx	lr

08015db4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015db8:	2300      	movs	r3, #0
 8015dba:	4604      	mov	r4, r0
 8015dbc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015dbe:	8003      	strh	r3, [r0, #0]
 8015dc0:	8043      	strh	r3, [r0, #2]
 8015dc2:	8083      	strh	r3, [r0, #4]
 8015dc4:	80c3      	strh	r3, [r0, #6]
 8015dc6:	2d00      	cmp	r5, #0
 8015dc8:	d040      	beq.n	8015e4c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015dca:	1d28      	adds	r0, r5, #4
 8015dcc:	f7ff ffe5 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015dd0:	b988      	cbnz	r0, 8015df6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	f7ff ffe1 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015dd8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015ddc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015de0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015de4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015de8:	b138      	cbz	r0, 8015dfa <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015dea:	8022      	strh	r2, [r4, #0]
 8015dec:	8063      	strh	r3, [r4, #2]
 8015dee:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015df2:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015df6:	69ad      	ldr	r5, [r5, #24]
 8015df8:	e7e5      	b.n	8015dc6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015dfa:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015dfe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015e02:	4290      	cmp	r0, r2
 8015e04:	4607      	mov	r7, r0
 8015e06:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015e0a:	460e      	mov	r6, r1
 8015e0c:	bfa8      	it	ge
 8015e0e:	4617      	movge	r7, r2
 8015e10:	4299      	cmp	r1, r3
 8015e12:	4472      	add	r2, lr
 8015e14:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015e18:	bfa8      	it	ge
 8015e1a:	461e      	movge	r6, r3
 8015e1c:	4440      	add	r0, r8
 8015e1e:	4471      	add	r1, lr
 8015e20:	4463      	add	r3, ip
 8015e22:	b200      	sxth	r0, r0
 8015e24:	8027      	strh	r7, [r4, #0]
 8015e26:	b212      	sxth	r2, r2
 8015e28:	8066      	strh	r6, [r4, #2]
 8015e2a:	b209      	sxth	r1, r1
 8015e2c:	b21b      	sxth	r3, r3
 8015e2e:	4290      	cmp	r0, r2
 8015e30:	bfac      	ite	ge
 8015e32:	ebc7 0200 	rsbge	r2, r7, r0
 8015e36:	ebc7 0202 	rsblt	r2, r7, r2
 8015e3a:	4299      	cmp	r1, r3
 8015e3c:	bfac      	ite	ge
 8015e3e:	ebc6 0301 	rsbge	r3, r6, r1
 8015e42:	ebc6 0303 	rsblt	r3, r6, r3
 8015e46:	80a2      	strh	r2, [r4, #4]
 8015e48:	80e3      	strh	r3, [r4, #6]
 8015e4a:	e7d4      	b.n	8015df6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e52 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015e52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015e56:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015e5a:	b383      	cbz	r3, 8015ebe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015e5c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015e5e:	b374      	cbz	r4, 8015ebe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015e60:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015e64:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015e68:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015e6c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015e70:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015e74:	b303      	cbz	r3, 8015eb8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015e76:	4668      	mov	r0, sp
 8015e78:	1d21      	adds	r1, r4, #4
 8015e7a:	f8ad 5000 	strh.w	r5, [sp]
 8015e7e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015e82:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015e86:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015e8a:	f7ff ff43 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 8015e8e:	4668      	mov	r0, sp
 8015e90:	f7ff ff83 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015e94:	b980      	cbnz	r0, 8015eb8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015e96:	f8bd 3000 	ldrh.w	r3, [sp]
 8015e9a:	4669      	mov	r1, sp
 8015e9c:	88a2      	ldrh	r2, [r4, #4]
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	1a9b      	subs	r3, r3, r2
 8015ea2:	88e2      	ldrh	r2, [r4, #6]
 8015ea4:	f8ad 3000 	strh.w	r3, [sp]
 8015ea8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015eac:	1a9b      	subs	r3, r3, r2
 8015eae:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015eb2:	6823      	ldr	r3, [r4, #0]
 8015eb4:	689b      	ldr	r3, [r3, #8]
 8015eb6:	4798      	blx	r3
 8015eb8:	69a4      	ldr	r4, [r4, #24]
 8015eba:	2c00      	cmp	r4, #0
 8015ebc:	d1d8      	bne.n	8015e70 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015ebe:	b002      	add	sp, #8
 8015ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ec4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ec6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015eca:	460d      	mov	r5, r1
 8015ecc:	4616      	mov	r6, r2
 8015ece:	b323      	cbz	r3, 8015f1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015ed0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015ed2:	b314      	cbz	r4, 8015f1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015ed4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015ed8:	b1eb      	cbz	r3, 8015f16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015eda:	6828      	ldr	r0, [r5, #0]
 8015edc:	466b      	mov	r3, sp
 8015ede:	6869      	ldr	r1, [r5, #4]
 8015ee0:	c303      	stmia	r3!, {r0, r1}
 8015ee2:	4668      	mov	r0, sp
 8015ee4:	1d21      	adds	r1, r4, #4
 8015ee6:	f7ff ff15 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 8015eea:	4668      	mov	r0, sp
 8015eec:	f7ff ff55 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ef0:	b988      	cbnz	r0, 8015f16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015ef2:	f8bd 3000 	ldrh.w	r3, [sp]
 8015ef6:	4669      	mov	r1, sp
 8015ef8:	88a2      	ldrh	r2, [r4, #4]
 8015efa:	4620      	mov	r0, r4
 8015efc:	1a9b      	subs	r3, r3, r2
 8015efe:	88e2      	ldrh	r2, [r4, #6]
 8015f00:	f8ad 3000 	strh.w	r3, [sp]
 8015f04:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015f08:	1a9b      	subs	r3, r3, r2
 8015f0a:	4632      	mov	r2, r6
 8015f0c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015f10:	6823      	ldr	r3, [r4, #0]
 8015f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f14:	4798      	blx	r3
 8015f16:	69a4      	ldr	r4, [r4, #24]
 8015f18:	e7db      	b.n	8015ed2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015f1a:	b002      	add	sp, #8
 8015f1c:	bd70      	pop	{r4, r5, r6, pc}

08015f1e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015f1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015f22:	4770      	bx	lr

08015f24 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8015f24:	4770      	bx	lr

08015f26 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8015f26:	4770      	bx	lr

08015f28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015f28:	6803      	ldr	r3, [r0, #0]
 8015f2a:	b513      	push	{r0, r1, r4, lr}
 8015f2c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015f30:	2300      	movs	r3, #0
 8015f32:	e9cd 3300 	strd	r3, r3, [sp]
 8015f36:	466b      	mov	r3, sp
 8015f38:	47a0      	blx	r4
 8015f3a:	b002      	add	sp, #8
 8015f3c:	bd10      	pop	{r4, pc}

08015f3e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015f3e:	2301      	movs	r3, #1
 8015f40:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015f44:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015f48:	4770      	bx	lr

08015f4a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015f50:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015f54:	4770      	bx	lr

08015f56 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015f56:	6843      	ldr	r3, [r0, #4]
 8015f58:	2201      	movs	r2, #1
 8015f5a:	725a      	strb	r2, [r3, #9]
 8015f5c:	6840      	ldr	r0, [r0, #4]
 8015f5e:	6803      	ldr	r3, [r0, #0]
 8015f60:	691b      	ldr	r3, [r3, #16]
 8015f62:	4718      	bx	r3

08015f64 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015f64:	6840      	ldr	r0, [r0, #4]
 8015f66:	6803      	ldr	r3, [r0, #0]
 8015f68:	689b      	ldr	r3, [r3, #8]
 8015f6a:	4718      	bx	r3

08015f6c <_ZN8touchgfx3HAL10beginFrameEv>:
 8015f6c:	4b04      	ldr	r3, [pc, #16]	; (8015f80 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	b123      	cbz	r3, 8015f7c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015f72:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015f76:	f080 0001 	eor.w	r0, r0, #1
 8015f7a:	4770      	bx	lr
 8015f7c:	2001      	movs	r0, #1
 8015f7e:	4770      	bx	lr
 8015f80:	200060f4 	.word	0x200060f4

08015f84 <_ZN8touchgfx3HAL8endFrameEv>:
 8015f84:	b510      	push	{r4, lr}
 8015f86:	4604      	mov	r4, r0
 8015f88:	6840      	ldr	r0, [r0, #4]
 8015f8a:	6803      	ldr	r3, [r0, #0]
 8015f8c:	689b      	ldr	r3, [r3, #8]
 8015f8e:	4798      	blx	r3
 8015f90:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015f94:	b113      	cbz	r3, 8015f9c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015f96:	2301      	movs	r3, #1
 8015f98:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015f9c:	bd10      	pop	{r4, pc}

08015f9e <_ZN8touchgfx3HAL9taskEntryEv>:
 8015f9e:	b508      	push	{r3, lr}
 8015fa0:	6803      	ldr	r3, [r0, #0]
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fa6:	4798      	blx	r3
 8015fa8:	6823      	ldr	r3, [r4, #0]
 8015faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015fac:	4620      	mov	r0, r4
 8015fae:	4798      	blx	r3
 8015fb0:	f7fd fde2 	bl	8013b78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015fb4:	6823      	ldr	r3, [r4, #0]
 8015fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015fb8:	e7f8      	b.n	8015fac <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015fbc <_ZN8touchgfx3HAL4tickEv>:
 8015fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015fbe:	6803      	ldr	r3, [r0, #0]
 8015fc0:	4604      	mov	r4, r0
 8015fc2:	4d5c      	ldr	r5, [pc, #368]	; (8016134 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015fc8:	4798      	blx	r3
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	f000 8097 	beq.w	80160fe <_ZN8touchgfx3HAL4tickEv+0x142>
 8015fd0:	2001      	movs	r0, #1
 8015fd2:	2600      	movs	r6, #0
 8015fd4:	f7fd fb46 	bl	8013664 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015fd8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015fdc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015fe0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015fe4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015fe8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015fec:	b133      	cbz	r3, 8015ffc <_ZN8touchgfx3HAL4tickEv+0x40>
 8015fee:	6823      	ldr	r3, [r4, #0]
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015ff6:	4798      	blx	r3
 8015ff8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015ffc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016000:	2601      	movs	r6, #1
 8016002:	6862      	ldr	r2, [r4, #4]
 8016004:	f083 0301 	eor.w	r3, r3, #1
 8016008:	702e      	strb	r6, [r5, #0]
 801600a:	7253      	strb	r3, [r2, #9]
 801600c:	f004 fb74 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 8016010:	6803      	ldr	r3, [r0, #0]
 8016012:	4631      	mov	r1, r6
 8016014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016016:	4798      	blx	r3
 8016018:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801601c:	b90b      	cbnz	r3, 8016022 <_ZN8touchgfx3HAL4tickEv+0x66>
 801601e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016022:	f004 fb69 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 8016026:	6803      	ldr	r3, [r0, #0]
 8016028:	695b      	ldr	r3, [r3, #20]
 801602a:	4798      	blx	r3
 801602c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801602e:	6803      	ldr	r3, [r0, #0]
 8016030:	691b      	ldr	r3, [r3, #16]
 8016032:	4798      	blx	r3
 8016034:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016038:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801603c:	3b01      	subs	r3, #1
 801603e:	b2db      	uxtb	r3, r3
 8016040:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016044:	b10a      	cbz	r2, 801604a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8016046:	2b00      	cmp	r3, #0
 8016048:	d1eb      	bne.n	8016022 <_ZN8touchgfx3HAL4tickEv+0x66>
 801604a:	4a3b      	ldr	r2, [pc, #236]	; (8016138 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801604c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016050:	7813      	ldrb	r3, [r2, #0]
 8016052:	3301      	adds	r3, #1
 8016054:	b25b      	sxtb	r3, r3
 8016056:	4299      	cmp	r1, r3
 8016058:	7013      	strb	r3, [r2, #0]
 801605a:	dc10      	bgt.n	801607e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801605c:	2300      	movs	r3, #0
 801605e:	68e0      	ldr	r0, [r4, #12]
 8016060:	a902      	add	r1, sp, #8
 8016062:	7013      	strb	r3, [r2, #0]
 8016064:	aa03      	add	r2, sp, #12
 8016066:	6803      	ldr	r3, [r0, #0]
 8016068:	68db      	ldr	r3, [r3, #12]
 801606a:	4798      	blx	r3
 801606c:	6823      	ldr	r3, [r4, #0]
 801606e:	2800      	cmp	r0, #0
 8016070:	d051      	beq.n	8016116 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8016072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016076:	4620      	mov	r0, r4
 8016078:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801607c:	4798      	blx	r3
 801607e:	2300      	movs	r3, #0
 8016080:	6960      	ldr	r0, [r4, #20]
 8016082:	f88d 3007 	strb.w	r3, [sp, #7]
 8016086:	b158      	cbz	r0, 80160a0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016088:	6803      	ldr	r3, [r0, #0]
 801608a:	f10d 0107 	add.w	r1, sp, #7
 801608e:	68db      	ldr	r3, [r3, #12]
 8016090:	4798      	blx	r3
 8016092:	b128      	cbz	r0, 80160a0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016096:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801609a:	6803      	ldr	r3, [r0, #0]
 801609c:	68db      	ldr	r3, [r3, #12]
 801609e:	4798      	blx	r3
 80160a0:	f104 001c 	add.w	r0, r4, #28
 80160a4:	f010 f828 	bl	80260f8 <_ZN8touchgfx8Gestures4tickEv>
 80160a8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80160ac:	b30b      	cbz	r3, 80160f2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80160ae:	6920      	ldr	r0, [r4, #16]
 80160b0:	6803      	ldr	r3, [r0, #0]
 80160b2:	691b      	ldr	r3, [r3, #16]
 80160b4:	4798      	blx	r3
 80160b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80160b8:	4606      	mov	r6, r0
 80160ba:	b903      	cbnz	r3, 80160be <_ZN8touchgfx3HAL4tickEv+0x102>
 80160bc:	6720      	str	r0, [r4, #112]	; 0x70
 80160be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80160c0:	4a1e      	ldr	r2, [pc, #120]	; (801613c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80160c2:	1af3      	subs	r3, r6, r3
 80160c4:	4293      	cmp	r3, r2
 80160c6:	d914      	bls.n	80160f2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80160c8:	6920      	ldr	r0, [r4, #16]
 80160ca:	6803      	ldr	r3, [r0, #0]
 80160cc:	699b      	ldr	r3, [r3, #24]
 80160ce:	4798      	blx	r3
 80160d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80160d2:	2264      	movs	r2, #100	; 0x64
 80160d4:	1af3      	subs	r3, r6, r3
 80160d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80160da:	fbb0 f0f3 	udiv	r0, r0, r3
 80160de:	2800      	cmp	r0, #0
 80160e0:	dc1e      	bgt.n	8016120 <_ZN8touchgfx3HAL4tickEv+0x164>
 80160e2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80160e6:	6920      	ldr	r0, [r4, #16]
 80160e8:	2100      	movs	r1, #0
 80160ea:	6803      	ldr	r3, [r0, #0]
 80160ec:	69db      	ldr	r3, [r3, #28]
 80160ee:	4798      	blx	r3
 80160f0:	6726      	str	r6, [r4, #112]	; 0x70
 80160f2:	f004 fb01 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 80160f6:	6803      	ldr	r3, [r0, #0]
 80160f8:	2100      	movs	r1, #0
 80160fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160fc:	4798      	blx	r3
 80160fe:	6823      	ldr	r3, [r4, #0]
 8016100:	4620      	mov	r0, r4
 8016102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016106:	4798      	blx	r3
 8016108:	2001      	movs	r0, #1
 801610a:	f7fd fab6 	bl	801367a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801610e:	2300      	movs	r3, #0
 8016110:	702b      	strb	r3, [r5, #0]
 8016112:	b004      	add	sp, #16
 8016114:	bd70      	pop	{r4, r5, r6, pc}
 8016116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801611a:	4620      	mov	r0, r4
 801611c:	4798      	blx	r3
 801611e:	e7ae      	b.n	801607e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016120:	2863      	cmp	r0, #99	; 0x63
 8016122:	bfcb      	itete	gt
 8016124:	2300      	movgt	r3, #0
 8016126:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801612a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801612e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016132:	e7d8      	b.n	80160e6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016134:	200060fc 	.word	0x200060fc
 8016138:	200060fd 	.word	0x200060fd
 801613c:	05f5e100 	.word	0x05f5e100

08016140 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016140:	f7fd bce6 	b.w	8013b10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016144 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016144:	6581      	str	r1, [r0, #88]	; 0x58
 8016146:	301c      	adds	r0, #28
 8016148:	f00f bfd4 	b.w	80260f4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801614c <_ZN8touchgfx3HAL5touchEll>:
 801614c:	b530      	push	{r4, r5, lr}
 801614e:	b087      	sub	sp, #28
 8016150:	4604      	mov	r4, r0
 8016152:	a804      	add	r0, sp, #16
 8016154:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016158:	f004 f87c 	bl	801a254 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801615c:	9b04      	ldr	r3, [sp, #16]
 801615e:	a906      	add	r1, sp, #24
 8016160:	a803      	add	r0, sp, #12
 8016162:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016166:	9b05      	ldr	r3, [sp, #20]
 8016168:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801616c:	f004 f8b0 	bl	801a2d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016170:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016174:	f104 001c 	add.w	r0, r4, #28
 8016178:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801617c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016180:	b189      	cbz	r1, 80161a6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016182:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016186:	9300      	str	r3, [sp, #0]
 8016188:	4613      	mov	r3, r2
 801618a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801618e:	462a      	mov	r2, r5
 8016190:	f00f ffc0 	bl	8026114 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016194:	b128      	cbz	r0, 80161a2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016196:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801619a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801619c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80161a0:	6623      	str	r3, [r4, #96]	; 0x60
 80161a2:	b007      	add	sp, #28
 80161a4:	bd30      	pop	{r4, r5, pc}
 80161a6:	f00f fff9 	bl	802619c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80161aa:	2301      	movs	r3, #1
 80161ac:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80161b0:	e7f1      	b.n	8016196 <_ZN8touchgfx3HAL5touchEll+0x4a>

080161b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80161b2:	b570      	push	{r4, r5, r6, lr}
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d050      	beq.n	801625a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80161b8:	ea81 0002 	eor.w	r0, r1, r2
 80161bc:	07c6      	lsls	r6, r0, #31
 80161be:	d508      	bpl.n	80161d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80161c0:	3a01      	subs	r2, #1
 80161c2:	18cc      	adds	r4, r1, r3
 80161c4:	42a1      	cmp	r1, r4
 80161c6:	d048      	beq.n	801625a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80161c8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80161cc:	f801 0b01 	strb.w	r0, [r1], #1
 80161d0:	e7f8      	b.n	80161c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80161d2:	07d5      	lsls	r5, r2, #31
 80161d4:	bf42      	ittt	mi
 80161d6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80161da:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80161de:	f801 0b01 	strbmi.w	r0, [r1], #1
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	d915      	bls.n	8016212 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80161e6:	ea82 0001 	eor.w	r0, r2, r1
 80161ea:	0784      	lsls	r4, r0, #30
 80161ec:	d02d      	beq.n	801624a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80161ee:	1e94      	subs	r4, r2, #2
 80161f0:	4608      	mov	r0, r1
 80161f2:	18ce      	adds	r6, r1, r3
 80161f4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80161f8:	f820 5b02 	strh.w	r5, [r0], #2
 80161fc:	1a35      	subs	r5, r6, r0
 80161fe:	2d01      	cmp	r5, #1
 8016200:	d8f8      	bhi.n	80161f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8016202:	1e98      	subs	r0, r3, #2
 8016204:	f003 0301 	and.w	r3, r3, #1
 8016208:	f020 0001 	bic.w	r0, r0, #1
 801620c:	3002      	adds	r0, #2
 801620e:	4401      	add	r1, r0
 8016210:	4402      	add	r2, r0
 8016212:	1f14      	subs	r4, r2, #4
 8016214:	4608      	mov	r0, r1
 8016216:	18ce      	adds	r6, r1, r3
 8016218:	1a35      	subs	r5, r6, r0
 801621a:	2d03      	cmp	r5, #3
 801621c:	d810      	bhi.n	8016240 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801621e:	089c      	lsrs	r4, r3, #2
 8016220:	00a0      	lsls	r0, r4, #2
 8016222:	4401      	add	r1, r0
 8016224:	3801      	subs	r0, #1
 8016226:	4402      	add	r2, r0
 8016228:	f06f 0003 	mvn.w	r0, #3
 801622c:	fb00 3404 	mla	r4, r0, r4, r3
 8016230:	440c      	add	r4, r1
 8016232:	42a1      	cmp	r1, r4
 8016234:	d011      	beq.n	801625a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016236:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801623a:	f801 3b01 	strb.w	r3, [r1], #1
 801623e:	e7f8      	b.n	8016232 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016240:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016244:	f840 5b04 	str.w	r5, [r0], #4
 8016248:	e7e6      	b.n	8016218 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801624a:	0790      	lsls	r0, r2, #30
 801624c:	d0e1      	beq.n	8016212 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801624e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016252:	3b02      	subs	r3, #2
 8016254:	f821 0b02 	strh.w	r0, [r1], #2
 8016258:	e7db      	b.n	8016212 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801625a:	2001      	movs	r0, #1
 801625c:	bd70      	pop	{r4, r5, r6, pc}

0801625e <_ZN8touchgfx3HAL7noTouchEv>:
 801625e:	b510      	push	{r4, lr}
 8016260:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016264:	4604      	mov	r4, r0
 8016266:	b153      	cbz	r3, 801627e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016268:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801626c:	2101      	movs	r1, #1
 801626e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016272:	301c      	adds	r0, #28
 8016274:	f00f ff92 	bl	802619c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016278:	2300      	movs	r3, #0
 801627a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801627e:	bd10      	pop	{r4, pc}

08016280 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016284:	4604      	mov	r4, r0
 8016286:	6980      	ldr	r0, [r0, #24]
 8016288:	b085      	sub	sp, #20
 801628a:	460f      	mov	r7, r1
 801628c:	4690      	mov	r8, r2
 801628e:	4699      	mov	r9, r3
 8016290:	b930      	cbnz	r0, 80162a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016292:	4b1c      	ldr	r3, [pc, #112]	; (8016304 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8016294:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8016298:	4a1b      	ldr	r2, [pc, #108]	; (8016308 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801629a:	481c      	ldr	r0, [pc, #112]	; (801630c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 801629c:	f011 fe50 	bl	8027f40 <__assert_func>
 80162a0:	ad04      	add	r5, sp, #16
 80162a2:	2600      	movs	r6, #0
 80162a4:	f845 6d04 	str.w	r6, [r5, #-4]!
 80162a8:	6806      	ldr	r6, [r0, #0]
 80162aa:	9501      	str	r5, [sp, #4]
 80162ac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80162b0:	9500      	str	r5, [sp, #0]
 80162b2:	6835      	ldr	r5, [r6, #0]
 80162b4:	47a8      	blx	r5
 80162b6:	4d16      	ldr	r5, [pc, #88]	; (8016310 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80162b8:	4606      	mov	r6, r0
 80162ba:	f8a5 9000 	strh.w	r9, [r5]
 80162be:	f7fa f933 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 80162c2:	6803      	ldr	r3, [r0, #0]
 80162c4:	6a1b      	ldr	r3, [r3, #32]
 80162c6:	4798      	blx	r3
 80162c8:	2801      	cmp	r0, #1
 80162ca:	d012      	beq.n	80162f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80162cc:	d306      	bcc.n	80162dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80162ce:	280d      	cmp	r0, #13
 80162d0:	d80b      	bhi.n	80162ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80162d2:	4b10      	ldr	r3, [pc, #64]	; (8016314 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80162d4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80162d8:	4a0b      	ldr	r2, [pc, #44]	; (8016308 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80162da:	e7de      	b.n	801629a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80162dc:	882b      	ldrh	r3, [r5, #0]
 80162de:	fb08 7203 	mla	r2, r8, r3, r7
 80162e2:	9b03      	ldr	r3, [sp, #12]
 80162e4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80162e8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80162ea:	4630      	mov	r0, r6
 80162ec:	b005      	add	sp, #20
 80162ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162f2:	882a      	ldrh	r2, [r5, #0]
 80162f4:	9b03      	ldr	r3, [sp, #12]
 80162f6:	fb08 7202 	mla	r2, r8, r2, r7
 80162fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80162fe:	1a9a      	subs	r2, r3, r2
 8016300:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016302:	e7f2      	b.n	80162ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016304:	0802ac35 	.word	0x0802ac35
 8016308:	0802af4e 	.word	0x0802af4e
 801630c:	0802ac7a 	.word	0x0802ac7a
 8016310:	200060f0 	.word	0x200060f0
 8016314:	0802aca0 	.word	0x0802aca0

08016318 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801631c:	4698      	mov	r8, r3
 801631e:	6803      	ldr	r3, [r0, #0]
 8016320:	b087      	sub	sp, #28
 8016322:	460e      	mov	r6, r1
 8016324:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8016326:	4617      	mov	r7, r2
 8016328:	4b0d      	ldr	r3, [pc, #52]	; (8016360 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801632a:	4604      	mov	r4, r0
 801632c:	f8b3 9000 	ldrh.w	r9, [r3]
 8016330:	f7fa f8fa 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8016334:	6803      	ldr	r3, [r0, #0]
 8016336:	6a1b      	ldr	r3, [r3, #32]
 8016338:	4798      	blx	r3
 801633a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801633e:	463a      	mov	r2, r7
 8016340:	4631      	mov	r1, r6
 8016342:	9302      	str	r3, [sp, #8]
 8016344:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016348:	9301      	str	r3, [sp, #4]
 801634a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801634e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016352:	9300      	str	r3, [sp, #0]
 8016354:	4620      	mov	r0, r4
 8016356:	4643      	mov	r3, r8
 8016358:	47a8      	blx	r5
 801635a:	b007      	add	sp, #28
 801635c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016360:	200060f0 	.word	0x200060f0

08016364 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016368:	4604      	mov	r4, r0
 801636a:	b08b      	sub	sp, #44	; 0x2c
 801636c:	4610      	mov	r0, r2
 801636e:	460d      	mov	r5, r1
 8016370:	4691      	mov	r9, r2
 8016372:	461e      	mov	r6, r3
 8016374:	f007 fb88 	bl	801da88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016378:	2800      	cmp	r0, #0
 801637a:	f000 80a0 	beq.w	80164be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801637e:	6823      	ldr	r3, [r4, #0]
 8016380:	4620      	mov	r0, r4
 8016382:	f8df b170 	ldr.w	fp, [pc, #368]	; 80164f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8016386:	af0a      	add	r7, sp, #40	; 0x28
 8016388:	6a1b      	ldr	r3, [r3, #32]
 801638a:	4798      	blx	r3
 801638c:	6823      	ldr	r3, [r4, #0]
 801638e:	4620      	mov	r0, r4
 8016390:	f8df a164 	ldr.w	sl, [pc, #356]	; 80164f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8016394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016396:	4798      	blx	r3
 8016398:	f8bb 3000 	ldrh.w	r3, [fp]
 801639c:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 80163a0:	4638      	mov	r0, r7
 80163a2:	9301      	str	r3, [sp, #4]
 80163a4:	f8ba 3000 	ldrh.w	r3, [sl]
 80163a8:	9302      	str	r3, [sp, #8]
 80163aa:	4b4f      	ldr	r3, [pc, #316]	; (80164e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80163ac:	881a      	ldrh	r2, [r3, #0]
 80163ae:	4698      	mov	r8, r3
 80163b0:	9203      	str	r2, [sp, #12]
 80163b2:	4a4e      	ldr	r2, [pc, #312]	; (80164ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80163b4:	8812      	ldrh	r2, [r2, #0]
 80163b6:	9204      	str	r2, [sp, #16]
 80163b8:	4a4d      	ldr	r2, [pc, #308]	; (80164f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 80163ba:	7812      	ldrb	r2, [r2, #0]
 80163bc:	2a00      	cmp	r2, #0
 80163be:	f040 8081 	bne.w	80164c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 80163c2:	f007 fc1b 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80163c6:	f8ab 0000 	strh.w	r0, [fp]
 80163ca:	4638      	mov	r0, r7
 80163cc:	f007 fc50 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80163d0:	f8aa 0000 	strh.w	r0, [sl]
 80163d4:	4638      	mov	r0, r7
 80163d6:	f007 fc11 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80163da:	f8a8 0000 	strh.w	r0, [r8]
 80163de:	4638      	mov	r0, r7
 80163e0:	f007 fc46 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80163e4:	4b41      	ldr	r3, [pc, #260]	; (80164ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80163e6:	8018      	strh	r0, [r3, #0]
 80163e8:	4648      	mov	r0, r9
 80163ea:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80163ee:	f007 fb4b 	bl	801da88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80163f2:	2200      	movs	r2, #0
 80163f4:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80163f8:	4611      	mov	r1, r2
 80163fa:	4628      	mov	r0, r5
 80163fc:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016400:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016404:	f7fb f825 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
 8016408:	2301      	movs	r3, #1
 801640a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801640e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8016412:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016416:	2b00      	cmp	r3, #0
 8016418:	dd5c      	ble.n	80164d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 801641a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801641e:	2b00      	cmp	r3, #0
 8016420:	dd58      	ble.n	80164d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8016422:	462a      	mov	r2, r5
 8016424:	ab08      	add	r3, sp, #32
 8016426:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801642a:	6851      	ldr	r1, [r2, #4]
 801642c:	c303      	stmia	r3!, {r0, r1}
 801642e:	4631      	mov	r1, r6
 8016430:	a808      	add	r0, sp, #32
 8016432:	f7ff fc6f 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 8016436:	a807      	add	r0, sp, #28
 8016438:	f007 fd72 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801643c:	4606      	mov	r6, r0
 801643e:	f7fa f873 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8016442:	6803      	ldr	r3, [r0, #0]
 8016444:	6a1b      	ldr	r3, [r3, #32]
 8016446:	4798      	blx	r3
 8016448:	4286      	cmp	r6, r0
 801644a:	d04a      	beq.n	80164e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 801644c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801644e:	b150      	cbz	r0, 8016466 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8016450:	a807      	add	r0, sp, #28
 8016452:	f007 fd65 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016456:	4606      	mov	r6, r0
 8016458:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801645a:	6803      	ldr	r3, [r0, #0]
 801645c:	6a1b      	ldr	r3, [r3, #32]
 801645e:	4798      	blx	r3
 8016460:	1a33      	subs	r3, r6, r0
 8016462:	4258      	negs	r0, r3
 8016464:	4158      	adcs	r0, r3
 8016466:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801646a:	2600      	movs	r6, #0
 801646c:	696b      	ldr	r3, [r5, #20]
 801646e:	a908      	add	r1, sp, #32
 8016470:	682a      	ldr	r2, [r5, #0]
 8016472:	4628      	mov	r0, r5
 8016474:	9305      	str	r3, [sp, #20]
 8016476:	616e      	str	r6, [r5, #20]
 8016478:	6892      	ldr	r2, [r2, #8]
 801647a:	4790      	blx	r2
 801647c:	9b05      	ldr	r3, [sp, #20]
 801647e:	4652      	mov	r2, sl
 8016480:	4649      	mov	r1, r9
 8016482:	616b      	str	r3, [r5, #20]
 8016484:	4628      	mov	r0, r5
 8016486:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801648a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801648e:	f7fa ffe0 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
 8016492:	9a01      	ldr	r2, [sp, #4]
 8016494:	4b17      	ldr	r3, [pc, #92]	; (80164f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8016496:	4620      	mov	r0, r4
 8016498:	801a      	strh	r2, [r3, #0]
 801649a:	9a02      	ldr	r2, [sp, #8]
 801649c:	4b16      	ldr	r3, [pc, #88]	; (80164f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 801649e:	801a      	strh	r2, [r3, #0]
 80164a0:	9a03      	ldr	r2, [sp, #12]
 80164a2:	4b11      	ldr	r3, [pc, #68]	; (80164e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80164a4:	801a      	strh	r2, [r3, #0]
 80164a6:	4b11      	ldr	r3, [pc, #68]	; (80164ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80164a8:	9a04      	ldr	r2, [sp, #16]
 80164aa:	801a      	strh	r2, [r3, #0]
 80164ac:	6823      	ldr	r3, [r4, #0]
 80164ae:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80164b2:	6a1b      	ldr	r3, [r3, #32]
 80164b4:	4798      	blx	r3
 80164b6:	6823      	ldr	r3, [r4, #0]
 80164b8:	4620      	mov	r0, r4
 80164ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164bc:	4798      	blx	r3
 80164be:	b00b      	add	sp, #44	; 0x2c
 80164c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c4:	f007 fbd4 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80164c8:	f8ab 0000 	strh.w	r0, [fp]
 80164cc:	4638      	mov	r0, r7
 80164ce:	f007 fb95 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80164d2:	e77d      	b.n	80163d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 80164d4:	462a      	mov	r2, r5
 80164d6:	ab08      	add	r3, sp, #32
 80164d8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80164dc:	6851      	ldr	r1, [r2, #4]
 80164de:	c303      	stmia	r3!, {r0, r1}
 80164e0:	e7a9      	b.n	8016436 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 80164e2:	2000      	movs	r0, #0
 80164e4:	e7bf      	b.n	8016466 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 80164e6:	bf00      	nop
 80164e8:	200060ea 	.word	0x200060ea
 80164ec:	200060ec 	.word	0x200060ec
 80164f0:	200060ee 	.word	0x200060ee
 80164f4:	200060f0 	.word	0x200060f0
 80164f8:	200060f2 	.word	0x200060f2

080164fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80164fc:	4b07      	ldr	r3, [pc, #28]	; (801651c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80164fe:	b510      	push	{r4, lr}
 8016500:	781b      	ldrb	r3, [r3, #0]
 8016502:	4604      	mov	r4, r0
 8016504:	b13b      	cbz	r3, 8016516 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016506:	6803      	ldr	r3, [r0, #0]
 8016508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801650a:	4798      	blx	r3
 801650c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801650e:	4283      	cmp	r3, r0
 8016510:	d101      	bne.n	8016516 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016512:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016514:	bd10      	pop	{r4, pc}
 8016516:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016518:	e7fc      	b.n	8016514 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801651a:	bf00      	nop
 801651c:	200060f4 	.word	0x200060f4

08016520 <_ZN8touchgfx3HAL10initializeEv>:
 8016520:	b510      	push	{r4, lr}
 8016522:	4604      	mov	r4, r0
 8016524:	f7fd fab2 	bl	8013a8c <_ZN8touchgfx10OSWrappers10initializeEv>
 8016528:	6860      	ldr	r0, [r4, #4]
 801652a:	6803      	ldr	r3, [r0, #0]
 801652c:	68db      	ldr	r3, [r3, #12]
 801652e:	4798      	blx	r3
 8016530:	68e0      	ldr	r0, [r4, #12]
 8016532:	6803      	ldr	r3, [r0, #0]
 8016534:	689b      	ldr	r3, [r3, #8]
 8016536:	4798      	blx	r3
 8016538:	6823      	ldr	r3, [r4, #0]
 801653a:	4620      	mov	r0, r4
 801653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801653e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016542:	4718      	bx	r3

08016544 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016544:	b508      	push	{r3, lr}
 8016546:	290d      	cmp	r1, #13
 8016548:	d817      	bhi.n	801657a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801654a:	e8df f001 	tbb	[pc, r1]
 801654e:	090b      	.short	0x090b
 8016550:	0d0d0d07 	.word	0x0d0d0d07
 8016554:	1414140d 	.word	0x1414140d
 8016558:	0d0d1414 	.word	0x0d0d1414
 801655c:	2020      	movs	r0, #32
 801655e:	bd08      	pop	{r3, pc}
 8016560:	2018      	movs	r0, #24
 8016562:	e7fc      	b.n	801655e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016564:	2010      	movs	r0, #16
 8016566:	e7fa      	b.n	801655e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016568:	4b05      	ldr	r3, [pc, #20]	; (8016580 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801656a:	f44f 7111 	mov.w	r1, #580	; 0x244
 801656e:	4a05      	ldr	r2, [pc, #20]	; (8016584 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016570:	4805      	ldr	r0, [pc, #20]	; (8016588 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016572:	f011 fce5 	bl	8027f40 <__assert_func>
 8016576:	2008      	movs	r0, #8
 8016578:	e7f1      	b.n	801655e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801657a:	2000      	movs	r0, #0
 801657c:	e7ef      	b.n	801655e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801657e:	bf00      	nop
 8016580:	0802ad73 	.word	0x0802ad73
 8016584:	0802b110 	.word	0x0802b110
 8016588:	0802ac7a 	.word	0x0802ac7a

0801658c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801658c:	b570      	push	{r4, r5, r6, lr}
 801658e:	460d      	mov	r5, r1
 8016590:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016594:	4616      	mov	r6, r2
 8016596:	461c      	mov	r4, r3
 8016598:	f7ff ffd4 	bl	8016544 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801659c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80165a0:	10c0      	asrs	r0, r0, #3
 80165a2:	fb06 5101 	mla	r1, r6, r1, r5
 80165a6:	fb00 4001 	mla	r0, r0, r1, r4
 80165aa:	bd70      	pop	{r4, r5, r6, pc}

080165ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80165ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165b0:	b08a      	sub	sp, #40	; 0x28
 80165b2:	f04f 0c00 	mov.w	ip, #0
 80165b6:	4604      	mov	r4, r0
 80165b8:	469a      	mov	sl, r3
 80165ba:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80165be:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80165c2:	f1b8 0f02 	cmp.w	r8, #2
 80165c6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80165ca:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80165ce:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80165d2:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80165d6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80165da:	f8cd c020 	str.w	ip, [sp, #32]
 80165de:	d030      	beq.n	8016642 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80165e0:	2bff      	cmp	r3, #255	; 0xff
 80165e2:	d12c      	bne.n	801663e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80165e4:	4560      	cmp	r0, ip
 80165e6:	bf14      	ite	ne
 80165e8:	2004      	movne	r0, #4
 80165ea:	2001      	moveq	r0, #1
 80165ec:	9204      	str	r2, [sp, #16]
 80165ee:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80165f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80165f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80165fa:	f8ad 6018 	strh.w	r6, [sp, #24]
 80165fe:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016606:	4620      	mov	r0, r4
 8016608:	f7ff ff78 	bl	80164fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801660c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016610:	4603      	mov	r3, r0
 8016612:	4651      	mov	r1, sl
 8016614:	4620      	mov	r0, r4
 8016616:	e9cd 9700 	strd	r9, r7, [sp]
 801661a:	f7ff ffb7 	bl	801658c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801661e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8016622:	9005      	str	r0, [sp, #20]
 8016624:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016628:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801662c:	b106      	cbz	r6, 8016630 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801662e:	b98d      	cbnz	r5, 8016654 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016630:	4b12      	ldr	r3, [pc, #72]	; (801667c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8016632:	f240 11c3 	movw	r1, #451	; 0x1c3
 8016636:	4a12      	ldr	r2, [pc, #72]	; (8016680 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016638:	4812      	ldr	r0, [pc, #72]	; (8016684 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801663a:	f011 fc81 	bl	8027f40 <__assert_func>
 801663e:	2004      	movs	r0, #4
 8016640:	e7d4      	b.n	80165ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016642:	2bff      	cmp	r3, #255	; 0xff
 8016644:	d104      	bne.n	8016650 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8016646:	2800      	cmp	r0, #0
 8016648:	bf14      	ite	ne
 801664a:	2040      	movne	r0, #64	; 0x40
 801664c:	2020      	moveq	r0, #32
 801664e:	e7cd      	b.n	80165ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016650:	2040      	movs	r0, #64	; 0x40
 8016652:	e7cb      	b.n	80165ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016654:	6823      	ldr	r3, [r4, #0]
 8016656:	4620      	mov	r0, r4
 8016658:	9d02      	ldr	r5, [sp, #8]
 801665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801665c:	4798      	blx	r3
 801665e:	4228      	tst	r0, r5
 8016660:	d104      	bne.n	801666c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8016662:	4b09      	ldr	r3, [pc, #36]	; (8016688 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016664:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8016668:	4a05      	ldr	r2, [pc, #20]	; (8016680 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801666a:	e7e5      	b.n	8016638 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801666c:	6860      	ldr	r0, [r4, #4]
 801666e:	a902      	add	r1, sp, #8
 8016670:	6803      	ldr	r3, [r0, #0]
 8016672:	685b      	ldr	r3, [r3, #4]
 8016674:	4798      	blx	r3
 8016676:	b00a      	add	sp, #40	; 0x28
 8016678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801667c:	0802acf6 	.word	0x0802acf6
 8016680:	0802afb2 	.word	0x0802afb2
 8016684:	0802ac7a 	.word	0x0802ac7a
 8016688:	0802ad2e 	.word	0x0802ad2e

0801668c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801668c:	b510      	push	{r4, lr}
 801668e:	b08a      	sub	sp, #40	; 0x28
 8016690:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016694:	9408      	str	r4, [sp, #32]
 8016696:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801669a:	9407      	str	r4, [sp, #28]
 801669c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80166a0:	9406      	str	r4, [sp, #24]
 80166a2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80166a6:	9405      	str	r4, [sp, #20]
 80166a8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80166ac:	9404      	str	r4, [sp, #16]
 80166ae:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80166b2:	9403      	str	r4, [sp, #12]
 80166b4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80166b8:	9402      	str	r4, [sp, #8]
 80166ba:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80166be:	e9cd 3400 	strd	r3, r4, [sp]
 80166c2:	4613      	mov	r3, r2
 80166c4:	2200      	movs	r2, #0
 80166c6:	f7ff ff71 	bl	80165ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80166ca:	b00a      	add	sp, #40	; 0x28
 80166cc:	bd10      	pop	{r4, pc}
	...

080166d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80166d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166d2:	b08b      	sub	sp, #44	; 0x2c
 80166d4:	4616      	mov	r6, r2
 80166d6:	460d      	mov	r5, r1
 80166d8:	461f      	mov	r7, r3
 80166da:	4604      	mov	r4, r0
 80166dc:	f7f9 ff24 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 80166e0:	6803      	ldr	r3, [r0, #0]
 80166e2:	6a1b      	ldr	r3, [r3, #32]
 80166e4:	4798      	blx	r3
 80166e6:	4b0e      	ldr	r3, [pc, #56]	; (8016720 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80166e8:	2200      	movs	r2, #0
 80166ea:	4629      	mov	r1, r5
 80166ec:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80166f0:	881b      	ldrh	r3, [r3, #0]
 80166f2:	4620      	mov	r0, r4
 80166f4:	9306      	str	r3, [sp, #24]
 80166f6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80166fa:	9305      	str	r3, [sp, #20]
 80166fc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016700:	9304      	str	r3, [sp, #16]
 8016702:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016706:	9303      	str	r3, [sp, #12]
 8016708:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801670c:	9302      	str	r3, [sp, #8]
 801670e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016712:	e9cd 7300 	strd	r7, r3, [sp]
 8016716:	4633      	mov	r3, r6
 8016718:	f7ff ff48 	bl	80165ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801671c:	b00b      	add	sp, #44	; 0x2c
 801671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016720:	200060f0 	.word	0x200060f0

08016724 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8016724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016728:	461f      	mov	r7, r3
 801672a:	4b14      	ldr	r3, [pc, #80]	; (801677c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801672c:	b08a      	sub	sp, #40	; 0x28
 801672e:	4616      	mov	r6, r2
 8016730:	f8b3 8000 	ldrh.w	r8, [r3]
 8016734:	460d      	mov	r5, r1
 8016736:	4604      	mov	r4, r0
 8016738:	f7f9 fef6 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 801673c:	6803      	ldr	r3, [r0, #0]
 801673e:	6a1b      	ldr	r3, [r3, #32]
 8016740:	4798      	blx	r3
 8016742:	2302      	movs	r3, #2
 8016744:	9008      	str	r0, [sp, #32]
 8016746:	2200      	movs	r2, #0
 8016748:	4629      	mov	r1, r5
 801674a:	4620      	mov	r0, r4
 801674c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8016750:	2301      	movs	r3, #1
 8016752:	9305      	str	r3, [sp, #20]
 8016754:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016758:	9304      	str	r3, [sp, #16]
 801675a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801675e:	9303      	str	r3, [sp, #12]
 8016760:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016764:	9302      	str	r3, [sp, #8]
 8016766:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801676a:	e9cd 7300 	strd	r7, r3, [sp]
 801676e:	4633      	mov	r3, r6
 8016770:	f7ff ff1c 	bl	80165ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016774:	b00a      	add	sp, #40	; 0x28
 8016776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801677a:	bf00      	nop
 801677c:	200060f0 	.word	0x200060f0

08016780 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016784:	b08b      	sub	sp, #44	; 0x2c
 8016786:	469b      	mov	fp, r3
 8016788:	4604      	mov	r4, r0
 801678a:	4692      	mov	sl, r2
 801678c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016790:	2600      	movs	r6, #0
 8016792:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8016796:	4689      	mov	r9, r1
 8016798:	2fff      	cmp	r7, #255	; 0xff
 801679a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801679e:	9608      	str	r6, [sp, #32]
 80167a0:	bf14      	ite	ne
 80167a2:	2308      	movne	r3, #8
 80167a4:	2302      	moveq	r3, #2
 80167a6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80167aa:	f7ff fea7 	bl	80164fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80167ae:	465a      	mov	r2, fp
 80167b0:	4603      	mov	r3, r0
 80167b2:	4651      	mov	r1, sl
 80167b4:	4620      	mov	r0, r4
 80167b6:	e9cd 8500 	strd	r8, r5, [sp]
 80167ba:	f7ff fee7 	bl	801658c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80167be:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80167c2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80167c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80167ca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80167ce:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80167d2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80167d6:	6823      	ldr	r3, [r4, #0]
 80167d8:	9d02      	ldr	r5, [sp, #8]
 80167da:	9005      	str	r0, [sp, #20]
 80167dc:	4620      	mov	r0, r4
 80167de:	f8ad 601c 	strh.w	r6, [sp, #28]
 80167e2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80167e6:	f8cd 9020 	str.w	r9, [sp, #32]
 80167ea:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80167ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167f0:	4798      	blx	r3
 80167f2:	4228      	tst	r0, r5
 80167f4:	d106      	bne.n	8016804 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 80167f6:	4b07      	ldr	r3, [pc, #28]	; (8016814 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 80167f8:	f240 11fb 	movw	r1, #507	; 0x1fb
 80167fc:	4a06      	ldr	r2, [pc, #24]	; (8016818 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80167fe:	4807      	ldr	r0, [pc, #28]	; (801681c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016800:	f011 fb9e 	bl	8027f40 <__assert_func>
 8016804:	6860      	ldr	r0, [r4, #4]
 8016806:	a902      	add	r1, sp, #8
 8016808:	6803      	ldr	r3, [r0, #0]
 801680a:	685b      	ldr	r3, [r3, #4]
 801680c:	4798      	blx	r3
 801680e:	b00b      	add	sp, #44	; 0x2c
 8016810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016814:	0802ad2e 	.word	0x0802ad2e
 8016818:	0802b07b 	.word	0x0802b07b
 801681c:	0802ac7a 	.word	0x0802ac7a

08016820 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016824:	461f      	mov	r7, r3
 8016826:	4b0b      	ldr	r3, [pc, #44]	; (8016854 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016828:	460d      	mov	r5, r1
 801682a:	4616      	mov	r6, r2
 801682c:	f8b3 8000 	ldrh.w	r8, [r3]
 8016830:	4604      	mov	r4, r0
 8016832:	f7f9 fe79 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8016836:	6803      	ldr	r3, [r0, #0]
 8016838:	6a1b      	ldr	r3, [r3, #32]
 801683a:	4798      	blx	r3
 801683c:	463b      	mov	r3, r7
 801683e:	4632      	mov	r2, r6
 8016840:	4629      	mov	r1, r5
 8016842:	e9cd 8000 	strd	r8, r0, [sp]
 8016846:	4620      	mov	r0, r4
 8016848:	f7ff fea0 	bl	801658c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801684c:	b002      	add	sp, #8
 801684e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016852:	bf00      	nop
 8016854:	200060f0 	.word	0x200060f0

08016858 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801685c:	4698      	mov	r8, r3
 801685e:	b088      	sub	sp, #32
 8016860:	2300      	movs	r3, #0
 8016862:	4617      	mov	r7, r2
 8016864:	4604      	mov	r4, r0
 8016866:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801686a:	9306      	str	r3, [sp, #24]
 801686c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016870:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016874:	f8ad 6010 	strh.w	r6, [sp, #16]
 8016878:	f8ad 5012 	strh.w	r5, [sp, #18]
 801687c:	e9cd 3100 	strd	r3, r1, [sp]
 8016880:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016884:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016888:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801688c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016890:	f7ff fe34 	bl	80164fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016894:	4642      	mov	r2, r8
 8016896:	4603      	mov	r3, r0
 8016898:	4639      	mov	r1, r7
 801689a:	4620      	mov	r0, r4
 801689c:	f7ff ffc0 	bl	8016820 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80168a0:	4b16      	ldr	r3, [pc, #88]	; (80168fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80168a2:	9003      	str	r0, [sp, #12]
 80168a4:	881b      	ldrh	r3, [r3, #0]
 80168a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80168aa:	f7f9 fe3d 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 80168ae:	6803      	ldr	r3, [r0, #0]
 80168b0:	6a1b      	ldr	r3, [r3, #32]
 80168b2:	4798      	blx	r3
 80168b4:	f88d 001e 	strb.w	r0, [sp, #30]
 80168b8:	f88d 001d 	strb.w	r0, [sp, #29]
 80168bc:	b106      	cbz	r6, 80168c0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80168be:	b935      	cbnz	r5, 80168ce <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80168c0:	4b0f      	ldr	r3, [pc, #60]	; (8016900 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80168c2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80168c6:	4a0f      	ldr	r2, [pc, #60]	; (8016904 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80168c8:	480f      	ldr	r0, [pc, #60]	; (8016908 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80168ca:	f011 fb39 	bl	8027f40 <__assert_func>
 80168ce:	6823      	ldr	r3, [r4, #0]
 80168d0:	4620      	mov	r0, r4
 80168d2:	9d00      	ldr	r5, [sp, #0]
 80168d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168d6:	4798      	blx	r3
 80168d8:	4228      	tst	r0, r5
 80168da:	d104      	bne.n	80168e6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80168dc:	4b0b      	ldr	r3, [pc, #44]	; (801690c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80168de:	f240 11e1 	movw	r1, #481	; 0x1e1
 80168e2:	4a08      	ldr	r2, [pc, #32]	; (8016904 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80168e4:	e7f0      	b.n	80168c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80168e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80168e8:	4669      	mov	r1, sp
 80168ea:	6860      	ldr	r0, [r4, #4]
 80168ec:	9306      	str	r3, [sp, #24]
 80168ee:	6803      	ldr	r3, [r0, #0]
 80168f0:	685b      	ldr	r3, [r3, #4]
 80168f2:	4798      	blx	r3
 80168f4:	b008      	add	sp, #32
 80168f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168fa:	bf00      	nop
 80168fc:	200060f0 	.word	0x200060f0
 8016900:	0802acf6 	.word	0x0802acf6
 8016904:	0802ae64 	.word	0x0802ae64
 8016908:	0802ac7a 	.word	0x0802ac7a
 801690c:	0802ad2e 	.word	0x0802ad2e

08016910 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	b08a      	sub	sp, #40	; 0x28
 8016914:	4604      	mov	r4, r0
 8016916:	466b      	mov	r3, sp
 8016918:	e883 0006 	stmia.w	r3, {r1, r2}
 801691c:	4b1f      	ldr	r3, [pc, #124]	; (801699c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801691e:	781b      	ldrb	r3, [r3, #0]
 8016920:	b933      	cbnz	r3, 8016930 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016922:	4b1f      	ldr	r3, [pc, #124]	; (80169a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016924:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8016928:	4a1e      	ldr	r2, [pc, #120]	; (80169a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801692a:	481f      	ldr	r0, [pc, #124]	; (80169a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801692c:	f011 fb08 	bl	8027f40 <__assert_func>
 8016930:	2300      	movs	r3, #0
 8016932:	f8bd 5000 	ldrh.w	r5, [sp]
 8016936:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801693a:	9308      	str	r3, [sp, #32]
 801693c:	2301      	movs	r3, #1
 801693e:	9302      	str	r3, [sp, #8]
 8016940:	6803      	ldr	r3, [r0, #0]
 8016942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016944:	4798      	blx	r3
 8016946:	4632      	mov	r2, r6
 8016948:	4629      	mov	r1, r5
 801694a:	4603      	mov	r3, r0
 801694c:	4620      	mov	r0, r4
 801694e:	f7ff ff67 	bl	8016820 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016952:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016954:	9003      	str	r0, [sp, #12]
 8016956:	9305      	str	r3, [sp, #20]
 8016958:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801695c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016960:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016964:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016968:	4b10      	ldr	r3, [pc, #64]	; (80169ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801696a:	881b      	ldrh	r3, [r3, #0]
 801696c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016970:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016974:	f7f9 fdd8 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8016978:	6803      	ldr	r3, [r0, #0]
 801697a:	6a1b      	ldr	r3, [r3, #32]
 801697c:	4798      	blx	r3
 801697e:	23ff      	movs	r3, #255	; 0xff
 8016980:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016984:	a902      	add	r1, sp, #8
 8016986:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801698a:	6860      	ldr	r0, [r4, #4]
 801698c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016990:	6803      	ldr	r3, [r0, #0]
 8016992:	685b      	ldr	r3, [r3, #4]
 8016994:	4798      	blx	r3
 8016996:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016998:	b00a      	add	sp, #40	; 0x28
 801699a:	bd70      	pop	{r4, r5, r6, pc}
 801699c:	200060f5 	.word	0x200060f5
 80169a0:	0802abc7 	.word	0x0802abc7
 80169a4:	0802af08 	.word	0x0802af08
 80169a8:	0802ac7a 	.word	0x0802ac7a
 80169ac:	200060f0 	.word	0x200060f0

080169b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80169b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169b2:	b08b      	sub	sp, #44	; 0x2c
 80169b4:	4604      	mov	r4, r0
 80169b6:	466d      	mov	r5, sp
 80169b8:	e885 0006 	stmia.w	r5, {r1, r2}
 80169bc:	461d      	mov	r5, r3
 80169be:	2300      	movs	r3, #0
 80169c0:	f8bd 6000 	ldrh.w	r6, [sp]
 80169c4:	9308      	str	r3, [sp, #32]
 80169c6:	2301      	movs	r3, #1
 80169c8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80169cc:	9302      	str	r3, [sp, #8]
 80169ce:	6803      	ldr	r3, [r0, #0]
 80169d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169d2:	4798      	blx	r3
 80169d4:	463a      	mov	r2, r7
 80169d6:	4631      	mov	r1, r6
 80169d8:	4603      	mov	r3, r0
 80169da:	4620      	mov	r0, r4
 80169dc:	f7ff ff20 	bl	8016820 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80169e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80169e4:	9003      	str	r0, [sp, #12]
 80169e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80169ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80169ee:	9505      	str	r5, [sp, #20]
 80169f0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80169f4:	4b0d      	ldr	r3, [pc, #52]	; (8016a2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80169f6:	881b      	ldrh	r3, [r3, #0]
 80169f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80169fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169fe:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016a02:	f7f9 fd91 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8016a06:	6803      	ldr	r3, [r0, #0]
 8016a08:	6a1b      	ldr	r3, [r3, #32]
 8016a0a:	4798      	blx	r3
 8016a0c:	23ff      	movs	r3, #255	; 0xff
 8016a0e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016a12:	a902      	add	r1, sp, #8
 8016a14:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016a18:	6860      	ldr	r0, [r4, #4]
 8016a1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016a1e:	6803      	ldr	r3, [r0, #0]
 8016a20:	685b      	ldr	r3, [r3, #4]
 8016a22:	4798      	blx	r3
 8016a24:	4628      	mov	r0, r5
 8016a26:	b00b      	add	sp, #44	; 0x2c
 8016a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a2a:	bf00      	nop
 8016a2c:	200060f0 	.word	0x200060f0

08016a30 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016a30:	b570      	push	{r4, r5, r6, lr}
 8016a32:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016a36:	4604      	mov	r4, r0
 8016a38:	b19b      	cbz	r3, 8016a62 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016a3a:	2002      	movs	r0, #2
 8016a3c:	f7fc fe28 	bl	8013690 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016a40:	2300      	movs	r3, #0
 8016a42:	4620      	mov	r0, r4
 8016a44:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016a48:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016a4c:	6823      	ldr	r3, [r4, #0]
 8016a4e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016a52:	f7ff fd53 	bl	80164fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016a56:	4601      	mov	r1, r0
 8016a58:	4620      	mov	r0, r4
 8016a5a:	462b      	mov	r3, r5
 8016a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a60:	4718      	bx	r3
 8016a62:	bd70      	pop	{r4, r5, r6, pc}

08016a64 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8016a64:	b538      	push	{r3, r4, r5, lr}
 8016a66:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8016a6a:	4604      	mov	r4, r0
 8016a6c:	460d      	mov	r5, r1
 8016a6e:	428a      	cmp	r2, r1
 8016a70:	d008      	beq.n	8016a84 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 8016a72:	2a01      	cmp	r2, #1
 8016a74:	6803      	ldr	r3, [r0, #0]
 8016a76:	d106      	bne.n	8016a86 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8016a78:	b929      	cbnz	r1, 8016a86 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8016a7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016a7e:	4798      	blx	r3
 8016a80:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8016a84:	bd38      	pop	{r3, r4, r5, pc}
 8016a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	e7f7      	b.n	8016a7e <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

08016a90 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016a90:	4b0d      	ldr	r3, [pc, #52]	; (8016ac8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016a92:	b510      	push	{r4, lr}
 8016a94:	781b      	ldrb	r3, [r3, #0]
 8016a96:	4604      	mov	r4, r0
 8016a98:	b95b      	cbnz	r3, 8016ab2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016a9a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016a9e:	2b02      	cmp	r3, #2
 8016aa0:	d007      	beq.n	8016ab2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016aa2:	6840      	ldr	r0, [r0, #4]
 8016aa4:	f000 f930 	bl	8016d08 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016aa8:	b118      	cbz	r0, 8016ab2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016aaa:	6862      	ldr	r2, [r4, #4]
 8016aac:	7a53      	ldrb	r3, [r2, #9]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d0fc      	beq.n	8016aac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016ab2:	f7fd f81f 	bl	8013af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016ab6:	4620      	mov	r0, r4
 8016ab8:	2100      	movs	r1, #0
 8016aba:	f7ff ffd3 	bl	8016a64 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8016abe:	4620      	mov	r0, r4
 8016ac0:	f7ff fd1c 	bl	80164fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016ac4:	bd10      	pop	{r4, pc}
 8016ac6:	bf00      	nop
 8016ac8:	200060f4 	.word	0x200060f4

08016acc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016acc:	4770      	bx	lr

08016ace <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016ace:	2000      	movs	r0, #0
 8016ad0:	4770      	bx	lr

08016ad2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016ad2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016ad6:	1a13      	subs	r3, r2, r0
 8016ad8:	4258      	negs	r0, r3
 8016ada:	4158      	adcs	r0, r3
 8016adc:	4770      	bx	lr

08016ade <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016ade:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016ae2:	1a9b      	subs	r3, r3, r2
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	bfdc      	itt	le
 8016ae8:	6882      	ldrle	r2, [r0, #8]
 8016aea:	189b      	addle	r3, r3, r2
 8016aec:	2b01      	cmp	r3, #1
 8016aee:	bfcc      	ite	gt
 8016af0:	2000      	movgt	r0, #0
 8016af2:	2001      	movle	r0, #1
 8016af4:	4770      	bx	lr

08016af6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016af6:	6902      	ldr	r2, [r0, #16]
 8016af8:	6840      	ldr	r0, [r0, #4]
 8016afa:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016afe:	4770      	bx	lr

08016b00 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016b00:	6803      	ldr	r3, [r0, #0]
 8016b02:	691b      	ldr	r3, [r3, #16]
 8016b04:	4718      	bx	r3

08016b06 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016b06:	4770      	bx	lr

08016b08 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016b08:	4770      	bx	lr
	...

08016b0c <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	b570      	push	{r4, r5, r6, lr}
 8016b10:	7203      	strb	r3, [r0, #8]
 8016b12:	4604      	mov	r4, r0
 8016b14:	6840      	ldr	r0, [r0, #4]
 8016b16:	6803      	ldr	r3, [r0, #0]
 8016b18:	699b      	ldr	r3, [r3, #24]
 8016b1a:	4798      	blx	r3
 8016b1c:	6803      	ldr	r3, [r0, #0]
 8016b1e:	4605      	mov	r5, r0
 8016b20:	2b08      	cmp	r3, #8
 8016b22:	d01e      	beq.n	8016b62 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8016b24:	d80b      	bhi.n	8016b3e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016b26:	2b02      	cmp	r3, #2
 8016b28:	d027      	beq.n	8016b7a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016b2a:	2b04      	cmp	r3, #4
 8016b2c:	d011      	beq.n	8016b52 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016b2e:	2b01      	cmp	r3, #1
 8016b30:	d028      	beq.n	8016b84 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016b32:	4b17      	ldr	r3, [pc, #92]	; (8016b90 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8016b34:	218c      	movs	r1, #140	; 0x8c
 8016b36:	4a17      	ldr	r2, [pc, #92]	; (8016b94 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8016b38:	4817      	ldr	r0, [pc, #92]	; (8016b98 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8016b3a:	f011 fa01 	bl	8027f40 <__assert_func>
 8016b3e:	2b40      	cmp	r3, #64	; 0x40
 8016b40:	d020      	beq.n	8016b84 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016b42:	d801      	bhi.n	8016b48 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016b44:	2b20      	cmp	r3, #32
 8016b46:	e7f3      	b.n	8016b30 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016b48:	2b80      	cmp	r3, #128	; 0x80
 8016b4a:	d01b      	beq.n	8016b84 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b50:	e7ee      	b.n	8016b30 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016b52:	6823      	ldr	r3, [r4, #0]
 8016b54:	7f01      	ldrb	r1, [r0, #28]
 8016b56:	4620      	mov	r0, r4
 8016b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b5a:	4798      	blx	r3
 8016b5c:	6823      	ldr	r3, [r4, #0]
 8016b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b60:	e006      	b.n	8016b70 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016b62:	6823      	ldr	r3, [r4, #0]
 8016b64:	7f01      	ldrb	r1, [r0, #28]
 8016b66:	4620      	mov	r0, r4
 8016b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b6a:	4798      	blx	r3
 8016b6c:	6823      	ldr	r3, [r4, #0]
 8016b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b70:	4629      	mov	r1, r5
 8016b72:	4620      	mov	r0, r4
 8016b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b78:	4718      	bx	r3
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b80:	4798      	blx	r3
 8016b82:	e7f3      	b.n	8016b6c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016b84:	6823      	ldr	r3, [r4, #0]
 8016b86:	4620      	mov	r0, r4
 8016b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b8a:	4798      	blx	r3
 8016b8c:	e7e6      	b.n	8016b5c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016b8e:	bf00      	nop
 8016b90:	0802b159 	.word	0x0802b159
 8016b94:	0802b268 	.word	0x0802b268
 8016b98:	0802b17e 	.word	0x0802b17e

08016b9c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016b9c:	b570      	push	{r4, r5, r6, lr}
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	460e      	mov	r6, r1
 8016ba2:	6860      	ldr	r0, [r4, #4]
 8016ba4:	6803      	ldr	r3, [r0, #0]
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	4798      	blx	r3
 8016baa:	2800      	cmp	r0, #0
 8016bac:	d1f9      	bne.n	8016ba2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016bae:	4d0d      	ldr	r5, [pc, #52]	; (8016be4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016bb0:	6828      	ldr	r0, [r5, #0]
 8016bb2:	6803      	ldr	r3, [r0, #0]
 8016bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bb6:	4798      	blx	r3
 8016bb8:	f7fc ffb6 	bl	8013b28 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016bbc:	6828      	ldr	r0, [r5, #0]
 8016bbe:	2101      	movs	r1, #1
 8016bc0:	f7ff ff50 	bl	8016a64 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8016bc4:	6860      	ldr	r0, [r4, #4]
 8016bc6:	4631      	mov	r1, r6
 8016bc8:	6803      	ldr	r3, [r0, #0]
 8016bca:	689b      	ldr	r3, [r3, #8]
 8016bcc:	4798      	blx	r3
 8016bce:	6823      	ldr	r3, [r4, #0]
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bd4:	4798      	blx	r3
 8016bd6:	6828      	ldr	r0, [r5, #0]
 8016bd8:	6803      	ldr	r3, [r0, #0]
 8016bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016be0:	4718      	bx	r3
 8016be2:	bf00      	nop
 8016be4:	200060f8 	.word	0x200060f8

08016be8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016be8:	b508      	push	{r3, lr}
 8016bea:	f7fc ff83 	bl	8013af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016bf2:	f7fc bf8d 	b.w	8013b10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016bf6 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016bf6:	b510      	push	{r4, lr}
 8016bf8:	4604      	mov	r4, r0
 8016bfa:	6840      	ldr	r0, [r0, #4]
 8016bfc:	6803      	ldr	r3, [r0, #0]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4798      	blx	r3
 8016c02:	b948      	cbnz	r0, 8016c18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016c04:	7a63      	ldrb	r3, [r4, #9]
 8016c06:	b13b      	cbz	r3, 8016c18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016c08:	7a23      	ldrb	r3, [r4, #8]
 8016c0a:	b92b      	cbnz	r3, 8016c18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016c0c:	6823      	ldr	r3, [r4, #0]
 8016c0e:	4620      	mov	r0, r4
 8016c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c16:	4718      	bx	r3
 8016c18:	bd10      	pop	{r4, pc}
	...

08016c1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016c1c:	b510      	push	{r4, lr}
 8016c1e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016c22:	1b12      	subs	r2, r2, r4
 8016c24:	2a00      	cmp	r2, #0
 8016c26:	bfdc      	itt	le
 8016c28:	6883      	ldrle	r3, [r0, #8]
 8016c2a:	18d2      	addle	r2, r2, r3
 8016c2c:	2a01      	cmp	r2, #1
 8016c2e:	dd18      	ble.n	8016c62 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016c30:	6843      	ldr	r3, [r0, #4]
 8016c32:	f101 021c 	add.w	r2, r1, #28
 8016c36:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016c3a:	f851 4b04 	ldr.w	r4, [r1], #4
 8016c3e:	4291      	cmp	r1, r2
 8016c40:	f843 4b04 	str.w	r4, [r3], #4
 8016c44:	d1f9      	bne.n	8016c3a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016c46:	880a      	ldrh	r2, [r1, #0]
 8016c48:	801a      	strh	r2, [r3, #0]
 8016c4a:	788a      	ldrb	r2, [r1, #2]
 8016c4c:	709a      	strb	r2, [r3, #2]
 8016c4e:	68c3      	ldr	r3, [r0, #12]
 8016c50:	6882      	ldr	r2, [r0, #8]
 8016c52:	f3bf 8f5b 	dmb	ish
 8016c56:	3301      	adds	r3, #1
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	bfd8      	it	le
 8016c5c:	1a9b      	suble	r3, r3, r2
 8016c5e:	60c3      	str	r3, [r0, #12]
 8016c60:	bd10      	pop	{r4, pc}
 8016c62:	4b03      	ldr	r3, [pc, #12]	; (8016c70 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016c64:	2139      	movs	r1, #57	; 0x39
 8016c66:	4a03      	ldr	r2, [pc, #12]	; (8016c74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016c68:	4803      	ldr	r0, [pc, #12]	; (8016c78 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016c6a:	f011 f969 	bl	8027f40 <__assert_func>
 8016c6e:	bf00      	nop
 8016c70:	0802b1a4 	.word	0x0802b1a4
 8016c74:	0802b298 	.word	0x0802b298
 8016c78:	0802b17e 	.word	0x0802b17e

08016c7c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016c7c:	b510      	push	{r4, lr}
 8016c7e:	6803      	ldr	r3, [r0, #0]
 8016c80:	4604      	mov	r4, r0
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	4798      	blx	r3
 8016c86:	b128      	cbz	r0, 8016c94 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016c88:	4b07      	ldr	r3, [pc, #28]	; (8016ca8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016c8a:	213f      	movs	r1, #63	; 0x3f
 8016c8c:	4a07      	ldr	r2, [pc, #28]	; (8016cac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016c8e:	4808      	ldr	r0, [pc, #32]	; (8016cb0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016c90:	f011 f956 	bl	8027f40 <__assert_func>
 8016c94:	6923      	ldr	r3, [r4, #16]
 8016c96:	68a2      	ldr	r2, [r4, #8]
 8016c98:	f3bf 8f5b 	dmb	ish
 8016c9c:	3301      	adds	r3, #1
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	bfd8      	it	le
 8016ca2:	1a9b      	suble	r3, r3, r2
 8016ca4:	6123      	str	r3, [r4, #16]
 8016ca6:	bd10      	pop	{r4, pc}
 8016ca8:	0802b1c7 	.word	0x0802b1c7
 8016cac:	0802b2e6 	.word	0x0802b2e6
 8016cb0:	0802b17e 	.word	0x0802b17e

08016cb4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016cb4:	b570      	push	{r4, r5, r6, lr}
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	6840      	ldr	r0, [r0, #4]
 8016cba:	6803      	ldr	r3, [r0, #0]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	4798      	blx	r3
 8016cc0:	4605      	mov	r5, r0
 8016cc2:	b930      	cbnz	r0, 8016cd2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016cc4:	7a23      	ldrb	r3, [r4, #8]
 8016cc6:	b123      	cbz	r3, 8016cd2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016cc8:	6860      	ldr	r0, [r4, #4]
 8016cca:	6803      	ldr	r3, [r0, #0]
 8016ccc:	695b      	ldr	r3, [r3, #20]
 8016cce:	4798      	blx	r3
 8016cd0:	7225      	strb	r5, [r4, #8]
 8016cd2:	6860      	ldr	r0, [r4, #4]
 8016cd4:	6803      	ldr	r3, [r0, #0]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	4798      	blx	r3
 8016cda:	b928      	cbnz	r0, 8016ce8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016cdc:	6823      	ldr	r3, [r4, #0]
 8016cde:	4620      	mov	r0, r4
 8016ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ce6:	4718      	bx	r3
 8016ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cec:	f7fc bf28 	b.w	8013b40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016cf0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016cf0:	b510      	push	{r4, lr}
 8016cf2:	6082      	str	r2, [r0, #8]
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	4c03      	ldr	r4, [pc, #12]	; (8016d04 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016cf8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016cfc:	e9c0 4100 	strd	r4, r1, [r0]
 8016d00:	bd10      	pop	{r4, pc}
 8016d02:	bf00      	nop
 8016d04:	0802b24c 	.word	0x0802b24c

08016d08 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016d08:	6840      	ldr	r0, [r0, #4]
 8016d0a:	6803      	ldr	r3, [r0, #0]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	4718      	bx	r3

08016d10 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016d10:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016d14:	4770      	bx	lr

08016d16 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016d16:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016d1a:	4770      	bx	lr

08016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016d1c:	b507      	push	{r0, r1, r2, lr}
 8016d1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016d22:	ab01      	add	r3, sp, #4
 8016d24:	6809      	ldr	r1, [r1, #0]
 8016d26:	6800      	ldr	r0, [r0, #0]
 8016d28:	f004 fe6a 	bl	801ba00 <_ZN8touchgfx6muldivElllRl>
 8016d2c:	b003      	add	sp, #12
 8016d2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016d34 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016d34:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016d38:	fb90 f3f2 	sdiv	r3, r0, r2
 8016d3c:	fb03 0312 	mls	r3, r3, r2, r0
 8016d40:	4413      	add	r3, r2
 8016d42:	fb93 f0f2 	sdiv	r0, r3, r2
 8016d46:	fb02 3010 	mls	r0, r2, r0, r3
 8016d4a:	4b0a      	ldr	r3, [pc, #40]	; (8016d74 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016d4c:	285a      	cmp	r0, #90	; 0x5a
 8016d4e:	dc02      	bgt.n	8016d56 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016d50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016d54:	4770      	bx	lr
 8016d56:	28b4      	cmp	r0, #180	; 0xb4
 8016d58:	dc02      	bgt.n	8016d60 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016d5a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016d5e:	e7f7      	b.n	8016d50 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016d60:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016d64:	bfd4      	ite	le
 8016d66:	38b4      	suble	r0, #180	; 0xb4
 8016d68:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016d6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016d70:	4240      	negs	r0, r0
 8016d72:	4770      	bx	lr
 8016d74:	0802b316 	.word	0x0802b316

08016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8016d78:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016d7c:	fb90 f3f2 	sdiv	r3, r0, r2
 8016d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d82:	fb03 0012 	mls	r0, r3, r2, r0
 8016d86:	4410      	add	r0, r2
 8016d88:	fb90 f4f2 	sdiv	r4, r0, r2
 8016d8c:	fb02 0414 	mls	r4, r2, r4, r0
 8016d90:	f004 061f 	and.w	r6, r4, #31
 8016d94:	1164      	asrs	r4, r4, #5
 8016d96:	4620      	mov	r0, r4
 8016d98:	f7ff ffcc 	bl	8016d34 <_ZN8touchgfx7CWRUtil4sineEi>
 8016d9c:	4605      	mov	r5, r0
 8016d9e:	b90e      	cbnz	r6, 8016da4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8016da0:	b002      	add	sp, #8
 8016da2:	bd70      	pop	{r4, r5, r6, pc}
 8016da4:	1c60      	adds	r0, r4, #1
 8016da6:	f7ff ffc5 	bl	8016d34 <_ZN8touchgfx7CWRUtil4sineEi>
 8016daa:	ab01      	add	r3, sp, #4
 8016dac:	2220      	movs	r2, #32
 8016dae:	4631      	mov	r1, r6
 8016db0:	1b40      	subs	r0, r0, r5
 8016db2:	f004 fe25 	bl	801ba00 <_ZN8touchgfx6muldivElllRl>
 8016db6:	4428      	add	r0, r5
 8016db8:	e7f2      	b.n	8016da0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08016dba <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8016dba:	b508      	push	{r3, lr}
 8016dbc:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8016dc0:	f7ff ffda 	bl	8016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016dc4:	bd08      	pop	{r3, pc}
	...

08016dc8 <_ZN8touchgfx6CircleC1Ev>:
 8016dc8:	b510      	push	{r4, lr}
 8016dca:	4604      	mov	r4, r0
 8016dcc:	f000 fc9c 	bl	8017708 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016dd0:	4b08      	ldr	r3, [pc, #32]	; (8016df4 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8016dd2:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	6023      	str	r3, [r4, #0]
 8016dda:	2300      	movs	r3, #0
 8016ddc:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8016de0:	f24b 4205 	movw	r2, #46085	; 0xb405
 8016de4:	60a3      	str	r3, [r4, #8]
 8016de6:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016dea:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016dee:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8016df2:	bd10      	pop	{r4, pc}
 8016df4:	0802b3d4 	.word	0x0802b3d4

08016df8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016dfc:	4606      	mov	r6, r0
 8016dfe:	6810      	ldr	r0, [r2, #0]
 8016e00:	4698      	mov	r8, r3
 8016e02:	4691      	mov	r9, r2
 8016e04:	460f      	mov	r7, r1
 8016e06:	f7ff ffb7 	bl	8016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016e0a:	a902      	add	r1, sp, #8
 8016e0c:	2402      	movs	r4, #2
 8016e0e:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016e12:	4640      	mov	r0, r8
 8016e14:	f7ff ff82 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e18:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8016e1a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016e1e:	4405      	add	r5, r0
 8016e20:	f8d9 0000 	ldr.w	r0, [r9]
 8016e24:	f7ff ffc9 	bl	8016dba <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016e28:	a902      	add	r1, sp, #8
 8016e2a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016e2e:	4640      	mov	r0, r8
 8016e30:	f7ff ff74 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e34:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8016e36:	4629      	mov	r1, r5
 8016e38:	fb90 f0f4 	sdiv	r0, r0, r4
 8016e3c:	1a12      	subs	r2, r2, r0
 8016e3e:	4638      	mov	r0, r7
 8016e40:	f00f fc27 	bl	8026692 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016e44:	b003      	add	sp, #12
 8016e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016e4a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8016e4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016e4e:	9e08      	ldr	r6, [sp, #32]
 8016e50:	4698      	mov	r8, r3
 8016e52:	4615      	mov	r5, r2
 8016e54:	460f      	mov	r7, r1
 8016e56:	6830      	ldr	r0, [r6, #0]
 8016e58:	2402      	movs	r4, #2
 8016e5a:	f7ff ff8d 	bl	8016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016e5e:	a902      	add	r1, sp, #8
 8016e60:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e66:	f7ff ff59 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e6a:	682d      	ldr	r5, [r5, #0]
 8016e6c:	fb90 f0f4 	sdiv	r0, r0, r4
 8016e70:	4405      	add	r5, r0
 8016e72:	6830      	ldr	r0, [r6, #0]
 8016e74:	f7ff ffa1 	bl	8016dba <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016e78:	a902      	add	r1, sp, #8
 8016e7a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e80:	f7ff ff4c 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e84:	f8d8 2000 	ldr.w	r2, [r8]
 8016e88:	4629      	mov	r1, r5
 8016e8a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016e8e:	1a12      	subs	r2, r2, r0
 8016e90:	4638      	mov	r0, r7
 8016e92:	f00f fb8d 	bl	80265b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016e96:	b002      	add	sp, #8
 8016e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e9c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016e9c:	b513      	push	{r0, r1, r4, lr}
 8016e9e:	e9cd 2300 	strd	r2, r3, [sp]
 8016ea2:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8016ea6:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8016eaa:	f7ff ffce 	bl	8016e4a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016eae:	b002      	add	sp, #8
 8016eb0:	bd10      	pop	{r4, pc}

08016eb2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eb4:	680e      	ldr	r6, [r1, #0]
 8016eb6:	681f      	ldr	r7, [r3, #0]
 8016eb8:	9807      	ldr	r0, [sp, #28]
 8016eba:	42be      	cmp	r6, r7
 8016ebc:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8016ec0:	bfb8      	it	lt
 8016ec2:	601e      	strlt	r6, [r3, #0]
 8016ec4:	680b      	ldr	r3, [r1, #0]
 8016ec6:	6829      	ldr	r1, [r5, #0]
 8016ec8:	428b      	cmp	r3, r1
 8016eca:	bfc8      	it	gt
 8016ecc:	602b      	strgt	r3, [r5, #0]
 8016ece:	6813      	ldr	r3, [r2, #0]
 8016ed0:	6821      	ldr	r1, [r4, #0]
 8016ed2:	428b      	cmp	r3, r1
 8016ed4:	bfb8      	it	lt
 8016ed6:	6023      	strlt	r3, [r4, #0]
 8016ed8:	6813      	ldr	r3, [r2, #0]
 8016eda:	6802      	ldr	r2, [r0, #0]
 8016edc:	4293      	cmp	r3, r2
 8016ede:	bfc8      	it	gt
 8016ee0:	6003      	strgt	r3, [r0, #0]
 8016ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ee4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ee8:	b089      	sub	sp, #36	; 0x24
 8016eea:	4690      	mov	r8, r2
 8016eec:	4606      	mov	r6, r0
 8016eee:	2402      	movs	r4, #2
 8016ef0:	ad08      	add	r5, sp, #32
 8016ef2:	6808      	ldr	r0, [r1, #0]
 8016ef4:	461f      	mov	r7, r3
 8016ef6:	4689      	mov	r9, r1
 8016ef8:	f7ff ff3e 	bl	8016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016efc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016f00:	4640      	mov	r0, r8
 8016f02:	4629      	mov	r1, r5
 8016f04:	f7ff ff0a 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016f08:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8016f0a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016f0e:	4418      	add	r0, r3
 8016f10:	9005      	str	r0, [sp, #20]
 8016f12:	f8d9 0000 	ldr.w	r0, [r9]
 8016f16:	f7ff ff50 	bl	8016dba <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016f1a:	4629      	mov	r1, r5
 8016f1c:	9007      	str	r0, [sp, #28]
 8016f1e:	4640      	mov	r0, r8
 8016f20:	f7ff fefc 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016f26:	aa08      	add	r2, sp, #32
 8016f28:	a905      	add	r1, sp, #20
 8016f2a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016f2e:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8016f30:	1a24      	subs	r4, r4, r0
 8016f32:	4630      	mov	r0, r6
 8016f34:	f842 4d08 	str.w	r4, [r2, #-8]!
 8016f38:	9302      	str	r3, [sp, #8]
 8016f3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f3c:	9301      	str	r3, [sp, #4]
 8016f3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f40:	9300      	str	r3, [sp, #0]
 8016f42:	463b      	mov	r3, r7
 8016f44:	f7ff ffb5 	bl	8016eb2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016f48:	b009      	add	sp, #36	; 0x24
 8016f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016f4e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8016f4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f52:	4291      	cmp	r1, r2
 8016f54:	b08d      	sub	sp, #52	; 0x34
 8016f56:	461e      	mov	r6, r3
 8016f58:	4604      	mov	r4, r0
 8016f5a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8016f5e:	ad0c      	add	r5, sp, #48	; 0x30
 8016f60:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8016f64:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8016f68:	bfc8      	it	gt
 8016f6a:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8016f6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016f72:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8016f76:	1a9b      	subs	r3, r3, r2
 8016f78:	a907      	add	r1, sp, #28
 8016f7a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016f7e:	bfa2      	ittt	ge
 8016f80:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8016f84:	2200      	movge	r2, #0
 8016f86:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8016f8a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8016f8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016f8e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016f92:	f845 3d04 	str.w	r3, [r5, #-4]!
 8016f96:	4633      	mov	r3, r6
 8016f98:	462a      	mov	r2, r5
 8016f9a:	9700      	str	r7, [sp, #0]
 8016f9c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016fa0:	f7ff ffa0 	bl	8016ee4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016fa4:	9b07      	ldr	r3, [sp, #28]
 8016fa6:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8016faa:	f103 0120 	add.w	r1, r3, #32
 8016fae:	fb91 f3f0 	sdiv	r3, r1, r0
 8016fb2:	fb00 1313 	mls	r3, r0, r3, r1
 8016fb6:	1ac3      	subs	r3, r0, r3
 8016fb8:	fb93 f2f0 	sdiv	r2, r3, r0
 8016fbc:	fb00 3312 	mls	r3, r0, r2, r3
 8016fc0:	440b      	add	r3, r1
 8016fc2:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8016fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fc8:	9906      	ldr	r1, [sp, #24]
 8016fca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016fcc:	4291      	cmp	r1, r2
 8016fce:	db11      	blt.n	8016ff4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8016fd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016fd2:	4651      	mov	r1, sl
 8016fd4:	9700      	str	r7, [sp, #0]
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016fdc:	462a      	mov	r2, r5
 8016fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fe0:	4633      	mov	r3, r6
 8016fe2:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016fe6:	f7ff ff7d 	bl	8016ee4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fec:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8016ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ff2:	e7e8      	b.n	8016fc6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8016ff4:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8016ff8:	4291      	cmp	r1, r2
 8016ffa:	dd0c      	ble.n	8017016 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8016ffc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016ffe:	a906      	add	r1, sp, #24
 8017000:	9700      	str	r7, [sp, #0]
 8017002:	4620      	mov	r0, r4
 8017004:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017008:	462a      	mov	r2, r5
 801700a:	930b      	str	r3, [sp, #44]	; 0x2c
 801700c:	4633      	mov	r3, r6
 801700e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017012:	f7ff ff67 	bl	8016ee4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017016:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017018:	2b00      	cmp	r3, #0
 801701a:	f040 8097 	bne.w	801714c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 801701e:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8017022:	1a52      	subs	r2, r2, r1
 8017024:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8017028:	da0a      	bge.n	8017040 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 801702a:	462a      	mov	r2, r5
 801702c:	a90a      	add	r1, sp, #40	; 0x28
 801702e:	9700      	str	r7, [sp, #0]
 8017030:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017034:	4633      	mov	r3, r6
 8017036:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801703a:	4620      	mov	r0, r4
 801703c:	f7ff ff52 	bl	8016ee4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017040:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8017044:	2bb3      	cmp	r3, #179	; 0xb3
 8017046:	d87e      	bhi.n	8017146 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8017048:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 801704c:	1a1b      	subs	r3, r3, r0
 801704e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017052:	da78      	bge.n	8017146 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8017054:	ad0c      	add	r5, sp, #48	; 0x30
 8017056:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 801705a:	f7ff fe8d 	bl	8016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801705e:	f04f 0a02 	mov.w	sl, #2
 8017062:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017066:	4658      	mov	r0, fp
 8017068:	4629      	mov	r1, r5
 801706a:	f7ff fe57 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801706e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017070:	18c3      	adds	r3, r0, r3
 8017072:	9807      	ldr	r0, [sp, #28]
 8017074:	9305      	str	r3, [sp, #20]
 8017076:	f7ff fea0 	bl	8016dba <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801707a:	4629      	mov	r1, r5
 801707c:	900b      	str	r0, [sp, #44]	; 0x2c
 801707e:	4658      	mov	r0, fp
 8017080:	f7ff fe4c 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017084:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017086:	9a05      	ldr	r2, [sp, #20]
 8017088:	a90a      	add	r1, sp, #40	; 0x28
 801708a:	1a1b      	subs	r3, r3, r0
 801708c:	9700      	str	r7, [sp, #0]
 801708e:	4620      	mov	r0, r4
 8017090:	9304      	str	r3, [sp, #16]
 8017092:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017094:	fb93 f3fa 	sdiv	r3, r3, sl
 8017098:	1ad2      	subs	r2, r2, r3
 801709a:	920a      	str	r2, [sp, #40]	; 0x28
 801709c:	9a04      	ldr	r2, [sp, #16]
 801709e:	1ad3      	subs	r3, r2, r3
 80170a0:	462a      	mov	r2, r5
 80170a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80170a4:	4633      	mov	r3, r6
 80170a6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80170aa:	f7ff ff02 	bl	8016eb2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80170ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80170b0:	9a05      	ldr	r2, [sp, #20]
 80170b2:	a90a      	add	r1, sp, #40	; 0x28
 80170b4:	4620      	mov	r0, r4
 80170b6:	9700      	str	r7, [sp, #0]
 80170b8:	fb93 f3fa 	sdiv	r3, r3, sl
 80170bc:	189a      	adds	r2, r3, r2
 80170be:	920a      	str	r2, [sp, #40]	; 0x28
 80170c0:	9a04      	ldr	r2, [sp, #16]
 80170c2:	4413      	add	r3, r2
 80170c4:	462a      	mov	r2, r5
 80170c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80170c8:	4633      	mov	r3, r6
 80170ca:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80170ce:	f7ff fef0 	bl	8016eb2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80170d2:	9806      	ldr	r0, [sp, #24]
 80170d4:	f7ff fe50 	bl	8016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80170d8:	4629      	mov	r1, r5
 80170da:	900b      	str	r0, [sp, #44]	; 0x2c
 80170dc:	4658      	mov	r0, fp
 80170de:	f7ff fe1d 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80170e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80170e4:	18c3      	adds	r3, r0, r3
 80170e6:	9806      	ldr	r0, [sp, #24]
 80170e8:	9304      	str	r3, [sp, #16]
 80170ea:	f7ff fe66 	bl	8016dba <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80170ee:	4629      	mov	r1, r5
 80170f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80170f2:	4658      	mov	r0, fp
 80170f4:	f7ff fe12 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80170f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170fa:	9a04      	ldr	r2, [sp, #16]
 80170fc:	a90a      	add	r1, sp, #40	; 0x28
 80170fe:	eba3 0b00 	sub.w	fp, r3, r0
 8017102:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017104:	4620      	mov	r0, r4
 8017106:	9700      	str	r7, [sp, #0]
 8017108:	fb93 f3fa 	sdiv	r3, r3, sl
 801710c:	1ad2      	subs	r2, r2, r3
 801710e:	ebab 0303 	sub.w	r3, fp, r3
 8017112:	920a      	str	r2, [sp, #40]	; 0x28
 8017114:	462a      	mov	r2, r5
 8017116:	930b      	str	r3, [sp, #44]	; 0x2c
 8017118:	4633      	mov	r3, r6
 801711a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801711e:	f7ff fec8 	bl	8016eb2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017122:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017124:	9700      	str	r7, [sp, #0]
 8017126:	462a      	mov	r2, r5
 8017128:	a90a      	add	r1, sp, #40	; 0x28
 801712a:	4620      	mov	r0, r4
 801712c:	fb93 fafa 	sdiv	sl, r3, sl
 8017130:	9b04      	ldr	r3, [sp, #16]
 8017132:	4453      	add	r3, sl
 8017134:	930a      	str	r3, [sp, #40]	; 0x28
 8017136:	eb0a 030b 	add.w	r3, sl, fp
 801713a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801713e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017140:	4633      	mov	r3, r6
 8017142:	f7ff feb6 	bl	8016eb2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017146:	b00d      	add	sp, #52	; 0x34
 8017148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801714c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801714e:	a907      	add	r1, sp, #28
 8017150:	9700      	str	r7, [sp, #0]
 8017152:	4620      	mov	r0, r4
 8017154:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017158:	462a      	mov	r2, r5
 801715a:	930b      	str	r3, [sp, #44]	; 0x2c
 801715c:	4633      	mov	r3, r6
 801715e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017162:	f7ff febf 	bl	8016ee4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017166:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017168:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801716a:	a906      	add	r1, sp, #24
 801716c:	9700      	str	r7, [sp, #0]
 801716e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017172:	462a      	mov	r2, r5
 8017174:	930b      	str	r3, [sp, #44]	; 0x2c
 8017176:	4633      	mov	r3, r6
 8017178:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801717c:	e75d      	b.n	801703a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0801717e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801717e:	b530      	push	{r4, r5, lr}
 8017180:	4604      	mov	r4, r0
 8017182:	4608      	mov	r0, r1
 8017184:	4611      	mov	r1, r2
 8017186:	461a      	mov	r2, r3
 8017188:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801718c:	b089      	sub	sp, #36	; 0x24
 801718e:	2500      	movs	r5, #0
 8017190:	015b      	lsls	r3, r3, #5
 8017192:	9505      	str	r5, [sp, #20]
 8017194:	9304      	str	r3, [sp, #16]
 8017196:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801719a:	015b      	lsls	r3, r3, #5
 801719c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 80171a0:	ab07      	add	r3, sp, #28
 80171a2:	2520      	movs	r5, #32
 80171a4:	9302      	str	r3, [sp, #8]
 80171a6:	ab06      	add	r3, sp, #24
 80171a8:	9301      	str	r3, [sp, #4]
 80171aa:	ab05      	add	r3, sp, #20
 80171ac:	9300      	str	r3, [sp, #0]
 80171ae:	ab04      	add	r3, sp, #16
 80171b0:	f7ff fecd 	bl	8016f4e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80171b4:	9a04      	ldr	r2, [sp, #16]
 80171b6:	9805      	ldr	r0, [sp, #20]
 80171b8:	9b06      	ldr	r3, [sp, #24]
 80171ba:	9907      	ldr	r1, [sp, #28]
 80171bc:	fb92 f2f5 	sdiv	r2, r2, r5
 80171c0:	fb90 f0f5 	sdiv	r0, r0, r5
 80171c4:	fb93 f3f5 	sdiv	r3, r3, r5
 80171c8:	fb91 f1f5 	sdiv	r1, r1, r5
 80171cc:	b292      	uxth	r2, r2
 80171ce:	3002      	adds	r0, #2
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	3102      	adds	r1, #2
 80171d4:	1a80      	subs	r0, r0, r2
 80171d6:	3a01      	subs	r2, #1
 80171d8:	1ac9      	subs	r1, r1, r3
 80171da:	3b01      	subs	r3, #1
 80171dc:	80a0      	strh	r0, [r4, #4]
 80171de:	4620      	mov	r0, r4
 80171e0:	8022      	strh	r2, [r4, #0]
 80171e2:	8063      	strh	r3, [r4, #2]
 80171e4:	80e1      	strh	r1, [r4, #6]
 80171e6:	b009      	add	sp, #36	; 0x24
 80171e8:	bd30      	pop	{r4, r5, pc}

080171ea <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 80171ea:	b510      	push	{r4, lr}
 80171ec:	4604      	mov	r4, r0
 80171ee:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 80171f2:	f7ff ffc4 	bl	801717e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80171f6:	4620      	mov	r0, r4
 80171f8:	bd10      	pop	{r4, pc}

080171fa <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 80171fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171fc:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8017200:	4606      	mov	r6, r0
 8017202:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8017206:	42a5      	cmp	r5, r4
 8017208:	6813      	ldr	r3, [r2, #0]
 801720a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801720e:	da2b      	bge.n	8017268 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8017210:	42a3      	cmp	r3, r4
 8017212:	dd14      	ble.n	801723e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8017214:	b168      	cbz	r0, 8017232 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017216:	4267      	negs	r7, r4
 8017218:	fb97 f2f0 	sdiv	r2, r7, r0
 801721c:	fb00 7212 	mls	r2, r0, r2, r7
 8017220:	1a82      	subs	r2, r0, r2
 8017222:	fb92 f7f0 	sdiv	r7, r2, r0
 8017226:	fb00 2017 	mls	r0, r0, r7, r2
 801722a:	1a24      	subs	r4, r4, r0
 801722c:	42ac      	cmp	r4, r5
 801722e:	bfb8      	it	lt
 8017230:	462c      	movlt	r4, r5
 8017232:	4630      	mov	r0, r6
 8017234:	4622      	mov	r2, r4
 8017236:	f7ff ffa2 	bl	801717e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 801723a:	4630      	mov	r0, r6
 801723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801723e:	42ab      	cmp	r3, r5
 8017240:	dd0e      	ble.n	8017260 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8017242:	b168      	cbz	r0, 8017260 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8017244:	425f      	negs	r7, r3
 8017246:	fb97 f2f0 	sdiv	r2, r7, r0
 801724a:	fb00 7212 	mls	r2, r0, r2, r7
 801724e:	1a82      	subs	r2, r0, r2
 8017250:	fb92 f7f0 	sdiv	r7, r2, r0
 8017254:	fb00 2017 	mls	r0, r0, r7, r2
 8017258:	1a1b      	subs	r3, r3, r0
 801725a:	42ab      	cmp	r3, r5
 801725c:	bfb8      	it	lt
 801725e:	462b      	movlt	r3, r5
 8017260:	4622      	mov	r2, r4
 8017262:	461c      	mov	r4, r3
 8017264:	4613      	mov	r3, r2
 8017266:	e7e4      	b.n	8017232 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017268:	42a3      	cmp	r3, r4
 801726a:	da10      	bge.n	801728e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 801726c:	b148      	cbz	r0, 8017282 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 801726e:	fb94 f2f0 	sdiv	r2, r4, r0
 8017272:	fb00 4212 	mls	r2, r0, r2, r4
 8017276:	1a82      	subs	r2, r0, r2
 8017278:	fb92 f7f0 	sdiv	r7, r2, r0
 801727c:	fb00 2017 	mls	r0, r0, r7, r2
 8017280:	4404      	add	r4, r0
 8017282:	42a5      	cmp	r5, r4
 8017284:	bfa8      	it	ge
 8017286:	4625      	movge	r5, r4
 8017288:	461c      	mov	r4, r3
 801728a:	462b      	mov	r3, r5
 801728c:	e7d1      	b.n	8017232 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801728e:	42ab      	cmp	r3, r5
 8017290:	dacf      	bge.n	8017232 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017292:	2800      	cmp	r0, #0
 8017294:	d0cd      	beq.n	8017232 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017296:	fb93 f2f0 	sdiv	r2, r3, r0
 801729a:	fb00 3212 	mls	r2, r0, r2, r3
 801729e:	1a82      	subs	r2, r0, r2
 80172a0:	fb92 f7f0 	sdiv	r7, r2, r0
 80172a4:	fb00 2017 	mls	r0, r0, r7, r2
 80172a8:	4403      	add	r3, r0
 80172aa:	42ab      	cmp	r3, r5
 80172ac:	bfa8      	it	ge
 80172ae:	462b      	movge	r3, r5
 80172b0:	e7bf      	b.n	8017232 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

080172b2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 80172b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80172b8:	b0ba      	sub	sp, #232	; 0xe8
 80172ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80172bc:	4604      	mov	r4, r0
 80172be:	9303      	str	r3, [sp, #12]
 80172c0:	460f      	mov	r7, r1
 80172c2:	429a      	cmp	r2, r3
 80172c4:	9204      	str	r2, [sp, #16]
 80172c6:	ae0a      	add	r6, sp, #40	; 0x28
 80172c8:	bfb8      	it	lt
 80172ca:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 80172ce:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80172d2:	1a9b      	subs	r3, r3, r2
 80172d4:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80172d8:	bfa2      	ittt	ge
 80172da:	2200      	movge	r2, #0
 80172dc:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80172e0:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 80172e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80172e6:	2a00      	cmp	r2, #0
 80172e8:	d131      	bne.n	801734e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 80172ea:	463a      	mov	r2, r7
 80172ec:	4621      	mov	r1, r4
 80172ee:	a80b      	add	r0, sp, #44	; 0x2c
 80172f0:	f00f f806 	bl	8026300 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80172f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80172f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80172f8:	9205      	str	r2, [sp, #20]
 80172fa:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80172fe:	9306      	str	r3, [sp, #24]
 8017300:	dc6f      	bgt.n	80173e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8017302:	9b03      	ldr	r3, [sp, #12]
 8017304:	a90b      	add	r1, sp, #44	; 0x2c
 8017306:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 801730a:	4620      	mov	r0, r4
 801730c:	9307      	str	r3, [sp, #28]
 801730e:	016d      	lsls	r5, r5, #5
 8017310:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017314:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017318:	aa07      	add	r2, sp, #28
 801731a:	930a      	str	r3, [sp, #40]	; 0x28
 801731c:	4633      	mov	r3, r6
 801731e:	f7ff fd6b 	bl	8016df8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017322:	9f07      	ldr	r7, [sp, #28]
 8017324:	2d00      	cmp	r5, #0
 8017326:	d165      	bne.n	80173f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8017328:	3720      	adds	r7, #32
 801732a:	4639      	mov	r1, r7
 801732c:	9a04      	ldr	r2, [sp, #16]
 801732e:	9b06      	ldr	r3, [sp, #24]
 8017330:	442f      	add	r7, r5
 8017332:	4291      	cmp	r1, r2
 8017334:	dc6b      	bgt.n	801740e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8017336:	9a05      	ldr	r2, [sp, #20]
 8017338:	4620      	mov	r0, r4
 801733a:	9107      	str	r1, [sp, #28]
 801733c:	a90b      	add	r1, sp, #44	; 0x2c
 801733e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017342:	aa07      	add	r2, sp, #28
 8017344:	930a      	str	r3, [sp, #40]	; 0x28
 8017346:	4633      	mov	r3, r6
 8017348:	f7ff fda8 	bl	8016e9c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801734c:	e7ed      	b.n	801732a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 801734e:	f9b1 c000 	ldrsh.w	ip, [r1]
 8017352:	88bd      	ldrh	r5, [r7, #4]
 8017354:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8017358:	4465      	add	r5, ip
 801735a:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 801735e:	b22d      	sxth	r5, r5
 8017360:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8017364:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8017368:	2d00      	cmp	r5, #0
 801736a:	bfb8      	it	lt
 801736c:	426d      	neglt	r5, r5
 801736e:	2b00      	cmp	r3, #0
 8017370:	bfb8      	it	lt
 8017372:	425b      	neglt	r3, r3
 8017374:	429d      	cmp	r5, r3
 8017376:	bfb8      	it	lt
 8017378:	461d      	movlt	r5, r3
 801737a:	88fb      	ldrh	r3, [r7, #6]
 801737c:	4403      	add	r3, r0
 801737e:	116d      	asrs	r5, r5, #5
 8017380:	b21b      	sxth	r3, r3
 8017382:	3501      	adds	r5, #1
 8017384:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8017388:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 801738c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017390:	2b00      	cmp	r3, #0
 8017392:	f100 0001 	add.w	r0, r0, #1
 8017396:	bfb8      	it	lt
 8017398:	425b      	neglt	r3, r3
 801739a:	2900      	cmp	r1, #0
 801739c:	ea4f 0060 	mov.w	r0, r0, asr #1
 80173a0:	bfb8      	it	lt
 80173a2:	4249      	neglt	r1, r1
 80173a4:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80173a8:	428b      	cmp	r3, r1
 80173aa:	bfb8      	it	lt
 80173ac:	460b      	movlt	r3, r1
 80173ae:	115b      	asrs	r3, r3, #5
 80173b0:	3301      	adds	r3, #1
 80173b2:	435b      	muls	r3, r3
 80173b4:	fb05 3505 	mla	r5, r5, r5, r3
 80173b8:	2302      	movs	r3, #2
 80173ba:	fb92 f2f3 	sdiv	r2, r2, r3
 80173be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80173c0:	1a9a      	subs	r2, r3, r2
 80173c2:	920a      	str	r2, [sp, #40]	; 0x28
 80173c4:	f7ff fcb6 	bl	8016d34 <_ZN8touchgfx7CWRUtil4sineEi>
 80173c8:	a90b      	add	r1, sp, #44	; 0x2c
 80173ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80173cc:	4630      	mov	r0, r6
 80173ce:	f7ff fca5 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80173d2:	2320      	movs	r3, #32
 80173d4:	fb90 f0f3 	sdiv	r0, r0, r3
 80173d8:	4340      	muls	r0, r0
 80173da:	42a8      	cmp	r0, r5
 80173dc:	dd85      	ble.n	80172ea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80173de:	2401      	movs	r4, #1
 80173e0:	e037      	b.n	8017452 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a0>
 80173e2:	2102      	movs	r1, #2
 80173e4:	fb93 f3f1 	sdiv	r3, r3, r1
 80173e8:	4413      	add	r3, r2
 80173ea:	9306      	str	r3, [sp, #24]
 80173ec:	fb93 f3f1 	sdiv	r3, r3, r1
 80173f0:	9305      	str	r3, [sp, #20]
 80173f2:	e786      	b.n	8017302 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 80173f4:	f107 0320 	add.w	r3, r7, #32
 80173f8:	fb93 f7f5 	sdiv	r7, r3, r5
 80173fc:	fb05 3717 	mls	r7, r5, r7, r3
 8017400:	1bea      	subs	r2, r5, r7
 8017402:	fb92 f7f5 	sdiv	r7, r2, r5
 8017406:	fb05 2717 	mls	r7, r5, r7, r2
 801740a:	441f      	add	r7, r3
 801740c:	e78d      	b.n	801732a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 801740e:	9907      	ldr	r1, [sp, #28]
 8017410:	428a      	cmp	r2, r1
 8017412:	dd09      	ble.n	8017428 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8017414:	9a05      	ldr	r2, [sp, #20]
 8017416:	a90b      	add	r1, sp, #44	; 0x2c
 8017418:	4620      	mov	r0, r4
 801741a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801741e:	aa04      	add	r2, sp, #16
 8017420:	930a      	str	r3, [sp, #40]	; 0x28
 8017422:	4633      	mov	r3, r6
 8017424:	f7ff fd3a 	bl	8016e9c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017428:	9a06      	ldr	r2, [sp, #24]
 801742a:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 801742e:	1ac3      	subs	r3, r0, r3
 8017430:	b99a      	cbnz	r2, 801745a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a8>
 8017432:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017436:	da04      	bge.n	8017442 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017438:	a80b      	add	r0, sp, #44	; 0x2c
 801743a:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 801743e:	f00f f8b7 	bl	80265b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017442:	21ff      	movs	r1, #255	; 0xff
 8017444:	a80b      	add	r0, sp, #44	; 0x2c
 8017446:	f00f fa28 	bl	802689a <_ZN8touchgfx6Canvas6renderEh>
 801744a:	4604      	mov	r4, r0
 801744c:	a80b      	add	r0, sp, #44	; 0x2c
 801744e:	f00f fa63 	bl	8026918 <_ZN8touchgfx6CanvasD1Ev>
 8017452:	4620      	mov	r0, r4
 8017454:	b03a      	add	sp, #232	; 0xe8
 8017456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801745a:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 801745e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017462:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8017466:	da2b      	bge.n	80174c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8017468:	f7ff fc86 	bl	8016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801746c:	4631      	mov	r1, r6
 801746e:	900a      	str	r0, [sp, #40]	; 0x28
 8017470:	a805      	add	r0, sp, #20
 8017472:	f7ff fc53 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017476:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017478:	f10d 0818 	add.w	r8, sp, #24
 801747c:	4418      	add	r0, r3
 801747e:	9008      	str	r0, [sp, #32]
 8017480:	9804      	ldr	r0, [sp, #16]
 8017482:	f7ff fc9a 	bl	8016dba <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017486:	4631      	mov	r1, r6
 8017488:	900a      	str	r0, [sp, #40]	; 0x28
 801748a:	a805      	add	r0, sp, #20
 801748c:	f7ff fc46 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017492:	1a18      	subs	r0, r3, r0
 8017494:	9b04      	ldr	r3, [sp, #16]
 8017496:	443b      	add	r3, r7
 8017498:	9009      	str	r0, [sp, #36]	; 0x24
 801749a:	930a      	str	r3, [sp, #40]	; 0x28
 801749c:	9b04      	ldr	r3, [sp, #16]
 801749e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174a0:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80174a4:	4293      	cmp	r3, r2
 80174a6:	dd0b      	ble.n	80174c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 80174a8:	ab09      	add	r3, sp, #36	; 0x24
 80174aa:	aa08      	add	r2, sp, #32
 80174ac:	a90b      	add	r1, sp, #44	; 0x2c
 80174ae:	4620      	mov	r0, r4
 80174b0:	e9cd 6800 	strd	r6, r8, [sp]
 80174b4:	f7ff fcc9 	bl	8016e4a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80174b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174ba:	443b      	add	r3, r7
 80174bc:	930a      	str	r3, [sp, #40]	; 0x28
 80174be:	e7ed      	b.n	801749c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 80174c0:	9a04      	ldr	r2, [sp, #16]
 80174c2:	9b07      	ldr	r3, [sp, #28]
 80174c4:	429a      	cmp	r2, r3
 80174c6:	dd0a      	ble.n	80174de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 80174c8:	a90b      	add	r1, sp, #44	; 0x2c
 80174ca:	4620      	mov	r0, r4
 80174cc:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80174d0:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80174d4:	aa04      	add	r2, sp, #16
 80174d6:	930a      	str	r3, [sp, #40]	; 0x28
 80174d8:	4633      	mov	r3, r6
 80174da:	f7ff fcdf 	bl	8016e9c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80174de:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80174e2:	4642      	mov	r2, r8
 80174e4:	9b03      	ldr	r3, [sp, #12]
 80174e6:	eba8 0805 	sub.w	r8, r8, r5
 80174ea:	429a      	cmp	r2, r3
 80174ec:	db0c      	blt.n	8017508 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x256>
 80174ee:	9207      	str	r2, [sp, #28]
 80174f0:	a90b      	add	r1, sp, #44	; 0x2c
 80174f2:	4620      	mov	r0, r4
 80174f4:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80174f8:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80174fc:	aa07      	add	r2, sp, #28
 80174fe:	930a      	str	r3, [sp, #40]	; 0x28
 8017500:	4633      	mov	r3, r6
 8017502:	f7ff fccb 	bl	8016e9c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017506:	e7ec      	b.n	80174e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 8017508:	9a07      	ldr	r2, [sp, #28]
 801750a:	4293      	cmp	r3, r2
 801750c:	da0a      	bge.n	8017524 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x272>
 801750e:	a90b      	add	r1, sp, #44	; 0x2c
 8017510:	4620      	mov	r0, r4
 8017512:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017516:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801751a:	aa03      	add	r2, sp, #12
 801751c:	930a      	str	r3, [sp, #40]	; 0x28
 801751e:	4633      	mov	r3, r6
 8017520:	f7ff fcbc 	bl	8016e9c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017524:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8017528:	1a1b      	subs	r3, r3, r0
 801752a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801752e:	da88      	bge.n	8017442 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017530:	f7ff fc22 	bl	8016d78 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017534:	4631      	mov	r1, r6
 8017536:	900a      	str	r0, [sp, #40]	; 0x28
 8017538:	a805      	add	r0, sp, #20
 801753a:	f7ff fbef 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801753e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017540:	ad06      	add	r5, sp, #24
 8017542:	4418      	add	r0, r3
 8017544:	9008      	str	r0, [sp, #32]
 8017546:	9803      	ldr	r0, [sp, #12]
 8017548:	f7ff fc37 	bl	8016dba <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801754c:	4631      	mov	r1, r6
 801754e:	900a      	str	r0, [sp, #40]	; 0x28
 8017550:	a805      	add	r0, sp, #20
 8017552:	f7ff fbe3 	bl	8016d1c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017558:	1a18      	subs	r0, r3, r0
 801755a:	9b03      	ldr	r3, [sp, #12]
 801755c:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8017560:	9009      	str	r0, [sp, #36]	; 0x24
 8017562:	443b      	add	r3, r7
 8017564:	930a      	str	r3, [sp, #40]	; 0x28
 8017566:	9a03      	ldr	r2, [sp, #12]
 8017568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801756a:	429a      	cmp	r2, r3
 801756c:	f77f af69 	ble.w	8017442 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017570:	ab09      	add	r3, sp, #36	; 0x24
 8017572:	aa08      	add	r2, sp, #32
 8017574:	a90b      	add	r1, sp, #44	; 0x2c
 8017576:	4620      	mov	r0, r4
 8017578:	e9cd 6500 	strd	r6, r5, [sp]
 801757c:	f7ff fc65 	bl	8016e4a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017582:	443b      	add	r3, r7
 8017584:	930a      	str	r3, [sp, #40]	; 0x28
 8017586:	e7ee      	b.n	8017566 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b4>

08017588 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8017588:	6281      	str	r1, [r0, #40]	; 0x28
 801758a:	4770      	bx	lr

0801758c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801758c:	b513      	push	{r0, r1, r4, lr}
 801758e:	6803      	ldr	r3, [r0, #0]
 8017590:	4604      	mov	r4, r0
 8017592:	4601      	mov	r1, r0
 8017594:	4668      	mov	r0, sp
 8017596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017598:	4798      	blx	r3
 801759a:	6823      	ldr	r3, [r4, #0]
 801759c:	4669      	mov	r1, sp
 801759e:	4620      	mov	r0, r4
 80175a0:	691b      	ldr	r3, [r3, #16]
 80175a2:	4798      	blx	r3
 80175a4:	b002      	add	sp, #8
 80175a6:	bd10      	pop	{r4, pc}

080175a8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80175a8:	b510      	push	{r4, lr}
 80175aa:	2200      	movs	r2, #0
 80175ac:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80175b0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80175b4:	8002      	strh	r2, [r0, #0]
 80175b6:	8042      	strh	r2, [r0, #2]
 80175b8:	8084      	strh	r4, [r0, #4]
 80175ba:	80c1      	strh	r1, [r0, #6]
 80175bc:	bd10      	pop	{r4, pc}

080175be <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80175be:	2200      	movs	r2, #0
 80175c0:	8002      	strh	r2, [r0, #0]
 80175c2:	8042      	strh	r2, [r0, #2]
 80175c4:	8082      	strh	r2, [r0, #4]
 80175c6:	80c2      	strh	r2, [r0, #6]
 80175c8:	4770      	bx	lr
	...

080175cc <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80175cc:	b508      	push	{r3, lr}
 80175ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80175d0:	b928      	cbnz	r0, 80175de <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80175d2:	4b03      	ldr	r3, [pc, #12]	; (80175e0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80175d4:	2123      	movs	r1, #35	; 0x23
 80175d6:	4a03      	ldr	r2, [pc, #12]	; (80175e4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80175d8:	4803      	ldr	r0, [pc, #12]	; (80175e8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80175da:	f010 fcb1 	bl	8027f40 <__assert_func>
 80175de:	bd08      	pop	{r3, pc}
 80175e0:	0802b448 	.word	0x0802b448
 80175e4:	0802b528 	.word	0x0802b528
 80175e8:	0802b46f 	.word	0x0802b46f

080175ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80175ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f0:	b089      	sub	sp, #36	; 0x24
 80175f2:	4604      	mov	r4, r0
 80175f4:	6808      	ldr	r0, [r1, #0]
 80175f6:	f04f 0a00 	mov.w	sl, #0
 80175fa:	6849      	ldr	r1, [r1, #4]
 80175fc:	ab02      	add	r3, sp, #8
 80175fe:	f04f 0b01 	mov.w	fp, #1
 8017602:	c303      	stmia	r3!, {r0, r1}
 8017604:	4b3f      	ldr	r3, [pc, #252]	; (8017704 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8017606:	4621      	mov	r1, r4
 8017608:	a804      	add	r0, sp, #16
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	2b01      	cmp	r3, #1
 801760e:	6823      	ldr	r3, [r4, #0]
 8017610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017612:	bf1f      	itttt	ne
 8017614:	f10d 0906 	addne.w	r9, sp, #6
 8017618:	ae03      	addne	r6, sp, #12
 801761a:	f10d 050e 	addne.w	r5, sp, #14
 801761e:	f10d 080a 	addne.w	r8, sp, #10
 8017622:	bf01      	itttt	eq
 8017624:	f10d 090e 	addeq.w	r9, sp, #14
 8017628:	f10d 0606 	addeq.w	r6, sp, #6
 801762c:	ad03      	addeq	r5, sp, #12
 801762e:	f10d 0808 	addeq.w	r8, sp, #8
 8017632:	4798      	blx	r3
 8017634:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017638:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801763c:	2b00      	cmp	r3, #0
 801763e:	d056      	beq.n	80176ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8017640:	4293      	cmp	r3, r2
 8017642:	bfa8      	it	ge
 8017644:	4613      	movge	r3, r2
 8017646:	f8ad 3006 	strh.w	r3, [sp, #6]
 801764a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801764e:	2f00      	cmp	r7, #0
 8017650:	dd34      	ble.n	80176bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8017652:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8017656:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801765a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801765e:	4484      	add	ip, r0
 8017660:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017664:	f9b6 e000 	ldrsh.w	lr, [r6]
 8017668:	fa0f fc8c 	sxth.w	ip, ip
 801766c:	f9b9 1000 	ldrsh.w	r1, [r9]
 8017670:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017674:	4562      	cmp	r2, ip
 8017676:	f8ad 301a 	strh.w	r3, [sp, #26]
 801767a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801767e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8017682:	da29      	bge.n	80176d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017684:	4472      	add	r2, lr
 8017686:	b212      	sxth	r2, r2
 8017688:	4290      	cmp	r0, r2
 801768a:	da25      	bge.n	80176d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801768c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8017690:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017694:	4402      	add	r2, r0
 8017696:	b212      	sxth	r2, r2
 8017698:	4293      	cmp	r3, r2
 801769a:	da1d      	bge.n	80176d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801769c:	440b      	add	r3, r1
 801769e:	b21b      	sxth	r3, r3
 80176a0:	4298      	cmp	r0, r3
 80176a2:	da19      	bge.n	80176d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	a906      	add	r1, sp, #24
 80176a8:	4620      	mov	r0, r4
 80176aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80176ac:	4798      	blx	r3
 80176ae:	b998      	cbnz	r0, 80176d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80176b0:	107f      	asrs	r7, r7, #1
 80176b2:	f04f 0a01 	mov.w	sl, #1
 80176b6:	f8ad 7006 	strh.w	r7, [sp, #6]
 80176ba:	e7c6      	b.n	801764a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80176bc:	d10c      	bne.n	80176d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80176be:	f8ad b006 	strh.w	fp, [sp, #6]
 80176c2:	f8b8 2000 	ldrh.w	r2, [r8]
 80176c6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80176ca:	440a      	add	r2, r1
 80176cc:	f8a8 2000 	strh.w	r2, [r8]
 80176d0:	882b      	ldrh	r3, [r5, #0]
 80176d2:	1a5b      	subs	r3, r3, r1
 80176d4:	802b      	strh	r3, [r5, #0]
 80176d6:	e7ad      	b.n	8017634 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80176d8:	f1ba 0f00 	cmp.w	sl, #0
 80176dc:	d0f1      	beq.n	80176c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80176de:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80176e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80176e6:	429a      	cmp	r2, r3
 80176e8:	bf08      	it	eq
 80176ea:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 80176ec:	e7e9      	b.n	80176c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80176ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80176f2:	429a      	cmp	r2, r3
 80176f4:	bf04      	itt	eq
 80176f6:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80176fa:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80176fc:	b009      	add	sp, #36	; 0x24
 80176fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017702:	bf00      	nop
 8017704:	200060ee 	.word	0x200060ee

08017708 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017708:	2200      	movs	r2, #0
 801770a:	2101      	movs	r1, #1
 801770c:	8082      	strh	r2, [r0, #4]
 801770e:	80c2      	strh	r2, [r0, #6]
 8017710:	8102      	strh	r2, [r0, #8]
 8017712:	8142      	strh	r2, [r0, #10]
 8017714:	8182      	strh	r2, [r0, #12]
 8017716:	81c2      	strh	r2, [r0, #14]
 8017718:	8202      	strh	r2, [r0, #16]
 801771a:	8242      	strh	r2, [r0, #18]
 801771c:	61c2      	str	r2, [r0, #28]
 801771e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017722:	6282      	str	r2, [r0, #40]	; 0x28
 8017724:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017728:	4905      	ldr	r1, [pc, #20]	; (8017740 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801772a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801772e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017732:	6001      	str	r1, [r0, #0]
 8017734:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017736:	22ff      	movs	r2, #255	; 0xff
 8017738:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801773c:	4770      	bx	lr
 801773e:	bf00      	nop
 8017740:	0802b4b4 	.word	0x0802b4b4

08017744 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017744:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017748:	4770      	bx	lr

0801774a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801774a:	b510      	push	{r4, lr}
 801774c:	4604      	mov	r4, r0
 801774e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017750:	b150      	cbz	r0, 8017768 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017752:	6803      	ldr	r3, [r0, #0]
 8017754:	68db      	ldr	r3, [r3, #12]
 8017756:	4798      	blx	r3
 8017758:	b130      	cbz	r0, 8017768 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801775a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801775c:	4621      	mov	r1, r4
 801775e:	6803      	ldr	r3, [r0, #0]
 8017760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017764:	689b      	ldr	r3, [r3, #8]
 8017766:	4718      	bx	r3
 8017768:	bd10      	pop	{r4, pc}

0801776a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801776a:	790b      	ldrb	r3, [r1, #4]
 801776c:	2b00      	cmp	r3, #0
 801776e:	bf0c      	ite	eq
 8017770:	2301      	moveq	r3, #1
 8017772:	2300      	movne	r3, #0
 8017774:	b570      	push	{r4, r5, r6, lr}
 8017776:	4604      	mov	r4, r0
 8017778:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801777c:	460e      	mov	r6, r1
 801777e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8017782:	d109      	bne.n	8017798 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8017784:	b14d      	cbz	r5, 801779a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8017786:	7933      	ldrb	r3, [r6, #4]
 8017788:	2b01      	cmp	r3, #1
 801778a:	d10c      	bne.n	80177a6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801778c:	6823      	ldr	r3, [r4, #0]
 801778e:	4620      	mov	r0, r4
 8017790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017796:	4718      	bx	r3
 8017798:	b12d      	cbz	r5, 80177a6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801779a:	6823      	ldr	r3, [r4, #0]
 801779c:	4620      	mov	r0, r4
 801779e:	695b      	ldr	r3, [r3, #20]
 80177a0:	4798      	blx	r3
 80177a2:	2d00      	cmp	r5, #0
 80177a4:	d1ef      	bne.n	8017786 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80177a6:	bd70      	pop	{r4, r5, r6, pc}

080177a8 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 80177a8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80177ac:	4770      	bx	lr

080177ae <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 80177ae:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80177b2:	4770      	bx	lr

080177b4 <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 80177b4:	6802      	ldr	r2, [r0, #0]
 80177b6:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 80177ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80177bc:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80177c0:	4710      	bx	r2

080177c2 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 80177c2:	6802      	ldr	r2, [r0, #0]
 80177c4:	eef0 0a40 	vmov.f32	s1, s0
 80177c8:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 80177cc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80177ce:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80177d2:	4710      	bx	r2

080177d4 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 80177d4:	6802      	ldr	r2, [r0, #0]
 80177d6:	eeb0 1a40 	vmov.f32	s2, s0
 80177da:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80177de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80177e0:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80177e4:	4710      	bx	r2

080177e6 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 80177e6:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80177ea:	4770      	bx	lr

080177ec <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 80177ec:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 80177f0:	4770      	bx	lr

080177f2 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 80177f2:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 80177f6:	4770      	bx	lr

080177f8 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 80177f8:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 80177fc:	4770      	bx	lr

080177fe <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 80177fe:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 8017802:	4770      	bx	lr

08017804 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8017804:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 8017808:	4770      	bx	lr

0801780a <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 801780a:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 801780e:	4770      	bx	lr

08017810 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8017810:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 8017814:	4770      	bx	lr

08017816 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8017816:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 801781a:	4770      	bx	lr

0801781c <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 801781c:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 8017820:	4770      	bx	lr

08017822 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8017822:	ee07 2a90 	vmov	s15, r2
 8017826:	6803      	ldr	r3, [r0, #0]
 8017828:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801782c:	ee07 1a90 	vmov	s15, r1
 8017830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017834:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017838:	4718      	bx	r3

0801783a <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 801783a:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801783e:	4770      	bx	lr

08017840 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8017840:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8017844:	4770      	bx	lr

08017846 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8017846:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 801784a:	4770      	bx	lr

0801784c <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 801784c:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8017850:	4770      	bx	lr

08017852 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8017852:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8017856:	4770      	bx	lr

08017858 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8017858:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 801785c:	4770      	bx	lr

0801785e <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 801785e:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 8017862:	4770      	bx	lr

08017864 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8017864:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8017868:	4770      	bx	lr

0801786a <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 801786a:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 801786e:	4770      	bx	lr

08017870 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8017870:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 8017874:	4770      	bx	lr

08017876 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8017876:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 801787a:	4770      	bx	lr

0801787c <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 801787c:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 8017880:	4770      	bx	lr

08017882 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8017882:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8017886:	4770      	bx	lr

08017888 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8017888:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 801788c:	4770      	bx	lr

0801788e <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 801788e:	2200      	movs	r2, #0
 8017890:	8002      	strh	r2, [r0, #0]
 8017892:	8042      	strh	r2, [r0, #2]
 8017894:	8082      	strh	r2, [r0, #4]
 8017896:	80c2      	strh	r2, [r0, #6]
 8017898:	4770      	bx	lr
	...

0801789c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 801789c:	b538      	push	{r3, r4, r5, lr}
 801789e:	2301      	movs	r3, #1
 80178a0:	2500      	movs	r5, #0
 80178a2:	4604      	mov	r4, r0
 80178a4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 80178a8:	4b1e      	ldr	r3, [pc, #120]	; (8017924 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x88>)
 80178aa:	8085      	strh	r5, [r0, #4]
 80178ac:	6003      	str	r3, [r0, #0]
 80178ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80178b2:	80c5      	strh	r5, [r0, #6]
 80178b4:	8105      	strh	r5, [r0, #8]
 80178b6:	8145      	strh	r5, [r0, #10]
 80178b8:	8185      	strh	r5, [r0, #12]
 80178ba:	81c5      	strh	r5, [r0, #14]
 80178bc:	8205      	strh	r5, [r0, #16]
 80178be:	8245      	strh	r5, [r0, #18]
 80178c0:	61c5      	str	r5, [r0, #28]
 80178c2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 80178c6:	84c3      	strh	r3, [r0, #38]	; 0x26
 80178c8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80178cc:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80178d0:	f001 fa12 	bl	8018cf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80178d4:	4b14      	ldr	r3, [pc, #80]	; (8017928 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 80178d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80178da:	4914      	ldr	r1, [pc, #80]	; (801792c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 80178dc:	6023      	str	r3, [r4, #0]
 80178de:	2300      	movs	r3, #0
 80178e0:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 80178e4:	4620      	mov	r0, r4
 80178e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80178e8:	6323      	str	r3, [r4, #48]	; 0x30
 80178ea:	6363      	str	r3, [r4, #52]	; 0x34
 80178ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80178ee:	63e3      	str	r3, [r4, #60]	; 0x3c
 80178f0:	6463      	str	r3, [r4, #68]	; 0x44
 80178f2:	64a3      	str	r3, [r4, #72]	; 0x48
 80178f4:	6523      	str	r3, [r4, #80]	; 0x50
 80178f6:	6563      	str	r3, [r4, #84]	; 0x54
 80178f8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80178fa:	6623      	str	r3, [r4, #96]	; 0x60
 80178fc:	66a3      	str	r3, [r4, #104]	; 0x68
 80178fe:	66e3      	str	r3, [r4, #108]	; 0x6c
 8017900:	6763      	str	r3, [r4, #116]	; 0x74
 8017902:	67a3      	str	r3, [r4, #120]	; 0x78
 8017904:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8017908:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801790c:	230c      	movs	r3, #12
 801790e:	6422      	str	r2, [r4, #64]	; 0x40
 8017910:	64e1      	str	r1, [r4, #76]	; 0x4c
 8017912:	65a1      	str	r1, [r4, #88]	; 0x58
 8017914:	6662      	str	r2, [r4, #100]	; 0x64
 8017916:	6722      	str	r2, [r4, #112]	; 0x70
 8017918:	67e2      	str	r2, [r4, #124]	; 0x7c
 801791a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 801791e:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8017922:	bd38      	pop	{r3, r4, r5, pc}
 8017924:	0802bbcc 	.word	0x0802bbcc
 8017928:	0802b5ec 	.word	0x0802b5ec
 801792c:	447a0000 	.word	0x447a0000

08017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8017930:	b570      	push	{r4, r5, r6, lr}
 8017932:	ed2d 8b04 	vpush	{d8-d9}
 8017936:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 801793a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801793c:	4604      	mov	r4, r0
 801793e:	add0      	add	r5, sp, #832	; 0x340
 8017940:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8017944:	4628      	mov	r0, r5
 8017946:	f006 f959 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801794a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801794c:	4606      	mov	r6, r0
 801794e:	4628      	mov	r0, r5
 8017950:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 8017954:	f006 f98c 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801795c:	1c72      	adds	r2, r6, #1
 801795e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017962:	3001      	adds	r0, #1
 8017964:	ee07 2a90 	vmov	s15, r2
 8017968:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801796c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8017970:	ee06 0a90 	vmov	s13, r0
 8017974:	ee36 6a47 	vsub.f32	s12, s12, s14
 8017978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801797a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801797e:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8017982:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017986:	9312      	str	r3, [sp, #72]	; 0x48
 8017988:	9316      	str	r3, [sp, #88]	; 0x58
 801798a:	a830      	add	r0, sp, #192	; 0xc0
 801798c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017990:	931a      	str	r3, [sp, #104]	; 0x68
 8017992:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017996:	931e      	str	r3, [sp, #120]	; 0x78
 8017998:	2300      	movs	r3, #0
 801799a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801799e:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 80179a2:	ae70      	add	r6, sp, #448	; 0x1c0
 80179a4:	9320      	str	r3, [sp, #128]	; 0x80
 80179a6:	9321      	str	r3, [sp, #132]	; 0x84
 80179a8:	9322      	str	r3, [sp, #136]	; 0x88
 80179aa:	9324      	str	r3, [sp, #144]	; 0x90
 80179ac:	9325      	str	r3, [sp, #148]	; 0x94
 80179ae:	9326      	str	r3, [sp, #152]	; 0x98
 80179b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80179b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80179b4:	932a      	str	r3, [sp, #168]	; 0xa8
 80179b6:	932c      	str	r3, [sp, #176]	; 0xb0
 80179b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80179ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80179bc:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 80179c0:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 80179c4:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 80179c8:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 80179cc:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 80179d0:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 80179d4:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 80179d8:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 80179dc:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80179e0:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 80179e4:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 80179e8:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 80179ec:	f005 f97a 	bl	801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80179f0:	eeb1 0a49 	vneg.f32	s0, s18
 80179f4:	a830      	add	r0, sp, #192	; 0xc0
 80179f6:	f005 fa45 	bl	801ce84 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80179fa:	eeb1 0a68 	vneg.f32	s0, s17
 80179fe:	f005 fa4f 	bl	801cea0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017a02:	eeb1 0a48 	vneg.f32	s0, s16
 8017a06:	f005 fa5a 	bl	801cebe <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8017a0a:	a840      	add	r0, sp, #256	; 0x100
 8017a0c:	f005 f96a 	bl	801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017a10:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8017a14:	a840      	add	r0, sp, #256	; 0x100
 8017a16:	f005 f9b9 	bl	801cd8c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8017a1a:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8017a1e:	f005 f9df 	bl	801cde0 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8017a22:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8017a26:	f005 fa04 	bl	801ce32 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8017a2a:	a850      	add	r0, sp, #320	; 0x140
 8017a2c:	f005 f95a 	bl	801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017a30:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017a34:	a850      	add	r0, sp, #320	; 0x140
 8017a36:	f005 fa51 	bl	801cedc <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8017a3a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017a3e:	f005 fa59 	bl	801cef4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8017a42:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017a46:	f005 fa62 	bl	801cf0e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8017a4a:	a860      	add	r0, sp, #384	; 0x180
 8017a4c:	f005 f94a 	bl	801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017a50:	eeb0 0a49 	vmov.f32	s0, s18
 8017a54:	a860      	add	r0, sp, #384	; 0x180
 8017a56:	f005 fa15 	bl	801ce84 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017a5a:	eeb0 0a68 	vmov.f32	s0, s17
 8017a5e:	f005 fa1f 	bl	801cea0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017a62:	eeb0 0a48 	vmov.f32	s0, s16
 8017a66:	f005 fa2a 	bl	801cebe <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8017a6a:	aa50      	add	r2, sp, #320	; 0x140
 8017a6c:	a960      	add	r1, sp, #384	; 0x180
 8017a6e:	a8b0      	add	r0, sp, #704	; 0x2c0
 8017a70:	f005 f950 	bl	801cd14 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017a74:	4628      	mov	r0, r5
 8017a76:	aa40      	add	r2, sp, #256	; 0x100
 8017a78:	a9b0      	add	r1, sp, #704	; 0x2c0
 8017a7a:	f005 f94b 	bl	801cd14 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017a7e:	4629      	mov	r1, r5
 8017a80:	aa30      	add	r2, sp, #192	; 0xc0
 8017a82:	a870      	add	r0, sp, #448	; 0x1c0
 8017a84:	f005 f946 	bl	801cd14 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017a88:	a880      	add	r0, sp, #512	; 0x200
 8017a8a:	f005 f92b 	bl	801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017a8e:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8017a92:	a880      	add	r0, sp, #512	; 0x200
 8017a94:	eeb1 0a40 	vneg.f32	s0, s0
 8017a98:	f005 f9f4 	bl	801ce84 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017a9c:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8017aa0:	a880      	add	r0, sp, #512	; 0x200
 8017aa2:	eeb1 0a40 	vneg.f32	s0, s0
 8017aa6:	f005 f9fb 	bl	801cea0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017aaa:	a890      	add	r0, sp, #576	; 0x240
 8017aac:	f005 f91a 	bl	801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017ab0:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 8017ab4:	a890      	add	r0, sp, #576	; 0x240
 8017ab6:	f005 f959 	bl	801cd6c <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8017aba:	a8a0      	add	r0, sp, #640	; 0x280
 8017abc:	f005 f912 	bl	801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017ac0:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8017ac4:	a8a0      	add	r0, sp, #640	; 0x280
 8017ac6:	f005 f9dd 	bl	801ce84 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017aca:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8017ace:	f005 f9e7 	bl	801cea0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017ad2:	aa90      	add	r2, sp, #576	; 0x240
 8017ad4:	a9a0      	add	r1, sp, #640	; 0x280
 8017ad6:	a8b0      	add	r0, sp, #704	; 0x2c0
 8017ad8:	f005 f91c 	bl	801cd14 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017adc:	4628      	mov	r0, r5
 8017ade:	aa80      	add	r2, sp, #512	; 0x200
 8017ae0:	a9b0      	add	r1, sp, #704	; 0x2c0
 8017ae2:	f005 f917 	bl	801cd14 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017ae6:	4629      	mov	r1, r5
 8017ae8:	466d      	mov	r5, sp
 8017aea:	aa70      	add	r2, sp, #448	; 0x1c0
 8017aec:	4668      	mov	r0, sp
 8017aee:	f005 f911 	bl	801cd14 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017af4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017af8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017afc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017afe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017b02:	2500      	movs	r5, #0
 8017b04:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8017b08:	0129      	lsls	r1, r5, #4
 8017b0a:	ab20      	add	r3, sp, #128	; 0x80
 8017b0c:	3501      	adds	r5, #1
 8017b0e:	a870      	add	r0, sp, #448	; 0x1c0
 8017b10:	185e      	adds	r6, r3, r1
 8017b12:	ab10      	add	r3, sp, #64	; 0x40
 8017b14:	4419      	add	r1, r3
 8017b16:	f005 f8b5 	bl	801cc84 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8017b1a:	2d04      	cmp	r5, #4
 8017b1c:	ed86 0a00 	vstr	s0, [r6]
 8017b20:	edc6 0a01 	vstr	s1, [r6, #4]
 8017b24:	ed86 1a02 	vstr	s2, [r6, #8]
 8017b28:	edc6 1a03 	vstr	s3, [r6, #12]
 8017b2c:	d1ec      	bne.n	8017b08 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8017b2e:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8017b32:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8017b36:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 8017b3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017b3e:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 8017b42:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017b46:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8017b4a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017b4e:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 8017b52:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017b56:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 8017b5a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017b5e:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8017b62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017b66:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 8017b6a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017b6e:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 8017b72:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017b76:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 8017b7a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017b7e:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 8017b82:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 8017b86:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 8017b8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017b8e:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 8017b92:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017b96:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 8017b9a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017b9e:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 8017ba2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017ba6:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8017baa:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8017bae:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 8017bb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017bb6:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 8017bba:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017bbe:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8017bc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017bc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017bca:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 8017bce:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 8017bd2:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 8017bd6:	ecbd 8b04 	vpop	{d8-d9}
 8017bda:	bd70      	pop	{r4, r5, r6, pc}

08017bdc <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8017bdc:	b510      	push	{r4, lr}
 8017bde:	4604      	mov	r4, r0
 8017be0:	f001 f88a 	bl	8018cf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017be4:	4620      	mov	r0, r4
 8017be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bea:	f7ff bea1 	b.w	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017bee <_ZN8touchgfx13TextureMapper8setScaleEf>:
 8017bee:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 8017bf2:	f7ff be9d 	b.w	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017bf6 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8017bf6:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 8017bfa:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 8017bfe:	f7ff be97 	b.w	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017c02 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 8017c02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017c06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c0e:	fe30 0a27 	vselgt.f32	s0, s0, s15
 8017c12:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 8017c16:	f7ff be8b 	b.w	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017c1a <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8017c1a:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 8017c1e:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 8017c22:	f7ff be85 	b.w	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017c26 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8017c26:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8017c2a:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8017c2e:	f7ff be7f 	b.w	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017c32 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8017c32:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8017c36:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8017c3a:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 8017c3e:	f7ff be77 	b.w	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017c42 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8017c42:	b510      	push	{r4, lr}
 8017c44:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
 8017c48:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
 8017c4c:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 8017c50:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017c54:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
 8017c58:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8017c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c60:	bf54      	ite	pl
 8017c62:	eeb0 7a65 	vmovpl.f32	s14, s11
 8017c66:	eeb0 7a67 	vmovmi.f32	s14, s15
 8017c6a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8017c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c72:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8017c76:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c7e:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8017c82:	febb 7a47 	vrintm.f32	s14, s14
 8017c86:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c8e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017c92:	bf56      	itet	pl
 8017c94:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8017c98:	2200      	movmi	r2, #0
 8017c9a:	ee17 3a10 	vmovpl	r3, s14
 8017c9e:	ee07 4a10 	vmov	s14, r4
 8017ca2:	bf58      	it	pl
 8017ca4:	b21a      	sxthpl	r2, r3
 8017ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017caa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017cae:	8002      	strh	r2, [r0, #0]
 8017cb0:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8017cb4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8017cb8:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
 8017cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc0:	bf58      	it	pl
 8017cc2:	eef0 7a46 	vmovpl.f32	s15, s12
 8017cc6:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
 8017cca:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd2:	bf58      	it	pl
 8017cd4:	eef0 7a66 	vmovpl.f32	s15, s13
 8017cd8:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 8017cdc:	fefa 7a67 	vrintp.f32	s15, s15
 8017ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ce8:	bfdc      	itt	le
 8017cea:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8017cee:	ee17 3a90 	vmovle	r3, s15
 8017cf2:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
 8017cf6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8017cfa:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017cfe:	bfd8      	it	le
 8017d00:	b21c      	sxthle	r4, r3
 8017d02:	1aa2      	subs	r2, r4, r2
 8017d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d08:	8082      	strh	r2, [r0, #4]
 8017d0a:	bf54      	ite	pl
 8017d0c:	eeb0 7a65 	vmovpl.f32	s14, s11
 8017d10:	eeb0 7a67 	vmovmi.f32	s14, s15
 8017d14:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8017d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d1c:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8017d20:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d28:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8017d2c:	febb 7a47 	vrintm.f32	s14, s14
 8017d30:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d38:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017d3c:	bf56      	itet	pl
 8017d3e:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8017d42:	2300      	movmi	r3, #0
 8017d44:	ee17 3a10 	vmovpl	r3, s14
 8017d48:	ee07 1a10 	vmov	s14, r1
 8017d4c:	bf58      	it	pl
 8017d4e:	b21b      	sxthpl	r3, r3
 8017d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017d58:	8043      	strh	r3, [r0, #2]
 8017d5a:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8017d5e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8017d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d66:	bf58      	it	pl
 8017d68:	eef0 7a46 	vmovpl.f32	s15, s12
 8017d6c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d74:	bf58      	it	pl
 8017d76:	eef0 7a66 	vmovpl.f32	s15, s13
 8017d7a:	fefa 7a67 	vrintp.f32	s15, s15
 8017d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d86:	bfde      	ittt	le
 8017d88:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8017d8c:	ee17 1a90 	vmovle	r1, s15
 8017d90:	b209      	sxthle	r1, r1
 8017d92:	1acb      	subs	r3, r1, r3
 8017d94:	80c3      	strh	r3, [r0, #6]
 8017d96:	bd10      	pop	{r4, pc}

08017d98 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8017d98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017d9c:	4604      	mov	r4, r0
 8017d9e:	4601      	mov	r1, r0
 8017da0:	4668      	mov	r0, sp
 8017da2:	f7ff ff4e 	bl	8017c42 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8017da6:	4620      	mov	r0, r4
 8017da8:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 8017dac:	edc4 0a0e 	vstr	s1, [r4, #56]	; 0x38
 8017db0:	ed84 1a0f 	vstr	s2, [r4, #60]	; 0x3c
 8017db4:	f9bd 8000 	ldrsh.w	r8, [sp]
 8017db8:	f9bd 6002 	ldrsh.w	r6, [sp, #2]
 8017dbc:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8017dc0:	f7ff fdb6 	bl	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8017dc4:	4621      	mov	r1, r4
 8017dc6:	a802      	add	r0, sp, #8
 8017dc8:	f7ff ff3b 	bl	8017c42 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8017dcc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	dd33      	ble.n	8017e3c <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xa4>
 8017dd4:	2d00      	cmp	r5, #0
 8017dd6:	dd31      	ble.n	8017e3c <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xa4>
 8017dd8:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
 8017ddc:	f1be 0f00 	cmp.w	lr, #0
 8017de0:	dd34      	ble.n	8017e4c <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xb4>
 8017de2:	f9bd c00e 	ldrsh.w	ip, [sp, #14]
 8017de6:	f1bc 0f00 	cmp.w	ip, #0
 8017dea:	dd2f      	ble.n	8017e4c <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xb4>
 8017dec:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8017df0:	4443      	add	r3, r8
 8017df2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8017df6:	4435      	add	r5, r6
 8017df8:	4541      	cmp	r1, r8
 8017dfa:	460f      	mov	r7, r1
 8017dfc:	4610      	mov	r0, r2
 8017dfe:	4471      	add	r1, lr
 8017e00:	bfa8      	it	ge
 8017e02:	4647      	movge	r7, r8
 8017e04:	42b2      	cmp	r2, r6
 8017e06:	4462      	add	r2, ip
 8017e08:	b209      	sxth	r1, r1
 8017e0a:	bfa8      	it	ge
 8017e0c:	4630      	movge	r0, r6
 8017e0e:	b21b      	sxth	r3, r3
 8017e10:	b212      	sxth	r2, r2
 8017e12:	f8ad 7008 	strh.w	r7, [sp, #8]
 8017e16:	b22d      	sxth	r5, r5
 8017e18:	4299      	cmp	r1, r3
 8017e1a:	bfac      	ite	ge
 8017e1c:	ebc7 0301 	rsbge	r3, r7, r1
 8017e20:	ebc7 0303 	rsblt	r3, r7, r3
 8017e24:	f8ad 000a 	strh.w	r0, [sp, #10]
 8017e28:	42aa      	cmp	r2, r5
 8017e2a:	bfac      	ite	ge
 8017e2c:	ebc0 0202 	rsbge	r2, r0, r2
 8017e30:	ebc0 0205 	rsblt	r2, r0, r5
 8017e34:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017e38:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017e3c:	6823      	ldr	r3, [r4, #0]
 8017e3e:	a902      	add	r1, sp, #8
 8017e40:	4620      	mov	r0, r4
 8017e42:	691b      	ldr	r3, [r3, #16]
 8017e44:	4798      	blx	r3
 8017e46:	b004      	add	sp, #16
 8017e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e4c:	f8ad 8008 	strh.w	r8, [sp, #8]
 8017e50:	f8ad 600a 	strh.w	r6, [sp, #10]
 8017e54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017e58:	f8ad 500e 	strh.w	r5, [sp, #14]
 8017e5c:	e7ee      	b.n	8017e3c <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xa4>

08017e5e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8017e5e:	4603      	mov	r3, r0
 8017e60:	3026      	adds	r0, #38	; 0x26
 8017e62:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8017e66:	b90b      	cbnz	r3, 8017e6c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 8017e68:	f003 bd3f 	b.w	801b8ea <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8017e6c:	f003 bd4d 	b.w	801b90a <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

08017e70 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8017e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e74:	4604      	mov	r4, r0
 8017e76:	469b      	mov	fp, r3
 8017e78:	ed2d 8b04 	vpush	{d8-d9}
 8017e7c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8017e80:	b0b3      	sub	sp, #204	; 0xcc
 8017e82:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017e86:	f9b1 6000 	ldrsh.w	r6, [r1]
 8017e8a:	8888      	ldrh	r0, [r1, #4]
 8017e8c:	9206      	str	r2, [sp, #24]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	4430      	add	r0, r6
 8017e92:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 8017e96:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8017e9a:	b280      	uxth	r0, r0
 8017e9c:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 8017ea0:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 8017ea2:	fa0f fe80 	sxth.w	lr, r0
 8017ea6:	9211      	str	r2, [sp, #68]	; 0x44
 8017ea8:	4596      	cmp	lr, r2
 8017eaa:	f340 8129 	ble.w	8018100 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8017eae:	45b4      	cmp	ip, r6
 8017eb0:	f340 8126 	ble.w	8018100 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8017eb4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017eb8:	88ca      	ldrh	r2, [r1, #6]
 8017eba:	442a      	add	r2, r5
 8017ebc:	b292      	uxth	r2, r2
 8017ebe:	b211      	sxth	r1, r2
 8017ec0:	2900      	cmp	r1, #0
 8017ec2:	f340 811d 	ble.w	8018100 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8017ec6:	42ab      	cmp	r3, r5
 8017ec8:	f340 811a 	ble.w	8018100 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8017ecc:	45f4      	cmp	ip, lr
 8017ece:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8017ed2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8017ed6:	bfb8      	it	lt
 8017ed8:	fa1f f08c 	uxthlt.w	r0, ip
 8017edc:	428b      	cmp	r3, r1
 8017ede:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8017ee2:	bfb8      	it	lt
 8017ee4:	b29a      	uxthlt	r2, r3
 8017ee6:	1b80      	subs	r0, r0, r6
 8017ee8:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8017eec:	1b52      	subs	r2, r2, r5
 8017eee:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8017ef2:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8017ef6:	ab11      	add	r3, sp, #68	; 0x44
 8017ef8:	ad13      	add	r5, sp, #76	; 0x4c
 8017efa:	6822      	ldr	r2, [r4, #0]
 8017efc:	1d26      	adds	r6, r4, #4
 8017efe:	9307      	str	r3, [sp, #28]
 8017f00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8017f02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8017f0a:	4629      	mov	r1, r5
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	4790      	blx	r2
 8017f10:	4621      	mov	r1, r4
 8017f12:	a815      	add	r0, sp, #84	; 0x54
 8017f14:	f003 fc44 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017f18:	a815      	add	r0, sp, #84	; 0x54
 8017f1a:	f002 fa63 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017f1e:	9b07      	ldr	r3, [sp, #28]
 8017f20:	4631      	mov	r1, r6
 8017f22:	4618      	mov	r0, r3
 8017f24:	f002 fa46 	bl	801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017f28:	4628      	mov	r0, r5
 8017f2a:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8017f2e:	f002 fa59 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017f32:	4628      	mov	r0, r5
 8017f34:	f005 ff6a 	bl	801de0c <_ZNK8touchgfx6Bitmap7getDataEv>
 8017f38:	9007      	str	r0, [sp, #28]
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	f000 80db 	beq.w	80180f6 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8017f40:	f8db 2000 	ldr.w	r2, [fp]
 8017f44:	a90d      	add	r1, sp, #52	; 0x34
 8017f46:	a809      	add	r0, sp, #36	; 0x24
 8017f48:	9209      	str	r2, [sp, #36]	; 0x24
 8017f4a:	f8db 2004 	ldr.w	r2, [fp, #4]
 8017f4e:	920a      	str	r2, [sp, #40]	; 0x28
 8017f50:	f8db 2008 	ldr.w	r2, [fp, #8]
 8017f54:	920b      	str	r2, [sp, #44]	; 0x2c
 8017f56:	f8db 200c 	ldr.w	r2, [fp, #12]
 8017f5a:	920c      	str	r2, [sp, #48]	; 0x30
 8017f5c:	f8da 2000 	ldr.w	r2, [sl]
 8017f60:	920d      	str	r2, [sp, #52]	; 0x34
 8017f62:	f8da 2004 	ldr.w	r2, [sl, #4]
 8017f66:	920e      	str	r2, [sp, #56]	; 0x38
 8017f68:	f8da 2008 	ldr.w	r2, [sl, #8]
 8017f6c:	920f      	str	r2, [sp, #60]	; 0x3c
 8017f6e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8017f72:	9210      	str	r2, [sp, #64]	; 0x40
 8017f74:	4632      	mov	r2, r6
 8017f76:	f002 fa01 	bl	801a37c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017f7a:	4632      	mov	r2, r6
 8017f7c:	a90e      	add	r1, sp, #56	; 0x38
 8017f7e:	a80a      	add	r0, sp, #40	; 0x28
 8017f80:	f002 f9fc 	bl	801a37c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017f84:	4632      	mov	r2, r6
 8017f86:	a90f      	add	r1, sp, #60	; 0x3c
 8017f88:	a80b      	add	r0, sp, #44	; 0x2c
 8017f8a:	f002 f9f7 	bl	801a37c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017f8e:	4632      	mov	r2, r6
 8017f90:	a910      	add	r1, sp, #64	; 0x40
 8017f92:	a80c      	add	r0, sp, #48	; 0x30
 8017f94:	f002 f9f2 	bl	801a37c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017f98:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8017f9c:	edd7 4a00 	vldr	s9, [r7]
 8017fa0:	eef0 6a67 	vmov.f32	s13, s15
 8017fa4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8017fa8:	edd7 5a01 	vldr	s11, [r7, #4]
 8017fac:	eeb0 7a67 	vmov.f32	s14, s15
 8017fb0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8017fb4:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8017fb8:	ed98 4a00 	vldr	s8, [r8]
 8017fbc:	eeb0 6a67 	vmov.f32	s12, s15
 8017fc0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8017fc4:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8017fc8:	ed98 5a01 	vldr	s10, [r8, #4]
 8017fcc:	ed99 9a00 	vldr	s18, [r9]
 8017fd0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017fd4:	ed99 8a01 	vldr	s16, [r9, #4]
 8017fd8:	edd9 8a02 	vldr	s17, [r9, #8]
 8017fdc:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8017fe0:	ee16 6a10 	vmov	r6, s12
 8017fe4:	eeb0 6a67 	vmov.f32	s12, s15
 8017fe8:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8017fec:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8017ff0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017ff4:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8017ff8:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 8017ffc:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 8018000:	ee16 0a10 	vmov	r0, s12
 8018004:	eeb0 6a67 	vmov.f32	s12, s15
 8018008:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801800c:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8018010:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018014:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8018018:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 801801c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8018020:	ee16 1a10 	vmov	r1, s12
 8018024:	eeb0 6a67 	vmov.f32	s12, s15
 8018028:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801802c:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8018030:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018034:	68ff      	ldr	r7, [r7, #12]
 8018036:	9624      	str	r6, [sp, #144]	; 0x90
 8018038:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801803c:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 8018040:	ee16 2a10 	vmov	r2, s12
 8018044:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8018048:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 801804c:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018050:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8018054:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8018058:	4628      	mov	r0, r5
 801805a:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 801805e:	9b06      	ldr	r3, [sp, #24]
 8018060:	922d      	str	r2, [sp, #180]	; 0xb4
 8018062:	4a29      	ldr	r2, [pc, #164]	; (8018108 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8018064:	9317      	str	r3, [sp, #92]	; 0x5c
 8018066:	8812      	ldrh	r2, [r2, #0]
 8018068:	9b07      	ldr	r3, [sp, #28]
 801806a:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801806e:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8018072:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8018076:	9218      	str	r2, [sp, #96]	; 0x60
 8018078:	9319      	str	r3, [sp, #100]	; 0x64
 801807a:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801807e:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8018082:	9731      	str	r7, [sp, #196]	; 0xc4
 8018084:	f005 fef4 	bl	801de70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8018088:	901a      	str	r0, [sp, #104]	; 0x68
 801808a:	4628      	mov	r0, r5
 801808c:	f005 fdb6 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018090:	901b      	str	r0, [sp, #108]	; 0x6c
 8018092:	4628      	mov	r0, r5
 8018094:	f005 fdec 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018098:	901c      	str	r0, [sp, #112]	; 0x70
 801809a:	4628      	mov	r0, r5
 801809c:	f005 fdae 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80180a0:	eeb4 9a48 	vcmp.f32	s18, s16
 80180a4:	901d      	str	r0, [sp, #116]	; 0x74
 80180a6:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 80180aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ae:	d107      	bne.n	80180c0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 80180b0:	eeb4 8a68 	vcmp.f32	s16, s17
 80180b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180bc:	bf08      	it	eq
 80180be:	461e      	moveq	r6, r3
 80180c0:	4b12      	ldr	r3, [pc, #72]	; (801810c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80180c8:	b10a      	cbz	r2, 80180ce <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 80180ca:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80180cc:	b905      	cbnz	r5, 80180d0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 80180ce:	689d      	ldr	r5, [r3, #8]
 80180d0:	682b      	ldr	r3, [r5, #0]
 80180d2:	4620      	mov	r0, r4
 80180d4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80180d6:	f7ff fec2 	bl	8017e5e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 80180da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80180de:	aa1e      	add	r2, sp, #120	; 0x78
 80180e0:	9604      	str	r6, [sp, #16]
 80180e2:	a917      	add	r1, sp, #92	; 0x5c
 80180e4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80180e8:	ab13      	add	r3, sp, #76	; 0x4c
 80180ea:	4628      	mov	r0, r5
 80180ec:	9301      	str	r3, [sp, #4]
 80180ee:	ab15      	add	r3, sp, #84	; 0x54
 80180f0:	9300      	str	r3, [sp, #0]
 80180f2:	ab19      	add	r3, sp, #100	; 0x64
 80180f4:	47b8      	blx	r7
 80180f6:	b033      	add	sp, #204	; 0xcc
 80180f8:	ecbd 8b04 	vpop	{d8-d9}
 80180fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018100:	2300      	movs	r3, #0
 8018102:	9312      	str	r3, [sp, #72]	; 0x48
 8018104:	e6f7      	b.n	8017ef6 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8018106:	bf00      	nop
 8018108:	200060f0 	.word	0x200060f0
 801810c:	200060f8 	.word	0x200060f8

08018110 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8018110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018114:	ed2d 8b02 	vpush	{d8}
 8018118:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801811c:	b098      	sub	sp, #96	; 0x60
 801811e:	4604      	mov	r4, r0
 8018120:	4688      	mov	r8, r1
 8018122:	2b00      	cmp	r3, #0
 8018124:	d077      	beq.n	8018216 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8018126:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801812a:	4628      	mov	r0, r5
 801812c:	f005 fd66 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018130:	ee07 0a90 	vmov	s15, r0
 8018134:	4628      	mov	r0, r5
 8018136:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 801813a:	f005 fd99 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801813e:	4b4e      	ldr	r3, [pc, #312]	; (8018278 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8018140:	ee07 0a90 	vmov	s15, r0
 8018144:	781b      	ldrb	r3, [r3, #0]
 8018146:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801814a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801814e:	2b01      	cmp	r3, #1
 8018150:	d066      	beq.n	8018220 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8018152:	eeb0 6a47 	vmov.f32	s12, s14
 8018156:	ee17 3a10 	vmov	r3, s14
 801815a:	eeb0 4a48 	vmov.f32	s8, s16
 801815e:	eeb0 7a48 	vmov.f32	s14, s16
 8018162:	eef0 4a67 	vmov.f32	s9, s15
 8018166:	eeb0 8a67 	vmov.f32	s16, s15
 801816a:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 801816e:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8018172:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 8018176:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 801817a:	ee73 1a65 	vsub.f32	s3, s6, s11
 801817e:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 8018182:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8018186:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 801818a:	ee32 1a45 	vsub.f32	s2, s4, s10
 801818e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8018190:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8018192:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8018196:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018198:	ee73 1ae5 	vsub.f32	s3, s7, s11
 801819c:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 80181a0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 80181a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80181a8:	eee1 6a21 	vfma.f32	s13, s2, s3
 80181ac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80181b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181b4:	dd3d      	ble.n	8018232 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 80181b6:	ed8d 5a04 	vstr	s10, [sp, #16]
 80181ba:	ed8d 2a05 	vstr	s4, [sp, #20]
 80181be:	edcd 2a06 	vstr	s5, [sp, #24]
 80181c2:	f8cd c01c 	str.w	ip, [sp, #28]
 80181c6:	edcd 5a08 	vstr	s11, [sp, #32]
 80181ca:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 80181ce:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 80181d2:	970b      	str	r7, [sp, #44]	; 0x2c
 80181d4:	960c      	str	r6, [sp, #48]	; 0x30
 80181d6:	950d      	str	r5, [sp, #52]	; 0x34
 80181d8:	920e      	str	r2, [sp, #56]	; 0x38
 80181da:	900f      	str	r0, [sp, #60]	; 0x3c
 80181dc:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 80181e0:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 80181e4:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 80181e8:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 80181ec:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 80181f0:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 80181f4:	9316      	str	r3, [sp, #88]	; 0x58
 80181f6:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 80181fa:	ab14      	add	r3, sp, #80	; 0x50
 80181fc:	2200      	movs	r2, #0
 80181fe:	4641      	mov	r1, r8
 8018200:	4620      	mov	r0, r4
 8018202:	9303      	str	r3, [sp, #12]
 8018204:	ab10      	add	r3, sp, #64	; 0x40
 8018206:	9302      	str	r3, [sp, #8]
 8018208:	ab0c      	add	r3, sp, #48	; 0x30
 801820a:	9301      	str	r3, [sp, #4]
 801820c:	ab08      	add	r3, sp, #32
 801820e:	9300      	str	r3, [sp, #0]
 8018210:	ab04      	add	r3, sp, #16
 8018212:	f7ff fe2d 	bl	8017e70 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8018216:	b018      	add	sp, #96	; 0x60
 8018218:	ecbd 8b02 	vpop	{d8}
 801821c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018220:	eeb0 6a48 	vmov.f32	s12, s16
 8018224:	ee17 3a90 	vmov	r3, s15
 8018228:	eef0 4a47 	vmov.f32	s9, s14
 801822c:	eeb0 4a67 	vmov.f32	s8, s15
 8018230:	e79b      	b.n	801816a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8018232:	ed8d 5a05 	vstr	s10, [sp, #20]
 8018236:	ed8d 2a04 	vstr	s4, [sp, #16]
 801823a:	f8cd c018 	str.w	ip, [sp, #24]
 801823e:	edcd 2a07 	vstr	s5, [sp, #28]
 8018242:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8018246:	ed8d 3a08 	vstr	s6, [sp, #32]
 801824a:	970a      	str	r7, [sp, #40]	; 0x28
 801824c:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8018250:	960d      	str	r6, [sp, #52]	; 0x34
 8018252:	950c      	str	r5, [sp, #48]	; 0x30
 8018254:	900e      	str	r0, [sp, #56]	; 0x38
 8018256:	920f      	str	r2, [sp, #60]	; 0x3c
 8018258:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801825c:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8018260:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8018264:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8018268:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 801826c:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8018270:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8018274:	9317      	str	r3, [sp, #92]	; 0x5c
 8018276:	e7c0      	b.n	80181fa <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8018278:	200060ee 	.word	0x200060ee

0801827c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801827c:	2200      	movs	r2, #0
 801827e:	8002      	strh	r2, [r0, #0]
 8018280:	8042      	strh	r2, [r0, #2]
 8018282:	8082      	strh	r2, [r0, #4]
 8018284:	80c2      	strh	r2, [r0, #6]
 8018286:	4770      	bx	lr

08018288 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8018288:	b570      	push	{r4, r5, r6, lr}
 801828a:	6803      	ldr	r3, [r0, #0]
 801828c:	4604      	mov	r4, r0
 801828e:	4615      	mov	r5, r2
 8018290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018292:	4798      	blx	r3
 8018294:	6823      	ldr	r3, [r4, #0]
 8018296:	4629      	mov	r1, r5
 8018298:	4620      	mov	r0, r4
 801829a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801829c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182a0:	4718      	bx	r3
	...

080182a4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80182a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80182a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182aa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80182ac:	4299      	cmp	r1, r3
 80182ae:	d029      	beq.n	8018304 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80182b0:	4b15      	ldr	r3, [pc, #84]	; (8018308 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	b92b      	cbnz	r3, 80182c2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80182b6:	4b15      	ldr	r3, [pc, #84]	; (801830c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80182b8:	21b1      	movs	r1, #177	; 0xb1
 80182ba:	4a15      	ldr	r2, [pc, #84]	; (8018310 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80182bc:	4815      	ldr	r0, [pc, #84]	; (8018314 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80182be:	f00f fe3f 	bl	8027f40 <__assert_func>
 80182c2:	4a15      	ldr	r2, [pc, #84]	; (8018318 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80182c4:	8812      	ldrh	r2, [r2, #0]
 80182c6:	428a      	cmp	r2, r1
 80182c8:	d803      	bhi.n	80182d2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80182ca:	4b14      	ldr	r3, [pc, #80]	; (801831c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80182cc:	21b2      	movs	r1, #178	; 0xb2
 80182ce:	4a10      	ldr	r2, [pc, #64]	; (8018310 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80182d0:	e7f4      	b.n	80182bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80182d2:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80182d6:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80182da:	4b11      	ldr	r3, [pc, #68]	; (8018320 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80182dc:	7854      	ldrb	r4, [r2, #1]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80182e4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80182e8:	682b      	ldr	r3, [r5, #0]
 80182ea:	69de      	ldr	r6, [r3, #28]
 80182ec:	4b0d      	ldr	r3, [pc, #52]	; (8018324 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80182ee:	6818      	ldr	r0, [r3, #0]
 80182f0:	f7fa fda0 	bl	8012e34 <_ZNK8touchgfx5Texts7getTextEt>
 80182f4:	2300      	movs	r3, #0
 80182f6:	4602      	mov	r2, r0
 80182f8:	4621      	mov	r1, r4
 80182fa:	9300      	str	r3, [sp, #0]
 80182fc:	4628      	mov	r0, r5
 80182fe:	47b0      	blx	r6
 8018300:	b002      	add	sp, #8
 8018302:	bd70      	pop	{r4, r5, r6, pc}
 8018304:	2000      	movs	r0, #0
 8018306:	e7fb      	b.n	8018300 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8018308:	20006148 	.word	0x20006148
 801830c:	0802b6e0 	.word	0x0802b6e0
 8018310:	0802b818 	.word	0x0802b818
 8018314:	0802b722 	.word	0x0802b722
 8018318:	2000614c 	.word	0x2000614c
 801831c:	0802b74b 	.word	0x0802b74b
 8018320:	20006150 	.word	0x20006150
 8018324:	20006154 	.word	0x20006154

08018328 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8018328:	b570      	push	{r4, r5, r6, lr}
 801832a:	6803      	ldr	r3, [r0, #0]
 801832c:	4604      	mov	r4, r0
 801832e:	b28d      	uxth	r5, r1
 8018330:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018332:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8018334:	4b10      	ldr	r3, [pc, #64]	; (8018378 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	b92b      	cbnz	r3, 8018346 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801833a:	4b10      	ldr	r3, [pc, #64]	; (801837c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801833c:	21b1      	movs	r1, #177	; 0xb1
 801833e:	4a10      	ldr	r2, [pc, #64]	; (8018380 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018340:	4810      	ldr	r0, [pc, #64]	; (8018384 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8018342:	f00f fdfd 	bl	8027f40 <__assert_func>
 8018346:	4910      	ldr	r1, [pc, #64]	; (8018388 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8018348:	8809      	ldrh	r1, [r1, #0]
 801834a:	4291      	cmp	r1, r2
 801834c:	d803      	bhi.n	8018356 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801834e:	4b0f      	ldr	r3, [pc, #60]	; (801838c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8018350:	21b2      	movs	r1, #178	; 0xb2
 8018352:	4a0b      	ldr	r2, [pc, #44]	; (8018380 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018354:	e7f4      	b.n	8018340 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8018356:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801835a:	4b0d      	ldr	r3, [pc, #52]	; (8018390 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018362:	6803      	ldr	r3, [r0, #0]
 8018364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018366:	4798      	blx	r3
 8018368:	1a29      	subs	r1, r5, r0
 801836a:	4633      	mov	r3, r6
 801836c:	4620      	mov	r0, r4
 801836e:	b209      	sxth	r1, r1
 8018370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018374:	4718      	bx	r3
 8018376:	bf00      	nop
 8018378:	20006148 	.word	0x20006148
 801837c:	0802b6e0 	.word	0x0802b6e0
 8018380:	0802b818 	.word	0x0802b818
 8018384:	0802b722 	.word	0x0802b722
 8018388:	2000614c 	.word	0x2000614c
 801838c:	0802b74b 	.word	0x0802b74b
 8018390:	20006150 	.word	0x20006150

08018394 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801839c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801839e:	b08c      	sub	sp, #48	; 0x30
 80183a0:	4604      	mov	r4, r0
 80183a2:	4293      	cmp	r3, r2
 80183a4:	4688      	mov	r8, r1
 80183a6:	d05f      	beq.n	8018468 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80183a8:	4e31      	ldr	r6, [pc, #196]	; (8018470 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80183aa:	6832      	ldr	r2, [r6, #0]
 80183ac:	b92a      	cbnz	r2, 80183ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80183ae:	4b31      	ldr	r3, [pc, #196]	; (8018474 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80183b0:	21b1      	movs	r1, #177	; 0xb1
 80183b2:	4a31      	ldr	r2, [pc, #196]	; (8018478 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80183b4:	4831      	ldr	r0, [pc, #196]	; (801847c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80183b6:	f00f fdc3 	bl	8027f40 <__assert_func>
 80183ba:	4d31      	ldr	r5, [pc, #196]	; (8018480 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80183bc:	8829      	ldrh	r1, [r5, #0]
 80183be:	4299      	cmp	r1, r3
 80183c0:	d803      	bhi.n	80183ca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80183c2:	4b30      	ldr	r3, [pc, #192]	; (8018484 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80183c4:	21b2      	movs	r1, #178	; 0xb2
 80183c6:	4a2c      	ldr	r2, [pc, #176]	; (8018478 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80183c8:	e7f4      	b.n	80183b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80183ca:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80183ce:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80183d2:	4b2d      	ldr	r3, [pc, #180]	; (8018488 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80183da:	2a00      	cmp	r2, #0
 80183dc:	d044      	beq.n	8018468 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80183de:	784b      	ldrb	r3, [r1, #1]
 80183e0:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 80183e4:	f3c3 0901 	ubfx	r9, r3, #0, #2
 80183e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80183ec:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80183f0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80183f4:	4b25      	ldr	r3, [pc, #148]	; (801848c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80183f6:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8018400:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018404:	9207      	str	r2, [sp, #28]
 8018406:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018408:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801840c:	9009      	str	r0, [sp, #36]	; 0x24
 801840e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018412:	f88d 9020 	strb.w	r9, [sp, #32]
 8018416:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801841a:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801841e:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8018422:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018426:	b10a      	cbz	r2, 801842c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8018428:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801842a:	b907      	cbnz	r7, 801842e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801842c:	689f      	ldr	r7, [r3, #8]
 801842e:	f10d 0914 	add.w	r9, sp, #20
 8018432:	4621      	mov	r1, r4
 8018434:	4648      	mov	r0, r9
 8018436:	f003 f9b3 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801843a:	6833      	ldr	r3, [r6, #0]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d0b6      	beq.n	80183ae <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8018440:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018442:	882b      	ldrh	r3, [r5, #0]
 8018444:	428b      	cmp	r3, r1
 8018446:	d9bc      	bls.n	80183c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8018448:	4b11      	ldr	r3, [pc, #68]	; (8018490 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801844a:	6818      	ldr	r0, [r3, #0]
 801844c:	f7fa fcf2 	bl	8012e34 <_ZNK8touchgfx5Texts7getTextEt>
 8018450:	2300      	movs	r3, #0
 8018452:	9001      	str	r0, [sp, #4]
 8018454:	4638      	mov	r0, r7
 8018456:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801845a:	ab07      	add	r3, sp, #28
 801845c:	9300      	str	r3, [sp, #0]
 801845e:	4643      	mov	r3, r8
 8018460:	e899 0006 	ldmia.w	r9, {r1, r2}
 8018464:	f7fa fc77 	bl	8012d56 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018468:	b00c      	add	sp, #48	; 0x30
 801846a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801846e:	bf00      	nop
 8018470:	20006148 	.word	0x20006148
 8018474:	0802b6e0 	.word	0x0802b6e0
 8018478:	0802b818 	.word	0x0802b818
 801847c:	0802b722 	.word	0x0802b722
 8018480:	2000614c 	.word	0x2000614c
 8018484:	0802b74b 	.word	0x0802b74b
 8018488:	20006150 	.word	0x20006150
 801848c:	200060f8 	.word	0x200060f8
 8018490:	20006154 	.word	0x20006154

08018494 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018494:	b40e      	push	{r1, r2, r3}
 8018496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801849a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801849e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80184a0:	b09b      	sub	sp, #108	; 0x6c
 80184a2:	4604      	mov	r4, r0
 80184a4:	4293      	cmp	r3, r2
 80184a6:	d061      	beq.n	801856c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 80184a8:	aa24      	add	r2, sp, #144	; 0x90
 80184aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018580 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 80184ae:	9203      	str	r2, [sp, #12]
 80184b0:	f8da 2000 	ldr.w	r2, [sl]
 80184b4:	b92a      	cbnz	r2, 80184c2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80184b6:	4b2e      	ldr	r3, [pc, #184]	; (8018570 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 80184b8:	21b1      	movs	r1, #177	; 0xb1
 80184ba:	4a2e      	ldr	r2, [pc, #184]	; (8018574 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 80184bc:	482e      	ldr	r0, [pc, #184]	; (8018578 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 80184be:	f00f fd3f 	bl	8027f40 <__assert_func>
 80184c2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8018584 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 80184c6:	f8b8 1000 	ldrh.w	r1, [r8]
 80184ca:	4299      	cmp	r1, r3
 80184cc:	d803      	bhi.n	80184d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80184ce:	4b2b      	ldr	r3, [pc, #172]	; (801857c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 80184d0:	21b2      	movs	r1, #178	; 0xb2
 80184d2:	4a28      	ldr	r2, [pc, #160]	; (8018574 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 80184d4:	e7f2      	b.n	80184bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80184d6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8018588 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 80184da:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80184de:	f8d9 3000 	ldr.w	r3, [r9]
 80184e2:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80184e6:	683b      	ldr	r3, [r7, #0]
 80184e8:	4638      	mov	r0, r7
 80184ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184ec:	4798      	blx	r3
 80184ee:	4606      	mov	r6, r0
 80184f0:	b205      	sxth	r5, r0
 80184f2:	a804      	add	r0, sp, #16
 80184f4:	f003 fe44 	bl	801c180 <_ZN8touchgfx12TextProviderC1Ev>
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	4638      	mov	r0, r7
 80184fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184fe:	4798      	blx	r3
 8018500:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018502:	4603      	mov	r3, r0
 8018504:	9a03      	ldr	r2, [sp, #12]
 8018506:	a804      	add	r0, sp, #16
 8018508:	f003 fe7f 	bl	801c20a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801850c:	f8da 3000 	ldr.w	r3, [sl]
 8018510:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8018514:	2b00      	cmp	r3, #0
 8018516:	d0ce      	beq.n	80184b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8018518:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801851a:	f8b8 0000 	ldrh.w	r0, [r8]
 801851e:	4290      	cmp	r0, r2
 8018520:	d9d5      	bls.n	80184ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8018522:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8018526:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801852a:	f8d9 3000 	ldr.w	r3, [r9]
 801852e:	787a      	ldrb	r2, [r7, #1]
 8018530:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8018534:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8018538:	9700      	str	r7, [sp, #0]
 801853a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801853e:	a804      	add	r0, sp, #16
 8018540:	f001 fc33 	bl	8019daa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018544:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8018548:	b203      	sxth	r3, r0
 801854a:	18a9      	adds	r1, r5, r2
 801854c:	2900      	cmp	r1, #0
 801854e:	dd0b      	ble.n	8018568 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8018550:	3b01      	subs	r3, #1
 8018552:	fb13 f302 	smulbb	r3, r3, r2
 8018556:	fb16 3300 	smlabb	r3, r6, r0, r3
 801855a:	b21d      	sxth	r5, r3
 801855c:	4628      	mov	r0, r5
 801855e:	b01b      	add	sp, #108	; 0x6c
 8018560:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018564:	b003      	add	sp, #12
 8018566:	4770      	bx	lr
 8018568:	2b00      	cmp	r3, #0
 801856a:	dcf7      	bgt.n	801855c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801856c:	2500      	movs	r5, #0
 801856e:	e7f5      	b.n	801855c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8018570:	0802b6e0 	.word	0x0802b6e0
 8018574:	0802b818 	.word	0x0802b818
 8018578:	0802b722 	.word	0x0802b722
 801857c:	0802b74b 	.word	0x0802b74b
 8018580:	20006148 	.word	0x20006148
 8018584:	2000614c 	.word	0x2000614c
 8018588:	20006150 	.word	0x20006150

0801858c <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801858c:	b570      	push	{r4, r5, r6, lr}
 801858e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018592:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018594:	4604      	mov	r4, r0
 8018596:	4299      	cmp	r1, r3
 8018598:	d01e      	beq.n	80185d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801859a:	6803      	ldr	r3, [r0, #0]
 801859c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801859e:	4b0f      	ldr	r3, [pc, #60]	; (80185dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	b92b      	cbnz	r3, 80185b0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80185a4:	4b0e      	ldr	r3, [pc, #56]	; (80185e0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80185a6:	21b1      	movs	r1, #177	; 0xb1
 80185a8:	4a0e      	ldr	r2, [pc, #56]	; (80185e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80185aa:	480f      	ldr	r0, [pc, #60]	; (80185e8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80185ac:	f00f fcc8 	bl	8027f40 <__assert_func>
 80185b0:	4b0e      	ldr	r3, [pc, #56]	; (80185ec <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80185b2:	881b      	ldrh	r3, [r3, #0]
 80185b4:	428b      	cmp	r3, r1
 80185b6:	d803      	bhi.n	80185c0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80185b8:	4b0d      	ldr	r3, [pc, #52]	; (80185f0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80185ba:	21b2      	movs	r1, #178	; 0xb2
 80185bc:	4a09      	ldr	r2, [pc, #36]	; (80185e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80185be:	e7f4      	b.n	80185aa <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80185c0:	4b0c      	ldr	r3, [pc, #48]	; (80185f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80185c2:	6818      	ldr	r0, [r3, #0]
 80185c4:	f7fa fc36 	bl	8012e34 <_ZNK8touchgfx5Texts7getTextEt>
 80185c8:	2300      	movs	r3, #0
 80185ca:	4601      	mov	r1, r0
 80185cc:	46ac      	mov	ip, r5
 80185ce:	4620      	mov	r0, r4
 80185d0:	461a      	mov	r2, r3
 80185d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185d6:	4760      	bx	ip
 80185d8:	2000      	movs	r0, #0
 80185da:	bd70      	pop	{r4, r5, r6, pc}
 80185dc:	20006148 	.word	0x20006148
 80185e0:	0802b6e0 	.word	0x0802b6e0
 80185e4:	0802b818 	.word	0x0802b818
 80185e8:	0802b722 	.word	0x0802b722
 80185ec:	2000614c 	.word	0x2000614c
 80185f0:	0802b74b 	.word	0x0802b74b
 80185f4:	20006154 	.word	0x20006154

080185f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80185f8:	b538      	push	{r3, r4, r5, lr}
 80185fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185fe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018600:	4604      	mov	r4, r0
 8018602:	429a      	cmp	r2, r3
 8018604:	d014      	beq.n	8018630 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018606:	6803      	ldr	r3, [r0, #0]
 8018608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801860a:	4798      	blx	r3
 801860c:	6823      	ldr	r3, [r4, #0]
 801860e:	4605      	mov	r5, r0
 8018610:	4620      	mov	r0, r4
 8018612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018614:	4798      	blx	r3
 8018616:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801861a:	b22d      	sxth	r5, r5
 801861c:	4601      	mov	r1, r0
 801861e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018622:	bf06      	itte	eq
 8018624:	4602      	moveq	r2, r0
 8018626:	4629      	moveq	r1, r5
 8018628:	462a      	movne	r2, r5
 801862a:	4620      	mov	r0, r4
 801862c:	f7f8 ff2f 	bl	801148e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018630:	bd38      	pop	{r3, r4, r5, pc}

08018632 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8018632:	888a      	ldrh	r2, [r1, #4]
 8018634:	8582      	strh	r2, [r0, #44]	; 0x2c
 8018636:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801863a:	b922      	cbnz	r2, 8018646 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801863c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018640:	b90b      	cbnz	r3, 8018646 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8018642:	f7ff bfd9 	b.w	80185f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018646:	4770      	bx	lr

08018648 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018648:	2300      	movs	r3, #0
 801864a:	8083      	strh	r3, [r0, #4]
 801864c:	80c3      	strh	r3, [r0, #6]
 801864e:	8003      	strh	r3, [r0, #0]
 8018650:	8043      	strh	r3, [r0, #2]
 8018652:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018656:	2bff      	cmp	r3, #255	; 0xff
 8018658:	bf01      	itttt	eq
 801865a:	890b      	ldrheq	r3, [r1, #8]
 801865c:	8083      	strheq	r3, [r0, #4]
 801865e:	894b      	ldrheq	r3, [r1, #10]
 8018660:	80c3      	strheq	r3, [r0, #6]
 8018662:	4770      	bx	lr

08018664 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018666:	4604      	mov	r4, r0
 8018668:	466b      	mov	r3, sp
 801866a:	6808      	ldr	r0, [r1, #0]
 801866c:	6849      	ldr	r1, [r1, #4]
 801866e:	c303      	stmia	r3!, {r0, r1}
 8018670:	6823      	ldr	r3, [r4, #0]
 8018672:	4669      	mov	r1, sp
 8018674:	4620      	mov	r0, r4
 8018676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018678:	4798      	blx	r3
 801867a:	4b08      	ldr	r3, [pc, #32]	; (801869c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018682:	b10a      	cbz	r2, 8018688 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018684:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018686:	b900      	cbnz	r0, 801868a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018688:	6898      	ldr	r0, [r3, #8]
 801868a:	6803      	ldr	r3, [r0, #0]
 801868c:	4669      	mov	r1, sp
 801868e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018690:	699d      	ldr	r5, [r3, #24]
 8018692:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018696:	47a8      	blx	r5
 8018698:	b003      	add	sp, #12
 801869a:	bd30      	pop	{r4, r5, pc}
 801869c:	200060f8 	.word	0x200060f8

080186a0 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 80186a0:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 80186a4:	600b      	str	r3, [r1, #0]
 80186a6:	f9b0 314e 	ldrsh.w	r3, [r0, #334]	; 0x14e
 80186aa:	6013      	str	r3, [r2, #0]
 80186ac:	4770      	bx	lr

080186ae <_ZN8touchgfx5Gauge8setWidthEs>:
 80186ae:	8101      	strh	r1, [r0, #8]
 80186b0:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
 80186b4:	f8a0 115c 	strh.w	r1, [r0, #348]	; 0x15c
 80186b8:	4770      	bx	lr

080186ba <_ZN8touchgfx5Gauge9setHeightEs>:
 80186ba:	8141      	strh	r1, [r0, #10]
 80186bc:	f8a0 10ba 	strh.w	r1, [r0, #186]	; 0xba
 80186c0:	f8a0 115e 	strh.w	r1, [r0, #350]	; 0x15e
 80186c4:	4770      	bx	lr

080186c6 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 80186c6:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 80186ca:	4770      	bx	lr

080186cc <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 80186cc:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80186d0:	4770      	bx	lr

080186d2 <_ZN8touchgfx5Gauge8setAlphaEh>:
 80186d2:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 80186d6:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
 80186da:	f880 1182 	strb.w	r1, [r0, #386]	; 0x182
 80186de:	4770      	bx	lr

080186e0 <_ZNK8touchgfx5Gauge8getAlphaEv>:
 80186e0:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
 80186e4:	4770      	bx	lr

080186e6 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 80186e6:	4770      	bx	lr

080186e8 <_ZN8touchgfx5GaugeC1Ev>:
 80186e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80186ea:	4604      	mov	r4, r0
 80186ec:	f7fd f9f4 	bl	8015ad8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80186f0:	4b18      	ldr	r3, [pc, #96]	; (8018754 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 80186f2:	a902      	add	r1, sp, #8
 80186f4:	4626      	mov	r6, r4
 80186f6:	2500      	movs	r5, #0
 80186f8:	f504 77aa 	add.w	r7, r4, #340	; 0x154
 80186fc:	f846 3bb0 	str.w	r3, [r6], #176
 8018700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018704:	4630      	mov	r0, r6
 8018706:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801870a:	f7ff f8c7 	bl	801789c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801870e:	2301      	movs	r3, #1
 8018710:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8018714:	4638      	mov	r0, r7
 8018716:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
 801871a:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
 801871e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8018722:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8018726:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 801872a:	f7fe fb4d 	bl	8016dc8 <_ZN8touchgfx6CircleC1Ev>
 801872e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8018732:	4620      	mov	r0, r4
 8018734:	f7fd fa8c 	bl	8015c50 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8018738:	4639      	mov	r1, r7
 801873a:	4620      	mov	r0, r4
 801873c:	f7fd faba 	bl	8015cb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018740:	4620      	mov	r0, r4
 8018742:	4631      	mov	r1, r6
 8018744:	f7fd fab6 	bl	8015cb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018748:	4620      	mov	r0, r4
 801874a:	f884 5179 	strb.w	r5, [r4, #377]	; 0x179
 801874e:	b003      	add	sp, #12
 8018750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018752:	bf00      	nop
 8018754:	0802b8f8 	.word	0x0802b8f8

08018758 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8018758:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
 801875c:	4770      	bx	lr

0801875e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801875e:	f880 1141 	strb.w	r1, [r0, #321]	; 0x141
 8018762:	4770      	bx	lr

08018764 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8018764:	b538      	push	{r3, r4, r5, lr}
 8018766:	8902      	ldrh	r2, [r0, #8]
 8018768:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
 801876c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018770:	4604      	mov	r4, r0
 8018772:	f8a0 20b8 	strh.w	r2, [r0, #184]	; 0xb8
 8018776:	2200      	movs	r2, #0
 8018778:	f8a0 30ba 	strh.w	r3, [r0, #186]	; 0xba
 801877c:	4628      	mov	r0, r5
 801877e:	4611      	mov	r1, r2
 8018780:	f7f8 fe67 	bl	8011452 <_ZN8touchgfx8Drawable5setXYEss>
 8018784:	f9b4 2152 	ldrsh.w	r2, [r4, #338]	; 0x152
 8018788:	f9b4 314e 	ldrsh.w	r3, [r4, #334]	; 0x14e
 801878c:	4628      	mov	r0, r5
 801878e:	1a9b      	subs	r3, r3, r2
 8018790:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 8018794:	ee07 3a90 	vmov	s15, r3
 8018798:	f9b4 314c 	ldrsh.w	r3, [r4, #332]	; 0x14c
 801879c:	1a9b      	subs	r3, r3, r2
 801879e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187a2:	ee07 3a10 	vmov	s14, r3
 80187a6:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
 80187aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187ae:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 80187b2:	f7ff f8bd 	bl	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80187b6:	4b16      	ldr	r3, [pc, #88]	; (8018810 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 80187b8:	4628      	mov	r0, r5
 80187ba:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 80187be:	f7ff f8b7 	bl	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80187c2:	f9b4 314e 	ldrsh.w	r3, [r4, #334]	; 0x14e
 80187c6:	f9b4 214c 	ldrsh.w	r2, [r4, #332]	; 0x14c
 80187ca:	4628      	mov	r0, r5
 80187cc:	ee07 3a90 	vmov	s15, r3
 80187d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80187d4:	ee07 2a10 	vmov	s14, r2
 80187d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187dc:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 80187e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187e4:	edc4 7a3e 	vstr	s15, [r4, #248]	; 0xf8
 80187e8:	ed84 7a3d 	vstr	s14, [r4, #244]	; 0xf4
 80187ec:	f7ff f8a0 	bl	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80187f0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80187f4:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 80187f8:	4628      	mov	r0, r5
 80187fa:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80187fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8018802:	f7ff f895 	bl	8017930 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018806:	2301      	movs	r3, #1
 8018808:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
 801880c:	bd38      	pop	{r3, r4, r5, pc}
 801880e:	bf00      	nop
 8018810:	43960000 	.word	0x43960000

08018814 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 8018814:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018816:	4604      	mov	r4, r0
 8018818:	a802      	add	r0, sp, #8
 801881a:	4616      	mov	r6, r2
 801881c:	461d      	mov	r5, r3
 801881e:	f820 1d04 	strh.w	r1, [r0, #-4]!
 8018822:	4601      	mov	r1, r0
 8018824:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8018828:	f7ff f9d8 	bl	8017bdc <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801882c:	4620      	mov	r0, r4
 801882e:	f8a4 6150 	strh.w	r6, [r4, #336]	; 0x150
 8018832:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
 8018836:	f7ff ff95 	bl	8018764 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801883a:	b002      	add	sp, #8
 801883c:	bd70      	pop	{r4, r5, r6, pc}

0801883e <_ZN8touchgfx5Gauge9setCenterEii>:
 801883e:	b570      	push	{r4, r5, r6, lr}
 8018840:	4606      	mov	r6, r0
 8018842:	460d      	mov	r5, r1
 8018844:	4614      	mov	r4, r2
 8018846:	f8a6 114c 	strh.w	r1, [r6, #332]	; 0x14c
 801884a:	f8a6 214e 	strh.w	r2, [r6, #334]	; 0x14e
 801884e:	f7ff ff89 	bl	8018764 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8018852:	f9b6 215a 	ldrsh.w	r2, [r6, #346]	; 0x15a
 8018856:	f9b6 1158 	ldrsh.w	r1, [r6, #344]	; 0x158
 801885a:	1aa4      	subs	r4, r4, r2
 801885c:	1a6d      	subs	r5, r5, r1
 801885e:	0164      	lsls	r4, r4, #5
 8018860:	016d      	lsls	r5, r5, #5
 8018862:	3410      	adds	r4, #16
 8018864:	3510      	adds	r5, #16
 8018866:	f8c6 4188 	str.w	r4, [r6, #392]	; 0x188
 801886a:	f8c6 5184 	str.w	r5, [r6, #388]	; 0x184
 801886e:	bd70      	pop	{r4, r5, r6, pc}

08018870 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 8018870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018872:	0149      	lsls	r1, r1, #5
 8018874:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018876:	4604      	mov	r4, r0
 8018878:	4299      	cmp	r1, r3
 801887a:	9101      	str	r1, [sp, #4]
 801887c:	d00b      	beq.n	8018896 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801887e:	4601      	mov	r1, r0
 8018880:	aa01      	add	r2, sp, #4
 8018882:	a802      	add	r0, sp, #8
 8018884:	f7fe fcb9 	bl	80171fa <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8018888:	9b01      	ldr	r3, [sp, #4]
 801888a:	a902      	add	r1, sp, #8
 801888c:	4620      	mov	r0, r4
 801888e:	6423      	str	r3, [r4, #64]	; 0x40
 8018890:	6823      	ldr	r3, [r4, #0]
 8018892:	691b      	ldr	r3, [r3, #16]
 8018894:	4798      	blx	r3
 8018896:	b004      	add	sp, #16
 8018898:	bd10      	pop	{r4, pc}
	...

0801889c <_ZN8touchgfx5Gauge8setValueEi>:
 801889c:	b570      	push	{r4, r5, r6, lr}
 801889e:	4604      	mov	r4, r0
 80188a0:	f7fd f841 	bl	8015926 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80188a4:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 80188a8:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 80188ac:	4620      	mov	r0, r4
 80188ae:	429a      	cmp	r2, r3
 80188b0:	f504 76aa 	add.w	r6, r4, #340	; 0x154
 80188b4:	bfac      	ite	ge
 80188b6:	f894 3141 	ldrbge.w	r3, [r4, #321]	; 0x141
 80188ba:	f894 3140 	ldrblt.w	r3, [r4, #320]	; 0x140
 80188be:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
 80188c2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80188c6:	1ac9      	subs	r1, r1, r3
 80188c8:	2900      	cmp	r1, #0
 80188ca:	bfb8      	it	lt
 80188cc:	4249      	neglt	r1, r1
 80188ce:	b289      	uxth	r1, r1
 80188d0:	f7fd f8b8 	bl	8015a44 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80188d4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80188d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 80188dc:	4605      	mov	r5, r0
 80188de:	eddf 6a18 	vldr	s13, [pc, #96]	; 8018940 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 80188e2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80188e6:	429a      	cmp	r2, r3
 80188e8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8018944 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 80188ec:	da15      	bge.n	801891a <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 80188ee:	1b5b      	subs	r3, r3, r5
 80188f0:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 80188f4:	ed94 0a39 	vldr	s0, [r4, #228]	; 0xe4
 80188f8:	ee07 3a90 	vmov	s15, r3
 80188fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018900:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8018904:	ee21 1a07 	vmul.f32	s2, s2, s14
 8018908:	f7ff fa46 	bl	8017d98 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801890c:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8018910:	1b49      	subs	r1, r1, r5
 8018912:	4630      	mov	r0, r6
 8018914:	f7ff ffac 	bl	8018870 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 8018918:	bd70      	pop	{r4, r5, r6, pc}
 801891a:	442b      	add	r3, r5
 801891c:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 8018920:	ed94 0a39 	vldr	s0, [r4, #228]	; 0xe4
 8018924:	ee07 3a90 	vmov	s15, r3
 8018928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801892c:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8018930:	ee21 1a07 	vmul.f32	s2, s2, s14
 8018934:	f7ff fa30 	bl	8017d98 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8018938:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 801893c:	4429      	add	r1, r5
 801893e:	e7e8      	b.n	8018912 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 8018940:	43340000 	.word	0x43340000
 8018944:	40490fdb 	.word	0x40490fdb

08018948 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 8018948:	4291      	cmp	r1, r2
 801894a:	b510      	push	{r4, lr}
 801894c:	4604      	mov	r4, r0
 801894e:	d105      	bne.n	801895c <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 8018950:	4b0b      	ldr	r3, [pc, #44]	; (8018980 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 8018952:	215a      	movs	r1, #90	; 0x5a
 8018954:	4a0b      	ldr	r2, [pc, #44]	; (8018984 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 8018956:	480c      	ldr	r0, [pc, #48]	; (8018988 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 8018958:	f00f faf2 	bl	8027f40 <__assert_func>
 801895c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
 8018960:	0149      	lsls	r1, r1, #5
 8018962:	f8c0 2148 	str.w	r2, [r0, #328]	; 0x148
 8018966:	0152      	lsls	r2, r2, #5
 8018968:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
 801896c:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8018970:	f7fc ff68 	bl	8015844 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8018974:	4601      	mov	r1, r0
 8018976:	4620      	mov	r0, r4
 8018978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801897c:	f7ff bf8e 	b.w	801889c <_ZN8touchgfx5Gauge8setValueEi>
 8018980:	0802b8ac 	.word	0x0802b8ac
 8018984:	0802b9dc 	.word	0x0802b9dc
 8018988:	0802b8c3 	.word	0x0802b8c3

0801898c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801898c:	b570      	push	{r4, r5, r6, lr}
 801898e:	880b      	ldrh	r3, [r1, #0]
 8018990:	4605      	mov	r5, r0
 8018992:	4604      	mov	r4, r0
 8018994:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018996:	8813      	ldrh	r3, [r2, #0]
 8018998:	f825 3f30 	strh.w	r3, [r5, #48]!
 801899c:	4628      	mov	r0, r5
 801899e:	f005 f92d 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80189a2:	4606      	mov	r6, r0
 80189a4:	4628      	mov	r0, r5
 80189a6:	f005 f963 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80189aa:	6823      	ldr	r3, [r4, #0]
 80189ac:	4605      	mov	r5, r0
 80189ae:	b231      	sxth	r1, r6
 80189b0:	4620      	mov	r0, r4
 80189b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189b4:	4798      	blx	r3
 80189b6:	6823      	ldr	r3, [r4, #0]
 80189b8:	b229      	sxth	r1, r5
 80189ba:	4620      	mov	r0, r4
 80189bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189c2:	4718      	bx	r3

080189c4 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80189c4:	b510      	push	{r4, lr}
 80189c6:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80189ca:	4604      	mov	r4, r0
 80189cc:	2bff      	cmp	r3, #255	; 0xff
 80189ce:	d006      	beq.n	80189de <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80189d0:	2300      	movs	r3, #0
 80189d2:	8003      	strh	r3, [r0, #0]
 80189d4:	8043      	strh	r3, [r0, #2]
 80189d6:	8083      	strh	r3, [r0, #4]
 80189d8:	80c3      	strh	r3, [r0, #6]
 80189da:	4620      	mov	r0, r4
 80189dc:	bd10      	pop	{r4, pc}
 80189de:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80189e2:	b11b      	cbz	r3, 80189ec <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80189e4:	3130      	adds	r1, #48	; 0x30
 80189e6:	f005 f97d 	bl	801dce4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80189ea:	e7f6      	b.n	80189da <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80189ec:	312e      	adds	r1, #46	; 0x2e
 80189ee:	e7fa      	b.n	80189e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080189f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80189f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189f4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80189f8:	b08a      	sub	sp, #40	; 0x28
 80189fa:	4604      	mov	r4, r0
 80189fc:	4688      	mov	r8, r1
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d044      	beq.n	8018a8c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8018a02:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018a04:	a805      	add	r0, sp, #20
 8018a06:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018a0a:	f005 f8f7 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018a0e:	4605      	mov	r5, r0
 8018a10:	b206      	sxth	r6, r0
 8018a12:	a805      	add	r0, sp, #20
 8018a14:	f005 f92c 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018a18:	f9b8 2000 	ldrsh.w	r2, [r8]
 8018a1c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8018a20:	2300      	movs	r3, #0
 8018a22:	fa0f fc80 	sxth.w	ip, r0
 8018a26:	4417      	add	r7, r2
 8018a28:	9306      	str	r3, [sp, #24]
 8018a2a:	b2bf      	uxth	r7, r7
 8018a2c:	fa0f fe87 	sxth.w	lr, r7
 8018a30:	459e      	cmp	lr, r3
 8018a32:	dd2d      	ble.n	8018a90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018a34:	4296      	cmp	r6, r2
 8018a36:	dd2b      	ble.n	8018a90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018a38:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8018a3c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8018a40:	4419      	add	r1, r3
 8018a42:	b289      	uxth	r1, r1
 8018a44:	fa0f f881 	sxth.w	r8, r1
 8018a48:	f1b8 0f00 	cmp.w	r8, #0
 8018a4c:	dd20      	ble.n	8018a90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018a4e:	459c      	cmp	ip, r3
 8018a50:	dd1e      	ble.n	8018a90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018a52:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8018a56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a5a:	4576      	cmp	r6, lr
 8018a5c:	bfa8      	it	ge
 8018a5e:	463d      	movge	r5, r7
 8018a60:	45c4      	cmp	ip, r8
 8018a62:	bfa8      	it	ge
 8018a64:	4608      	movge	r0, r1
 8018a66:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018a6a:	1aad      	subs	r5, r5, r2
 8018a6c:	1ac0      	subs	r0, r0, r3
 8018a6e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018a72:	f8ad 501c 	strh.w	r5, [sp, #28]
 8018a76:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018a7a:	4b1f      	ldr	r3, [pc, #124]	; (8018af8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	b953      	cbnz	r3, 8018a96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8018a80:	4b1e      	ldr	r3, [pc, #120]	; (8018afc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8018a82:	218b      	movs	r1, #139	; 0x8b
 8018a84:	4a1e      	ldr	r2, [pc, #120]	; (8018b00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8018a86:	481f      	ldr	r0, [pc, #124]	; (8018b04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8018a88:	f00f fa5a 	bl	8027f40 <__assert_func>
 8018a8c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018a8e:	e7b9      	b.n	8018a04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018a90:	2300      	movs	r3, #0
 8018a92:	9307      	str	r3, [sp, #28]
 8018a94:	e7f1      	b.n	8018a7a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8018a96:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	d026      	beq.n	8018af0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018aa2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	dd22      	ble.n	8018af0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018aaa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	dd1e      	ble.n	8018af0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	a908      	add	r1, sp, #32
 8018ab6:	4620      	mov	r0, r4
 8018ab8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8018abc:	6823      	ldr	r3, [r4, #0]
 8018abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ac0:	4798      	blx	r3
 8018ac2:	4b11      	ldr	r3, [pc, #68]	; (8018b08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018aca:	b10a      	cbz	r2, 8018ad0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8018acc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018ace:	b900      	cbnz	r0, 8018ad2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8018ad0:	6898      	ldr	r0, [r3, #8]
 8018ad2:	2501      	movs	r5, #1
 8018ad4:	6801      	ldr	r1, [r0, #0]
 8018ad6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018ada:	9502      	str	r5, [sp, #8]
 8018adc:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8018ae0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018ae4:	9401      	str	r4, [sp, #4]
 8018ae6:	ac06      	add	r4, sp, #24
 8018ae8:	9400      	str	r4, [sp, #0]
 8018aea:	688c      	ldr	r4, [r1, #8]
 8018aec:	a905      	add	r1, sp, #20
 8018aee:	47a0      	blx	r4
 8018af0:	b00a      	add	sp, #40	; 0x28
 8018af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018af6:	bf00      	nop
 8018af8:	20006180 	.word	0x20006180
 8018afc:	0802ba15 	.word	0x0802ba15
 8018b00:	0802bae8 	.word	0x0802bae8
 8018b04:	0802ba51 	.word	0x0802ba51
 8018b08:	200060f8 	.word	0x200060f8

08018b0c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b12:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018b14:	4606      	mov	r6, r0
 8018b16:	4299      	cmp	r1, r3
 8018b18:	d02a      	beq.n	8018b70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8018b1a:	4b16      	ldr	r3, [pc, #88]	; (8018b74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	b92b      	cbnz	r3, 8018b2c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8018b20:	4b15      	ldr	r3, [pc, #84]	; (8018b78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8018b22:	21b1      	movs	r1, #177	; 0xb1
 8018b24:	4a15      	ldr	r2, [pc, #84]	; (8018b7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018b26:	4816      	ldr	r0, [pc, #88]	; (8018b80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8018b28:	f00f fa0a 	bl	8027f40 <__assert_func>
 8018b2c:	4a15      	ldr	r2, [pc, #84]	; (8018b84 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8018b2e:	8812      	ldrh	r2, [r2, #0]
 8018b30:	428a      	cmp	r2, r1
 8018b32:	d803      	bhi.n	8018b3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8018b34:	4b14      	ldr	r3, [pc, #80]	; (8018b88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8018b36:	21b2      	movs	r1, #178	; 0xb2
 8018b38:	4a10      	ldr	r2, [pc, #64]	; (8018b7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018b3a:	e7f4      	b.n	8018b26 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8018b3c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018b40:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018b44:	4b11      	ldr	r3, [pc, #68]	; (8018b8c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8018b46:	7854      	ldrb	r4, [r2, #1]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018b4e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018b52:	682b      	ldr	r3, [r5, #0]
 8018b54:	69df      	ldr	r7, [r3, #28]
 8018b56:	4b0e      	ldr	r3, [pc, #56]	; (8018b90 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8018b58:	6818      	ldr	r0, [r3, #0]
 8018b5a:	f7fa f96b 	bl	8012e34 <_ZNK8touchgfx5Texts7getTextEt>
 8018b5e:	2300      	movs	r3, #0
 8018b60:	4602      	mov	r2, r0
 8018b62:	4621      	mov	r1, r4
 8018b64:	9300      	str	r3, [sp, #0]
 8018b66:	4628      	mov	r0, r5
 8018b68:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8018b6a:	47b8      	blx	r7
 8018b6c:	b003      	add	sp, #12
 8018b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b70:	2000      	movs	r0, #0
 8018b72:	e7fb      	b.n	8018b6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8018b74:	20006148 	.word	0x20006148
 8018b78:	0802b6e0 	.word	0x0802b6e0
 8018b7c:	0802bb94 	.word	0x0802bb94
 8018b80:	0802b722 	.word	0x0802b722
 8018b84:	2000614c 	.word	0x2000614c
 8018b88:	0802b74b 	.word	0x0802b74b
 8018b8c:	20006150 	.word	0x20006150
 8018b90:	20006154 	.word	0x20006154

08018b94 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8018b94:	b570      	push	{r4, r5, r6, lr}
 8018b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b9a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018b9c:	4604      	mov	r4, r0
 8018b9e:	4299      	cmp	r1, r3
 8018ba0:	d01e      	beq.n	8018be0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8018ba2:	6803      	ldr	r3, [r0, #0]
 8018ba4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018ba6:	4b0f      	ldr	r3, [pc, #60]	; (8018be4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	b92b      	cbnz	r3, 8018bb8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8018bac:	4b0e      	ldr	r3, [pc, #56]	; (8018be8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8018bae:	21b1      	movs	r1, #177	; 0xb1
 8018bb0:	4a0e      	ldr	r2, [pc, #56]	; (8018bec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018bb2:	480f      	ldr	r0, [pc, #60]	; (8018bf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8018bb4:	f00f f9c4 	bl	8027f40 <__assert_func>
 8018bb8:	4b0e      	ldr	r3, [pc, #56]	; (8018bf4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8018bba:	881b      	ldrh	r3, [r3, #0]
 8018bbc:	428b      	cmp	r3, r1
 8018bbe:	d803      	bhi.n	8018bc8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8018bc0:	4b0d      	ldr	r3, [pc, #52]	; (8018bf8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8018bc2:	21b2      	movs	r1, #178	; 0xb2
 8018bc4:	4a09      	ldr	r2, [pc, #36]	; (8018bec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018bc6:	e7f4      	b.n	8018bb2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8018bc8:	4b0c      	ldr	r3, [pc, #48]	; (8018bfc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8018bca:	6818      	ldr	r0, [r3, #0]
 8018bcc:	f7fa f932 	bl	8012e34 <_ZNK8touchgfx5Texts7getTextEt>
 8018bd0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018bd2:	4601      	mov	r1, r0
 8018bd4:	46ac      	mov	ip, r5
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	2300      	movs	r3, #0
 8018bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bde:	4760      	bx	ip
 8018be0:	2000      	movs	r0, #0
 8018be2:	bd70      	pop	{r4, r5, r6, pc}
 8018be4:	20006148 	.word	0x20006148
 8018be8:	0802b6e0 	.word	0x0802b6e0
 8018bec:	0802bb94 	.word	0x0802bb94
 8018bf0:	0802b722 	.word	0x0802b722
 8018bf4:	2000614c 	.word	0x2000614c
 8018bf8:	0802b74b 	.word	0x0802b74b
 8018bfc:	20006154 	.word	0x20006154

08018c00 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c08:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018c0a:	b08c      	sub	sp, #48	; 0x30
 8018c0c:	4604      	mov	r4, r0
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	460e      	mov	r6, r1
 8018c12:	d05d      	beq.n	8018cd0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018c14:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8018cf4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8018c18:	f8d8 2000 	ldr.w	r2, [r8]
 8018c1c:	b92a      	cbnz	r2, 8018c2a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8018c1e:	4b2e      	ldr	r3, [pc, #184]	; (8018cd8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8018c20:	21b1      	movs	r1, #177	; 0xb1
 8018c22:	4a2e      	ldr	r2, [pc, #184]	; (8018cdc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018c24:	482e      	ldr	r0, [pc, #184]	; (8018ce0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8018c26:	f00f f98b 	bl	8027f40 <__assert_func>
 8018c2a:	4f2e      	ldr	r7, [pc, #184]	; (8018ce4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8018c2c:	8839      	ldrh	r1, [r7, #0]
 8018c2e:	4299      	cmp	r1, r3
 8018c30:	d803      	bhi.n	8018c3a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8018c32:	4b2d      	ldr	r3, [pc, #180]	; (8018ce8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8018c34:	21b2      	movs	r1, #178	; 0xb2
 8018c36:	4a29      	ldr	r2, [pc, #164]	; (8018cdc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018c38:	e7f4      	b.n	8018c24 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8018c3a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018c3e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018c42:	4b2a      	ldr	r3, [pc, #168]	; (8018cec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018c4a:	2a00      	cmp	r2, #0
 8018c4c:	d040      	beq.n	8018cd0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018c4e:	784b      	ldrb	r3, [r1, #1]
 8018c50:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8018c54:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018c58:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8018c5c:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8018c60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018c64:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018c68:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018c6c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018c70:	ad05      	add	r5, sp, #20
 8018c72:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018c74:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018c78:	9207      	str	r2, [sp, #28]
 8018c7a:	f88d 9020 	strb.w	r9, [sp, #32]
 8018c7e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8018c82:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8018c86:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018c8a:	9009      	str	r0, [sp, #36]	; 0x24
 8018c8c:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018c90:	f7f7 fc4a 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8018c94:	4621      	mov	r1, r4
 8018c96:	4681      	mov	r9, r0
 8018c98:	4628      	mov	r0, r5
 8018c9a:	f002 fd81 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d0bb      	beq.n	8018c1e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8018ca6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018ca8:	883b      	ldrh	r3, [r7, #0]
 8018caa:	428b      	cmp	r3, r1
 8018cac:	d9c1      	bls.n	8018c32 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8018cae:	4b10      	ldr	r3, [pc, #64]	; (8018cf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8018cb0:	6818      	ldr	r0, [r3, #0]
 8018cb2:	f7fa f8bf 	bl	8012e34 <_ZNK8touchgfx5Texts7getTextEt>
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	9303      	str	r3, [sp, #12]
 8018cba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018cbc:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8018cc0:	ab07      	add	r3, sp, #28
 8018cc2:	4648      	mov	r0, r9
 8018cc4:	9300      	str	r3, [sp, #0]
 8018cc6:	4633      	mov	r3, r6
 8018cc8:	e895 0006 	ldmia.w	r5, {r1, r2}
 8018ccc:	f7fa f843 	bl	8012d56 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018cd0:	b00c      	add	sp, #48	; 0x30
 8018cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cd6:	bf00      	nop
 8018cd8:	0802b6e0 	.word	0x0802b6e0
 8018cdc:	0802bb94 	.word	0x0802bb94
 8018ce0:	0802b722 	.word	0x0802b722
 8018ce4:	2000614c 	.word	0x2000614c
 8018ce8:	0802b74b 	.word	0x0802b74b
 8018cec:	20006150 	.word	0x20006150
 8018cf0:	20006154 	.word	0x20006154
 8018cf4:	20006148 	.word	0x20006148

08018cf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018cf8:	b570      	push	{r4, r5, r6, lr}
 8018cfa:	880b      	ldrh	r3, [r1, #0]
 8018cfc:	460d      	mov	r5, r1
 8018cfe:	4604      	mov	r4, r0
 8018d00:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018d02:	4608      	mov	r0, r1
 8018d04:	f004 ff7a 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018d08:	4606      	mov	r6, r0
 8018d0a:	4628      	mov	r0, r5
 8018d0c:	f004 ffb0 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018d10:	6823      	ldr	r3, [r4, #0]
 8018d12:	4605      	mov	r5, r0
 8018d14:	b231      	sxth	r1, r6
 8018d16:	4620      	mov	r0, r4
 8018d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d1a:	4798      	blx	r3
 8018d1c:	6823      	ldr	r3, [r4, #0]
 8018d1e:	b229      	sxth	r1, r5
 8018d20:	4620      	mov	r0, r4
 8018d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d28:	4718      	bx	r3

08018d2a <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018d2a:	b510      	push	{r4, lr}
 8018d2c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018d30:	4604      	mov	r4, r0
 8018d32:	2bff      	cmp	r3, #255	; 0xff
 8018d34:	d006      	beq.n	8018d44 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8018d36:	2300      	movs	r3, #0
 8018d38:	8003      	strh	r3, [r0, #0]
 8018d3a:	8043      	strh	r3, [r0, #2]
 8018d3c:	8083      	strh	r3, [r0, #4]
 8018d3e:	80c3      	strh	r3, [r0, #6]
 8018d40:	4620      	mov	r0, r4
 8018d42:	bd10      	pop	{r4, pc}
 8018d44:	3126      	adds	r1, #38	; 0x26
 8018d46:	f004 ffcd 	bl	801dce4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018d4a:	e7f9      	b.n	8018d40 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018d4c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d50:	4604      	mov	r4, r0
 8018d52:	b088      	sub	sp, #32
 8018d54:	2500      	movs	r5, #0
 8018d56:	460f      	mov	r7, r1
 8018d58:	f854 3b26 	ldr.w	r3, [r4], #38
 8018d5c:	a904      	add	r1, sp, #16
 8018d5e:	4606      	mov	r6, r0
 8018d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018d66:	4798      	blx	r3
 8018d68:	4620      	mov	r0, r4
 8018d6a:	f004 ff47 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018d6e:	4680      	mov	r8, r0
 8018d70:	4620      	mov	r0, r4
 8018d72:	f004 ff7d 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018d76:	9506      	str	r5, [sp, #24]
 8018d78:	ad06      	add	r5, sp, #24
 8018d7a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018d7e:	4639      	mov	r1, r7
 8018d80:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018d84:	4628      	mov	r0, r5
 8018d86:	f7fc ffc5 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 8018d8a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	dd19      	ble.n	8018dc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018d92:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	dd15      	ble.n	8018dc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018d9a:	4b0c      	ldr	r3, [pc, #48]	; (8018dcc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018da2:	b10a      	cbz	r2, 8018da8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018da4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018da6:	b900      	cbnz	r0, 8018daa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8018da8:	6898      	ldr	r0, [r3, #8]
 8018daa:	2701      	movs	r7, #1
 8018dac:	6801      	ldr	r1, [r0, #0]
 8018dae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018db2:	9702      	str	r7, [sp, #8]
 8018db4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8018db8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018dbc:	e9cd 5600 	strd	r5, r6, [sp]
 8018dc0:	688d      	ldr	r5, [r1, #8]
 8018dc2:	4621      	mov	r1, r4
 8018dc4:	47a8      	blx	r5
 8018dc6:	b008      	add	sp, #32
 8018dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dcc:	200060f8 	.word	0x200060f8

08018dd0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd4:	4696      	mov	lr, r2
 8018dd6:	b097      	sub	sp, #92	; 0x5c
 8018dd8:	4605      	mov	r5, r0
 8018dda:	4614      	mov	r4, r2
 8018ddc:	460e      	mov	r6, r1
 8018dde:	461f      	mov	r7, r3
 8018de0:	f10d 0c1c 	add.w	ip, sp, #28
 8018de4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8018de8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8018dec:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8018df0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018df4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018df8:	f8de 3000 	ldr.w	r3, [lr]
 8018dfc:	f104 0e14 	add.w	lr, r4, #20
 8018e00:	f8cc 3000 	str.w	r3, [ip]
 8018e04:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018e08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e10:	f8de 3000 	ldr.w	r3, [lr]
 8018e14:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018e18:	f8cc 3000 	str.w	r3, [ip]
 8018e1c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018e20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e28:	f8de 3000 	ldr.w	r3, [lr]
 8018e2c:	4631      	mov	r1, r6
 8018e2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018e30:	4628      	mov	r0, r5
 8018e32:	f8cc 3000 	str.w	r3, [ip]
 8018e36:	682b      	ldr	r3, [r5, #0]
 8018e38:	9201      	str	r2, [sp, #4]
 8018e3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018e3c:	f8cd 8008 	str.w	r8, [sp, #8]
 8018e40:	9200      	str	r2, [sp, #0]
 8018e42:	aa07      	add	r2, sp, #28
 8018e44:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018e48:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 8018e4c:	463b      	mov	r3, r7
 8018e4e:	47d8      	blx	fp
 8018e50:	46a6      	mov	lr, r4
 8018e52:	f10d 0c1c 	add.w	ip, sp, #28
 8018e56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e5e:	f8de 3000 	ldr.w	r3, [lr]
 8018e62:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018e66:	343c      	adds	r4, #60	; 0x3c
 8018e68:	f8cc 3000 	str.w	r3, [ip]
 8018e6c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018e70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e78:	f8de 3000 	ldr.w	r3, [lr]
 8018e7c:	f8cc 3000 	str.w	r3, [ip]
 8018e80:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e8a:	6823      	ldr	r3, [r4, #0]
 8018e8c:	4631      	mov	r1, r6
 8018e8e:	4628      	mov	r0, r5
 8018e90:	f8cc 3000 	str.w	r3, [ip]
 8018e94:	682b      	ldr	r3, [r5, #0]
 8018e96:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018e9a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018e9c:	f8cd 8008 	str.w	r8, [sp, #8]
 8018ea0:	9201      	str	r2, [sp, #4]
 8018ea2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018ea4:	9200      	str	r2, [sp, #0]
 8018ea6:	aa07      	add	r2, sp, #28
 8018ea8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8018eaa:	463b      	mov	r3, r7
 8018eac:	47a0      	blx	r4
 8018eae:	b017      	add	sp, #92	; 0x5c
 8018eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018eb4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018eb4:	2000      	movs	r0, #0
 8018eb6:	4770      	bx	lr

08018eb8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ebc:	b08d      	sub	sp, #52	; 0x34
 8018ebe:	4688      	mov	r8, r1
 8018ec0:	f8d3 c000 	ldr.w	ip, [r3]
 8018ec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018ec6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8018eca:	680f      	ldr	r7, [r1, #0]
 8018ecc:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8018ed0:	eba7 070c 	sub.w	r7, r7, ip
 8018ed4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8018ed8:	edd3 6a07 	vldr	s13, [r3, #28]
 8018edc:	42bc      	cmp	r4, r7
 8018ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018ee0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018ee4:	bfa8      	it	ge
 8018ee6:	463c      	movge	r4, r7
 8018ee8:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018eec:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018ef0:	ee07 4a90 	vmov	s15, r4
 8018ef4:	eb09 0e0c 	add.w	lr, r9, ip
 8018ef8:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018efc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018f00:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018f04:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8018f08:	4571      	cmp	r1, lr
 8018f0a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018f0e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018f12:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018f16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018f1a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018f1e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018f22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018f26:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018f2a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018f2e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018f32:	f340 808c 	ble.w	801904e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8018f36:	eba1 060e 	sub.w	r6, r1, lr
 8018f3a:	fb96 f5f4 	sdiv	r5, r6, r4
 8018f3e:	ee07 5a10 	vmov	s14, r5
 8018f42:	2d00      	cmp	r5, #0
 8018f44:	fb04 6615 	mls	r6, r4, r5, r6
 8018f48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f4c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018f50:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018f54:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018f58:	dd12      	ble.n	8018f80 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8018f5a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018f5e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018f62:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018f66:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f6e:	bf14      	ite	ne
 8018f70:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018f74:	eeb0 7a67 	vmoveq.f32	s14, s15
 8018f78:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018f7c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018f80:	fb05 f204 	mul.w	r2, r5, r4
 8018f84:	1abf      	subs	r7, r7, r2
 8018f86:	4494      	add	ip, r2
 8018f88:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018f8c:	4411      	add	r1, r2
 8018f8e:	eb09 020c 	add.w	r2, r9, ip
 8018f92:	b209      	sxth	r1, r1
 8018f94:	443a      	add	r2, r7
 8018f96:	428a      	cmp	r2, r1
 8018f98:	bfc4      	itt	gt
 8018f9a:	eba1 0209 	subgt.w	r2, r1, r9
 8018f9e:	eba2 070c 	subgt.w	r7, r2, ip
 8018fa2:	2f00      	cmp	r7, #0
 8018fa4:	dd50      	ble.n	8019048 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8018fa6:	fb97 f1f4 	sdiv	r1, r7, r4
 8018faa:	fb04 7211 	mls	r2, r4, r1, r7
 8018fae:	b90a      	cbnz	r2, 8018fb4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8018fb0:	3901      	subs	r1, #1
 8018fb2:	4622      	mov	r2, r4
 8018fb4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018fb8:	6840      	ldr	r0, [r0, #4]
 8018fba:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8018fbe:	44b6      	add	lr, r6
 8018fc0:	f8d0 a000 	ldr.w	sl, [r0]
 8018fc4:	2900      	cmp	r1, #0
 8018fc6:	bfcc      	ite	gt
 8018fc8:	46a1      	movgt	r9, r4
 8018fca:	4691      	movle	r9, r2
 8018fcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8018fce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018fd0:	fb04 e505 	mla	r5, r4, r5, lr
 8018fd4:	eef0 6a42 	vmov.f32	s13, s4
 8018fd8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018fdc:	9008      	str	r0, [sp, #32]
 8018fde:	eeb0 7a61 	vmov.f32	s14, s3
 8018fe2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018fe4:	695b      	ldr	r3, [r3, #20]
 8018fe6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018fea:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018fee:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018ff2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018ff4:	445b      	add	r3, fp
 8018ff6:	9307      	str	r3, [sp, #28]
 8018ff8:	ee16 3a90 	vmov	r3, s13
 8018ffc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019000:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019004:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019008:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801900c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019010:	ee17 7a90 	vmov	r7, s15
 8019014:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019018:	fb97 f7f4 	sdiv	r7, r7, r4
 801901c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019020:	ee17 ca90 	vmov	ip, s15
 8019024:	fb9c fcf4 	sdiv	ip, ip, r4
 8019028:	fb0c 3306 	mla	r3, ip, r6, r3
 801902c:	9302      	str	r3, [sp, #8]
 801902e:	ee17 3a10 	vmov	r3, s14
 8019032:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019036:	fb07 3706 	mla	r7, r7, r6, r3
 801903a:	eba9 0306 	sub.w	r3, r9, r6
 801903e:	e9cd 4700 	strd	r4, r7, [sp]
 8019042:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019046:	47a0      	blx	r4
 8019048:	b00d      	add	sp, #52	; 0x34
 801904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801904e:	2500      	movs	r5, #0
 8019050:	462e      	mov	r6, r5
 8019052:	e799      	b.n	8018f88 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019058:	b0db      	sub	sp, #364	; 0x16c
 801905a:	461d      	mov	r5, r3
 801905c:	4614      	mov	r4, r2
 801905e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8019062:	910f      	str	r1, [sp, #60]	; 0x3c
 8019064:	4629      	mov	r1, r5
 8019066:	930a      	str	r3, [sp, #40]	; 0x28
 8019068:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801906c:	9009      	str	r0, [sp, #36]	; 0x24
 801906e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019070:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019074:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8019078:	9310      	str	r3, [sp, #64]	; 0x40
 801907a:	6803      	ldr	r3, [r0, #0]
 801907c:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 801907e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019082:	47b8      	blx	r7
 8019084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019086:	6058      	str	r0, [r3, #4]
 8019088:	2800      	cmp	r0, #0
 801908a:	f000 83a1 	beq.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801908e:	682b      	ldr	r3, [r5, #0]
 8019090:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019094:	ed94 7a02 	vldr	s14, [r4, #8]
 8019098:	9314      	str	r3, [sp, #80]	; 0x50
 801909a:	686b      	ldr	r3, [r5, #4]
 801909c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80190a0:	9315      	str	r3, [sp, #84]	; 0x54
 80190a2:	4bc1      	ldr	r3, [pc, #772]	; (80193a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80190a4:	7819      	ldrb	r1, [r3, #0]
 80190a6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80190aa:	2900      	cmp	r1, #0
 80190ac:	bf16      	itet	ne
 80190ae:	4619      	movne	r1, r3
 80190b0:	4611      	moveq	r1, r2
 80190b2:	4613      	movne	r3, r2
 80190b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190b8:	9116      	str	r1, [sp, #88]	; 0x58
 80190ba:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80190be:	f240 8387 	bls.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80190c2:	ed94 7a07 	vldr	s14, [r4, #28]
 80190c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80190ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ce:	f240 837f 	bls.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80190d2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80190d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80190da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190de:	f240 8377 	bls.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80190e2:	6822      	ldr	r2, [r4, #0]
 80190e4:	4bb1      	ldr	r3, [pc, #708]	; (80193ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80190e6:	429a      	cmp	r2, r3
 80190e8:	f2c0 8372 	blt.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80190ec:	49b0      	ldr	r1, [pc, #704]	; (80193b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80190ee:	6963      	ldr	r3, [r4, #20]
 80190f0:	428a      	cmp	r2, r1
 80190f2:	f300 836d 	bgt.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80190f6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80190fa:	48ae      	ldr	r0, [pc, #696]	; (80193b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80190fc:	33ff      	adds	r3, #255	; 0xff
 80190fe:	4283      	cmp	r3, r0
 8019100:	f200 8366 	bhi.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019104:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019106:	4dac      	ldr	r5, [pc, #688]	; (80193b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019108:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801910c:	33ff      	adds	r3, #255	; 0xff
 801910e:	42ab      	cmp	r3, r5
 8019110:	f200 835e 	bhi.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019114:	6862      	ldr	r2, [r4, #4]
 8019116:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801911a:	33ff      	adds	r3, #255	; 0xff
 801911c:	4283      	cmp	r3, r0
 801911e:	f200 8357 	bhi.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019122:	69a1      	ldr	r1, [r4, #24]
 8019124:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019128:	33ff      	adds	r3, #255	; 0xff
 801912a:	4283      	cmp	r3, r0
 801912c:	f200 8350 	bhi.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019130:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019132:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019136:	30ff      	adds	r0, #255	; 0xff
 8019138:	42a8      	cmp	r0, r5
 801913a:	f200 8349 	bhi.w	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801913e:	428a      	cmp	r2, r1
 8019140:	f280 8110 	bge.w	8019364 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019144:	429a      	cmp	r2, r3
 8019146:	f300 8119 	bgt.w	801937c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801914a:	4299      	cmp	r1, r3
 801914c:	f280 811d 	bge.w	801938a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019150:	2502      	movs	r5, #2
 8019152:	2701      	movs	r7, #1
 8019154:	46a9      	mov	r9, r5
 8019156:	46b8      	mov	r8, r7
 8019158:	f04f 0a00 	mov.w	sl, #0
 801915c:	4621      	mov	r1, r4
 801915e:	a849      	add	r0, sp, #292	; 0x124
 8019160:	f003 ff1a 	bl	801cf98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019164:	4622      	mov	r2, r4
 8019166:	4653      	mov	r3, sl
 8019168:	a949      	add	r1, sp, #292	; 0x124
 801916a:	f8cd 9000 	str.w	r9, [sp]
 801916e:	a819      	add	r0, sp, #100	; 0x64
 8019170:	f004 f842 	bl	801d1f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019174:	4622      	mov	r2, r4
 8019176:	4653      	mov	r3, sl
 8019178:	a949      	add	r1, sp, #292	; 0x124
 801917a:	f8cd 8000 	str.w	r8, [sp]
 801917e:	a829      	add	r0, sp, #164	; 0xa4
 8019180:	f004 f83a 	bl	801d1f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019184:	4643      	mov	r3, r8
 8019186:	4622      	mov	r2, r4
 8019188:	a949      	add	r1, sp, #292	; 0x124
 801918a:	f8cd 9000 	str.w	r9, [sp]
 801918e:	a839      	add	r0, sp, #228	; 0xe4
 8019190:	f004 f832 	bl	801d1f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019194:	42af      	cmp	r7, r5
 8019196:	af12      	add	r7, sp, #72	; 0x48
 8019198:	bfb7      	itett	lt
 801919a:	2300      	movlt	r3, #0
 801919c:	2301      	movge	r3, #1
 801919e:	ad29      	addlt	r5, sp, #164	; 0xa4
 80191a0:	ac19      	addlt	r4, sp, #100	; 0x64
 80191a2:	bfb1      	iteee	lt
 80191a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80191a6:	ad19      	addge	r5, sp, #100	; 0x64
 80191a8:	930e      	strge	r3, [sp, #56]	; 0x38
 80191aa:	ac29      	addge	r4, sp, #164	; 0xa4
 80191ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80191ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80191b2:	e887 0003 	stmia.w	r7, {r0, r1}
 80191b6:	b928      	cbnz	r0, 80191c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80191b8:	4b80      	ldr	r3, [pc, #512]	; (80193bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80191ba:	6818      	ldr	r0, [r3, #0]
 80191bc:	6803      	ldr	r3, [r0, #0]
 80191be:	6a1b      	ldr	r3, [r3, #32]
 80191c0:	4798      	blx	r3
 80191c2:	6038      	str	r0, [r7, #0]
 80191c4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80191c6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80191ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80191ce:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80191d0:	930c      	str	r3, [sp, #48]	; 0x30
 80191d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80191d4:	6963      	ldr	r3, [r4, #20]
 80191d6:	440b      	add	r3, r1
 80191d8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80191dc:	4408      	add	r0, r1
 80191de:	b200      	sxth	r0, r0
 80191e0:	4283      	cmp	r3, r0
 80191e2:	900d      	str	r0, [sp, #52]	; 0x34
 80191e4:	f280 80dd 	bge.w	80193a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80191e8:	428b      	cmp	r3, r1
 80191ea:	da08      	bge.n	80191fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80191ec:	2a00      	cmp	r2, #0
 80191ee:	dd06      	ble.n	80191fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80191f0:	1acb      	subs	r3, r1, r3
 80191f2:	429a      	cmp	r2, r3
 80191f4:	f2c0 80e4 	blt.w	80193c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	f300 80e2 	bgt.w	80193c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80191fe:	6967      	ldr	r7, [r4, #20]
 8019200:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019206:	443b      	add	r3, r7
 8019208:	461f      	mov	r7, r3
 801920a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801920c:	1bdf      	subs	r7, r3, r7
 801920e:	4297      	cmp	r7, r2
 8019210:	bfa8      	it	ge
 8019212:	4617      	movge	r7, r2
 8019214:	2f00      	cmp	r7, #0
 8019216:	f340 8166 	ble.w	80194e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801921a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801921c:	6829      	ldr	r1, [r5, #0]
 801921e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019222:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019226:	4411      	add	r1, r2
 8019228:	6820      	ldr	r0, [r4, #0]
 801922a:	4299      	cmp	r1, r3
 801922c:	dd1a      	ble.n	8019264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801922e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019232:	4402      	add	r2, r0
 8019234:	440b      	add	r3, r1
 8019236:	b21b      	sxth	r3, r3
 8019238:	429a      	cmp	r2, r3
 801923a:	dc13      	bgt.n	8019264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801923c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801923e:	a912      	add	r1, sp, #72	; 0x48
 8019240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	9206      	str	r2, [sp, #24]
 8019248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801924a:	9500      	str	r5, [sp, #0]
 801924c:	9205      	str	r2, [sp, #20]
 801924e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019250:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019254:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019256:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801925a:	aa49      	add	r2, sp, #292	; 0x124
 801925c:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8019260:	4623      	mov	r3, r4
 8019262:	47c8      	blx	r9
 8019264:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019268:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801926c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019274:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019278:	68a1      	ldr	r1, [r4, #8]
 801927a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801927e:	ed94 6a08 	vldr	s12, [r4, #32]
 8019282:	edd4 6a07 	vldr	s13, [r4, #28]
 8019286:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801928a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801928e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019292:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019296:	edc4 6a07 	vstr	s13, [r4, #28]
 801929a:	441a      	add	r2, r3
 801929c:	6963      	ldr	r3, [r4, #20]
 801929e:	3301      	adds	r3, #1
 80192a0:	6022      	str	r2, [r4, #0]
 80192a2:	6163      	str	r3, [r4, #20]
 80192a4:	69a3      	ldr	r3, [r4, #24]
 80192a6:	3b01      	subs	r3, #1
 80192a8:	61a3      	str	r3, [r4, #24]
 80192aa:	6923      	ldr	r3, [r4, #16]
 80192ac:	440b      	add	r3, r1
 80192ae:	68e1      	ldr	r1, [r4, #12]
 80192b0:	428b      	cmp	r3, r1
 80192b2:	6123      	str	r3, [r4, #16]
 80192b4:	db15      	blt.n	80192e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80192b6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80192ba:	3201      	adds	r2, #1
 80192bc:	1a5b      	subs	r3, r3, r1
 80192be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80192c2:	6022      	str	r2, [r4, #0]
 80192c4:	6123      	str	r3, [r4, #16]
 80192c6:	edc4 6a07 	vstr	s13, [r4, #28]
 80192ca:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80192ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80192d2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80192d6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80192da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80192de:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80192e2:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80192e6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80192ea:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80192ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80192f2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80192f6:	68a9      	ldr	r1, [r5, #8]
 80192f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80192fc:	ed95 6a08 	vldr	s12, [r5, #32]
 8019300:	edd5 6a07 	vldr	s13, [r5, #28]
 8019304:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019308:	ee76 6a86 	vadd.f32	s13, s13, s12
 801930c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019310:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019314:	edc5 6a07 	vstr	s13, [r5, #28]
 8019318:	441a      	add	r2, r3
 801931a:	696b      	ldr	r3, [r5, #20]
 801931c:	3301      	adds	r3, #1
 801931e:	602a      	str	r2, [r5, #0]
 8019320:	616b      	str	r3, [r5, #20]
 8019322:	69ab      	ldr	r3, [r5, #24]
 8019324:	3b01      	subs	r3, #1
 8019326:	61ab      	str	r3, [r5, #24]
 8019328:	692b      	ldr	r3, [r5, #16]
 801932a:	440b      	add	r3, r1
 801932c:	68e9      	ldr	r1, [r5, #12]
 801932e:	428b      	cmp	r3, r1
 8019330:	612b      	str	r3, [r5, #16]
 8019332:	db15      	blt.n	8019360 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019334:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019338:	3201      	adds	r2, #1
 801933a:	1a5b      	subs	r3, r3, r1
 801933c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019340:	602a      	str	r2, [r5, #0]
 8019342:	612b      	str	r3, [r5, #16]
 8019344:	edc5 6a07 	vstr	s13, [r5, #28]
 8019348:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801934c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019350:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019354:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019358:	ee77 7a27 	vadd.f32	s15, s14, s15
 801935c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019360:	3f01      	subs	r7, #1
 8019362:	e757      	b.n	8019214 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019364:	4299      	cmp	r1, r3
 8019366:	dc13      	bgt.n	8019390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019368:	429a      	cmp	r2, r3
 801936a:	da14      	bge.n	8019396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801936c:	2502      	movs	r5, #2
 801936e:	2703      	movs	r7, #3
 8019370:	f04f 0800 	mov.w	r8, #0
 8019374:	46a9      	mov	r9, r5
 8019376:	f04f 0a01 	mov.w	sl, #1
 801937a:	e6ef      	b.n	801915c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801937c:	2501      	movs	r5, #1
 801937e:	2700      	movs	r7, #0
 8019380:	46a9      	mov	r9, r5
 8019382:	46b8      	mov	r8, r7
 8019384:	f04f 0a02 	mov.w	sl, #2
 8019388:	e6e8      	b.n	801915c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801938a:	2501      	movs	r5, #1
 801938c:	2702      	movs	r7, #2
 801938e:	e6e1      	b.n	8019154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019390:	2500      	movs	r5, #0
 8019392:	2701      	movs	r7, #1
 8019394:	e7f4      	b.n	8019380 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019396:	2702      	movs	r7, #2
 8019398:	2503      	movs	r5, #3
 801939a:	f04f 0900 	mov.w	r9, #0
 801939e:	46b8      	mov	r8, r7
 80193a0:	e7e9      	b.n	8019376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80193a2:	4613      	mov	r3, r2
 80193a4:	e728      	b.n	80191f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80193a6:	bf00      	nop
 80193a8:	200060ee 	.word	0x200060ee
 80193ac:	fffd8f01 	.word	0xfffd8f01
 80193b0:	00027100 	.word	0x00027100
 80193b4:	0004e1ff 	.word	0x0004e1ff
 80193b8:	0004e1fe 	.word	0x0004e1fe
 80193bc:	200060f8 	.word	0x200060f8
 80193c0:	4613      	mov	r3, r2
 80193c2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80193c4:	469e      	mov	lr, r3
 80193c6:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80193c8:	469c      	mov	ip, r3
 80193ca:	9111      	str	r1, [sp, #68]	; 0x44
 80193cc:	f04f 0900 	mov.w	r9, #0
 80193d0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80193d4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80193d8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80193dc:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80193e0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80193e4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80193e8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80193ec:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80193f0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80193f4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80193f8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80193fc:	f1bc 0f00 	cmp.w	ip, #0
 8019400:	d147      	bne.n	8019492 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019402:	eb03 0c07 	add.w	ip, r3, r7
 8019406:	1ad7      	subs	r7, r2, r3
 8019408:	f1b9 0f00 	cmp.w	r9, #0
 801940c:	d009      	beq.n	8019422 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801940e:	9029      	str	r0, [sp, #164]	; 0xa4
 8019410:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019414:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019418:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801941c:	912d      	str	r1, [sp, #180]	; 0xb4
 801941e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019422:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019424:	f04f 0800 	mov.w	r8, #0
 8019428:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801942c:	9111      	str	r1, [sp, #68]	; 0x44
 801942e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019432:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019436:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801943a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801943e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019442:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019446:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801944a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801944e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019452:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019456:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801945a:	f1be 0f00 	cmp.w	lr, #0
 801945e:	d031      	beq.n	80194c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019460:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019462:	4450      	add	r0, sl
 8019464:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019468:	4431      	add	r1, r6
 801946a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801946e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019472:	4549      	cmp	r1, r9
 8019474:	db08      	blt.n	8019488 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019476:	ee77 7a85 	vadd.f32	s15, s15, s10
 801947a:	3001      	adds	r0, #1
 801947c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019480:	eba1 0109 	sub.w	r1, r1, r9
 8019484:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019488:	f10e 3eff 	add.w	lr, lr, #4294967295
 801948c:	f04f 0801 	mov.w	r8, #1
 8019490:	e7e3      	b.n	801945a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019492:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019494:	4450      	add	r0, sl
 8019496:	ee37 7a24 	vadd.f32	s14, s14, s9
 801949a:	4431      	add	r1, r6
 801949c:	ee77 7a84 	vadd.f32	s15, s15, s8
 80194a0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80194a4:	4541      	cmp	r1, r8
 80194a6:	db08      	blt.n	80194ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80194a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80194ac:	3001      	adds	r0, #1
 80194ae:	ee37 7a25 	vadd.f32	s14, s14, s11
 80194b2:	eba1 0108 	sub.w	r1, r1, r8
 80194b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80194ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80194be:	f04f 0901 	mov.w	r9, #1
 80194c2:	e79b      	b.n	80193fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80194c4:	449c      	add	ip, r3
 80194c6:	1aff      	subs	r7, r7, r3
 80194c8:	f1b8 0f00 	cmp.w	r8, #0
 80194cc:	d009      	beq.n	80194e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80194ce:	9019      	str	r0, [sp, #100]	; 0x64
 80194d0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80194d4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80194d8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80194dc:	911d      	str	r1, [sp, #116]	; 0x74
 80194de:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80194e2:	1ad2      	subs	r2, r2, r3
 80194e4:	e68b      	b.n	80191fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80194e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194e8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	f000 80d1 	beq.w	8019692 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80194f0:	ad19      	add	r5, sp, #100	; 0x64
 80194f2:	ac39      	add	r4, sp, #228	; 0xe4
 80194f4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80194f6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80194fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80194fe:	930c      	str	r3, [sp, #48]	; 0x30
 8019500:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019502:	6963      	ldr	r3, [r4, #20]
 8019504:	440b      	add	r3, r1
 8019506:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801950a:	4408      	add	r0, r1
 801950c:	b200      	sxth	r0, r0
 801950e:	4283      	cmp	r3, r0
 8019510:	900d      	str	r0, [sp, #52]	; 0x34
 8019512:	f280 80c1 	bge.w	8019698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019516:	428b      	cmp	r3, r1
 8019518:	da08      	bge.n	801952c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801951a:	2a00      	cmp	r2, #0
 801951c:	dd06      	ble.n	801952c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801951e:	1acb      	subs	r3, r1, r3
 8019520:	429a      	cmp	r2, r3
 8019522:	f2c0 80bb 	blt.w	801969c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019526:	2b00      	cmp	r3, #0
 8019528:	f300 80b9 	bgt.w	801969e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801952c:	6967      	ldr	r7, [r4, #20]
 801952e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019534:	443b      	add	r3, r7
 8019536:	461f      	mov	r7, r3
 8019538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801953a:	1bdf      	subs	r7, r3, r7
 801953c:	4297      	cmp	r7, r2
 801953e:	bfa8      	it	ge
 8019540:	4617      	movge	r7, r2
 8019542:	2f00      	cmp	r7, #0
 8019544:	f340 813c 	ble.w	80197c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019548:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801954a:	6829      	ldr	r1, [r5, #0]
 801954c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019550:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019554:	4411      	add	r1, r2
 8019556:	6820      	ldr	r0, [r4, #0]
 8019558:	4299      	cmp	r1, r3
 801955a:	dd1a      	ble.n	8019592 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801955c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019560:	4402      	add	r2, r0
 8019562:	440b      	add	r3, r1
 8019564:	b21b      	sxth	r3, r3
 8019566:	429a      	cmp	r2, r3
 8019568:	dc13      	bgt.n	8019592 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801956a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801956c:	a912      	add	r1, sp, #72	; 0x48
 801956e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	9206      	str	r2, [sp, #24]
 8019576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019578:	9500      	str	r5, [sp, #0]
 801957a:	9205      	str	r2, [sp, #20]
 801957c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801957e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019582:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019584:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019588:	aa49      	add	r2, sp, #292	; 0x124
 801958a:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 801958e:	4623      	mov	r3, r4
 8019590:	47c8      	blx	r9
 8019592:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019596:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801959a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801959e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80195a2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80195a6:	68a1      	ldr	r1, [r4, #8]
 80195a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80195ac:	ed94 6a08 	vldr	s12, [r4, #32]
 80195b0:	edd4 6a07 	vldr	s13, [r4, #28]
 80195b4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80195b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80195bc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80195c0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80195c4:	edc4 6a07 	vstr	s13, [r4, #28]
 80195c8:	441a      	add	r2, r3
 80195ca:	6963      	ldr	r3, [r4, #20]
 80195cc:	3301      	adds	r3, #1
 80195ce:	6022      	str	r2, [r4, #0]
 80195d0:	6163      	str	r3, [r4, #20]
 80195d2:	69a3      	ldr	r3, [r4, #24]
 80195d4:	3b01      	subs	r3, #1
 80195d6:	61a3      	str	r3, [r4, #24]
 80195d8:	6923      	ldr	r3, [r4, #16]
 80195da:	440b      	add	r3, r1
 80195dc:	68e1      	ldr	r1, [r4, #12]
 80195de:	428b      	cmp	r3, r1
 80195e0:	6123      	str	r3, [r4, #16]
 80195e2:	db15      	blt.n	8019610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80195e4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80195e8:	3201      	adds	r2, #1
 80195ea:	1a5b      	subs	r3, r3, r1
 80195ec:	ee76 6a26 	vadd.f32	s13, s12, s13
 80195f0:	6022      	str	r2, [r4, #0]
 80195f2:	6123      	str	r3, [r4, #16]
 80195f4:	edc4 6a07 	vstr	s13, [r4, #28]
 80195f8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80195fc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019600:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019604:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019608:	ee77 7a27 	vadd.f32	s15, s14, s15
 801960c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019610:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019614:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019618:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801961c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019620:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019624:	68a9      	ldr	r1, [r5, #8]
 8019626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801962a:	ed95 6a08 	vldr	s12, [r5, #32]
 801962e:	edd5 6a07 	vldr	s13, [r5, #28]
 8019632:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019636:	ee76 6a86 	vadd.f32	s13, s13, s12
 801963a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801963e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019642:	edc5 6a07 	vstr	s13, [r5, #28]
 8019646:	441a      	add	r2, r3
 8019648:	696b      	ldr	r3, [r5, #20]
 801964a:	3301      	adds	r3, #1
 801964c:	602a      	str	r2, [r5, #0]
 801964e:	616b      	str	r3, [r5, #20]
 8019650:	69ab      	ldr	r3, [r5, #24]
 8019652:	3b01      	subs	r3, #1
 8019654:	61ab      	str	r3, [r5, #24]
 8019656:	692b      	ldr	r3, [r5, #16]
 8019658:	440b      	add	r3, r1
 801965a:	68e9      	ldr	r1, [r5, #12]
 801965c:	428b      	cmp	r3, r1
 801965e:	612b      	str	r3, [r5, #16]
 8019660:	db15      	blt.n	801968e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019662:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019666:	3201      	adds	r2, #1
 8019668:	1a5b      	subs	r3, r3, r1
 801966a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801966e:	602a      	str	r2, [r5, #0]
 8019670:	612b      	str	r3, [r5, #16]
 8019672:	edc5 6a07 	vstr	s13, [r5, #28]
 8019676:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801967a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801967e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019682:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019686:	ee77 7a27 	vadd.f32	s15, s14, s15
 801968a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801968e:	3f01      	subs	r7, #1
 8019690:	e757      	b.n	8019542 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019692:	ad39      	add	r5, sp, #228	; 0xe4
 8019694:	ac19      	add	r4, sp, #100	; 0x64
 8019696:	e72d      	b.n	80194f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019698:	4613      	mov	r3, r2
 801969a:	e744      	b.n	8019526 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801969c:	4613      	mov	r3, r2
 801969e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80196a0:	469e      	mov	lr, r3
 80196a2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80196a6:	461f      	mov	r7, r3
 80196a8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80196ac:	f04f 0900 	mov.w	r9, #0
 80196b0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80196b4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80196b8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80196bc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80196c0:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80196c4:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80196c6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80196ca:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80196ce:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80196d2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80196d6:	960e      	str	r6, [sp, #56]	; 0x38
 80196d8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80196dc:	2f00      	cmp	r7, #0
 80196de:	d146      	bne.n	801976e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80196e0:	449c      	add	ip, r3
 80196e2:	1ad7      	subs	r7, r2, r3
 80196e4:	f1b9 0f00 	cmp.w	r9, #0
 80196e8:	d009      	beq.n	80196fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80196ea:	9039      	str	r0, [sp, #228]	; 0xe4
 80196ec:	913d      	str	r1, [sp, #244]	; 0xf4
 80196ee:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80196f2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80196f6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80196fa:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80196fe:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019700:	f04f 0800 	mov.w	r8, #0
 8019704:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019708:	910e      	str	r1, [sp, #56]	; 0x38
 801970a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801970e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019712:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019716:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801971a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801971e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019722:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019726:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801972a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801972e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019732:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019736:	f1be 0f00 	cmp.w	lr, #0
 801973a:	d030      	beq.n	801979e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801973c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801973e:	4450      	add	r0, sl
 8019740:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019744:	4431      	add	r1, r6
 8019746:	ee37 7a04 	vadd.f32	s14, s14, s8
 801974a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801974e:	4549      	cmp	r1, r9
 8019750:	db08      	blt.n	8019764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019752:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019756:	3001      	adds	r0, #1
 8019758:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801975c:	eba1 0109 	sub.w	r1, r1, r9
 8019760:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019764:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019768:	f04f 0801 	mov.w	r8, #1
 801976c:	e7e3      	b.n	8019736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801976e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019770:	4450      	add	r0, sl
 8019772:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019776:	4431      	add	r1, r6
 8019778:	ee77 7a84 	vadd.f32	s15, s15, s8
 801977c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019780:	4541      	cmp	r1, r8
 8019782:	db08      	blt.n	8019796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019784:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019788:	3001      	adds	r0, #1
 801978a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801978e:	eba1 0108 	sub.w	r1, r1, r8
 8019792:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019796:	3f01      	subs	r7, #1
 8019798:	f04f 0901 	mov.w	r9, #1
 801979c:	e79e      	b.n	80196dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801979e:	449c      	add	ip, r3
 80197a0:	1aff      	subs	r7, r7, r3
 80197a2:	f1b8 0f00 	cmp.w	r8, #0
 80197a6:	d009      	beq.n	80197bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80197a8:	9019      	str	r0, [sp, #100]	; 0x64
 80197aa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80197ae:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80197b2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80197b6:	911d      	str	r1, [sp, #116]	; 0x74
 80197b8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80197bc:	1ad2      	subs	r2, r2, r3
 80197be:	e6b5      	b.n	801952c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80197c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	b923      	cbnz	r3, 80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80197c6:	4b04      	ldr	r3, [pc, #16]	; (80197d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80197c8:	6818      	ldr	r0, [r3, #0]
 80197ca:	6803      	ldr	r3, [r0, #0]
 80197cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197ce:	4798      	blx	r3
 80197d0:	b05b      	add	sp, #364	; 0x16c
 80197d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d6:	bf00      	nop
 80197d8:	200060f8 	.word	0x200060f8

080197dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80197dc:	b570      	push	{r4, r5, r6, lr}
 80197de:	4604      	mov	r4, r0
 80197e0:	2500      	movs	r5, #0
 80197e2:	9804      	ldr	r0, [sp, #16]
 80197e4:	7223      	strb	r3, [r4, #8]
 80197e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80197ea:	8025      	strh	r5, [r4, #0]
 80197ec:	6061      	str	r1, [r4, #4]
 80197ee:	7263      	strb	r3, [r4, #9]
 80197f0:	60e0      	str	r0, [r4, #12]
 80197f2:	8222      	strh	r2, [r4, #16]
 80197f4:	8265      	strh	r5, [r4, #18]
 80197f6:	82a5      	strh	r5, [r4, #20]
 80197f8:	82e5      	strh	r5, [r4, #22]
 80197fa:	8325      	strh	r5, [r4, #24]
 80197fc:	8365      	strh	r5, [r4, #26]
 80197fe:	83a5      	strh	r5, [r4, #28]
 8019800:	77a5      	strb	r5, [r4, #30]
 8019802:	6803      	ldr	r3, [r0, #0]
 8019804:	695b      	ldr	r3, [r3, #20]
 8019806:	4798      	blx	r3
 8019808:	4606      	mov	r6, r0
 801980a:	b1f8      	cbz	r0, 801984c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801980c:	68e0      	ldr	r0, [r4, #12]
 801980e:	4631      	mov	r1, r6
 8019810:	6803      	ldr	r3, [r0, #0]
 8019812:	68db      	ldr	r3, [r3, #12]
 8019814:	4798      	blx	r3
 8019816:	7b43      	ldrb	r3, [r0, #13]
 8019818:	7a82      	ldrb	r2, [r0, #10]
 801981a:	4605      	mov	r5, r0
 801981c:	005b      	lsls	r3, r3, #1
 801981e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019822:	4313      	orrs	r3, r2
 8019824:	83a3      	strh	r3, [r4, #28]
 8019826:	7a63      	ldrb	r3, [r4, #9]
 8019828:	2b04      	cmp	r3, #4
 801982a:	d10f      	bne.n	801984c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801982c:	68e0      	ldr	r0, [r4, #12]
 801982e:	462a      	mov	r2, r5
 8019830:	4631      	mov	r1, r6
 8019832:	6803      	ldr	r3, [r0, #0]
 8019834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019836:	4798      	blx	r3
 8019838:	7b6b      	ldrb	r3, [r5, #13]
 801983a:	005b      	lsls	r3, r3, #1
 801983c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019840:	7aab      	ldrb	r3, [r5, #10]
 8019842:	4313      	orrs	r3, r2
 8019844:	4418      	add	r0, r3
 8019846:	8ba3      	ldrh	r3, [r4, #28]
 8019848:	4418      	add	r0, r3
 801984a:	83a0      	strh	r0, [r4, #28]
 801984c:	4620      	mov	r0, r4
 801984e:	bd70      	pop	{r4, r5, r6, pc}

08019850 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019854:	2400      	movs	r4, #0
 8019856:	b085      	sub	sp, #20
 8019858:	4681      	mov	r9, r0
 801985a:	4688      	mov	r8, r1
 801985c:	4692      	mov	sl, r2
 801985e:	469b      	mov	fp, r3
 8019860:	4627      	mov	r7, r4
 8019862:	4625      	mov	r5, r4
 8019864:	4626      	mov	r6, r4
 8019866:	4554      	cmp	r4, sl
 8019868:	da2a      	bge.n	80198c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801986a:	2300      	movs	r3, #0
 801986c:	9303      	str	r3, [sp, #12]
 801986e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019872:	429d      	cmp	r5, r3
 8019874:	d004      	beq.n	8019880 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019876:	f242 030b 	movw	r3, #8203	; 0x200b
 801987a:	429d      	cmp	r5, r3
 801987c:	bf18      	it	ne
 801987e:	462f      	movne	r7, r5
 8019880:	ab03      	add	r3, sp, #12
 8019882:	4642      	mov	r2, r8
 8019884:	4659      	mov	r1, fp
 8019886:	4648      	mov	r0, r9
 8019888:	f002 ffba 	bl	801c800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801988c:	4605      	mov	r5, r0
 801988e:	b1b8      	cbz	r0, 80198c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019890:	280a      	cmp	r0, #10
 8019892:	d015      	beq.n	80198c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019894:	9a03      	ldr	r2, [sp, #12]
 8019896:	b18a      	cbz	r2, 80198bc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019898:	7b50      	ldrb	r0, [r2, #13]
 801989a:	4639      	mov	r1, r7
 801989c:	7a93      	ldrb	r3, [r2, #10]
 801989e:	0040      	lsls	r0, r0, #1
 80198a0:	8895      	ldrh	r5, [r2, #4]
 80198a2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80198a6:	4303      	orrs	r3, r0
 80198a8:	4640      	mov	r0, r8
 80198aa:	9301      	str	r3, [sp, #4]
 80198ac:	f8d8 3000 	ldr.w	r3, [r8]
 80198b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198b2:	4798      	blx	r3
 80198b4:	9b01      	ldr	r3, [sp, #4]
 80198b6:	4418      	add	r0, r3
 80198b8:	4406      	add	r6, r0
 80198ba:	b2b6      	uxth	r6, r6
 80198bc:	3401      	adds	r4, #1
 80198be:	e7d2      	b.n	8019866 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80198c0:	4630      	mov	r0, r6
 80198c2:	b005      	add	sp, #20
 80198c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080198c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80198c8:	2a02      	cmp	r2, #2
 80198ca:	b530      	push	{r4, r5, lr}
 80198cc:	d011      	beq.n	80198f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80198ce:	2a03      	cmp	r2, #3
 80198d0:	d01c      	beq.n	801990c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80198d2:	2a01      	cmp	r2, #1
 80198d4:	d10c      	bne.n	80198f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80198d6:	888b      	ldrh	r3, [r1, #4]
 80198d8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80198dc:	8801      	ldrh	r1, [r0, #0]
 80198de:	1a9b      	subs	r3, r3, r2
 80198e0:	8844      	ldrh	r4, [r0, #2]
 80198e2:	1a5b      	subs	r3, r3, r1
 80198e4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80198e8:	8004      	strh	r4, [r0, #0]
 80198ea:	8043      	strh	r3, [r0, #2]
 80198ec:	8081      	strh	r1, [r0, #4]
 80198ee:	80c2      	strh	r2, [r0, #6]
 80198f0:	bd30      	pop	{r4, r5, pc}
 80198f2:	88cb      	ldrh	r3, [r1, #6]
 80198f4:	88c2      	ldrh	r2, [r0, #6]
 80198f6:	1a9b      	subs	r3, r3, r2
 80198f8:	8842      	ldrh	r2, [r0, #2]
 80198fa:	1a9b      	subs	r3, r3, r2
 80198fc:	888a      	ldrh	r2, [r1, #4]
 80198fe:	8881      	ldrh	r1, [r0, #4]
 8019900:	8043      	strh	r3, [r0, #2]
 8019902:	1a52      	subs	r2, r2, r1
 8019904:	8801      	ldrh	r1, [r0, #0]
 8019906:	1a52      	subs	r2, r2, r1
 8019908:	8002      	strh	r2, [r0, #0]
 801990a:	e7f1      	b.n	80198f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801990c:	88cb      	ldrh	r3, [r1, #6]
 801990e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019912:	8841      	ldrh	r1, [r0, #2]
 8019914:	1a9b      	subs	r3, r3, r2
 8019916:	f9b0 5000 	ldrsh.w	r5, [r0]
 801991a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801991e:	1a5b      	subs	r3, r3, r1
 8019920:	8045      	strh	r5, [r0, #2]
 8019922:	8082      	strh	r2, [r0, #4]
 8019924:	8003      	strh	r3, [r0, #0]
 8019926:	80c4      	strh	r4, [r0, #6]
 8019928:	e7e2      	b.n	80198f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801992a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801992a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801992e:	b09f      	sub	sp, #124	; 0x7c
 8019930:	9116      	str	r1, [sp, #88]	; 0x58
 8019932:	9317      	str	r3, [sp, #92]	; 0x5c
 8019934:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019936:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019938:	8809      	ldrh	r1, [r1, #0]
 801993a:	889b      	ldrh	r3, [r3, #4]
 801993c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019940:	440b      	add	r3, r1
 8019942:	9212      	str	r2, [sp, #72]	; 0x48
 8019944:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019948:	b21b      	sxth	r3, r3
 801994a:	9011      	str	r0, [sp, #68]	; 0x44
 801994c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019950:	9310      	str	r3, [sp, #64]	; 0x40
 8019952:	f8d8 3000 	ldr.w	r3, [r8]
 8019956:	7a59      	ldrb	r1, [r3, #9]
 8019958:	7a1b      	ldrb	r3, [r3, #8]
 801995a:	9114      	str	r1, [sp, #80]	; 0x50
 801995c:	9315      	str	r3, [sp, #84]	; 0x54
 801995e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019964:	2a00      	cmp	r2, #0
 8019966:	d067      	beq.n	8019a38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019968:	f898 3010 	ldrb.w	r3, [r8, #16]
 801996c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801996e:	2b04      	cmp	r3, #4
 8019970:	bf14      	ite	ne
 8019972:	2301      	movne	r3, #1
 8019974:	2302      	moveq	r3, #2
 8019976:	4413      	add	r3, r2
 8019978:	f04f 0900 	mov.w	r9, #0
 801997c:	930f      	str	r3, [sp, #60]	; 0x3c
 801997e:	464c      	mov	r4, r9
 8019980:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019984:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019988:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801998c:	4293      	cmp	r3, r2
 801998e:	f280 808c 	bge.w	8019aaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019992:	2300      	movs	r3, #0
 8019994:	931c      	str	r3, [sp, #112]	; 0x70
 8019996:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801999a:	429c      	cmp	r4, r3
 801999c:	d006      	beq.n	80199ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801999e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199a0:	f242 020b 	movw	r2, #8203	; 0x200b
 80199a4:	4294      	cmp	r4, r2
 80199a6:	bf18      	it	ne
 80199a8:	4623      	movne	r3, r4
 80199aa:	930d      	str	r3, [sp, #52]	; 0x34
 80199ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199ae:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80199b0:	f8d8 2000 	ldr.w	r2, [r8]
 80199b4:	428b      	cmp	r3, r1
 80199b6:	db41      	blt.n	8019a3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80199b8:	6813      	ldr	r3, [r2, #0]
 80199ba:	4610      	mov	r0, r2
 80199bc:	695b      	ldr	r3, [r3, #20]
 80199be:	4798      	blx	r3
 80199c0:	4604      	mov	r4, r0
 80199c2:	f8d8 0000 	ldr.w	r0, [r8]
 80199c6:	aa1d      	add	r2, sp, #116	; 0x74
 80199c8:	4621      	mov	r1, r4
 80199ca:	6803      	ldr	r3, [r0, #0]
 80199cc:	689e      	ldr	r6, [r3, #8]
 80199ce:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80199d2:	47b0      	blx	r6
 80199d4:	901c      	str	r0, [sp, #112]	; 0x70
 80199d6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80199da:	429c      	cmp	r4, r3
 80199dc:	f000 80ea 	beq.w	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80199e0:	f242 030b 	movw	r3, #8203	; 0x200b
 80199e4:	429c      	cmp	r4, r3
 80199e6:	f000 80e5 	beq.w	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80199ea:	2c00      	cmp	r4, #0
 80199ec:	f000 80f7 	beq.w	8019bde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80199f0:	2c0a      	cmp	r4, #10
 80199f2:	d060      	beq.n	8019ab6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80199f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80199f6:	b36a      	cbz	r2, 8019a54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80199f8:	8894      	ldrh	r4, [r2, #4]
 80199fa:	f1bb 0f00 	cmp.w	fp, #0
 80199fe:	d03b      	beq.n	8019a78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8019a00:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019a04:	f1bb 0f01 	cmp.w	fp, #1
 8019a08:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019a0c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019a10:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019a14:	ea49 0903 	orr.w	r9, r9, r3
 8019a18:	d134      	bne.n	8019a84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8019a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a1c:	eba5 0509 	sub.w	r5, r5, r9
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d14f      	bne.n	8019ac4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019a24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a26:	eb09 0305 	add.w	r3, r9, r5
 8019a2a:	4413      	add	r3, r2
 8019a2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019a2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019a32:	4293      	cmp	r3, r2
 8019a34:	da51      	bge.n	8019ada <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019a36:	e038      	b.n	8019aaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019a38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019a3a:	e79d      	b.n	8019978 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8019a3c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019a40:	4659      	mov	r1, fp
 8019a42:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019a44:	9301      	str	r3, [sp, #4]
 8019a46:	ab1d      	add	r3, sp, #116	; 0x74
 8019a48:	9300      	str	r3, [sp, #0]
 8019a4a:	ab1c      	add	r3, sp, #112	; 0x70
 8019a4c:	f002 ff30 	bl	801c8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019a50:	4604      	mov	r4, r0
 8019a52:	e7c0      	b.n	80199d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019a54:	f8d8 0000 	ldr.w	r0, [r8]
 8019a58:	6803      	ldr	r3, [r0, #0]
 8019a5a:	691b      	ldr	r3, [r3, #16]
 8019a5c:	4798      	blx	r3
 8019a5e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019a62:	4298      	cmp	r0, r3
 8019a64:	f000 80a6 	beq.w	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019a68:	f242 030b 	movw	r3, #8203	; 0x200b
 8019a6c:	4298      	cmp	r0, r3
 8019a6e:	f000 80a1 	beq.w	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019a72:	f1bb 0f00 	cmp.w	fp, #0
 8019a76:	d100      	bne.n	8019a7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019a78:	444d      	add	r5, r9
 8019a7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019a7c:	2a00      	cmp	r2, #0
 8019a7e:	d1bf      	bne.n	8019a00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8019a80:	4691      	mov	r9, r2
 8019a82:	e097      	b.n	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	f000 80ab 	beq.w	8019be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019a8c:	f1bb 0f00 	cmp.w	fp, #0
 8019a90:	d118      	bne.n	8019ac4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019a92:	f8d8 0000 	ldr.w	r0, [r8]
 8019a96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019a98:	6803      	ldr	r3, [r0, #0]
 8019a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a9c:	4798      	blx	r3
 8019a9e:	4405      	add	r5, r0
 8019aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019aa4:	1aeb      	subs	r3, r5, r3
 8019aa6:	4293      	cmp	r3, r2
 8019aa8:	dd17      	ble.n	8019ada <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019aaa:	2c00      	cmp	r4, #0
 8019aac:	f000 8097 	beq.w	8019bde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019ab0:	2c0a      	cmp	r4, #10
 8019ab2:	f040 8085 	bne.w	8019bc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019ab6:	240a      	movs	r4, #10
 8019ab8:	fab4 f084 	clz	r0, r4
 8019abc:	0940      	lsrs	r0, r0, #5
 8019abe:	b01f      	add	sp, #124	; 0x7c
 8019ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac4:	f8d8 0000 	ldr.w	r0, [r8]
 8019ac8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019aca:	6803      	ldr	r3, [r0, #0]
 8019acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ace:	4798      	blx	r3
 8019ad0:	f1bb 0f01 	cmp.w	fp, #1
 8019ad4:	eba5 0500 	sub.w	r5, r5, r0
 8019ad8:	d0a4      	beq.n	8019a24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8019ada:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019adc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019ade:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019ae2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019ae6:	7b43      	ldrb	r3, [r0, #13]
 8019ae8:	4429      	add	r1, r5
 8019aea:	015b      	lsls	r3, r3, #5
 8019aec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019af0:	7983      	ldrb	r3, [r0, #6]
 8019af2:	4313      	orrs	r3, r2
 8019af4:	440b      	add	r3, r1
 8019af6:	42b3      	cmp	r3, r6
 8019af8:	db5c      	blt.n	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019afa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019afc:	4299      	cmp	r1, r3
 8019afe:	da59      	bge.n	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019b00:	f8d8 0000 	ldr.w	r0, [r8]
 8019b04:	42ae      	cmp	r6, r5
 8019b06:	6803      	ldr	r3, [r0, #0]
 8019b08:	bfcc      	ite	gt
 8019b0a:	1b76      	subgt	r6, r6, r5
 8019b0c:	2600      	movle	r6, #0
 8019b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b10:	bfc8      	it	gt
 8019b12:	b2b6      	uxthgt	r6, r6
 8019b14:	4798      	blx	r3
 8019b16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019b18:	7b5a      	ldrb	r2, [r3, #13]
 8019b1a:	00d1      	lsls	r1, r2, #3
 8019b1c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019b20:	7a19      	ldrb	r1, [r3, #8]
 8019b22:	4339      	orrs	r1, r7
 8019b24:	0657      	lsls	r7, r2, #25
 8019b26:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019b28:	bf48      	it	mi
 8019b2a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019b2e:	4407      	add	r7, r0
 8019b30:	bf48      	it	mi
 8019b32:	b209      	sxthmi	r1, r1
 8019b34:	1a7f      	subs	r7, r7, r1
 8019b36:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019b38:	b2bf      	uxth	r7, r7
 8019b3a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019b3e:	fa0f fa87 	sxth.w	sl, r7
 8019b42:	4551      	cmp	r1, sl
 8019b44:	dd3a      	ble.n	8019bbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019b46:	0112      	lsls	r2, r2, #4
 8019b48:	79d8      	ldrb	r0, [r3, #7]
 8019b4a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019b4e:	4302      	orrs	r2, r0
 8019b50:	4492      	add	sl, r2
 8019b52:	4551      	cmp	r1, sl
 8019b54:	dc2e      	bgt.n	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019b56:	1bcf      	subs	r7, r1, r7
 8019b58:	468a      	mov	sl, r1
 8019b5a:	b2bf      	uxth	r7, r7
 8019b5c:	9319      	str	r3, [sp, #100]	; 0x64
 8019b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b60:	f8d8 0000 	ldr.w	r0, [r8]
 8019b64:	681a      	ldr	r2, [r3, #0]
 8019b66:	6801      	ldr	r1, [r0, #0]
 8019b68:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8019b6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019b6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8019b6e:	9218      	str	r2, [sp, #96]	; 0x60
 8019b70:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019b72:	4788      	blx	r1
 8019b74:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019b78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019b7a:	910b      	str	r1, [sp, #44]	; 0x2c
 8019b7c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019b80:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019b82:	910a      	str	r1, [sp, #40]	; 0x28
 8019b84:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019b88:	9109      	str	r1, [sp, #36]	; 0x24
 8019b8a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019b8e:	9305      	str	r3, [sp, #20]
 8019b90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019b92:	9206      	str	r2, [sp, #24]
 8019b94:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019b98:	442e      	add	r6, r5
 8019b9a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019b9e:	b236      	sxth	r6, r6
 8019ba0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019ba2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019ba6:	9600      	str	r6, [sp, #0]
 8019ba8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019baa:	681a      	ldr	r2, [r3, #0]
 8019bac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019bae:	685b      	ldr	r3, [r3, #4]
 8019bb0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019bb2:	47b0      	blx	r6
 8019bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019bb6:	3301      	adds	r3, #1
 8019bb8:	930e      	str	r3, [sp, #56]	; 0x38
 8019bba:	e6e5      	b.n	8019988 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8019bbc:	2700      	movs	r7, #0
 8019bbe:	e7cd      	b.n	8019b5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8019bc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019bc2:	3501      	adds	r5, #1
 8019bc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019bc6:	429d      	cmp	r5, r3
 8019bc8:	f6bf af76 	bge.w	8019ab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019bcc:	4659      	mov	r1, fp
 8019bce:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019bd0:	f7f9 f810 	bl	8012bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019bd4:	4604      	mov	r4, r0
 8019bd6:	b110      	cbz	r0, 8019bde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019bd8:	280a      	cmp	r0, #10
 8019bda:	d1f2      	bne.n	8019bc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8019bdc:	e76b      	b.n	8019ab6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019bde:	2400      	movs	r4, #0
 8019be0:	e76a      	b.n	8019ab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019be2:	f1bb 0f00 	cmp.w	fp, #0
 8019be6:	f43f af5b 	beq.w	8019aa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019bea:	e776      	b.n	8019ada <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08019bec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019bec:	b530      	push	{r4, r5, lr}
 8019bee:	8a44      	ldrh	r4, [r0, #18]
 8019bf0:	8ac5      	ldrh	r5, [r0, #22]
 8019bf2:	82c3      	strh	r3, [r0, #22]
 8019bf4:	442c      	add	r4, r5
 8019bf6:	1ae4      	subs	r4, r4, r3
 8019bf8:	8b03      	ldrh	r3, [r0, #24]
 8019bfa:	8244      	strh	r4, [r0, #18]
 8019bfc:	8a84      	ldrh	r4, [r0, #20]
 8019bfe:	4422      	add	r2, r4
 8019c00:	440c      	add	r4, r1
 8019c02:	1a59      	subs	r1, r3, r1
 8019c04:	8342      	strh	r2, [r0, #26]
 8019c06:	8284      	strh	r4, [r0, #20]
 8019c08:	8301      	strh	r1, [r0, #24]
 8019c0a:	bd30      	pop	{r4, r5, pc}

08019c0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c10:	7a43      	ldrb	r3, [r0, #9]
 8019c12:	b087      	sub	sp, #28
 8019c14:	4604      	mov	r4, r0
 8019c16:	460f      	mov	r7, r1
 8019c18:	1eda      	subs	r2, r3, #3
 8019c1a:	b2d2      	uxtb	r2, r2
 8019c1c:	2900      	cmp	r1, #0
 8019c1e:	d036      	beq.n	8019c8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019c20:	2a01      	cmp	r2, #1
 8019c22:	d932      	bls.n	8019c8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019c24:	1e58      	subs	r0, r3, #1
 8019c26:	f1d0 0b00 	rsbs	fp, r0, #0
 8019c2a:	eb4b 0b00 	adc.w	fp, fp, r0
 8019c2e:	1e99      	subs	r1, r3, #2
 8019c30:	424b      	negs	r3, r1
 8019c32:	414b      	adcs	r3, r1
 8019c34:	9303      	str	r3, [sp, #12]
 8019c36:	2300      	movs	r3, #0
 8019c38:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019c3c:	2500      	movs	r5, #0
 8019c3e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8019c42:	46a9      	mov	r9, r5
 8019c44:	8265      	strh	r5, [r4, #18]
 8019c46:	82a5      	strh	r5, [r4, #20]
 8019c48:	2300      	movs	r3, #0
 8019c4a:	9305      	str	r3, [sp, #20]
 8019c4c:	8823      	ldrh	r3, [r4, #0]
 8019c4e:	2b20      	cmp	r3, #32
 8019c50:	d02b      	beq.n	8019caa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8019c52:	eba3 020a 	sub.w	r2, r3, sl
 8019c56:	4256      	negs	r6, r2
 8019c58:	4156      	adcs	r6, r2
 8019c5a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019c5e:	4293      	cmp	r3, r2
 8019c60:	d004      	beq.n	8019c6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019c62:	4553      	cmp	r3, sl
 8019c64:	bf16      	itet	ne
 8019c66:	4699      	movne	r9, r3
 8019c68:	2601      	moveq	r6, #1
 8019c6a:	2600      	movne	r6, #0
 8019c6c:	ab05      	add	r3, sp, #20
 8019c6e:	68e2      	ldr	r2, [r4, #12]
 8019c70:	7a21      	ldrb	r1, [r4, #8]
 8019c72:	6860      	ldr	r0, [r4, #4]
 8019c74:	f002 fdc4 	bl	801c800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c78:	8020      	strh	r0, [r4, #0]
 8019c7a:	b9c8      	cbnz	r0, 8019cb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019c7c:	8b22      	ldrh	r2, [r4, #24]
 8019c7e:	2300      	movs	r3, #0
 8019c80:	4611      	mov	r1, r2
 8019c82:	4620      	mov	r0, r4
 8019c84:	f7ff ffb2 	bl	8019bec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019c88:	e066      	b.n	8019d58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019c8a:	468b      	mov	fp, r1
 8019c8c:	e7cf      	b.n	8019c2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8019c8e:	3b01      	subs	r3, #1
 8019c90:	2a01      	cmp	r2, #1
 8019c92:	9103      	str	r1, [sp, #12]
 8019c94:	468b      	mov	fp, r1
 8019c96:	bf8c      	ite	hi
 8019c98:	2200      	movhi	r2, #0
 8019c9a:	2201      	movls	r2, #1
 8019c9c:	2b01      	cmp	r3, #1
 8019c9e:	9202      	str	r2, [sp, #8]
 8019ca0:	bf8c      	ite	hi
 8019ca2:	2300      	movhi	r3, #0
 8019ca4:	2301      	movls	r3, #1
 8019ca6:	9301      	str	r3, [sp, #4]
 8019ca8:	e7c8      	b.n	8019c3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8019caa:	4699      	mov	r9, r3
 8019cac:	2601      	movs	r6, #1
 8019cae:	e7dd      	b.n	8019c6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019cb0:	8ae3      	ldrh	r3, [r4, #22]
 8019cb2:	280a      	cmp	r0, #10
 8019cb4:	f103 0301 	add.w	r3, r3, #1
 8019cb8:	82e3      	strh	r3, [r4, #22]
 8019cba:	d0df      	beq.n	8019c7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8019cbc:	9a05      	ldr	r2, [sp, #20]
 8019cbe:	bb42      	cbnz	r2, 8019d12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8019cc0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019cc4:	4298      	cmp	r0, r3
 8019cc6:	d001      	beq.n	8019ccc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019cc8:	4550      	cmp	r0, sl
 8019cca:	d1bd      	bne.n	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019ccc:	8823      	ldrh	r3, [r4, #0]
 8019cce:	8b21      	ldrh	r1, [r4, #24]
 8019cd0:	2b20      	cmp	r3, #32
 8019cd2:	d001      	beq.n	8019cd8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019cd4:	4553      	cmp	r3, sl
 8019cd6:	d131      	bne.n	8019d3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019cd8:	2e00      	cmp	r6, #0
 8019cda:	bf0a      	itet	eq
 8019cdc:	460d      	moveq	r5, r1
 8019cde:	4630      	movne	r0, r6
 8019ce0:	2001      	moveq	r0, #1
 8019ce2:	440a      	add	r2, r1
 8019ce4:	8aa3      	ldrh	r3, [r4, #20]
 8019ce6:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019cea:	b292      	uxth	r2, r2
 8019cec:	8322      	strh	r2, [r4, #24]
 8019cee:	4413      	add	r3, r2
 8019cf0:	2f00      	cmp	r7, #0
 8019cf2:	d03a      	beq.n	8019d6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019cf4:	f1bb 0f00 	cmp.w	fp, #0
 8019cf8:	d102      	bne.n	8019d00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8019cfa:	9903      	ldr	r1, [sp, #12]
 8019cfc:	b301      	cbz	r1, 8019d40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019cfe:	b1f8      	cbz	r0, 8019d40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019d00:	8ba1      	ldrh	r1, [r4, #28]
 8019d02:	4419      	add	r1, r3
 8019d04:	458c      	cmp	ip, r1
 8019d06:	da2a      	bge.n	8019d5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019d08:	8a61      	ldrh	r1, [r4, #18]
 8019d0a:	b341      	cbz	r1, 8019d5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019d0c:	4563      	cmp	r3, ip
 8019d0e:	dd9b      	ble.n	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019d10:	e01c      	b.n	8019d4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8019d12:	8893      	ldrh	r3, [r2, #4]
 8019d14:	4649      	mov	r1, r9
 8019d16:	8023      	strh	r3, [r4, #0]
 8019d18:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019d1c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019d20:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019d24:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019d28:	ea48 0800 	orr.w	r8, r8, r0
 8019d2c:	68e0      	ldr	r0, [r4, #12]
 8019d2e:	6803      	ldr	r3, [r0, #0]
 8019d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d32:	4798      	blx	r3
 8019d34:	eb08 0200 	add.w	r2, r8, r0
 8019d38:	b292      	uxth	r2, r2
 8019d3a:	e7c7      	b.n	8019ccc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019d3c:	2000      	movs	r0, #0
 8019d3e:	e7d0      	b.n	8019ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019d40:	4563      	cmp	r3, ip
 8019d42:	dd81      	ble.n	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019d44:	8a63      	ldrh	r3, [r4, #18]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	f43f af7e 	beq.w	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019d4c:	2301      	movs	r3, #1
 8019d4e:	8ba2      	ldrh	r2, [r4, #28]
 8019d50:	77a3      	strb	r3, [r4, #30]
 8019d52:	8b63      	ldrh	r3, [r4, #26]
 8019d54:	4413      	add	r3, r2
 8019d56:	8363      	strh	r3, [r4, #26]
 8019d58:	b007      	add	sp, #28
 8019d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d5e:	2300      	movs	r3, #0
 8019d60:	4611      	mov	r1, r2
 8019d62:	4620      	mov	r0, r4
 8019d64:	f7ff ff42 	bl	8019bec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019d68:	e76e      	b.n	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019d6a:	4563      	cmp	r3, ip
 8019d6c:	dd14      	ble.n	8019d98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8019d6e:	9b02      	ldr	r3, [sp, #8]
 8019d70:	b113      	cbz	r3, 8019d78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8019d72:	2301      	movs	r3, #1
 8019d74:	460a      	mov	r2, r1
 8019d76:	e783      	b.n	8019c80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8019d78:	9b01      	ldr	r3, [sp, #4]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	f43f af64 	beq.w	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019d80:	2800      	cmp	r0, #0
 8019d82:	f47f af61 	bne.w	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019d86:	b116      	cbz	r6, 8019d8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8019d88:	2301      	movs	r3, #1
 8019d8a:	462a      	mov	r2, r5
 8019d8c:	e779      	b.n	8019c82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8019d8e:	8a63      	ldrh	r3, [r4, #18]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	f43f af59 	beq.w	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019d96:	e7df      	b.n	8019d58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019d98:	2800      	cmp	r0, #0
 8019d9a:	f47f af55 	bne.w	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019d9e:	2e00      	cmp	r6, #0
 8019da0:	f43f af52 	beq.w	8019c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019da4:	2301      	movs	r3, #1
 8019da6:	462a      	mov	r2, r5
 8019da8:	e7db      	b.n	8019d62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08019daa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8019daa:	b530      	push	{r4, r5, lr}
 8019dac:	4605      	mov	r5, r0
 8019dae:	b08b      	sub	sp, #44	; 0x2c
 8019db0:	b191      	cbz	r1, 8019dd8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8019db2:	2401      	movs	r4, #1
 8019db4:	e9cd 3100 	strd	r3, r1, [sp]
 8019db8:	4613      	mov	r3, r2
 8019dba:	4601      	mov	r1, r0
 8019dbc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8019dc0:	a802      	add	r0, sp, #8
 8019dc2:	f7ff fd0b 	bl	80197dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019dc6:	2100      	movs	r1, #0
 8019dc8:	a802      	add	r0, sp, #8
 8019dca:	f7ff ff1f 	bl	8019c0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019dce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019dd2:	b163      	cbz	r3, 8019dee <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019dd4:	3401      	adds	r4, #1
 8019dd6:	e7f6      	b.n	8019dc6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8019dd8:	2401      	movs	r4, #1
 8019dda:	f002 fe09 	bl	801c9f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019dde:	280a      	cmp	r0, #10
 8019de0:	4628      	mov	r0, r5
 8019de2:	bf08      	it	eq
 8019de4:	3401      	addeq	r4, #1
 8019de6:	f002 fe03 	bl	801c9f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019dea:	2800      	cmp	r0, #0
 8019dec:	d1f7      	bne.n	8019dde <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8019dee:	b2a0      	uxth	r0, r4
 8019df0:	b00b      	add	sp, #44	; 0x2c
 8019df2:	bd30      	pop	{r4, r5, pc}

08019df4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019df8:	b0db      	sub	sp, #364	; 0x16c
 8019dfa:	4689      	mov	r9, r1
 8019dfc:	461c      	mov	r4, r3
 8019dfe:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8019e02:	900a      	str	r0, [sp, #40]	; 0x28
 8019e04:	f1ba 0f00 	cmp.w	sl, #0
 8019e08:	f000 80a5 	beq.w	8019f56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	f000 80a1 	beq.w	8019f56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019e14:	7ba3      	ldrb	r3, [r4, #14]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	f000 809d 	beq.w	8019f56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019e1c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8019e20:	6810      	ldr	r0, [r2, #0]
 8019e22:	6851      	ldr	r1, [r2, #4]
 8019e24:	2500      	movs	r5, #0
 8019e26:	4643      	mov	r3, r8
 8019e28:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019e2c:	950e      	str	r5, [sp, #56]	; 0x38
 8019e2e:	af18      	add	r7, sp, #96	; 0x60
 8019e30:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019e34:	79a2      	ldrb	r2, [r4, #6]
 8019e36:	c303      	stmia	r3!, {r0, r1}
 8019e38:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019e3c:	a90e      	add	r1, sp, #56	; 0x38
 8019e3e:	4640      	mov	r0, r8
 8019e40:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019e44:	f7ff fd40 	bl	80198c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019e48:	a90e      	add	r1, sp, #56	; 0x38
 8019e4a:	79a2      	ldrb	r2, [r4, #6]
 8019e4c:	4608      	mov	r0, r1
 8019e4e:	f7ff fd3b 	bl	80198c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019e52:	4638      	mov	r0, r7
 8019e54:	f002 f994 	bl	801c180 <_ZN8touchgfx12TextProviderC1Ev>
 8019e58:	6820      	ldr	r0, [r4, #0]
 8019e5a:	6803      	ldr	r3, [r0, #0]
 8019e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e5e:	4798      	blx	r3
 8019e60:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019e62:	4603      	mov	r3, r0
 8019e64:	4651      	mov	r1, sl
 8019e66:	4638      	mov	r0, r7
 8019e68:	f002 f9cf 	bl	801c20a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019e6c:	7923      	ldrb	r3, [r4, #4]
 8019e6e:	6820      	ldr	r0, [r4, #0]
 8019e70:	9308      	str	r3, [sp, #32]
 8019e72:	6803      	ldr	r3, [r0, #0]
 8019e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e76:	4798      	blx	r3
 8019e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e7c:	181e      	adds	r6, r3, r0
 8019e7e:	42ae      	cmp	r6, r5
 8019e80:	dd06      	ble.n	8019e90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019e82:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8019e86:	4282      	cmp	r2, r0
 8019e88:	bfa4      	itt	ge
 8019e8a:	189d      	addge	r5, r3, r2
 8019e8c:	fb95 f5f6 	sdivge	r5, r5, r6
 8019e90:	a82e      	add	r0, sp, #184	; 0xb8
 8019e92:	f002 f975 	bl	801c180 <_ZN8touchgfx12TextProviderC1Ev>
 8019e96:	7c23      	ldrb	r3, [r4, #16]
 8019e98:	b14b      	cbz	r3, 8019eae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8019e9a:	6820      	ldr	r0, [r4, #0]
 8019e9c:	6803      	ldr	r3, [r0, #0]
 8019e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ea0:	4798      	blx	r3
 8019ea2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	4651      	mov	r1, sl
 8019ea8:	a82e      	add	r0, sp, #184	; 0xb8
 8019eaa:	f002 f9ae 	bl	801c20a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019eae:	7c21      	ldrb	r1, [r4, #16]
 8019eb0:	a810      	add	r0, sp, #64	; 0x40
 8019eb2:	7963      	ldrb	r3, [r4, #5]
 8019eb4:	9101      	str	r1, [sp, #4]
 8019eb6:	6821      	ldr	r1, [r4, #0]
 8019eb8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8019ebc:	9100      	str	r1, [sp, #0]
 8019ebe:	a92e      	add	r1, sp, #184	; 0xb8
 8019ec0:	f7ff fc8c 	bl	80197dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019ec4:	7c23      	ldrb	r3, [r4, #16]
 8019ec6:	b9bb      	cbnz	r3, 8019ef8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8019ec8:	fa1f fa86 	uxth.w	sl, r6
 8019ecc:	2d00      	cmp	r5, #0
 8019ece:	dd45      	ble.n	8019f5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8019ed0:	4638      	mov	r0, r7
 8019ed2:	f002 fd8d 	bl	801c9f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ed6:	2800      	cmp	r0, #0
 8019ed8:	d03d      	beq.n	8019f56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019eda:	280a      	cmp	r0, #10
 8019edc:	d1f6      	bne.n	8019ecc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8019ede:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019ee2:	3d01      	subs	r5, #1
 8019ee4:	4453      	add	r3, sl
 8019ee6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019eea:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019eee:	eba3 030a 	sub.w	r3, r3, sl
 8019ef2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019ef6:	e7e9      	b.n	8019ecc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8019ef8:	0073      	lsls	r3, r6, #1
 8019efa:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8019efe:	fa1f fa86 	uxth.w	sl, r6
 8019f02:	9309      	str	r3, [sp, #36]	; 0x24
 8019f04:	2d00      	cmp	r5, #0
 8019f06:	dd29      	ble.n	8019f5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8019f08:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019f0c:	a810      	add	r0, sp, #64	; 0x40
 8019f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f10:	428b      	cmp	r3, r1
 8019f12:	bfd4      	ite	le
 8019f14:	2100      	movle	r1, #0
 8019f16:	2101      	movgt	r1, #1
 8019f18:	f7ff fe78 	bl	8019c0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019f1c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8019f20:	3b01      	subs	r3, #1
 8019f22:	b29b      	uxth	r3, r3
 8019f24:	455b      	cmp	r3, fp
 8019f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f28:	d005      	beq.n	8019f36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8019f2a:	7961      	ldrb	r1, [r4, #5]
 8019f2c:	4638      	mov	r0, r7
 8019f2e:	f7f8 fe61 	bl	8012bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f34:	e7f4      	b.n	8019f20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8019f36:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019f3a:	3d01      	subs	r5, #1
 8019f3c:	4453      	add	r3, sl
 8019f3e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019f42:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019f46:	eba3 030a 	sub.w	r3, r3, sl
 8019f4a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019f4e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d1d6      	bne.n	8019f04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8019f56:	b05b      	add	sp, #364	; 0x16c
 8019f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f5c:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8019f60:	ad44      	add	r5, sp, #272	; 0x110
 8019f62:	f04f 0b00 	mov.w	fp, #0
 8019f66:	7c23      	ldrb	r3, [r4, #16]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d067      	beq.n	801a03c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8019f6c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019f70:	a810      	add	r0, sp, #64	; 0x40
 8019f72:	458a      	cmp	sl, r1
 8019f74:	bfd4      	ite	le
 8019f76:	2100      	movle	r1, #0
 8019f78:	2101      	movgt	r1, #1
 8019f7a:	f7ff fe47 	bl	8019c0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019f7e:	9b08      	ldr	r3, [sp, #32]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d056      	beq.n	801a032 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019f84:	7c23      	ldrb	r3, [r4, #16]
 8019f86:	2258      	movs	r2, #88	; 0x58
 8019f88:	4639      	mov	r1, r7
 8019f8a:	4628      	mov	r0, r5
 8019f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8019f8e:	f00e f855 	bl	802803c <memcpy>
 8019f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d059      	beq.n	801a04c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8019f98:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8019f9c:	7922      	ldrb	r2, [r4, #4]
 8019f9e:	2a01      	cmp	r2, #1
 8019fa0:	d13d      	bne.n	801a01e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8019fa2:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8019fa6:	1ac0      	subs	r0, r0, r3
 8019fa8:	2302      	movs	r3, #2
 8019faa:	fb90 f0f3 	sdiv	r0, r0, r3
 8019fae:	b200      	sxth	r0, r0
 8019fb0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019fb4:	4418      	add	r0, r3
 8019fb6:	7c23      	ldrb	r3, [r4, #16]
 8019fb8:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d03a      	beq.n	801a036 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8019fc0:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8019fc4:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8019fc8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8019fcc:	9500      	str	r5, [sp, #0]
 8019fce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019fd0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019fd4:	e9cd b703 	strd	fp, r7, [sp, #12]
 8019fd8:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8019fdc:	464a      	mov	r2, r9
 8019fde:	2100      	movs	r1, #0
 8019fe0:	f7ff fca3 	bl	801992a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019fe4:	2800      	cmp	r0, #0
 8019fe6:	d1b6      	bne.n	8019f56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019fe8:	b2b2      	uxth	r2, r6
 8019fea:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019fee:	4611      	mov	r1, r2
 8019ff0:	4413      	add	r3, r2
 8019ff2:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8019ff6:	b21b      	sxth	r3, r3
 8019ff8:	1a52      	subs	r2, r2, r1
 8019ffa:	7c21      	ldrb	r1, [r4, #16]
 8019ffc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a000:	b212      	sxth	r2, r2
 801a002:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a006:	b109      	cbz	r1, 801a00c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801a008:	42b2      	cmp	r2, r6
 801a00a:	dba4      	blt.n	8019f56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a00c:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a010:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a014:	440a      	add	r2, r1
 801a016:	b212      	sxth	r2, r2
 801a018:	4293      	cmp	r3, r2
 801a01a:	dda4      	ble.n	8019f66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 801a01c:	e79b      	b.n	8019f56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a01e:	2a02      	cmp	r2, #2
 801a020:	d105      	bne.n	801a02e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801a022:	7be2      	ldrb	r2, [r4, #15]
 801a024:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801a028:	1a80      	subs	r0, r0, r2
 801a02a:	1ac0      	subs	r0, r0, r3
 801a02c:	e7bf      	b.n	8019fae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 801a02e:	2000      	movs	r0, #0
 801a030:	e7be      	b.n	8019fb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801a032:	7be0      	ldrb	r0, [r4, #15]
 801a034:	e7bc      	b.n	8019fb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801a036:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a03a:	e7c3      	b.n	8019fc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 801a03c:	9b08      	ldr	r3, [sp, #32]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d0f7      	beq.n	801a032 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a042:	2258      	movs	r2, #88	; 0x58
 801a044:	4639      	mov	r1, r7
 801a046:	4628      	mov	r0, r5
 801a048:	f00d fff8 	bl	802803c <memcpy>
 801a04c:	2300      	movs	r3, #0
 801a04e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a052:	6821      	ldr	r1, [r4, #0]
 801a054:	4628      	mov	r0, r5
 801a056:	f7ff fbfb 	bl	8019850 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a05a:	b203      	sxth	r3, r0
 801a05c:	e79e      	b.n	8019f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0801a05e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a05e:	2b02      	cmp	r3, #2
 801a060:	b510      	push	{r4, lr}
 801a062:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a066:	d00b      	beq.n	801a080 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a068:	2b03      	cmp	r3, #3
 801a06a:	d00e      	beq.n	801a08a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a06c:	2b01      	cmp	r3, #1
 801a06e:	d001      	beq.n	801a074 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a070:	1860      	adds	r0, r4, r1
 801a072:	bd10      	pop	{r4, pc}
 801a074:	8880      	ldrh	r0, [r0, #4]
 801a076:	4420      	add	r0, r4
 801a078:	b200      	sxth	r0, r0
 801a07a:	1a80      	subs	r0, r0, r2
 801a07c:	3801      	subs	r0, #1
 801a07e:	e7f8      	b.n	801a072 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a080:	8880      	ldrh	r0, [r0, #4]
 801a082:	4420      	add	r0, r4
 801a084:	b200      	sxth	r0, r0
 801a086:	1a40      	subs	r0, r0, r1
 801a088:	e7f8      	b.n	801a07c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a08a:	18a0      	adds	r0, r4, r2
 801a08c:	e7f1      	b.n	801a072 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a08e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a08e:	2b02      	cmp	r3, #2
 801a090:	b510      	push	{r4, lr}
 801a092:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a096:	d006      	beq.n	801a0a6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a098:	2b03      	cmp	r3, #3
 801a09a:	d00a      	beq.n	801a0b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a09c:	2b01      	cmp	r3, #1
 801a09e:	bf14      	ite	ne
 801a0a0:	18a0      	addne	r0, r4, r2
 801a0a2:	1860      	addeq	r0, r4, r1
 801a0a4:	bd10      	pop	{r4, pc}
 801a0a6:	88c0      	ldrh	r0, [r0, #6]
 801a0a8:	4420      	add	r0, r4
 801a0aa:	b200      	sxth	r0, r0
 801a0ac:	1a80      	subs	r0, r0, r2
 801a0ae:	3801      	subs	r0, #1
 801a0b0:	e7f8      	b.n	801a0a4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a0b2:	88c0      	ldrh	r0, [r0, #6]
 801a0b4:	4420      	add	r0, r4
 801a0b6:	b200      	sxth	r0, r0
 801a0b8:	1a40      	subs	r0, r0, r1
 801a0ba:	e7f8      	b.n	801a0ae <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801a0bc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a0bc:	4b01      	ldr	r3, [pc, #4]	; (801a0c4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a0be:	2200      	movs	r2, #0
 801a0c0:	601a      	str	r2, [r3, #0]
 801a0c2:	4770      	bx	lr
 801a0c4:	20006100 	.word	0x20006100

0801a0c8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	b1c8      	cbz	r0, 801a100 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a0cc:	0c02      	lsrs	r2, r0, #16
 801a0ce:	0412      	lsls	r2, r2, #16
 801a0d0:	b9a2      	cbnz	r2, 801a0fc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a0d2:	0403      	lsls	r3, r0, #16
 801a0d4:	2010      	movs	r0, #16
 801a0d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a0da:	bf04      	itt	eq
 801a0dc:	021b      	lsleq	r3, r3, #8
 801a0de:	3008      	addeq	r0, #8
 801a0e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a0e4:	bf04      	itt	eq
 801a0e6:	011b      	lsleq	r3, r3, #4
 801a0e8:	3004      	addeq	r0, #4
 801a0ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a0ee:	bf04      	itt	eq
 801a0f0:	009b      	lsleq	r3, r3, #2
 801a0f2:	3002      	addeq	r0, #2
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	db04      	blt.n	801a102 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a0f8:	3001      	adds	r0, #1
 801a0fa:	4770      	bx	lr
 801a0fc:	2000      	movs	r0, #0
 801a0fe:	e7ea      	b.n	801a0d6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a100:	2020      	movs	r0, #32
 801a102:	4770      	bx	lr

0801a104 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a108:	b087      	sub	sp, #28
 801a10a:	4681      	mov	r9, r0
 801a10c:	4698      	mov	r8, r3
 801a10e:	4610      	mov	r0, r2
 801a110:	460d      	mov	r5, r1
 801a112:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a116:	b981      	cbnz	r1, 801a13a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a118:	b14b      	cbz	r3, 801a12e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a11a:	460b      	mov	r3, r1
 801a11c:	464a      	mov	r2, r9
 801a11e:	4641      	mov	r1, r8
 801a120:	e9cd 4700 	strd	r4, r7, [sp]
 801a124:	f7ff ffee 	bl	801a104 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a128:	b007      	add	sp, #28
 801a12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a12e:	f04f 33ff 	mov.w	r3, #4294967295
 801a132:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a136:	603b      	str	r3, [r7, #0]
 801a138:	e7f6      	b.n	801a128 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a13a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a13e:	d107      	bne.n	801a150 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a140:	fb09 f602 	mul.w	r6, r9, r2
 801a144:	fbb6 f0f4 	udiv	r0, r6, r4
 801a148:	fb04 6610 	mls	r6, r4, r0, r6
 801a14c:	603e      	str	r6, [r7, #0]
 801a14e:	e7eb      	b.n	801a128 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a150:	2601      	movs	r6, #1
 801a152:	fa09 fb01 	lsl.w	fp, r9, r1
 801a156:	408e      	lsls	r6, r1
 801a158:	fbbb f3f4 	udiv	r3, fp, r4
 801a15c:	3e01      	subs	r6, #1
 801a15e:	9302      	str	r3, [sp, #8]
 801a160:	fb0a f303 	mul.w	r3, sl, r3
 801a164:	4016      	ands	r6, r2
 801a166:	9303      	str	r3, [sp, #12]
 801a168:	4630      	mov	r0, r6
 801a16a:	f7ff ffad 	bl	801a0c8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a16e:	464a      	mov	r2, r9
 801a170:	460b      	mov	r3, r1
 801a172:	4601      	mov	r1, r0
 801a174:	4630      	mov	r0, r6
 801a176:	e9cd 4700 	strd	r4, r7, [sp]
 801a17a:	f7ff ffc3 	bl	801a104 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a17e:	9b02      	ldr	r3, [sp, #8]
 801a180:	4606      	mov	r6, r0
 801a182:	eb05 0108 	add.w	r1, r5, r8
 801a186:	fb04 bb13 	mls	fp, r4, r3, fp
 801a18a:	4658      	mov	r0, fp
 801a18c:	f7ff ff9c 	bl	801a0c8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a190:	ab05      	add	r3, sp, #20
 801a192:	465a      	mov	r2, fp
 801a194:	e9cd 4300 	strd	r4, r3, [sp]
 801a198:	4603      	mov	r3, r0
 801a19a:	4650      	mov	r0, sl
 801a19c:	f7ff ffb2 	bl	801a104 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a1a0:	6839      	ldr	r1, [r7, #0]
 801a1a2:	9a05      	ldr	r2, [sp, #20]
 801a1a4:	9b03      	ldr	r3, [sp, #12]
 801a1a6:	4411      	add	r1, r2
 801a1a8:	fbb1 f2f4 	udiv	r2, r1, r4
 801a1ac:	18d3      	adds	r3, r2, r3
 801a1ae:	fb04 1412 	mls	r4, r4, r2, r1
 801a1b2:	441e      	add	r6, r3
 801a1b4:	603c      	str	r4, [r7, #0]
 801a1b6:	4430      	add	r0, r6
 801a1b8:	e7b6      	b.n	801a128 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801a1ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a1ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a1be:	b085      	sub	sp, #20
 801a1c0:	f1b0 0900 	subs.w	r9, r0, #0
 801a1c4:	461d      	mov	r5, r3
 801a1c6:	4617      	mov	r7, r2
 801a1c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a1ca:	bfbb      	ittet	lt
 801a1cc:	f1c9 0900 	rsblt	r9, r9, #0
 801a1d0:	f04f 36ff 	movlt.w	r6, #4294967295
 801a1d4:	2601      	movge	r6, #1
 801a1d6:	6823      	ldrlt	r3, [r4, #0]
 801a1d8:	bfbc      	itt	lt
 801a1da:	425b      	neglt	r3, r3
 801a1dc:	6023      	strlt	r3, [r4, #0]
 801a1de:	2a00      	cmp	r2, #0
 801a1e0:	da04      	bge.n	801a1ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a1e2:	6823      	ldr	r3, [r4, #0]
 801a1e4:	4257      	negs	r7, r2
 801a1e6:	4276      	negs	r6, r6
 801a1e8:	425b      	negs	r3, r3
 801a1ea:	6023      	str	r3, [r4, #0]
 801a1ec:	2d00      	cmp	r5, #0
 801a1ee:	4638      	mov	r0, r7
 801a1f0:	bfba      	itte	lt
 801a1f2:	426d      	neglt	r5, r5
 801a1f4:	f04f 38ff 	movlt.w	r8, #4294967295
 801a1f8:	f04f 0801 	movge.w	r8, #1
 801a1fc:	f7ff ff64 	bl	801a0c8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a200:	ab03      	add	r3, sp, #12
 801a202:	463a      	mov	r2, r7
 801a204:	e9cd 5300 	strd	r5, r3, [sp]
 801a208:	4603      	mov	r3, r0
 801a20a:	4648      	mov	r0, r9
 801a20c:	f7ff ff7a 	bl	801a104 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a210:	6823      	ldr	r3, [r4, #0]
 801a212:	9a03      	ldr	r2, [sp, #12]
 801a214:	4546      	cmp	r6, r8
 801a216:	441a      	add	r2, r3
 801a218:	fb92 f3f5 	sdiv	r3, r2, r5
 801a21c:	4418      	add	r0, r3
 801a21e:	fb05 2313 	mls	r3, r5, r3, r2
 801a222:	bf18      	it	ne
 801a224:	4240      	negne	r0, r0
 801a226:	1c72      	adds	r2, r6, #1
 801a228:	6023      	str	r3, [r4, #0]
 801a22a:	d105      	bne.n	801a238 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	f1c3 0200 	rsb	r2, r3, #0
 801a232:	db0b      	blt.n	801a24c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a234:	6022      	str	r2, [r4, #0]
 801a236:	e006      	b.n	801a246 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a238:	2e01      	cmp	r6, #1
 801a23a:	d104      	bne.n	801a246 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	da02      	bge.n	801a246 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a240:	442b      	add	r3, r5
 801a242:	3801      	subs	r0, #1
 801a244:	6023      	str	r3, [r4, #0]
 801a246:	b005      	add	sp, #20
 801a248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a24c:	3801      	subs	r0, #1
 801a24e:	1b52      	subs	r2, r2, r5
 801a250:	e7f0      	b.n	801a234 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a254 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a258:	4c1c      	ldr	r4, [pc, #112]	; (801a2cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a25a:	4605      	mov	r5, r0
 801a25c:	6807      	ldr	r7, [r0, #0]
 801a25e:	69a3      	ldr	r3, [r4, #24]
 801a260:	b92b      	cbnz	r3, 801a26e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a262:	6840      	ldr	r0, [r0, #4]
 801a264:	e9c5 7000 	strd	r7, r0, [r5]
 801a268:	b004      	add	sp, #16
 801a26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a26e:	f04f 0802 	mov.w	r8, #2
 801a272:	68a2      	ldr	r2, [r4, #8]
 801a274:	ae04      	add	r6, sp, #16
 801a276:	6820      	ldr	r0, [r4, #0]
 801a278:	fb93 f1f8 	sdiv	r1, r3, r8
 801a27c:	440a      	add	r2, r1
 801a27e:	69e1      	ldr	r1, [r4, #28]
 801a280:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a284:	463a      	mov	r2, r7
 801a286:	9600      	str	r6, [sp, #0]
 801a288:	f7ff ff97 	bl	801a1ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a28c:	69a3      	ldr	r3, [r4, #24]
 801a28e:	4607      	mov	r7, r0
 801a290:	686a      	ldr	r2, [r5, #4]
 801a292:	6a21      	ldr	r1, [r4, #32]
 801a294:	9600      	str	r6, [sp, #0]
 801a296:	6860      	ldr	r0, [r4, #4]
 801a298:	f7ff ff8f 	bl	801a1ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a29c:	69a3      	ldr	r3, [r4, #24]
 801a29e:	6962      	ldr	r2, [r4, #20]
 801a2a0:	4407      	add	r7, r0
 801a2a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a2a4:	9600      	str	r6, [sp, #0]
 801a2a6:	68e0      	ldr	r0, [r4, #12]
 801a2a8:	fb93 f8f8 	sdiv	r8, r3, r8
 801a2ac:	4442      	add	r2, r8
 801a2ae:	9203      	str	r2, [sp, #12]
 801a2b0:	682a      	ldr	r2, [r5, #0]
 801a2b2:	f7ff ff82 	bl	801a1ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a2b6:	4680      	mov	r8, r0
 801a2b8:	9600      	str	r6, [sp, #0]
 801a2ba:	69a3      	ldr	r3, [r4, #24]
 801a2bc:	686a      	ldr	r2, [r5, #4]
 801a2be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a2c0:	6920      	ldr	r0, [r4, #16]
 801a2c2:	f7ff ff7a 	bl	801a1ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a2c6:	4440      	add	r0, r8
 801a2c8:	e7cc      	b.n	801a264 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a2ca:	bf00      	nop
 801a2cc:	20006104 	.word	0x20006104

0801a2d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a2d0:	4b07      	ldr	r3, [pc, #28]	; (801a2f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a2d2:	b510      	push	{r4, lr}
 801a2d4:	781b      	ldrb	r3, [r3, #0]
 801a2d6:	2b01      	cmp	r3, #1
 801a2d8:	d108      	bne.n	801a2ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a2da:	4b06      	ldr	r3, [pc, #24]	; (801a2f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a2dc:	880c      	ldrh	r4, [r1, #0]
 801a2de:	881b      	ldrh	r3, [r3, #0]
 801a2e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a2e4:	3b01      	subs	r3, #1
 801a2e6:	1b1b      	subs	r3, r3, r4
 801a2e8:	8003      	strh	r3, [r0, #0]
 801a2ea:	800a      	strh	r2, [r1, #0]
 801a2ec:	bd10      	pop	{r4, pc}
 801a2ee:	bf00      	nop
 801a2f0:	200060ee 	.word	0x200060ee
 801a2f4:	200060f2 	.word	0x200060f2

0801a2f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a2f8:	4b0a      	ldr	r3, [pc, #40]	; (801a324 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a2fa:	b510      	push	{r4, lr}
 801a2fc:	781b      	ldrb	r3, [r3, #0]
 801a2fe:	2b01      	cmp	r3, #1
 801a300:	d10e      	bne.n	801a320 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a302:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a306:	8843      	ldrh	r3, [r0, #2]
 801a308:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a30c:	18ca      	adds	r2, r1, r3
 801a30e:	4b06      	ldr	r3, [pc, #24]	; (801a328 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a310:	8044      	strh	r4, [r0, #2]
 801a312:	881b      	ldrh	r3, [r3, #0]
 801a314:	1a9b      	subs	r3, r3, r2
 801a316:	8003      	strh	r3, [r0, #0]
 801a318:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a31c:	8081      	strh	r1, [r0, #4]
 801a31e:	80c3      	strh	r3, [r0, #6]
 801a320:	bd10      	pop	{r4, pc}
 801a322:	bf00      	nop
 801a324:	200060ee 	.word	0x200060ee
 801a328:	200060ea 	.word	0x200060ea

0801a32c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a32c:	4b07      	ldr	r3, [pc, #28]	; (801a34c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a32e:	b510      	push	{r4, lr}
 801a330:	781b      	ldrb	r3, [r3, #0]
 801a332:	2b01      	cmp	r3, #1
 801a334:	d108      	bne.n	801a348 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a336:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a33a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a33e:	8003      	strh	r3, [r0, #0]
 801a340:	8893      	ldrh	r3, [r2, #4]
 801a342:	3b01      	subs	r3, #1
 801a344:	1b1b      	subs	r3, r3, r4
 801a346:	800b      	strh	r3, [r1, #0]
 801a348:	bd10      	pop	{r4, pc}
 801a34a:	bf00      	nop
 801a34c:	200060ee 	.word	0x200060ee

0801a350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a350:	4b08      	ldr	r3, [pc, #32]	; (801a374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a352:	b513      	push	{r0, r1, r4, lr}
 801a354:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a358:	2400      	movs	r4, #0
 801a35a:	4b07      	ldr	r3, [pc, #28]	; (801a378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801a35c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a360:	466a      	mov	r2, sp
 801a362:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a366:	9400      	str	r4, [sp, #0]
 801a368:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a36c:	f7ff ffde 	bl	801a32c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a370:	b002      	add	sp, #8
 801a372:	bd10      	pop	{r4, pc}
 801a374:	200060ea 	.word	0x200060ea
 801a378:	200060ec 	.word	0x200060ec

0801a37c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801a37c:	4b0b      	ldr	r3, [pc, #44]	; (801a3ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801a37e:	781b      	ldrb	r3, [r3, #0]
 801a380:	2b01      	cmp	r3, #1
 801a382:	d111      	bne.n	801a3a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801a384:	680b      	ldr	r3, [r1, #0]
 801a386:	ed90 7a00 	vldr	s14, [r0]
 801a38a:	6003      	str	r3, [r0, #0]
 801a38c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801a390:	eddf 6a07 	vldr	s13, [pc, #28]	; 801a3b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801a394:	ee07 3a90 	vmov	s15, r3
 801a398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a39c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a3a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3a4:	edc1 7a00 	vstr	s15, [r1]
 801a3a8:	4770      	bx	lr
 801a3aa:	bf00      	nop
 801a3ac:	200060ee 	.word	0x200060ee
 801a3b0:	38d1b717 	.word	0x38d1b717

0801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a3b4:	4b0a      	ldr	r3, [pc, #40]	; (801a3e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a3b6:	460a      	mov	r2, r1
 801a3b8:	b510      	push	{r4, lr}
 801a3ba:	781b      	ldrb	r3, [r3, #0]
 801a3bc:	2b01      	cmp	r3, #1
 801a3be:	d10d      	bne.n	801a3dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a3c0:	8881      	ldrh	r1, [r0, #4]
 801a3c2:	8803      	ldrh	r3, [r0, #0]
 801a3c4:	440b      	add	r3, r1
 801a3c6:	4601      	mov	r1, r0
 801a3c8:	3b01      	subs	r3, #1
 801a3ca:	f821 3b02 	strh.w	r3, [r1], #2
 801a3ce:	f7ff ffad 	bl	801a32c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a3d2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a3d6:	88c2      	ldrh	r2, [r0, #6]
 801a3d8:	80c3      	strh	r3, [r0, #6]
 801a3da:	8082      	strh	r2, [r0, #4]
 801a3dc:	bd10      	pop	{r4, pc}
 801a3de:	bf00      	nop
 801a3e0:	200060ee 	.word	0x200060ee

0801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a3e4:	4b09      	ldr	r3, [pc, #36]	; (801a40c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a3e6:	b507      	push	{r0, r1, r2, lr}
 801a3e8:	2100      	movs	r1, #0
 801a3ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3ee:	4b08      	ldr	r3, [pc, #32]	; (801a410 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a3f0:	9100      	str	r1, [sp, #0]
 801a3f2:	4669      	mov	r1, sp
 801a3f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3f8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a3fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a400:	f7ff ffd8 	bl	801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a404:	b003      	add	sp, #12
 801a406:	f85d fb04 	ldr.w	pc, [sp], #4
 801a40a:	bf00      	nop
 801a40c:	200060ea 	.word	0x200060ea
 801a410:	200060ec 	.word	0x200060ec

0801a414 <_ZN8touchgfx11Application13requestRedrawEv>:
 801a414:	4b06      	ldr	r3, [pc, #24]	; (801a430 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a416:	2100      	movs	r1, #0
 801a418:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a41c:	4b05      	ldr	r3, [pc, #20]	; (801a434 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a41e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801a422:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a426:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801a42a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801a42e:	4770      	bx	lr
 801a430:	200060ea 	.word	0x200060ea
 801a434:	200060ec 	.word	0x200060ec

0801a438 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a438:	4b03      	ldr	r3, [pc, #12]	; (801a448 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a43a:	6818      	ldr	r0, [r3, #0]
 801a43c:	b110      	cbz	r0, 801a444 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a43e:	6803      	ldr	r3, [r0, #0]
 801a440:	699b      	ldr	r3, [r3, #24]
 801a442:	4718      	bx	r3
 801a444:	4770      	bx	lr
 801a446:	bf00      	nop
 801a448:	20006134 	.word	0x20006134

0801a44c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a44c:	4770      	bx	lr
	...

0801a450 <_ZN8touchgfx11Application4drawEv>:
 801a450:	4b09      	ldr	r3, [pc, #36]	; (801a478 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a452:	b507      	push	{r0, r1, r2, lr}
 801a454:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a458:	2100      	movs	r1, #0
 801a45a:	4b08      	ldr	r3, [pc, #32]	; (801a47c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a45c:	9100      	str	r1, [sp, #0]
 801a45e:	4669      	mov	r1, sp
 801a460:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a464:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a468:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a46c:	6803      	ldr	r3, [r0, #0]
 801a46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a470:	4798      	blx	r3
 801a472:	b003      	add	sp, #12
 801a474:	f85d fb04 	ldr.w	pc, [sp], #4
 801a478:	200060ea 	.word	0x200060ea
 801a47c:	200060ec 	.word	0x200060ec

0801a480 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a480:	4b03      	ldr	r3, [pc, #12]	; (801a490 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a482:	6818      	ldr	r0, [r3, #0]
 801a484:	b110      	cbz	r0, 801a48c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a486:	6803      	ldr	r3, [r0, #0]
 801a488:	69db      	ldr	r3, [r3, #28]
 801a48a:	4718      	bx	r3
 801a48c:	4770      	bx	lr
 801a48e:	bf00      	nop
 801a490:	20006134 	.word	0x20006134

0801a494 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a494:	4b03      	ldr	r3, [pc, #12]	; (801a4a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a496:	6818      	ldr	r0, [r3, #0]
 801a498:	b110      	cbz	r0, 801a4a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a49a:	6803      	ldr	r3, [r0, #0]
 801a49c:	6a1b      	ldr	r3, [r3, #32]
 801a49e:	4718      	bx	r3
 801a4a0:	4770      	bx	lr
 801a4a2:	bf00      	nop
 801a4a4:	20006134 	.word	0x20006134

0801a4a8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a4a8:	4b03      	ldr	r3, [pc, #12]	; (801a4b8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a4aa:	6818      	ldr	r0, [r3, #0]
 801a4ac:	b110      	cbz	r0, 801a4b4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a4ae:	6803      	ldr	r3, [r0, #0]
 801a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4b2:	4718      	bx	r3
 801a4b4:	4770      	bx	lr
 801a4b6:	bf00      	nop
 801a4b8:	20006134 	.word	0x20006134

0801a4bc <_ZN8touchgfx11Application15handleTickEventEv>:
 801a4bc:	b570      	push	{r4, r5, r6, lr}
 801a4be:	4d34      	ldr	r5, [pc, #208]	; (801a590 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801a4c0:	4604      	mov	r4, r0
 801a4c2:	6828      	ldr	r0, [r5, #0]
 801a4c4:	b140      	cbz	r0, 801a4d8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a4c6:	7a03      	ldrb	r3, [r0, #8]
 801a4c8:	b933      	cbnz	r3, 801a4d8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a4ca:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a4ce:	6803      	ldr	r3, [r0, #0]
 801a4d0:	689b      	ldr	r3, [r3, #8]
 801a4d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4d6:	4718      	bx	r3
 801a4d8:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801a4dc:	b97b      	cbnz	r3, 801a4fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a4de:	b170      	cbz	r0, 801a4fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a4e0:	7a03      	ldrb	r3, [r0, #8]
 801a4e2:	b163      	cbz	r3, 801a4fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a4e4:	4b2b      	ldr	r3, [pc, #172]	; (801a594 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a4e6:	6818      	ldr	r0, [r3, #0]
 801a4e8:	b110      	cbz	r0, 801a4f0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a4ea:	6803      	ldr	r3, [r0, #0]
 801a4ec:	691b      	ldr	r3, [r3, #16]
 801a4ee:	4798      	blx	r3
 801a4f0:	6828      	ldr	r0, [r5, #0]
 801a4f2:	6803      	ldr	r3, [r0, #0]
 801a4f4:	68db      	ldr	r3, [r3, #12]
 801a4f6:	4798      	blx	r3
 801a4f8:	2301      	movs	r3, #1
 801a4fa:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a4fe:	2500      	movs	r5, #0
 801a500:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a504:	42a8      	cmp	r0, r5
 801a506:	dd0c      	ble.n	801a522 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a508:	1963      	adds	r3, r4, r5
 801a50a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a50e:	b132      	cbz	r2, 801a51e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a510:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a514:	4413      	add	r3, r2
 801a516:	6858      	ldr	r0, [r3, #4]
 801a518:	6803      	ldr	r3, [r0, #0]
 801a51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a51c:	4798      	blx	r3
 801a51e:	3501      	adds	r5, #1
 801a520:	e7ee      	b.n	801a500 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a522:	2300      	movs	r3, #0
 801a524:	461a      	mov	r2, r3
 801a526:	4298      	cmp	r0, r3
 801a528:	d114      	bne.n	801a554 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801a52a:	1d25      	adds	r5, r4, #4
 801a52c:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801a530:	1e48      	subs	r0, r1, #1
 801a532:	b280      	uxth	r0, r0
 801a534:	4291      	cmp	r1, r2
 801a536:	dd24      	ble.n	801a582 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801a538:	4288      	cmp	r0, r1
 801a53a:	d2fb      	bcs.n	801a534 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801a53c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801a540:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801a544:	3304      	adds	r3, #4
 801a546:	428b      	cmp	r3, r1
 801a548:	d018      	beq.n	801a57c <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801a54a:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801a54e:	f843 6c04 	str.w	r6, [r3, #-4]
 801a552:	e7f8      	b.n	801a546 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801a554:	18e1      	adds	r1, r4, r3
 801a556:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a55a:	b16d      	cbz	r5, 801a578 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801a55c:	429a      	cmp	r2, r3
 801a55e:	d00a      	beq.n	801a576 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801a560:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a564:	4431      	add	r1, r6
 801a566:	684e      	ldr	r6, [r1, #4]
 801a568:	b291      	uxth	r1, r2
 801a56a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a56e:	604e      	str	r6, [r1, #4]
 801a570:	18a1      	adds	r1, r4, r2
 801a572:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a576:	3201      	adds	r2, #1
 801a578:	3301      	adds	r3, #1
 801a57a:	e7d4      	b.n	801a526 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a57c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801a580:	e7d4      	b.n	801a52c <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801a582:	4b04      	ldr	r3, [pc, #16]	; (801a594 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a584:	6818      	ldr	r0, [r3, #0]
 801a586:	b110      	cbz	r0, 801a58e <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801a588:	6803      	ldr	r3, [r0, #0]
 801a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a58c:	e7a1      	b.n	801a4d2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a58e:	bd70      	pop	{r4, r5, r6, pc}
 801a590:	20006138 	.word	0x20006138
 801a594:	20006134 	.word	0x20006134

0801a598 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a598:	b570      	push	{r4, r5, r6, lr}
 801a59a:	4606      	mov	r6, r0
 801a59c:	460c      	mov	r4, r1
 801a59e:	b929      	cbnz	r1, 801a5ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a5a0:	4b0c      	ldr	r3, [pc, #48]	; (801a5d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a5a2:	2164      	movs	r1, #100	; 0x64
 801a5a4:	4a0c      	ldr	r2, [pc, #48]	; (801a5d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a5a6:	480d      	ldr	r0, [pc, #52]	; (801a5dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a5a8:	f00d fcca 	bl	8027f40 <__assert_func>
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	4d0c      	ldr	r5, [pc, #48]	; (801a5e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a5b0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a5b4:	6828      	ldr	r0, [r5, #0]
 801a5b6:	b110      	cbz	r0, 801a5be <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a5b8:	6803      	ldr	r3, [r0, #0]
 801a5ba:	695b      	ldr	r3, [r3, #20]
 801a5bc:	4798      	blx	r3
 801a5be:	602c      	str	r4, [r5, #0]
 801a5c0:	4620      	mov	r0, r4
 801a5c2:	6823      	ldr	r3, [r4, #0]
 801a5c4:	68db      	ldr	r3, [r3, #12]
 801a5c6:	4798      	blx	r3
 801a5c8:	6833      	ldr	r3, [r6, #0]
 801a5ca:	4630      	mov	r0, r6
 801a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5d2:	4718      	bx	r3
 801a5d4:	0802bc80 	.word	0x0802bc80
 801a5d8:	0802bd78 	.word	0x0802bd78
 801a5dc:	0802bc8a 	.word	0x0802bc8a
 801a5e0:	20006134 	.word	0x20006134

0801a5e4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a5e4:	b510      	push	{r4, lr}
 801a5e6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a5ea:	888a      	ldrh	r2, [r1, #4]
 801a5ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a5f0:	4422      	add	r2, r4
 801a5f2:	b212      	sxth	r2, r2
 801a5f4:	4293      	cmp	r3, r2
 801a5f6:	da15      	bge.n	801a624 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a5f8:	8882      	ldrh	r2, [r0, #4]
 801a5fa:	4413      	add	r3, r2
 801a5fc:	b21b      	sxth	r3, r3
 801a5fe:	429c      	cmp	r4, r3
 801a600:	da10      	bge.n	801a624 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a602:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a606:	88c9      	ldrh	r1, [r1, #6]
 801a608:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a60c:	4419      	add	r1, r3
 801a60e:	b209      	sxth	r1, r1
 801a610:	428a      	cmp	r2, r1
 801a612:	da07      	bge.n	801a624 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a614:	88c0      	ldrh	r0, [r0, #6]
 801a616:	4410      	add	r0, r2
 801a618:	b200      	sxth	r0, r0
 801a61a:	4283      	cmp	r3, r0
 801a61c:	bfac      	ite	ge
 801a61e:	2000      	movge	r0, #0
 801a620:	2001      	movlt	r0, #1
 801a622:	bd10      	pop	{r4, pc}
 801a624:	2000      	movs	r0, #0
 801a626:	e7fc      	b.n	801a622 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a628 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a628:	b570      	push	{r4, r5, r6, lr}
 801a62a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a62e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a632:	42ac      	cmp	r4, r5
 801a634:	db18      	blt.n	801a668 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a636:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a63a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a63e:	429a      	cmp	r2, r3
 801a640:	db12      	blt.n	801a668 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a642:	8886      	ldrh	r6, [r0, #4]
 801a644:	4435      	add	r5, r6
 801a646:	888e      	ldrh	r6, [r1, #4]
 801a648:	4434      	add	r4, r6
 801a64a:	b22d      	sxth	r5, r5
 801a64c:	b224      	sxth	r4, r4
 801a64e:	42a5      	cmp	r5, r4
 801a650:	db0a      	blt.n	801a668 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a652:	88c0      	ldrh	r0, [r0, #6]
 801a654:	4418      	add	r0, r3
 801a656:	88cb      	ldrh	r3, [r1, #6]
 801a658:	441a      	add	r2, r3
 801a65a:	b200      	sxth	r0, r0
 801a65c:	b212      	sxth	r2, r2
 801a65e:	4290      	cmp	r0, r2
 801a660:	bfb4      	ite	lt
 801a662:	2000      	movlt	r0, #0
 801a664:	2001      	movge	r0, #1
 801a666:	bd70      	pop	{r4, r5, r6, pc}
 801a668:	2000      	movs	r0, #0
 801a66a:	e7fc      	b.n	801a666 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801a66c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a66e:	4604      	mov	r4, r0
 801a670:	4608      	mov	r0, r1
 801a672:	460d      	mov	r5, r1
 801a674:	f7fb fb91 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a678:	b978      	cbnz	r0, 801a69a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a67a:	4620      	mov	r0, r4
 801a67c:	f7fb fb8d 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a680:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a684:	b150      	cbz	r0, 801a69c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a686:	8026      	strh	r6, [r4, #0]
 801a688:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a68c:	8063      	strh	r3, [r4, #2]
 801a68e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a692:	80a3      	strh	r3, [r4, #4]
 801a694:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a698:	80e3      	strh	r3, [r4, #6]
 801a69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a69c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a6a0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a6a4:	42b1      	cmp	r1, r6
 801a6a6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a6aa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a6ae:	460f      	mov	r7, r1
 801a6b0:	88ed      	ldrh	r5, [r5, #6]
 801a6b2:	bfa8      	it	ge
 801a6b4:	4637      	movge	r7, r6
 801a6b6:	4293      	cmp	r3, r2
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	4466      	add	r6, ip
 801a6bc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a6c0:	bfa8      	it	ge
 801a6c2:	4610      	movge	r0, r2
 801a6c4:	442a      	add	r2, r5
 801a6c6:	88e5      	ldrh	r5, [r4, #6]
 801a6c8:	4461      	add	r1, ip
 801a6ca:	b236      	sxth	r6, r6
 801a6cc:	8027      	strh	r7, [r4, #0]
 801a6ce:	442b      	add	r3, r5
 801a6d0:	b209      	sxth	r1, r1
 801a6d2:	b212      	sxth	r2, r2
 801a6d4:	8060      	strh	r0, [r4, #2]
 801a6d6:	b21b      	sxth	r3, r3
 801a6d8:	428e      	cmp	r6, r1
 801a6da:	bfac      	ite	ge
 801a6dc:	ebc7 0106 	rsbge	r1, r7, r6
 801a6e0:	ebc7 0101 	rsblt	r1, r7, r1
 801a6e4:	429a      	cmp	r2, r3
 801a6e6:	bfac      	ite	ge
 801a6e8:	ebc0 0202 	rsbge	r2, r0, r2
 801a6ec:	ebc0 0203 	rsblt	r2, r0, r3
 801a6f0:	80a1      	strh	r1, [r4, #4]
 801a6f2:	80e2      	strh	r2, [r4, #6]
 801a6f4:	e7d1      	b.n	801a69a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801a6f8 <_ZN8touchgfx11Application11getInstanceEv>:
 801a6f8:	4b01      	ldr	r3, [pc, #4]	; (801a700 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a6fa:	6818      	ldr	r0, [r3, #0]
 801a6fc:	4770      	bx	lr
 801a6fe:	bf00      	nop
 801a700:	20006144 	.word	0x20006144

0801a704 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801a704:	b570      	push	{r4, r5, r6, lr}
 801a706:	2200      	movs	r2, #0
 801a708:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801a70c:	1d04      	adds	r4, r0, #4
 801a70e:	b295      	uxth	r5, r2
 801a710:	42ab      	cmp	r3, r5
 801a712:	d90e      	bls.n	801a732 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801a714:	f854 6b04 	ldr.w	r6, [r4], #4
 801a718:	4615      	mov	r5, r2
 801a71a:	3201      	adds	r2, #1
 801a71c:	428e      	cmp	r6, r1
 801a71e:	d1f6      	bne.n	801a70e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801a720:	4428      	add	r0, r5
 801a722:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801a726:	2bff      	cmp	r3, #255	; 0xff
 801a728:	d002      	beq.n	801a730 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801a72a:	3301      	adds	r3, #1
 801a72c:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801a730:	bd70      	pop	{r4, r5, r6, pc}
 801a732:	2b20      	cmp	r3, #32
 801a734:	d106      	bne.n	801a744 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801a736:	4b09      	ldr	r3, [pc, #36]	; (801a75c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801a738:	f44f 7117 	mov.w	r1, #604	; 0x25c
 801a73c:	4a08      	ldr	r2, [pc, #32]	; (801a760 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801a73e:	4809      	ldr	r0, [pc, #36]	; (801a764 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801a740:	f00d fbfe 	bl	8027f40 <__assert_func>
 801a744:	18c2      	adds	r2, r0, r3
 801a746:	2401      	movs	r4, #1
 801a748:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801a74c:	191a      	adds	r2, r3, r4
 801a74e:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801a752:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801a756:	6041      	str	r1, [r0, #4]
 801a758:	e7ea      	b.n	801a730 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801a75a:	bf00      	nop
 801a75c:	0802bcb4 	.word	0x0802bcb4
 801a760:	0802bdbc 	.word	0x0802bdbc
 801a764:	0802bc8a 	.word	0x0802bc8a

0801a768 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801a768:	b570      	push	{r4, r5, r6, lr}
 801a76a:	2300      	movs	r3, #0
 801a76c:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801a770:	1d04      	adds	r4, r0, #4
 801a772:	b29a      	uxth	r2, r3
 801a774:	4296      	cmp	r6, r2
 801a776:	d90a      	bls.n	801a78e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801a778:	f854 2b04 	ldr.w	r2, [r4], #4
 801a77c:	428a      	cmp	r2, r1
 801a77e:	d107      	bne.n	801a790 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801a780:	18c5      	adds	r5, r0, r3
 801a782:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801a786:	b11a      	cbz	r2, 801a790 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801a788:	3a01      	subs	r2, #1
 801a78a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801a78e:	bd70      	pop	{r4, r5, r6, pc}
 801a790:	3301      	adds	r3, #1
 801a792:	e7ee      	b.n	801a772 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801a794 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a794:	2300      	movs	r3, #0
 801a796:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a79a:	30a8      	adds	r0, #168	; 0xa8
 801a79c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a7a0:	f802 3b01 	strb.w	r3, [r2], #1
 801a7a4:	4282      	cmp	r2, r0
 801a7a6:	d1fb      	bne.n	801a7a0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a7a8:	4770      	bx	lr

0801a7aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a7b0:	2200      	movs	r2, #0
 801a7b2:	801a      	strh	r2, [r3, #0]
 801a7b4:	3308      	adds	r3, #8
 801a7b6:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a7ba:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a7be:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a7c2:	428b      	cmp	r3, r1
 801a7c4:	d1f5      	bne.n	801a7b2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a7c6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a7ca:	4770      	bx	lr

0801a7cc <_ZN8touchgfx11ApplicationC1Ev>:
 801a7cc:	b570      	push	{r4, r5, r6, lr}
 801a7ce:	4b1a      	ldr	r3, [pc, #104]	; (801a838 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a7d0:	2500      	movs	r5, #0
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	30a8      	adds	r0, #168	; 0xa8
 801a7d6:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a7da:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a7de:	f7ff ffe4 	bl	801a7aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a7e2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a7e6:	f7ff ffe0 	bl	801a7aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a7ea:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801a7ee:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801a7f2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a7f6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a7fa:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801a7fe:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801a802:	490e      	ldr	r1, [pc, #56]	; (801a83c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a804:	480e      	ldr	r0, [pc, #56]	; (801a840 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a806:	f00b fc29 	bl	802605c <CRC_Lock>
 801a80a:	4e0e      	ldr	r6, [pc, #56]	; (801a844 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a80c:	4b0e      	ldr	r3, [pc, #56]	; (801a848 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a80e:	b158      	cbz	r0, 801a828 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801a810:	801d      	strh	r5, [r3, #0]
 801a812:	2300      	movs	r3, #0
 801a814:	4a0d      	ldr	r2, [pc, #52]	; (801a84c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a816:	4620      	mov	r0, r4
 801a818:	6013      	str	r3, [r2, #0]
 801a81a:	4a0d      	ldr	r2, [pc, #52]	; (801a850 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801a81c:	6033      	str	r3, [r6, #0]
 801a81e:	6013      	str	r3, [r2, #0]
 801a820:	f7ff ffb8 	bl	801a794 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a824:	4620      	mov	r0, r4
 801a826:	bd70      	pop	{r4, r5, r6, pc}
 801a828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a82c:	2002      	movs	r0, #2
 801a82e:	801a      	strh	r2, [r3, #0]
 801a830:	6030      	str	r0, [r6, #0]
 801a832:	f001 fb29 	bl	801be88 <_ZN8touchgfx6Screen4drawEv>
 801a836:	e7ec      	b.n	801a812 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801a838:	0802bd3c 	.word	0x0802bd3c
 801a83c:	b5e8b5cd 	.word	0xb5e8b5cd
 801a840:	f407a5c2 	.word	0xf407a5c2
 801a844:	20006134 	.word	0x20006134
 801a848:	20000020 	.word	0x20000020
 801a84c:	20006144 	.word	0x20006144
 801a850:	20006138 	.word	0x20006138

0801a854 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a854:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a858:	428b      	cmp	r3, r1
 801a85a:	b510      	push	{r4, lr}
 801a85c:	d90e      	bls.n	801a87c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a85e:	3b01      	subs	r3, #1
 801a860:	b29b      	uxth	r3, r3
 801a862:	428b      	cmp	r3, r1
 801a864:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a868:	d908      	bls.n	801a87c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a86a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a86e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a872:	681a      	ldr	r2, [r3, #0]
 801a874:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a878:	685a      	ldr	r2, [r3, #4]
 801a87a:	6062      	str	r2, [r4, #4]
 801a87c:	bd10      	pop	{r4, pc}
	...

0801a880 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a882:	466b      	mov	r3, sp
 801a884:	4604      	mov	r4, r0
 801a886:	e883 0006 	stmia.w	r3, {r1, r2}
 801a88a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a88e:	2a07      	cmp	r2, #7
 801a890:	d906      	bls.n	801a8a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a892:	4b09      	ldr	r3, [pc, #36]	; (801a8b8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a894:	f240 118f 	movw	r1, #399	; 0x18f
 801a898:	4a08      	ldr	r2, [pc, #32]	; (801a8bc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a89a:	4809      	ldr	r0, [pc, #36]	; (801a8c0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a89c:	f00d fb50 	bl	8027f40 <__assert_func>
 801a8a0:	1c51      	adds	r1, r2, #1
 801a8a2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a8a6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a8aa:	cb03      	ldmia	r3!, {r0, r1}
 801a8ac:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a8b0:	6069      	str	r1, [r5, #4]
 801a8b2:	b003      	add	sp, #12
 801a8b4:	bd30      	pop	{r4, r5, pc}
 801a8b6:	bf00      	nop
 801a8b8:	0802bcdc 	.word	0x0802bcdc
 801a8bc:	0802be01 	.word	0x0802be01
 801a8c0:	0802bd0b 	.word	0x0802bd0b

0801a8c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8c8:	b08d      	sub	sp, #52	; 0x34
 801a8ca:	4683      	mov	fp, r0
 801a8cc:	ac08      	add	r4, sp, #32
 801a8ce:	4620      	mov	r0, r4
 801a8d0:	e884 0006 	stmia.w	r4, {r1, r2}
 801a8d4:	f7fb fa61 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a8d8:	2800      	cmp	r0, #0
 801a8da:	d16a      	bne.n	801a9b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a8dc:	9402      	str	r4, [sp, #8]
 801a8de:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a8e2:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a8e6:	2400      	movs	r4, #0
 801a8e8:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a8ec:	9301      	str	r3, [sp, #4]
 801a8ee:	36a0      	adds	r6, #160	; 0xa0
 801a8f0:	42a5      	cmp	r5, r4
 801a8f2:	d00d      	beq.n	801a910 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801a8f4:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a8f8:	9802      	ldr	r0, [sp, #8]
 801a8fa:	f7ff fe95 	bl	801a628 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a8fe:	b128      	cbz	r0, 801a90c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801a900:	1e69      	subs	r1, r5, #1
 801a902:	9801      	ldr	r0, [sp, #4]
 801a904:	1b09      	subs	r1, r1, r4
 801a906:	b289      	uxth	r1, r1
 801a908:	f7ff ffa4 	bl	801a854 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a90c:	3401      	adds	r4, #1
 801a90e:	e7ef      	b.n	801a8f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a910:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a914:	1e7b      	subs	r3, r7, #1
 801a916:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a91a:	9703      	str	r7, [sp, #12]
 801a91c:	9300      	str	r3, [sp, #0]
 801a91e:	2400      	movs	r4, #0
 801a920:	4655      	mov	r5, sl
 801a922:	9704      	str	r7, [sp, #16]
 801a924:	4626      	mov	r6, r4
 801a926:	9b04      	ldr	r3, [sp, #16]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d078      	beq.n	801aa1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801a92c:	9902      	ldr	r1, [sp, #8]
 801a92e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a932:	f7ff fe57 	bl	801a5e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a936:	b360      	cbz	r0, 801a992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a938:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801a93c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a940:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801a944:	45e6      	cmp	lr, ip
 801a946:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a94a:	db35      	blt.n	801a9b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a94c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a950:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a954:	4472      	add	r2, lr
 801a956:	4463      	add	r3, ip
 801a958:	b212      	sxth	r2, r2
 801a95a:	b21b      	sxth	r3, r3
 801a95c:	429a      	cmp	r2, r3
 801a95e:	dc2b      	bgt.n	801a9b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a960:	fa1f f288 	uxth.w	r2, r8
 801a964:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a968:	45c1      	cmp	r9, r8
 801a96a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a96e:	4413      	add	r3, r2
 801a970:	fa1f fc89 	uxth.w	ip, r9
 801a974:	b29b      	uxth	r3, r3
 801a976:	fa0f fe83 	sxth.w	lr, r3
 801a97a:	db0f      	blt.n	801a99c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801a97c:	eba3 030c 	sub.w	r3, r3, ip
 801a980:	1ac9      	subs	r1, r1, r3
 801a982:	b209      	sxth	r1, r1
 801a984:	2900      	cmp	r1, #0
 801a986:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a98a:	dd12      	ble.n	801a9b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a98c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801a990:	4604      	mov	r4, r0
 801a992:	9b04      	ldr	r3, [sp, #16]
 801a994:	3d08      	subs	r5, #8
 801a996:	3b01      	subs	r3, #1
 801a998:	9304      	str	r3, [sp, #16]
 801a99a:	e7c4      	b.n	801a926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801a99c:	4461      	add	r1, ip
 801a99e:	b209      	sxth	r1, r1
 801a9a0:	4571      	cmp	r1, lr
 801a9a2:	dc3a      	bgt.n	801aa1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a9a4:	eba2 020c 	sub.w	r2, r2, ip
 801a9a8:	b212      	sxth	r2, r2
 801a9aa:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a9ae:	2a00      	cmp	r2, #0
 801a9b0:	dcee      	bgt.n	801a990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a9b2:	b00d      	add	sp, #52	; 0x34
 801a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9b8:	45c1      	cmp	r9, r8
 801a9ba:	db2e      	blt.n	801aa1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a9bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a9c0:	4499      	add	r9, r3
 801a9c2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a9c6:	4498      	add	r8, r3
 801a9c8:	fa0f f989 	sxth.w	r9, r9
 801a9cc:	fa0f f888 	sxth.w	r8, r8
 801a9d0:	45c1      	cmp	r9, r8
 801a9d2:	dc22      	bgt.n	801aa1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a9d4:	fa1f f28c 	uxth.w	r2, ip
 801a9d8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a9dc:	45e6      	cmp	lr, ip
 801a9de:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a9e2:	4413      	add	r3, r2
 801a9e4:	fa1f f88e 	uxth.w	r8, lr
 801a9e8:	b29b      	uxth	r3, r3
 801a9ea:	fa0f f983 	sxth.w	r9, r3
 801a9ee:	db0a      	blt.n	801aa06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801a9f0:	eba3 0308 	sub.w	r3, r3, r8
 801a9f4:	1ac9      	subs	r1, r1, r3
 801a9f6:	b209      	sxth	r1, r1
 801a9f8:	2900      	cmp	r1, #0
 801a9fa:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801a9fe:	ddd8      	ble.n	801a9b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801aa00:	f8ad 9020 	strh.w	r9, [sp, #32]
 801aa04:	e7c4      	b.n	801a990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801aa06:	4441      	add	r1, r8
 801aa08:	b209      	sxth	r1, r1
 801aa0a:	4549      	cmp	r1, r9
 801aa0c:	dc05      	bgt.n	801aa1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801aa0e:	eba2 0208 	sub.w	r2, r2, r8
 801aa12:	b212      	sxth	r2, r2
 801aa14:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801aa18:	e7c9      	b.n	801a9ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801aa1a:	4606      	mov	r6, r0
 801aa1c:	e7b9      	b.n	801a992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801aa1e:	2c00      	cmp	r4, #0
 801aa20:	f47f af7d 	bne.w	801a91e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801aa24:	2e00      	cmp	r6, #0
 801aa26:	f000 81dc 	beq.w	801ade2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801aa2a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801aa2e:	4655      	mov	r5, sl
 801aa30:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801aa34:	b2b9      	uxth	r1, r7
 801aa36:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801aa3a:	b2b3      	uxth	r3, r6
 801aa3c:	9104      	str	r1, [sp, #16]
 801aa3e:	9804      	ldr	r0, [sp, #16]
 801aa40:	441a      	add	r2, r3
 801aa42:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801aa46:	b292      	uxth	r2, r2
 801aa48:	4401      	add	r1, r0
 801aa4a:	fa0f f882 	sxth.w	r8, r2
 801aa4e:	b289      	uxth	r1, r1
 801aa50:	9105      	str	r1, [sp, #20]
 801aa52:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801aa56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801aa5a:	9b03      	ldr	r3, [sp, #12]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d054      	beq.n	801ab0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801aa60:	9902      	ldr	r1, [sp, #8]
 801aa62:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801aa66:	f7ff fdbd 	bl	801a5e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801aa6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801aa6e:	b1d8      	cbz	r0, 801aaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801aa70:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801aa74:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801aa78:	4576      	cmp	r6, lr
 801aa7a:	dc26      	bgt.n	801aaca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801aa7c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801aa80:	44f4      	add	ip, lr
 801aa82:	fa0f fc8c 	sxth.w	ip, ip
 801aa86:	45e0      	cmp	r8, ip
 801aa88:	db1f      	blt.n	801aaca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801aa8a:	428f      	cmp	r7, r1
 801aa8c:	fa1f fc81 	uxth.w	ip, r1
 801aa90:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801aa94:	dc0f      	bgt.n	801aab6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801aa96:	9805      	ldr	r0, [sp, #20]
 801aa98:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801aa9c:	eba0 0c0c 	sub.w	ip, r0, ip
 801aaa0:	eba1 010c 	sub.w	r1, r1, ip
 801aaa4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801aaa8:	4620      	mov	r0, r4
 801aaaa:	9903      	ldr	r1, [sp, #12]
 801aaac:	3d08      	subs	r5, #8
 801aaae:	4604      	mov	r4, r0
 801aab0:	3901      	subs	r1, #1
 801aab2:	9103      	str	r1, [sp, #12]
 801aab4:	e7cf      	b.n	801aa56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801aab6:	4461      	add	r1, ip
 801aab8:	b209      	sxth	r1, r1
 801aaba:	4549      	cmp	r1, r9
 801aabc:	dcf5      	bgt.n	801aaaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801aabe:	9904      	ldr	r1, [sp, #16]
 801aac0:	eba1 0c0c 	sub.w	ip, r1, ip
 801aac4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801aac8:	e7ee      	b.n	801aaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801aaca:	428f      	cmp	r7, r1
 801aacc:	dced      	bgt.n	801aaaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801aace:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801aad2:	4461      	add	r1, ip
 801aad4:	b209      	sxth	r1, r1
 801aad6:	4589      	cmp	r9, r1
 801aad8:	dbe7      	blt.n	801aaaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801aada:	4576      	cmp	r6, lr
 801aadc:	fa1f fc8e 	uxth.w	ip, lr
 801aae0:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801aae4:	dc08      	bgt.n	801aaf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801aae6:	eba2 0c0c 	sub.w	ip, r2, ip
 801aaea:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801aaee:	eba1 010c 	sub.w	r1, r1, ip
 801aaf2:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801aaf6:	e7d7      	b.n	801aaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801aaf8:	4461      	add	r1, ip
 801aafa:	b209      	sxth	r1, r1
 801aafc:	4588      	cmp	r8, r1
 801aafe:	dbd4      	blt.n	801aaaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ab00:	eba3 0c0c 	sub.w	ip, r3, ip
 801ab04:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801ab08:	e7ce      	b.n	801aaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ab0a:	2c00      	cmp	r4, #0
 801ab0c:	f000 8169 	beq.w	801ade2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ab10:	9b00      	ldr	r3, [sp, #0]
 801ab12:	3301      	adds	r3, #1
 801ab14:	f000 8165 	beq.w	801ade2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ab18:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801ab1c:	9802      	ldr	r0, [sp, #8]
 801ab1e:	4621      	mov	r1, r4
 801ab20:	f7ff fd82 	bl	801a628 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ab24:	b120      	cbz	r0, 801ab30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801ab26:	f8bd 1000 	ldrh.w	r1, [sp]
 801ab2a:	9801      	ldr	r0, [sp, #4]
 801ab2c:	f7ff fe92 	bl	801a854 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ab30:	9902      	ldr	r1, [sp, #8]
 801ab32:	4620      	mov	r0, r4
 801ab34:	f7ff fd56 	bl	801a5e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ab38:	2800      	cmp	r0, #0
 801ab3a:	f000 809b 	beq.w	801ac74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801ab3e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801ab42:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801ab46:	fa1f f288 	uxth.w	r2, r8
 801ab4a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801ab4e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801ab52:	19d5      	adds	r5, r2, r7
 801ab54:	b2a1      	uxth	r1, r4
 801ab56:	45a0      	cmp	r8, r4
 801ab58:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ab5c:	fa1f f985 	uxth.w	r9, r5
 801ab60:	440b      	add	r3, r1
 801ab62:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801ab66:	fa0f f589 	sxth.w	r5, r9
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	9503      	str	r5, [sp, #12]
 801ab6e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ab72:	9507      	str	r5, [sp, #28]
 801ab74:	f340 809d 	ble.w	801acb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801ab78:	1a52      	subs	r2, r2, r1
 801ab7a:	4584      	cmp	ip, r0
 801ab7c:	fa0f fe83 	sxth.w	lr, r3
 801ab80:	b292      	uxth	r2, r2
 801ab82:	b215      	sxth	r5, r2
 801ab84:	dd2f      	ble.n	801abe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801ab86:	9e00      	ldr	r6, [sp, #0]
 801ab88:	fa1f fc8c 	uxth.w	ip, ip
 801ab8c:	b280      	uxth	r0, r0
 801ab8e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ab92:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801ab96:	9e03      	ldr	r6, [sp, #12]
 801ab98:	ebac 0300 	sub.w	r3, ip, r0
 801ab9c:	448c      	add	ip, r1
 801ab9e:	eba6 060e 	sub.w	r6, r6, lr
 801aba2:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801aba6:	b29b      	uxth	r3, r3
 801aba8:	4470      	add	r0, lr
 801abaa:	fa0f fc8c 	sxth.w	ip, ip
 801abae:	b21c      	sxth	r4, r3
 801abb0:	b200      	sxth	r0, r0
 801abb2:	4366      	muls	r6, r4
 801abb4:	ebac 0000 	sub.w	r0, ip, r0
 801abb8:	4368      	muls	r0, r5
 801abba:	4286      	cmp	r6, r0
 801abbc:	db09      	blt.n	801abd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801abbe:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801abc2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801abc6:	4417      	add	r7, r2
 801abc8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801abcc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801abd0:	e685      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801abd2:	440b      	add	r3, r1
 801abd4:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801abd8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801abdc:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801abe0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801abe4:	e67b      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801abe6:	9e03      	ldr	r6, [sp, #12]
 801abe8:	45b6      	cmp	lr, r6
 801abea:	da28      	bge.n	801ac3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801abec:	9b00      	ldr	r3, [sp, #0]
 801abee:	eba6 060e 	sub.w	r6, r6, lr
 801abf2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801abf6:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801abfa:	eb04 030c 	add.w	r3, r4, ip
 801abfe:	fa1f f883 	uxth.w	r8, r3
 801ac02:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801ac06:	4403      	add	r3, r0
 801ac08:	fa0f f988 	sxth.w	r9, r8
 801ac0c:	eba0 000c 	sub.w	r0, r0, ip
 801ac10:	eba3 0308 	sub.w	r3, r3, r8
 801ac14:	4368      	muls	r0, r5
 801ac16:	b29b      	uxth	r3, r3
 801ac18:	fa0f f883 	sxth.w	r8, r3
 801ac1c:	fb08 f606 	mul.w	r6, r8, r6
 801ac20:	42b0      	cmp	r0, r6
 801ac22:	dc06      	bgt.n	801ac32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801ac24:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801ac28:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801ac2c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801ac30:	e7c9      	b.n	801abc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801ac32:	4423      	add	r3, r4
 801ac34:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801ac38:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ac3c:	e64f      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ac3e:	eba3 0309 	sub.w	r3, r3, r9
 801ac42:	9807      	ldr	r0, [sp, #28]
 801ac44:	b29b      	uxth	r3, r3
 801ac46:	2806      	cmp	r0, #6
 801ac48:	fa0f fc83 	sxth.w	ip, r3
 801ac4c:	d818      	bhi.n	801ac80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801ac4e:	4652      	mov	r2, sl
 801ac50:	ab0a      	add	r3, sp, #40	; 0x28
 801ac52:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801ac56:	6851      	ldr	r1, [r2, #4]
 801ac58:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801ac5c:	c303      	stmia	r3!, {r0, r1}
 801ac5e:	9b03      	ldr	r3, [sp, #12]
 801ac60:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801ac64:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801ac68:	ab0a      	add	r3, sp, #40	; 0x28
 801ac6a:	9801      	ldr	r0, [sp, #4]
 801ac6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ac70:	f7ff fe06 	bl	801a880 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ac74:	9b00      	ldr	r3, [sp, #0]
 801ac76:	f1aa 0a08 	sub.w	sl, sl, #8
 801ac7a:	3b01      	subs	r3, #1
 801ac7c:	9300      	str	r3, [sp, #0]
 801ac7e:	e747      	b.n	801ab10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801ac80:	9800      	ldr	r0, [sp, #0]
 801ac82:	45ac      	cmp	ip, r5
 801ac84:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ac88:	db0c      	blt.n	801aca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801ac8a:	4417      	add	r7, r2
 801ac8c:	4458      	add	r0, fp
 801ac8e:	f8ad 4020 	strh.w	r4, [sp, #32]
 801ac92:	b2bf      	uxth	r7, r7
 801ac94:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801ac98:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801ac9c:	440f      	add	r7, r1
 801ac9e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801aca2:	e61c      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aca4:	4458      	add	r0, fp
 801aca6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801acaa:	443b      	add	r3, r7
 801acac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801acb0:	e615      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801acb2:	fa1f f18c 	uxth.w	r1, ip
 801acb6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801acba:	b282      	uxth	r2, r0
 801acbc:	4584      	cmp	ip, r0
 801acbe:	eb01 0e05 	add.w	lr, r1, r5
 801acc2:	9204      	str	r2, [sp, #16]
 801acc4:	fa1f fe8e 	uxth.w	lr, lr
 801acc8:	9e04      	ldr	r6, [sp, #16]
 801acca:	fa0f f28e 	sxth.w	r2, lr
 801acce:	9205      	str	r2, [sp, #20]
 801acd0:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801acd4:	4432      	add	r2, r6
 801acd6:	b292      	uxth	r2, r2
 801acd8:	9206      	str	r2, [sp, #24]
 801acda:	da26      	bge.n	801ad2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801acdc:	eba3 0309 	sub.w	r3, r3, r9
 801ace0:	eba2 020e 	sub.w	r2, r2, lr
 801ace4:	eba0 000c 	sub.w	r0, r0, ip
 801ace8:	eba4 0408 	sub.w	r4, r4, r8
 801acec:	b29b      	uxth	r3, r3
 801acee:	b292      	uxth	r2, r2
 801acf0:	fa0f fa83 	sxth.w	sl, r3
 801acf4:	b211      	sxth	r1, r2
 801acf6:	fb0a f000 	mul.w	r0, sl, r0
 801acfa:	434c      	muls	r4, r1
 801acfc:	42a0      	cmp	r0, r4
 801acfe:	9800      	ldr	r0, [sp, #0]
 801ad00:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ad04:	dc06      	bgt.n	801ad14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801ad06:	4458      	add	r0, fp
 801ad08:	9a05      	ldr	r2, [sp, #20]
 801ad0a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801ad0e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801ad12:	e7ca      	b.n	801acaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ad14:	eb0b 0300 	add.w	r3, fp, r0
 801ad18:	9903      	ldr	r1, [sp, #12]
 801ad1a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801ad1e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801ad22:	442a      	add	r2, r5
 801ad24:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801ad28:	e5d9      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ad2a:	9e04      	ldr	r6, [sp, #16]
 801ad2c:	9a03      	ldr	r2, [sp, #12]
 801ad2e:	1b89      	subs	r1, r1, r6
 801ad30:	b21e      	sxth	r6, r3
 801ad32:	b289      	uxth	r1, r1
 801ad34:	4296      	cmp	r6, r2
 801ad36:	fa0f fc81 	sxth.w	ip, r1
 801ad3a:	dd25      	ble.n	801ad88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801ad3c:	eba3 0309 	sub.w	r3, r3, r9
 801ad40:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ad44:	9e05      	ldr	r6, [sp, #20]
 801ad46:	eba4 0408 	sub.w	r4, r4, r8
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	eba6 0902 	sub.w	r9, r6, r2
 801ad50:	fb0c f404 	mul.w	r4, ip, r4
 801ad54:	b218      	sxth	r0, r3
 801ad56:	9a00      	ldr	r2, [sp, #0]
 801ad58:	fb00 f909 	mul.w	r9, r0, r9
 801ad5c:	00d2      	lsls	r2, r2, #3
 801ad5e:	454c      	cmp	r4, r9
 801ad60:	db03      	blt.n	801ad6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801ad62:	445a      	add	r2, fp
 801ad64:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801ad68:	e79f      	b.n	801acaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ad6a:	eb0b 0302 	add.w	r3, fp, r2
 801ad6e:	9a03      	ldr	r2, [sp, #12]
 801ad70:	4429      	add	r1, r5
 801ad72:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801ad76:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801ad7a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801ad7e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ad82:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ad86:	e5aa      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ad88:	9b06      	ldr	r3, [sp, #24]
 801ad8a:	9c07      	ldr	r4, [sp, #28]
 801ad8c:	eba3 020e 	sub.w	r2, r3, lr
 801ad90:	2c06      	cmp	r4, #6
 801ad92:	b292      	uxth	r2, r2
 801ad94:	b213      	sxth	r3, r2
 801ad96:	d80d      	bhi.n	801adb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801ad98:	4651      	mov	r1, sl
 801ad9a:	aa0a      	add	r2, sp, #40	; 0x28
 801ad9c:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801ada0:	6849      	ldr	r1, [r1, #4]
 801ada2:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801ada6:	9b05      	ldr	r3, [sp, #20]
 801ada8:	c203      	stmia	r2!, {r0, r1}
 801adaa:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801adae:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801adb2:	e759      	b.n	801ac68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801adb4:	9c00      	ldr	r4, [sp, #0]
 801adb6:	4563      	cmp	r3, ip
 801adb8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801adbc:	db0d      	blt.n	801adda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801adbe:	4429      	add	r1, r5
 801adc0:	9a04      	ldr	r2, [sp, #16]
 801adc2:	445c      	add	r4, fp
 801adc4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801adc8:	b289      	uxth	r1, r1
 801adca:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801adce:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801add2:	4411      	add	r1, r2
 801add4:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801add8:	e581      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801adda:	445c      	add	r4, fp
 801addc:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801ade0:	e79f      	b.n	801ad22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801ade2:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801ade6:	2f07      	cmp	r7, #7
 801ade8:	d806      	bhi.n	801adf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801adea:	ab08      	add	r3, sp, #32
 801adec:	9801      	ldr	r0, [sp, #4]
 801adee:	e893 0006 	ldmia.w	r3, {r1, r2}
 801adf2:	f7ff fd45 	bl	801a880 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801adf6:	e5dc      	b.n	801a9b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801adf8:	f107 39ff 	add.w	r9, r7, #4294967295
 801adfc:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ae00:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801ae04:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801ae08:	f04f 35ff 	mov.w	r5, #4294967295
 801ae0c:	2400      	movs	r4, #0
 801ae0e:	9304      	str	r3, [sp, #16]
 801ae10:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801ae14:	f109 32ff 	add.w	r2, r9, #4294967295
 801ae18:	9300      	str	r3, [sp, #0]
 801ae1a:	4690      	mov	r8, r2
 801ae1c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801ae20:	9303      	str	r3, [sp, #12]
 801ae22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ae26:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ae2a:	6818      	ldr	r0, [r3, #0]
 801ae2c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801ae30:	9206      	str	r2, [sp, #24]
 801ae32:	bf16      	itet	ne
 801ae34:	9904      	ldrne	r1, [sp, #16]
 801ae36:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801ae3a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801ae3e:	9305      	str	r3, [sp, #20]
 801ae40:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801ae44:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801ae48:	fb16 f601 	smulbb	r6, r6, r1
 801ae4c:	6859      	ldr	r1, [r3, #4]
 801ae4e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ae52:	4671      	mov	r1, lr
 801ae54:	a80a      	add	r0, sp, #40	; 0x28
 801ae56:	f7ff fc09 	bl	801a66c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ae5a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801ae5e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ae62:	9b03      	ldr	r3, [sp, #12]
 801ae64:	9a00      	ldr	r2, [sp, #0]
 801ae66:	fb11 f100 	smulbb	r1, r1, r0
 801ae6a:	2008      	movs	r0, #8
 801ae6c:	fb02 6603 	mla	r6, r2, r3, r6
 801ae70:	1b8e      	subs	r6, r1, r6
 801ae72:	fb91 f1f0 	sdiv	r1, r1, r0
 801ae76:	42b1      	cmp	r1, r6
 801ae78:	dc21      	bgt.n	801aebe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801ae7a:	4556      	cmp	r6, sl
 801ae7c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801ae80:	da03      	bge.n	801ae8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801ae82:	b1e6      	cbz	r6, 801aebe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801ae84:	46b2      	mov	sl, r6
 801ae86:	4645      	mov	r5, r8
 801ae88:	464c      	mov	r4, r9
 801ae8a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ae8e:	f118 0f02 	cmn.w	r8, #2
 801ae92:	d1c8      	bne.n	801ae26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801ae94:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ae98:	f1a7 0708 	sub.w	r7, r7, #8
 801ae9c:	4691      	mov	r9, r2
 801ae9e:	d1b7      	bne.n	801ae10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801aea0:	9b01      	ldr	r3, [sp, #4]
 801aea2:	b2a6      	uxth	r6, r4
 801aea4:	00e4      	lsls	r4, r4, #3
 801aea6:	1918      	adds	r0, r3, r4
 801aea8:	1c6b      	adds	r3, r5, #1
 801aeaa:	d10b      	bne.n	801aec4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801aeac:	4601      	mov	r1, r0
 801aeae:	9802      	ldr	r0, [sp, #8]
 801aeb0:	f7ff fbdc 	bl	801a66c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aeb4:	4631      	mov	r1, r6
 801aeb6:	9801      	ldr	r0, [sp, #4]
 801aeb8:	f7ff fccc 	bl	801a854 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aebc:	e50f      	b.n	801a8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aebe:	4645      	mov	r5, r8
 801aec0:	464c      	mov	r4, r9
 801aec2:	e7ed      	b.n	801aea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801aec4:	9b01      	ldr	r3, [sp, #4]
 801aec6:	00ed      	lsls	r5, r5, #3
 801aec8:	445c      	add	r4, fp
 801aeca:	1959      	adds	r1, r3, r5
 801aecc:	445d      	add	r5, fp
 801aece:	f7ff fbcd 	bl	801a66c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aed2:	9b02      	ldr	r3, [sp, #8]
 801aed4:	cb03      	ldmia	r3!, {r0, r1}
 801aed6:	9b02      	ldr	r3, [sp, #8]
 801aed8:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801aedc:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801aee0:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801aee4:	6861      	ldr	r1, [r4, #4]
 801aee6:	c303      	stmia	r3!, {r0, r1}
 801aee8:	e7e4      	b.n	801aeb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801aeec <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801aeec:	4b1d      	ldr	r3, [pc, #116]	; (801af64 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801aeee:	b530      	push	{r4, r5, lr}
 801aef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aef4:	b085      	sub	sp, #20
 801aef6:	4b1c      	ldr	r3, [pc, #112]	; (801af68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801aef8:	460c      	mov	r4, r1
 801aefa:	2100      	movs	r1, #0
 801aefc:	4605      	mov	r5, r0
 801aefe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af02:	6820      	ldr	r0, [r4, #0]
 801af04:	9100      	str	r1, [sp, #0]
 801af06:	f8ad 3006 	strh.w	r3, [sp, #6]
 801af0a:	ab02      	add	r3, sp, #8
 801af0c:	6861      	ldr	r1, [r4, #4]
 801af0e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801af12:	c303      	stmia	r3!, {r0, r1}
 801af14:	4669      	mov	r1, sp
 801af16:	a802      	add	r0, sp, #8
 801af18:	f7fa fefc 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801af1c:	ab02      	add	r3, sp, #8
 801af1e:	cb03      	ldmia	r3!, {r0, r1}
 801af20:	4b12      	ldr	r3, [pc, #72]	; (801af6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801af22:	6020      	str	r0, [r4, #0]
 801af24:	6818      	ldr	r0, [r3, #0]
 801af26:	6061      	str	r1, [r4, #4]
 801af28:	b138      	cbz	r0, 801af3a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801af2a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801af2e:	b133      	cbz	r3, 801af3e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801af30:	6821      	ldr	r1, [r4, #0]
 801af32:	4628      	mov	r0, r5
 801af34:	6862      	ldr	r2, [r4, #4]
 801af36:	f7ff fcc5 	bl	801a8c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801af3a:	b005      	add	sp, #20
 801af3c:	bd30      	pop	{r4, r5, pc}
 801af3e:	6803      	ldr	r3, [r0, #0]
 801af40:	4621      	mov	r1, r4
 801af42:	689b      	ldr	r3, [r3, #8]
 801af44:	4798      	blx	r3
 801af46:	4b0a      	ldr	r3, [pc, #40]	; (801af70 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801af48:	6818      	ldr	r0, [r3, #0]
 801af4a:	b118      	cbz	r0, 801af54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801af4c:	6803      	ldr	r3, [r0, #0]
 801af4e:	4621      	mov	r1, r4
 801af50:	689b      	ldr	r3, [r3, #8]
 801af52:	4798      	blx	r3
 801af54:	4b07      	ldr	r3, [pc, #28]	; (801af74 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801af56:	4621      	mov	r1, r4
 801af58:	6818      	ldr	r0, [r3, #0]
 801af5a:	6803      	ldr	r3, [r0, #0]
 801af5c:	695b      	ldr	r3, [r3, #20]
 801af5e:	4798      	blx	r3
 801af60:	e7eb      	b.n	801af3a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801af62:	bf00      	nop
 801af64:	200060ea 	.word	0x200060ea
 801af68:	200060ec 	.word	0x200060ec
 801af6c:	20006134 	.word	0x20006134
 801af70:	20006130 	.word	0x20006130
 801af74:	200060f8 	.word	0x200060f8

0801af78 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801af78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af7c:	4604      	mov	r4, r0
 801af7e:	b09b      	sub	sp, #108	; 0x6c
 801af80:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801af84:	b129      	cbz	r1, 801af92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801af86:	2300      	movs	r3, #0
 801af88:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801af8c:	b01b      	add	sp, #108	; 0x6c
 801af8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af92:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801af96:	4630      	mov	r0, r6
 801af98:	f7fa feff 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801af9c:	4605      	mov	r5, r0
 801af9e:	b940      	cbnz	r0, 801afb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801afa0:	4620      	mov	r0, r4
 801afa2:	e896 0006 	ldmia.w	r6, {r1, r2}
 801afa6:	f7ff fc8d 	bl	801a8c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801afaa:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801afae:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801afb2:	4ba6      	ldr	r3, [pc, #664]	; (801b24c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	b33b      	cbz	r3, 801b008 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801afb8:	4da5      	ldr	r5, [pc, #660]	; (801b250 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801afba:	4628      	mov	r0, r5
 801afbc:	f7fa feed 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801afc0:	4606      	mov	r6, r0
 801afc2:	bb08      	cbnz	r0, 801b008 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801afc4:	4628      	mov	r0, r5
 801afc6:	f7ff f997 	bl	801a2f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801afca:	6829      	ldr	r1, [r5, #0]
 801afcc:	686a      	ldr	r2, [r5, #4]
 801afce:	4620      	mov	r0, r4
 801afd0:	f7ff fc78 	bl	801a8c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801afd4:	802e      	strh	r6, [r5, #0]
 801afd6:	806e      	strh	r6, [r5, #2]
 801afd8:	80ae      	strh	r6, [r5, #4]
 801afda:	80ee      	strh	r6, [r5, #6]
 801afdc:	4f9d      	ldr	r7, [pc, #628]	; (801b254 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801afde:	a809      	add	r0, sp, #36	; 0x24
 801afe0:	f7ff fbe3 	bl	801a7aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801afe4:	883d      	ldrh	r5, [r7, #0]
 801afe6:	462e      	mov	r6, r5
 801afe8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801afec:	42b3      	cmp	r3, r6
 801afee:	d910      	bls.n	801b012 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801aff0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801aff4:	3601      	adds	r6, #1
 801aff6:	a809      	add	r0, sp, #36	; 0x24
 801aff8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801affc:	b2b6      	uxth	r6, r6
 801affe:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b002:	f7ff fc3d 	bl	801a880 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b006:	e7ef      	b.n	801afe8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b008:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d1e5      	bne.n	801afdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801b010:	e7bc      	b.n	801af8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b012:	462e      	mov	r6, r5
 801b014:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b018:	42b3      	cmp	r3, r6
 801b01a:	d90b      	bls.n	801b034 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801b01c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b020:	3601      	adds	r6, #1
 801b022:	4620      	mov	r0, r4
 801b024:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b028:	b2b6      	uxth	r6, r6
 801b02a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b02e:	f7ff fc49 	bl	801a8c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b032:	e7ef      	b.n	801b014 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b034:	4a88      	ldr	r2, [pc, #544]	; (801b258 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801b036:	6813      	ldr	r3, [r2, #0]
 801b038:	4690      	mov	r8, r2
 801b03a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b03e:	2b01      	cmp	r3, #1
 801b040:	f040 8093 	bne.w	801b16a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 801b044:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b048:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b04c:	f04f 0900 	mov.w	r9, #0
 801b050:	33aa      	adds	r3, #170	; 0xaa
 801b052:	42a8      	cmp	r0, r5
 801b054:	f103 0308 	add.w	r3, r3, #8
 801b058:	dd0a      	ble.n	801b070 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801b05a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b05e:	3501      	adds	r5, #1
 801b060:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b064:	440a      	add	r2, r1
 801b066:	b212      	sxth	r2, r2
 801b068:	4591      	cmp	r9, r2
 801b06a:	bfb8      	it	lt
 801b06c:	4691      	movlt	r9, r2
 801b06e:	e7f0      	b.n	801b052 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801b070:	4b7a      	ldr	r3, [pc, #488]	; (801b25c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801b072:	4e7b      	ldr	r6, [pc, #492]	; (801b260 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801b074:	881d      	ldrh	r5, [r3, #0]
 801b076:	2300      	movs	r3, #0
 801b078:	2d0f      	cmp	r5, #15
 801b07a:	bf8c      	ite	hi
 801b07c:	08ed      	lsrhi	r5, r5, #3
 801b07e:	2501      	movls	r5, #1
 801b080:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b084:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b088:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b08c:	f8d8 0000 	ldr.w	r0, [r8]
 801b090:	440b      	add	r3, r1
 801b092:	6802      	ldr	r2, [r0, #0]
 801b094:	b21b      	sxth	r3, r3
 801b096:	4599      	cmp	r9, r3
 801b098:	dd4a      	ble.n	801b130 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801b09a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801b09e:	4798      	blx	r3
 801b0a0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b0a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b0a8:	4413      	add	r3, r2
 801b0aa:	b21b      	sxth	r3, r3
 801b0ac:	195a      	adds	r2, r3, r5
 801b0ae:	4290      	cmp	r0, r2
 801b0b0:	da07      	bge.n	801b0c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b0b2:	4581      	cmp	r9, r0
 801b0b4:	dd05      	ble.n	801b0c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b0b6:	4298      	cmp	r0, r3
 801b0b8:	da33      	bge.n	801b122 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	dd31      	ble.n	801b122 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b0be:	4648      	mov	r0, r9
 801b0c0:	e004      	b.n	801b0cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801b0c2:	4298      	cmp	r0, r3
 801b0c4:	dbfb      	blt.n	801b0be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801b0c6:	4548      	cmp	r0, r9
 801b0c8:	bfa8      	it	ge
 801b0ca:	4648      	movge	r0, r9
 801b0cc:	f9b6 2000 	ldrsh.w	r2, [r6]
 801b0d0:	2100      	movs	r1, #0
 801b0d2:	1ac0      	subs	r0, r0, r3
 801b0d4:	f8b7 a000 	ldrh.w	sl, [r7]
 801b0d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b0dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b0e0:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b0e4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b0e8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b0ec:	4553      	cmp	r3, sl
 801b0ee:	d9c9      	bls.n	801b084 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b0f0:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b0f4:	ab07      	add	r3, sp, #28
 801b0f6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b0fa:	6851      	ldr	r1, [r2, #4]
 801b0fc:	c303      	stmia	r3!, {r0, r1}
 801b0fe:	a807      	add	r0, sp, #28
 801b100:	a905      	add	r1, sp, #20
 801b102:	f7fa fe07 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801b106:	a807      	add	r0, sp, #28
 801b108:	f7fa fe47 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b10c:	b920      	cbnz	r0, 801b118 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801b10e:	6823      	ldr	r3, [r4, #0]
 801b110:	a907      	add	r1, sp, #28
 801b112:	4620      	mov	r0, r4
 801b114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b116:	4798      	blx	r3
 801b118:	f10a 0a01 	add.w	sl, sl, #1
 801b11c:	fa1f fa8a 	uxth.w	sl, sl
 801b120:	e7e2      	b.n	801b0e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801b122:	f8d8 0000 	ldr.w	r0, [r8]
 801b126:	2101      	movs	r1, #1
 801b128:	6803      	ldr	r3, [r0, #0]
 801b12a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b12c:	4798      	blx	r3
 801b12e:	e7a9      	b.n	801b084 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b130:	69d3      	ldr	r3, [r2, #28]
 801b132:	4798      	blx	r3
 801b134:	4b4b      	ldr	r3, [pc, #300]	; (801b264 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801b136:	781b      	ldrb	r3, [r3, #0]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	f43f af27 	beq.w	801af8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b13e:	2300      	movs	r3, #0
 801b140:	883d      	ldrh	r5, [r7, #0]
 801b142:	34ea      	adds	r4, #234	; 0xea
 801b144:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b148:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b14c:	42ab      	cmp	r3, r5
 801b14e:	f67f af1d 	bls.w	801af8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b152:	ab1a      	add	r3, sp, #104	; 0x68
 801b154:	4620      	mov	r0, r4
 801b156:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b15a:	3501      	adds	r5, #1
 801b15c:	3b44      	subs	r3, #68	; 0x44
 801b15e:	b2ad      	uxth	r5, r5
 801b160:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b164:	f7ff fb8c 	bl	801a880 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b168:	e7ee      	b.n	801b148 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 801b16a:	2b02      	cmp	r3, #2
 801b16c:	f040 813d 	bne.w	801b3ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801b170:	4b3d      	ldr	r3, [pc, #244]	; (801b268 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801b172:	781b      	ldrb	r3, [r3, #0]
 801b174:	2b01      	cmp	r3, #1
 801b176:	d02c      	beq.n	801b1d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 801b178:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801b17c:	883a      	ldrh	r2, [r7, #0]
 801b17e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801b182:	3201      	adds	r2, #1
 801b184:	b292      	uxth	r2, r2
 801b186:	2900      	cmp	r1, #0
 801b188:	d0d4      	beq.n	801b134 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b18a:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801b18e:	4610      	mov	r0, r2
 801b190:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801b194:	f04f 0a00 	mov.w	sl, #0
 801b198:	441d      	add	r5, r3
 801b19a:	b22d      	sxth	r5, r5
 801b19c:	b283      	uxth	r3, r0
 801b19e:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801b1a2:	4299      	cmp	r1, r3
 801b1a4:	f240 80c4 	bls.w	801b330 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801b1a8:	4426      	add	r6, r4
 801b1aa:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801b1ae:	4684      	mov	ip, r0
 801b1b0:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801b1b4:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801b1b8:	4573      	cmp	r3, lr
 801b1ba:	f340 80a6 	ble.w	801b30a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801b1be:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801b1c2:	4475      	add	r5, lr
 801b1c4:	b22d      	sxth	r5, r5
 801b1c6:	429d      	cmp	r5, r3
 801b1c8:	bfa8      	it	ge
 801b1ca:	461d      	movge	r5, r3
 801b1cc:	3001      	adds	r0, #1
 801b1ce:	46e2      	mov	sl, ip
 801b1d0:	e7e4      	b.n	801b19c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 801b1d2:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801b1d6:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801b1da:	f1bb 0f00 	cmp.w	fp, #0
 801b1de:	d0a9      	beq.n	801b134 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b1e0:	883b      	ldrh	r3, [r7, #0]
 801b1e2:	2600      	movs	r6, #0
 801b1e4:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801b1e8:	3301      	adds	r3, #1
 801b1ea:	b29b      	uxth	r3, r3
 801b1ec:	b299      	uxth	r1, r3
 801b1ee:	00f5      	lsls	r5, r6, #3
 801b1f0:	458b      	cmp	fp, r1
 801b1f2:	d93b      	bls.n	801b26c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801b1f4:	4425      	add	r5, r4
 801b1f6:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801b1fa:	469c      	mov	ip, r3
 801b1fc:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801b200:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801b204:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801b208:	4408      	add	r0, r1
 801b20a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801b20e:	4471      	add	r1, lr
 801b210:	b200      	sxth	r0, r0
 801b212:	b209      	sxth	r1, r1
 801b214:	4288      	cmp	r0, r1
 801b216:	da06      	bge.n	801b226 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 801b218:	4586      	cmp	lr, r0
 801b21a:	4672      	mov	r2, lr
 801b21c:	bfb8      	it	lt
 801b21e:	4602      	movlt	r2, r0
 801b220:	3301      	adds	r3, #1
 801b222:	4666      	mov	r6, ip
 801b224:	e7e2      	b.n	801b1ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 801b226:	d10b      	bne.n	801b240 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801b228:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801b22c:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801b230:	458c      	cmp	ip, r1
 801b232:	bfb4      	ite	lt
 801b234:	469c      	movlt	ip, r3
 801b236:	46b4      	movge	ip, r6
 801b238:	4572      	cmp	r2, lr
 801b23a:	bfb8      	it	lt
 801b23c:	4672      	movlt	r2, lr
 801b23e:	e7ef      	b.n	801b220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801b240:	428a      	cmp	r2, r1
 801b242:	46b4      	mov	ip, r6
 801b244:	bfb8      	it	lt
 801b246:	460a      	movlt	r2, r1
 801b248:	e7ea      	b.n	801b220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801b24a:	bf00      	nop
 801b24c:	20006130 	.word	0x20006130
 801b250:	2000613c 	.word	0x2000613c
 801b254:	20000020 	.word	0x20000020
 801b258:	200060f8 	.word	0x200060f8
 801b25c:	200060ec 	.word	0x200060ec
 801b260:	200060ea 	.word	0x200060ea
 801b264:	200060f4 	.word	0x200060f4
 801b268:	200060ee 	.word	0x200060ee
 801b26c:	1961      	adds	r1, r4, r5
 801b26e:	ab07      	add	r3, sp, #28
 801b270:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801b274:	6849      	ldr	r1, [r1, #4]
 801b276:	c303      	stmia	r3!, {r0, r1}
 801b278:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b27c:	a807      	add	r0, sp, #28
 801b27e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b282:	2b13      	cmp	r3, #19
 801b284:	440b      	add	r3, r1
 801b286:	bfd8      	it	le
 801b288:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b28c:	1a9b      	subs	r3, r3, r2
 801b28e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b292:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b296:	f7ff f8a5 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b29a:	a807      	add	r0, sp, #28
 801b29c:	f7fa fd7d 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b2a0:	2800      	cmp	r0, #0
 801b2a2:	d198      	bne.n	801b1d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b2a4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b2a8:	4425      	add	r5, r4
 801b2aa:	f8d8 0000 	ldr.w	r0, [r8]
 801b2ae:	f1bc 0f14 	cmp.w	ip, #20
 801b2b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b2b6:	f8d0 e000 	ldr.w	lr, [r0]
 801b2ba:	bfa8      	it	ge
 801b2bc:	f04f 0c14 	movge.w	ip, #20
 801b2c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b2c4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b2c8:	fa1f fc8c 	uxth.w	ip, ip
 801b2cc:	f8cd c000 	str.w	ip, [sp]
 801b2d0:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 801b2d4:	47d0      	blx	sl
 801b2d6:	4682      	mov	sl, r0
 801b2d8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b2dc:	a807      	add	r0, sp, #28
 801b2de:	f7ff f80b 	bl	801a2f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b2e2:	6823      	ldr	r3, [r4, #0]
 801b2e4:	4620      	mov	r0, r4
 801b2e6:	a907      	add	r1, sp, #28
 801b2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b2ea:	4798      	blx	r3
 801b2ec:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b2f0:	eba0 000a 	sub.w	r0, r0, sl
 801b2f4:	b200      	sxth	r0, r0
 801b2f6:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b2fa:	2800      	cmp	r0, #0
 801b2fc:	f47f af6b 	bne.w	801b1d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b300:	b2b1      	uxth	r1, r6
 801b302:	4648      	mov	r0, r9
 801b304:	f7ff faa6 	bl	801a854 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b308:	e765      	b.n	801b1d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b30a:	d10c      	bne.n	801b326 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801b30c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801b310:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801b314:	45b4      	cmp	ip, r6
 801b316:	bfb4      	ite	lt
 801b318:	4684      	movlt	ip, r0
 801b31a:	46d4      	movge	ip, sl
 801b31c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801b320:	4433      	add	r3, r6
 801b322:	b21b      	sxth	r3, r3
 801b324:	e74f      	b.n	801b1c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 801b326:	4575      	cmp	r5, lr
 801b328:	46d4      	mov	ip, sl
 801b32a:	bfa8      	it	ge
 801b32c:	4675      	movge	r5, lr
 801b32e:	e74d      	b.n	801b1cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 801b330:	eb0b 0006 	add.w	r0, fp, r6
 801b334:	4426      	add	r6, r4
 801b336:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801b33a:	f1b9 0f13 	cmp.w	r9, #19
 801b33e:	bfdc      	itt	le
 801b340:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801b344:	444d      	addle	r5, r9
 801b346:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b34a:	bfd8      	it	le
 801b34c:	b22d      	sxthle	r5, r5
 801b34e:	f7fa fd24 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b352:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b356:	2800      	cmp	r0, #0
 801b358:	f47f af15 	bne.w	801b186 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 801b35c:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801b360:	fa1f f989 	uxth.w	r9, r9
 801b364:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b368:	eba5 050c 	sub.w	r5, r5, ip
 801b36c:	fa1f f28c 	uxth.w	r2, ip
 801b370:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801b374:	eb02 0009 	add.w	r0, r2, r9
 801b378:	2d14      	cmp	r5, #20
 801b37a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801b37e:	bfa8      	it	ge
 801b380:	2514      	movge	r5, #20
 801b382:	b200      	sxth	r0, r0
 801b384:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b388:	b289      	uxth	r1, r1
 801b38a:	fa1f fe85 	uxth.w	lr, r5
 801b38e:	eba0 000c 	sub.w	r0, r0, ip
 801b392:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b396:	4586      	cmp	lr, r0
 801b398:	f8d8 0000 	ldr.w	r0, [r8]
 801b39c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b3a0:	b29b      	uxth	r3, r3
 801b3a2:	bfb8      	it	lt
 801b3a4:	46f1      	movlt	r9, lr
 801b3a6:	6805      	ldr	r5, [r0, #0]
 801b3a8:	f8cd 9000 	str.w	r9, [sp]
 801b3ac:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 801b3ae:	47a8      	blx	r5
 801b3b0:	6823      	ldr	r3, [r4, #0]
 801b3b2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b3b6:	a907      	add	r1, sp, #28
 801b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3ba:	4620      	mov	r0, r4
 801b3bc:	4798      	blx	r3
 801b3be:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b3c2:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801b3c6:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801b3ca:	1a5b      	subs	r3, r3, r1
 801b3cc:	440a      	add	r2, r1
 801b3ce:	b21b      	sxth	r3, r3
 801b3d0:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801b3d4:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	f47f aecf 	bne.w	801b17c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801b3de:	fa1f f18a 	uxth.w	r1, sl
 801b3e2:	4658      	mov	r0, fp
 801b3e4:	f7ff fa36 	bl	801a854 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b3e8:	e6c8      	b.n	801b17c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801b3ea:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b3ee:	42ab      	cmp	r3, r5
 801b3f0:	f67f aea0 	bls.w	801b134 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b3f4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b3f8:	ab07      	add	r3, sp, #28
 801b3fa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b3fe:	6851      	ldr	r1, [r2, #4]
 801b400:	c303      	stmia	r3!, {r0, r1}
 801b402:	a807      	add	r0, sp, #28
 801b404:	f7fa fcc9 	bl	8015d9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b408:	b920      	cbnz	r0, 801b414 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 801b40a:	6823      	ldr	r3, [r4, #0]
 801b40c:	a907      	add	r1, sp, #28
 801b40e:	4620      	mov	r0, r4
 801b410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b412:	4798      	blx	r3
 801b414:	3501      	adds	r5, #1
 801b416:	b2ad      	uxth	r5, r5
 801b418:	e7e7      	b.n	801b3ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801b41a:	bf00      	nop

0801b41c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b41c:	4b03      	ldr	r3, [pc, #12]	; (801b42c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b41e:	2200      	movs	r2, #0
 801b420:	801a      	strh	r2, [r3, #0]
 801b422:	805a      	strh	r2, [r3, #2]
 801b424:	809a      	strh	r2, [r3, #4]
 801b426:	80da      	strh	r2, [r3, #6]
 801b428:	4770      	bx	lr
 801b42a:	bf00      	nop
 801b42c:	2000613c 	.word	0x2000613c

0801b430 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b434:	b099      	sub	sp, #100	; 0x64
 801b436:	4607      	mov	r7, r0
 801b438:	4614      	mov	r4, r2
 801b43a:	461d      	mov	r5, r3
 801b43c:	a802      	add	r0, sp, #8
 801b43e:	468a      	mov	sl, r1
 801b440:	f000 fe9e 	bl	801c180 <_ZN8touchgfx12TextProviderC1Ev>
 801b444:	683b      	ldr	r3, [r7, #0]
 801b446:	4638      	mov	r0, r7
 801b448:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b44e:	4798      	blx	r3
 801b450:	462a      	mov	r2, r5
 801b452:	2500      	movs	r5, #0
 801b454:	4621      	mov	r1, r4
 801b456:	4603      	mov	r3, r0
 801b458:	a802      	add	r0, sp, #8
 801b45a:	462c      	mov	r4, r5
 801b45c:	46a9      	mov	r9, r5
 801b45e:	46a8      	mov	r8, r5
 801b460:	f000 fed3 	bl	801c20a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b464:	2300      	movs	r3, #0
 801b466:	9301      	str	r3, [sp, #4]
 801b468:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b46c:	429c      	cmp	r4, r3
 801b46e:	d002      	beq.n	801b476 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801b470:	455c      	cmp	r4, fp
 801b472:	bf18      	it	ne
 801b474:	4625      	movne	r5, r4
 801b476:	ab01      	add	r3, sp, #4
 801b478:	463a      	mov	r2, r7
 801b47a:	4651      	mov	r1, sl
 801b47c:	a802      	add	r0, sp, #8
 801b47e:	f001 f9bf 	bl	801c800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b482:	4604      	mov	r4, r0
 801b484:	b108      	cbz	r0, 801b48a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801b486:	280a      	cmp	r0, #10
 801b488:	d10a      	bne.n	801b4a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801b48a:	45c1      	cmp	r9, r8
 801b48c:	bf38      	it	cc
 801b48e:	46c1      	movcc	r9, r8
 801b490:	f04f 0800 	mov.w	r8, #0
 801b494:	2c00      	cmp	r4, #0
 801b496:	d1e5      	bne.n	801b464 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b498:	4648      	mov	r0, r9
 801b49a:	b019      	add	sp, #100	; 0x64
 801b49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4a0:	9a01      	ldr	r2, [sp, #4]
 801b4a2:	2a00      	cmp	r2, #0
 801b4a4:	d0de      	beq.n	801b464 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b4a6:	7b56      	ldrb	r6, [r2, #13]
 801b4a8:	4629      	mov	r1, r5
 801b4aa:	683b      	ldr	r3, [r7, #0]
 801b4ac:	0076      	lsls	r6, r6, #1
 801b4ae:	8894      	ldrh	r4, [r2, #4]
 801b4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4b2:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801b4b6:	7a96      	ldrb	r6, [r2, #10]
 801b4b8:	4306      	orrs	r6, r0
 801b4ba:	4638      	mov	r0, r7
 801b4bc:	4798      	blx	r3
 801b4be:	4430      	add	r0, r6
 801b4c0:	4480      	add	r8, r0
 801b4c2:	fa1f f888 	uxth.w	r8, r8
 801b4c6:	e7e5      	b.n	801b494 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801b4c8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b4c8:	b508      	push	{r3, lr}
 801b4ca:	6803      	ldr	r3, [r0, #0]
 801b4cc:	68db      	ldr	r3, [r3, #12]
 801b4ce:	4798      	blx	r3
 801b4d0:	b128      	cbz	r0, 801b4de <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b4d2:	7b43      	ldrb	r3, [r0, #13]
 801b4d4:	7a80      	ldrb	r0, [r0, #10]
 801b4d6:	005b      	lsls	r3, r3, #1
 801b4d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b4dc:	4318      	orrs	r0, r3
 801b4de:	bd08      	pop	{r3, pc}

0801b4e0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b4e0:	b40e      	push	{r1, r2, r3}
 801b4e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4e4:	b098      	sub	sp, #96	; 0x60
 801b4e6:	4605      	mov	r5, r0
 801b4e8:	ab1d      	add	r3, sp, #116	; 0x74
 801b4ea:	a802      	add	r0, sp, #8
 801b4ec:	ae18      	add	r6, sp, #96	; 0x60
 801b4ee:	f853 4b04 	ldr.w	r4, [r3], #4
 801b4f2:	9300      	str	r3, [sp, #0]
 801b4f4:	f000 fe44 	bl	801c180 <_ZN8touchgfx12TextProviderC1Ev>
 801b4f8:	682b      	ldr	r3, [r5, #0]
 801b4fa:	4628      	mov	r0, r5
 801b4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4fe:	4798      	blx	r3
 801b500:	4621      	mov	r1, r4
 801b502:	2400      	movs	r4, #0
 801b504:	4603      	mov	r3, r0
 801b506:	9a00      	ldr	r2, [sp, #0]
 801b508:	a802      	add	r0, sp, #8
 801b50a:	f000 fe7e 	bl	801c20a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b50e:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801b512:	462a      	mov	r2, r5
 801b514:	4633      	mov	r3, r6
 801b516:	4621      	mov	r1, r4
 801b518:	a802      	add	r0, sp, #8
 801b51a:	f001 f971 	bl	801c800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b51e:	b300      	cbz	r0, 801b562 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b520:	280a      	cmp	r0, #10
 801b522:	d01a      	beq.n	801b55a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b524:	9f01      	ldr	r7, [sp, #4]
 801b526:	b1c7      	cbz	r7, 801b55a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b528:	7b78      	ldrb	r0, [r7, #13]
 801b52a:	7a3b      	ldrb	r3, [r7, #8]
 801b52c:	00c1      	lsls	r1, r0, #3
 801b52e:	88aa      	ldrh	r2, [r5, #4]
 801b530:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b534:	4319      	orrs	r1, r3
 801b536:	0643      	lsls	r3, r0, #25
 801b538:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b53c:	bf48      	it	mi
 801b53e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b542:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b546:	bf48      	it	mi
 801b548:	b219      	sxthmi	r1, r3
 801b54a:	79fb      	ldrb	r3, [r7, #7]
 801b54c:	4303      	orrs	r3, r0
 801b54e:	4413      	add	r3, r2
 801b550:	1a5b      	subs	r3, r3, r1
 801b552:	b29b      	uxth	r3, r3
 801b554:	42a3      	cmp	r3, r4
 801b556:	bfc8      	it	gt
 801b558:	b21c      	sxthgt	r4, r3
 801b55a:	4633      	mov	r3, r6
 801b55c:	462a      	mov	r2, r5
 801b55e:	2100      	movs	r1, #0
 801b560:	e7da      	b.n	801b518 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801b562:	b2a0      	uxth	r0, r4
 801b564:	b018      	add	sp, #96	; 0x60
 801b566:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b56a:	b003      	add	sp, #12
 801b56c:	4770      	bx	lr

0801b56e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b56e:	b40e      	push	{r1, r2, r3}
 801b570:	b530      	push	{r4, r5, lr}
 801b572:	b098      	sub	sp, #96	; 0x60
 801b574:	4604      	mov	r4, r0
 801b576:	ab1b      	add	r3, sp, #108	; 0x6c
 801b578:	a802      	add	r0, sp, #8
 801b57a:	f853 5b04 	ldr.w	r5, [r3], #4
 801b57e:	9301      	str	r3, [sp, #4]
 801b580:	f000 fdfe 	bl	801c180 <_ZN8touchgfx12TextProviderC1Ev>
 801b584:	6823      	ldr	r3, [r4, #0]
 801b586:	4620      	mov	r0, r4
 801b588:	2401      	movs	r4, #1
 801b58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b58c:	4798      	blx	r3
 801b58e:	9a01      	ldr	r2, [sp, #4]
 801b590:	4603      	mov	r3, r0
 801b592:	4629      	mov	r1, r5
 801b594:	a802      	add	r0, sp, #8
 801b596:	f000 fe38 	bl	801c20a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b59a:	a802      	add	r0, sp, #8
 801b59c:	f001 fa28 	bl	801c9f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b5a0:	b2a3      	uxth	r3, r4
 801b5a2:	b138      	cbz	r0, 801b5b4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801b5a4:	280a      	cmp	r0, #10
 801b5a6:	a802      	add	r0, sp, #8
 801b5a8:	bf04      	itt	eq
 801b5aa:	3301      	addeq	r3, #1
 801b5ac:	b21c      	sxtheq	r4, r3
 801b5ae:	f001 fa1f 	bl	801c9f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b5b2:	e7f5      	b.n	801b5a0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	b018      	add	sp, #96	; 0x60
 801b5b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5bc:	b003      	add	sp, #12
 801b5be:	4770      	bx	lr

0801b5c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b5c0:	b40e      	push	{r1, r2, r3}
 801b5c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5c4:	b098      	sub	sp, #96	; 0x60
 801b5c6:	4604      	mov	r4, r0
 801b5c8:	26ff      	movs	r6, #255	; 0xff
 801b5ca:	ab1d      	add	r3, sp, #116	; 0x74
 801b5cc:	a802      	add	r0, sp, #8
 801b5ce:	f853 5b04 	ldr.w	r5, [r3], #4
 801b5d2:	9300      	str	r3, [sp, #0]
 801b5d4:	f000 fdd4 	bl	801c180 <_ZN8touchgfx12TextProviderC1Ev>
 801b5d8:	6823      	ldr	r3, [r4, #0]
 801b5da:	4620      	mov	r0, r4
 801b5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5de:	4798      	blx	r3
 801b5e0:	4629      	mov	r1, r5
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	9a00      	ldr	r2, [sp, #0]
 801b5e6:	a802      	add	r0, sp, #8
 801b5e8:	ad18      	add	r5, sp, #96	; 0x60
 801b5ea:	f000 fe0e 	bl	801c20a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b5ee:	2100      	movs	r1, #0
 801b5f0:	4622      	mov	r2, r4
 801b5f2:	a802      	add	r0, sp, #8
 801b5f4:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801b5f8:	462b      	mov	r3, r5
 801b5fa:	f001 f901 	bl	801c800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b5fe:	b1d8      	cbz	r0, 801b638 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b600:	280a      	cmp	r0, #10
 801b602:	d012      	beq.n	801b62a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b604:	9801      	ldr	r0, [sp, #4]
 801b606:	b180      	cbz	r0, 801b62a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b608:	7b47      	ldrb	r7, [r0, #13]
 801b60a:	7922      	ldrb	r2, [r4, #4]
 801b60c:	00fb      	lsls	r3, r7, #3
 801b60e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b612:	7a03      	ldrb	r3, [r0, #8]
 801b614:	430b      	orrs	r3, r1
 801b616:	0679      	lsls	r1, r7, #25
 801b618:	bf44      	itt	mi
 801b61a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b61e:	b21b      	sxthmi	r3, r3
 801b620:	1ad3      	subs	r3, r2, r3
 801b622:	b2db      	uxtb	r3, r3
 801b624:	429e      	cmp	r6, r3
 801b626:	bf28      	it	cs
 801b628:	461e      	movcs	r6, r3
 801b62a:	462b      	mov	r3, r5
 801b62c:	4622      	mov	r2, r4
 801b62e:	2100      	movs	r1, #0
 801b630:	a802      	add	r0, sp, #8
 801b632:	f001 f8e5 	bl	801c800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b636:	e7e2      	b.n	801b5fe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801b638:	4630      	mov	r0, r6
 801b63a:	b018      	add	sp, #96	; 0x60
 801b63c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b640:	b003      	add	sp, #12
 801b642:	4770      	bx	lr

0801b644 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b644:	b513      	push	{r0, r1, r4, lr}
 801b646:	1d01      	adds	r1, r0, #4
 801b648:	4603      	mov	r3, r0
 801b64a:	466a      	mov	r2, sp
 801b64c:	c903      	ldmia	r1, {r0, r1}
 801b64e:	e882 0003 	stmia.w	r2, {r0, r1}
 801b652:	2100      	movs	r1, #0
 801b654:	4618      	mov	r0, r3
 801b656:	9100      	str	r1, [sp, #0]
 801b658:	6819      	ldr	r1, [r3, #0]
 801b65a:	690c      	ldr	r4, [r1, #16]
 801b65c:	4611      	mov	r1, r2
 801b65e:	47a0      	blx	r4
 801b660:	b002      	add	sp, #8
 801b662:	bd10      	pop	{r4, pc}

0801b664 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b664:	b538      	push	{r3, r4, r5, lr}
 801b666:	680b      	ldr	r3, [r1, #0]
 801b668:	460c      	mov	r4, r1
 801b66a:	4605      	mov	r5, r0
 801b66c:	68db      	ldr	r3, [r3, #12]
 801b66e:	4798      	blx	r3
 801b670:	6823      	ldr	r3, [r4, #0]
 801b672:	4620      	mov	r0, r4
 801b674:	4629      	mov	r1, r5
 801b676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b678:	4798      	blx	r3
 801b67a:	4628      	mov	r0, r5
 801b67c:	bd38      	pop	{r3, r4, r5, pc}

0801b67e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b67e:	b410      	push	{r4}
 801b680:	880a      	ldrh	r2, [r1, #0]
 801b682:	8884      	ldrh	r4, [r0, #4]
 801b684:	4422      	add	r2, r4
 801b686:	800a      	strh	r2, [r1, #0]
 801b688:	884a      	ldrh	r2, [r1, #2]
 801b68a:	88c4      	ldrh	r4, [r0, #6]
 801b68c:	4422      	add	r2, r4
 801b68e:	804a      	strh	r2, [r1, #2]
 801b690:	6940      	ldr	r0, [r0, #20]
 801b692:	b120      	cbz	r0, 801b69e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b694:	6803      	ldr	r3, [r0, #0]
 801b696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b69c:	4718      	bx	r3
 801b69e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b6a2:	4770      	bx	lr

0801b6a4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6a6:	460b      	mov	r3, r1
 801b6a8:	b085      	sub	sp, #20
 801b6aa:	4604      	mov	r4, r0
 801b6ac:	b901      	cbnz	r1, 801b6b0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b6ae:	b322      	cbz	r2, 801b6fa <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801b6b0:	1d27      	adds	r7, r4, #4
 801b6b2:	466e      	mov	r6, sp
 801b6b4:	88e5      	ldrh	r5, [r4, #6]
 801b6b6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b6ba:	442a      	add	r2, r5
 801b6bc:	e886 0003 	stmia.w	r6, {r0, r1}
 801b6c0:	88a1      	ldrh	r1, [r4, #4]
 801b6c2:	4620      	mov	r0, r4
 801b6c4:	b215      	sxth	r5, r2
 801b6c6:	4419      	add	r1, r3
 801b6c8:	6823      	ldr	r3, [r4, #0]
 801b6ca:	b209      	sxth	r1, r1
 801b6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6ce:	4798      	blx	r3
 801b6d0:	6823      	ldr	r3, [r4, #0]
 801b6d2:	4629      	mov	r1, r5
 801b6d4:	4620      	mov	r0, r4
 801b6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6d8:	ad02      	add	r5, sp, #8
 801b6da:	4798      	blx	r3
 801b6dc:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b6e0:	e885 0003 	stmia.w	r5, {r0, r1}
 801b6e4:	6960      	ldr	r0, [r4, #20]
 801b6e6:	b150      	cbz	r0, 801b6fe <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801b6e8:	6803      	ldr	r3, [r0, #0]
 801b6ea:	4631      	mov	r1, r6
 801b6ec:	691b      	ldr	r3, [r3, #16]
 801b6ee:	4798      	blx	r3
 801b6f0:	6960      	ldr	r0, [r4, #20]
 801b6f2:	6803      	ldr	r3, [r0, #0]
 801b6f4:	691b      	ldr	r3, [r3, #16]
 801b6f6:	4629      	mov	r1, r5
 801b6f8:	4798      	blx	r3
 801b6fa:	b005      	add	sp, #20
 801b6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6fe:	f7fe fffb 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 801b702:	6803      	ldr	r3, [r0, #0]
 801b704:	4631      	mov	r1, r6
 801b706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b708:	4798      	blx	r3
 801b70a:	f7fe fff5 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 801b70e:	6803      	ldr	r3, [r0, #0]
 801b710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b712:	e7f0      	b.n	801b6f6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801b714 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b716:	8882      	ldrh	r2, [r0, #4]
 801b718:	4605      	mov	r5, r0
 801b71a:	880b      	ldrh	r3, [r1, #0]
 801b71c:	460c      	mov	r4, r1
 801b71e:	4413      	add	r3, r2
 801b720:	800b      	strh	r3, [r1, #0]
 801b722:	884b      	ldrh	r3, [r1, #2]
 801b724:	88c2      	ldrh	r2, [r0, #6]
 801b726:	4413      	add	r3, r2
 801b728:	4602      	mov	r2, r0
 801b72a:	804b      	strh	r3, [r1, #2]
 801b72c:	466b      	mov	r3, sp
 801b72e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b732:	6851      	ldr	r1, [r2, #4]
 801b734:	c303      	stmia	r3!, {r0, r1}
 801b736:	4621      	mov	r1, r4
 801b738:	4668      	mov	r0, sp
 801b73a:	f7fa faeb 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801b73e:	466b      	mov	r3, sp
 801b740:	cb03      	ldmia	r3!, {r0, r1}
 801b742:	6020      	str	r0, [r4, #0]
 801b744:	6061      	str	r1, [r4, #4]
 801b746:	6968      	ldr	r0, [r5, #20]
 801b748:	b128      	cbz	r0, 801b756 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b74a:	6803      	ldr	r3, [r0, #0]
 801b74c:	691b      	ldr	r3, [r3, #16]
 801b74e:	4621      	mov	r1, r4
 801b750:	4798      	blx	r3
 801b752:	b003      	add	sp, #12
 801b754:	bd30      	pop	{r4, r5, pc}
 801b756:	f7fe ffcf 	bl	801a6f8 <_ZN8touchgfx11Application11getInstanceEv>
 801b75a:	6803      	ldr	r3, [r0, #0]
 801b75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b75e:	e7f6      	b.n	801b74e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b760 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b760:	b570      	push	{r4, r5, r6, lr}
 801b762:	8882      	ldrh	r2, [r0, #4]
 801b764:	460c      	mov	r4, r1
 801b766:	880b      	ldrh	r3, [r1, #0]
 801b768:	4605      	mov	r5, r0
 801b76a:	4413      	add	r3, r2
 801b76c:	800b      	strh	r3, [r1, #0]
 801b76e:	884b      	ldrh	r3, [r1, #2]
 801b770:	88c2      	ldrh	r2, [r0, #6]
 801b772:	4413      	add	r3, r2
 801b774:	804b      	strh	r3, [r1, #2]
 801b776:	1d01      	adds	r1, r0, #4
 801b778:	4620      	mov	r0, r4
 801b77a:	f7fa facb 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801b77e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b782:	2b00      	cmp	r3, #0
 801b784:	dd0b      	ble.n	801b79e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b786:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	dd07      	ble.n	801b79e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b78e:	6968      	ldr	r0, [r5, #20]
 801b790:	b128      	cbz	r0, 801b79e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b792:	6803      	ldr	r3, [r0, #0]
 801b794:	4621      	mov	r1, r4
 801b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b79c:	4718      	bx	r3
 801b79e:	bd70      	pop	{r4, r5, r6, pc}

0801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b7a0:	b510      	push	{r4, lr}
 801b7a2:	2300      	movs	r3, #0
 801b7a4:	4604      	mov	r4, r0
 801b7a6:	4608      	mov	r0, r1
 801b7a8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b7ac:	8023      	strh	r3, [r4, #0]
 801b7ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b7b2:	8063      	strh	r3, [r4, #2]
 801b7b4:	6803      	ldr	r3, [r0, #0]
 801b7b6:	80a1      	strh	r1, [r4, #4]
 801b7b8:	4621      	mov	r1, r4
 801b7ba:	80e2      	strh	r2, [r4, #6]
 801b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b7be:	4798      	blx	r3
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	bd10      	pop	{r4, pc}

0801b7c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b7c4:	b530      	push	{r4, r5, lr}
 801b7c6:	8083      	strh	r3, [r0, #4]
 801b7c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b7cc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b7d0:	7183      	strb	r3, [r0, #6]
 801b7d2:	79c3      	ldrb	r3, [r0, #7]
 801b7d4:	6101      	str	r1, [r0, #16]
 801b7d6:	f365 0306 	bfi	r3, r5, #0, #7
 801b7da:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b7de:	8282      	strh	r2, [r0, #20]
 801b7e0:	f365 13c7 	bfi	r3, r5, #7, #1
 801b7e4:	71c3      	strb	r3, [r0, #7]
 801b7e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b7ea:	7203      	strb	r3, [r0, #8]
 801b7ec:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b7f0:	7243      	strb	r3, [r0, #9]
 801b7f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b7f6:	8143      	strh	r3, [r0, #10]
 801b7f8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b7fc:	8183      	strh	r3, [r0, #12]
 801b7fe:	4b01      	ldr	r3, [pc, #4]	; (801b804 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b800:	6003      	str	r3, [r0, #0]
 801b802:	bd30      	pop	{r4, r5, pc}
 801b804:	0802bed4 	.word	0x0802bed4

0801b808 <_ZNK8touchgfx9ConstFont4findEt>:
 801b808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b80a:	6904      	ldr	r4, [r0, #16]
 801b80c:	b3bc      	cbz	r4, 801b87e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b80e:	88a3      	ldrh	r3, [r4, #4]
 801b810:	8a82      	ldrh	r2, [r0, #20]
 801b812:	1acb      	subs	r3, r1, r3
 801b814:	f102 32ff 	add.w	r2, r2, #4294967295
 801b818:	d431      	bmi.n	801b87e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b81a:	4293      	cmp	r3, r2
 801b81c:	dd0c      	ble.n	801b838 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b81e:	230e      	movs	r3, #14
 801b820:	fb03 4302 	mla	r3, r3, r2, r4
 801b824:	889b      	ldrh	r3, [r3, #4]
 801b826:	1a5b      	subs	r3, r3, r1
 801b828:	1ad3      	subs	r3, r2, r3
 801b82a:	429a      	cmp	r2, r3
 801b82c:	db27      	blt.n	801b87e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b82e:	2b00      	cmp	r3, #0
 801b830:	bfbc      	itt	lt
 801b832:	2302      	movlt	r3, #2
 801b834:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b838:	2500      	movs	r5, #0
 801b83a:	260e      	movs	r6, #14
 801b83c:	4295      	cmp	r5, r2
 801b83e:	dc1e      	bgt.n	801b87e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b840:	fb06 4003 	mla	r0, r6, r3, r4
 801b844:	8887      	ldrh	r7, [r0, #4]
 801b846:	42b9      	cmp	r1, r7
 801b848:	d01a      	beq.n	801b880 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b84a:	d20d      	bcs.n	801b868 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b84c:	1e5a      	subs	r2, r3, #1
 801b84e:	4295      	cmp	r5, r2
 801b850:	dc15      	bgt.n	801b87e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b852:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b856:	1a5b      	subs	r3, r3, r1
 801b858:	1ad3      	subs	r3, r2, r3
 801b85a:	429a      	cmp	r2, r3
 801b85c:	db0f      	blt.n	801b87e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b85e:	429d      	cmp	r5, r3
 801b860:	ddec      	ble.n	801b83c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b862:	1953      	adds	r3, r2, r5
 801b864:	105b      	asrs	r3, r3, #1
 801b866:	e7e9      	b.n	801b83c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b868:	1c5d      	adds	r5, r3, #1
 801b86a:	42aa      	cmp	r2, r5
 801b86c:	db07      	blt.n	801b87e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b86e:	8a43      	ldrh	r3, [r0, #18]
 801b870:	1acb      	subs	r3, r1, r3
 801b872:	442b      	add	r3, r5
 801b874:	429d      	cmp	r5, r3
 801b876:	dc02      	bgt.n	801b87e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b878:	429a      	cmp	r2, r3
 801b87a:	dadf      	bge.n	801b83c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b87c:	e7f1      	b.n	801b862 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b87e:	2000      	movs	r0, #0
 801b880:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b882 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b884:	4604      	mov	r4, r0
 801b886:	4617      	mov	r7, r2
 801b888:	461e      	mov	r6, r3
 801b88a:	b911      	cbnz	r1, 801b892 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b88c:	2500      	movs	r5, #0
 801b88e:	4628      	mov	r0, r5
 801b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b892:	290a      	cmp	r1, #10
 801b894:	d0fa      	beq.n	801b88c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b896:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b89a:	4291      	cmp	r1, r2
 801b89c:	d0f6      	beq.n	801b88c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b89e:	f242 020b 	movw	r2, #8203	; 0x200b
 801b8a2:	4291      	cmp	r1, r2
 801b8a4:	d0f2      	beq.n	801b88c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b8a6:	f7ff ffaf 	bl	801b808 <_ZNK8touchgfx9ConstFont4findEt>
 801b8aa:	4605      	mov	r5, r0
 801b8ac:	b950      	cbnz	r0, 801b8c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b8ae:	6823      	ldr	r3, [r4, #0]
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	691b      	ldr	r3, [r3, #16]
 801b8b4:	4798      	blx	r3
 801b8b6:	4601      	mov	r1, r0
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	f7ff ffa5 	bl	801b808 <_ZNK8touchgfx9ConstFont4findEt>
 801b8be:	4605      	mov	r5, r0
 801b8c0:	2800      	cmp	r0, #0
 801b8c2:	d0e3      	beq.n	801b88c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b8c4:	6823      	ldr	r3, [r4, #0]
 801b8c6:	4629      	mov	r1, r5
 801b8c8:	4620      	mov	r0, r4
 801b8ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8cc:	4798      	blx	r3
 801b8ce:	6038      	str	r0, [r7, #0]
 801b8d0:	6823      	ldr	r3, [r4, #0]
 801b8d2:	4620      	mov	r0, r4
 801b8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8d6:	4798      	blx	r3
 801b8d8:	7030      	strb	r0, [r6, #0]
 801b8da:	e7d8      	b.n	801b88e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b8dc <_ZN8touchgfx6memsetEPvhm>:
 801b8dc:	4402      	add	r2, r0
 801b8de:	4290      	cmp	r0, r2
 801b8e0:	d002      	beq.n	801b8e8 <_ZN8touchgfx6memsetEPvhm+0xc>
 801b8e2:	f800 1b01 	strb.w	r1, [r0], #1
 801b8e6:	e7fa      	b.n	801b8de <_ZN8touchgfx6memsetEPvhm+0x2>
 801b8e8:	4770      	bx	lr

0801b8ea <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801b8ea:	b538      	push	{r3, r4, r5, lr}
 801b8ec:	4605      	mov	r5, r0
 801b8ee:	f002 fb17 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b8f2:	4604      	mov	r4, r0
 801b8f4:	4628      	mov	r0, r5
 801b8f6:	f002 fa4f 	bl	801dd98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b8fa:	2800      	cmp	r0, #0
 801b8fc:	bf14      	ite	ne
 801b8fe:	2002      	movne	r0, #2
 801b900:	2000      	moveq	r0, #0
 801b902:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801b906:	b280      	uxth	r0, r0
 801b908:	bd38      	pop	{r3, r4, r5, pc}

0801b90a <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801b90a:	b538      	push	{r3, r4, r5, lr}
 801b90c:	4605      	mov	r5, r0
 801b90e:	f002 fb07 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b912:	4604      	mov	r4, r0
 801b914:	4628      	mov	r0, r5
 801b916:	f002 fa3f 	bl	801dd98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b91a:	2800      	cmp	r0, #0
 801b91c:	bf14      	ite	ne
 801b91e:	2002      	movne	r0, #2
 801b920:	2000      	moveq	r0, #0
 801b922:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801b926:	f040 0001 	orr.w	r0, r0, #1
 801b92a:	b280      	uxth	r0, r0
 801b92c:	bd38      	pop	{r3, r4, r5, pc}

0801b92e <_ZN8touchgfx4clzuEm>:
 801b92e:	4603      	mov	r3, r0
 801b930:	b1c8      	cbz	r0, 801b966 <_ZN8touchgfx4clzuEm+0x38>
 801b932:	0c02      	lsrs	r2, r0, #16
 801b934:	0412      	lsls	r2, r2, #16
 801b936:	b9a2      	cbnz	r2, 801b962 <_ZN8touchgfx4clzuEm+0x34>
 801b938:	0403      	lsls	r3, r0, #16
 801b93a:	2010      	movs	r0, #16
 801b93c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b940:	bf04      	itt	eq
 801b942:	021b      	lsleq	r3, r3, #8
 801b944:	3008      	addeq	r0, #8
 801b946:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b94a:	bf04      	itt	eq
 801b94c:	011b      	lsleq	r3, r3, #4
 801b94e:	3004      	addeq	r0, #4
 801b950:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b954:	bf04      	itt	eq
 801b956:	009b      	lsleq	r3, r3, #2
 801b958:	3002      	addeq	r0, #2
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	db04      	blt.n	801b968 <_ZN8touchgfx4clzuEm+0x3a>
 801b95e:	3001      	adds	r0, #1
 801b960:	4770      	bx	lr
 801b962:	2000      	movs	r0, #0
 801b964:	e7ea      	b.n	801b93c <_ZN8touchgfx4clzuEm+0xe>
 801b966:	2020      	movs	r0, #32
 801b968:	4770      	bx	lr

0801b96a <_ZN8touchgfx7muldivuEmmmRm>:
 801b96a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b96e:	4680      	mov	r8, r0
 801b970:	460f      	mov	r7, r1
 801b972:	4615      	mov	r5, r2
 801b974:	461e      	mov	r6, r3
 801b976:	f7ff ffda 	bl	801b92e <_ZN8touchgfx4clzuEm>
 801b97a:	b998      	cbnz	r0, 801b9a4 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801b97c:	4608      	mov	r0, r1
 801b97e:	f7ff ffd6 	bl	801b92e <_ZN8touchgfx4clzuEm>
 801b982:	2800      	cmp	r0, #0
 801b984:	dd08      	ble.n	801b998 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801b986:	4633      	mov	r3, r6
 801b988:	462a      	mov	r2, r5
 801b98a:	4641      	mov	r1, r8
 801b98c:	4638      	mov	r0, r7
 801b98e:	f7ff ffec 	bl	801b96a <_ZN8touchgfx7muldivuEmmmRm>
 801b992:	b003      	add	sp, #12
 801b994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b998:	f04f 33ff 	mov.w	r3, #4294967295
 801b99c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b9a0:	6033      	str	r3, [r6, #0]
 801b9a2:	e7f6      	b.n	801b992 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b9a4:	fa31 f900 	lsrs.w	r9, r1, r0
 801b9a8:	fb01 f308 	mul.w	r3, r1, r8
 801b9ac:	d105      	bne.n	801b9ba <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801b9ae:	fbb3 f0f5 	udiv	r0, r3, r5
 801b9b2:	fb05 3510 	mls	r5, r5, r0, r3
 801b9b6:	6035      	str	r5, [r6, #0]
 801b9b8:	e7eb      	b.n	801b992 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b9ba:	2301      	movs	r3, #1
 801b9bc:	fa08 fb00 	lsl.w	fp, r8, r0
 801b9c0:	462a      	mov	r2, r5
 801b9c2:	4641      	mov	r1, r8
 801b9c4:	fa03 f000 	lsl.w	r0, r3, r0
 801b9c8:	4633      	mov	r3, r6
 801b9ca:	fbbb faf5 	udiv	sl, fp, r5
 801b9ce:	3801      	subs	r0, #1
 801b9d0:	fb09 f40a 	mul.w	r4, r9, sl
 801b9d4:	4038      	ands	r0, r7
 801b9d6:	f7ff ffc8 	bl	801b96a <_ZN8touchgfx7muldivuEmmmRm>
 801b9da:	462a      	mov	r2, r5
 801b9dc:	4607      	mov	r7, r0
 801b9de:	ab01      	add	r3, sp, #4
 801b9e0:	fb05 b11a 	mls	r1, r5, sl, fp
 801b9e4:	4648      	mov	r0, r9
 801b9e6:	f7ff ffc0 	bl	801b96a <_ZN8touchgfx7muldivuEmmmRm>
 801b9ea:	9b01      	ldr	r3, [sp, #4]
 801b9ec:	6832      	ldr	r2, [r6, #0]
 801b9ee:	441a      	add	r2, r3
 801b9f0:	fbb2 f3f5 	udiv	r3, r2, r5
 801b9f4:	441c      	add	r4, r3
 801b9f6:	fb05 2513 	mls	r5, r5, r3, r2
 801b9fa:	443c      	add	r4, r7
 801b9fc:	4420      	add	r0, r4
 801b9fe:	e7da      	b.n	801b9b6 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801ba00 <_ZN8touchgfx6muldivElllRl>:
 801ba00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ba02:	2800      	cmp	r0, #0
 801ba04:	461e      	mov	r6, r3
 801ba06:	bfba      	itte	lt
 801ba08:	4240      	neglt	r0, r0
 801ba0a:	f04f 34ff 	movlt.w	r4, #4294967295
 801ba0e:	2401      	movge	r4, #1
 801ba10:	2900      	cmp	r1, #0
 801ba12:	bfbc      	itt	lt
 801ba14:	4249      	neglt	r1, r1
 801ba16:	4264      	neglt	r4, r4
 801ba18:	2a00      	cmp	r2, #0
 801ba1a:	bfb6      	itet	lt
 801ba1c:	4265      	neglt	r5, r4
 801ba1e:	4625      	movge	r5, r4
 801ba20:	4252      	neglt	r2, r2
 801ba22:	4288      	cmp	r0, r1
 801ba24:	bfc2      	ittt	gt
 801ba26:	4603      	movgt	r3, r0
 801ba28:	4608      	movgt	r0, r1
 801ba2a:	4619      	movgt	r1, r3
 801ba2c:	ab01      	add	r3, sp, #4
 801ba2e:	f7ff ff9c 	bl	801b96a <_ZN8touchgfx7muldivuEmmmRm>
 801ba32:	9b01      	ldr	r3, [sp, #4]
 801ba34:	4368      	muls	r0, r5
 801ba36:	435c      	muls	r4, r3
 801ba38:	6034      	str	r4, [r6, #0]
 801ba3a:	b002      	add	sp, #8
 801ba3c:	bd70      	pop	{r4, r5, r6, pc}

0801ba3e <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801ba3e:	2000      	movs	r0, #0
 801ba40:	4770      	bx	lr

0801ba42 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801ba42:	2001      	movs	r0, #1
 801ba44:	4770      	bx	lr

0801ba46 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801ba46:	2002      	movs	r0, #2
 801ba48:	4770      	bx	lr

0801ba4a <_ZN8touchgfx12GestureEventD1Ev>:
 801ba4a:	4770      	bx	lr

0801ba4c <_ZN8touchgfx9DragEventD1Ev>:
 801ba4c:	4770      	bx	lr

0801ba4e <_ZN8touchgfx10ClickEventD1Ev>:
 801ba4e:	4770      	bx	lr

0801ba50 <_ZN8touchgfx10ClickEventD0Ev>:
 801ba50:	b510      	push	{r4, lr}
 801ba52:	4604      	mov	r4, r0
 801ba54:	210c      	movs	r1, #12
 801ba56:	f00c f8a0 	bl	8027b9a <_ZdlPvj>
 801ba5a:	4620      	mov	r0, r4
 801ba5c:	bd10      	pop	{r4, pc}

0801ba5e <_ZN8touchgfx9DragEventD0Ev>:
 801ba5e:	b510      	push	{r4, lr}
 801ba60:	4604      	mov	r4, r0
 801ba62:	2110      	movs	r1, #16
 801ba64:	f00c f899 	bl	8027b9a <_ZdlPvj>
 801ba68:	4620      	mov	r0, r4
 801ba6a:	bd10      	pop	{r4, pc}

0801ba6c <_ZN8touchgfx12GestureEventD0Ev>:
 801ba6c:	b510      	push	{r4, lr}
 801ba6e:	4604      	mov	r4, r0
 801ba70:	210c      	movs	r1, #12
 801ba72:	f00c f892 	bl	8027b9a <_ZdlPvj>
 801ba76:	4620      	mov	r0, r4
 801ba78:	bd10      	pop	{r4, pc}
	...

0801ba7c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801ba7c:	b530      	push	{r4, r5, lr}
 801ba7e:	460d      	mov	r5, r1
 801ba80:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ba82:	b087      	sub	sp, #28
 801ba84:	4604      	mov	r4, r0
 801ba86:	b301      	cbz	r1, 801baca <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801ba88:	a801      	add	r0, sp, #4
 801ba8a:	f7ff fe89 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba8e:	892a      	ldrh	r2, [r5, #8]
 801ba90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ba94:	7928      	ldrb	r0, [r5, #4]
 801ba96:	1ad2      	subs	r2, r2, r3
 801ba98:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ba9a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ba9e:	441a      	add	r2, r3
 801baa0:	896b      	ldrh	r3, [r5, #10]
 801baa2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801baa6:	f88d 0010 	strb.w	r0, [sp, #16]
 801baaa:	1b5b      	subs	r3, r3, r5
 801baac:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801baae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bab0:	442b      	add	r3, r5
 801bab2:	4d07      	ldr	r5, [pc, #28]	; (801bad0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801bab4:	f8ad 1012 	strh.w	r1, [sp, #18]
 801bab8:	a903      	add	r1, sp, #12
 801baba:	9503      	str	r5, [sp, #12]
 801babc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bac4:	6803      	ldr	r3, [r0, #0]
 801bac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bac8:	4798      	blx	r3
 801baca:	b007      	add	sp, #28
 801bacc:	bd30      	pop	{r4, r5, pc}
 801bace:	bf00      	nop
 801bad0:	0802bf50 	.word	0x0802bf50

0801bad4 <_ZNK8touchgfx4Rect9intersectEss>:
 801bad4:	b510      	push	{r4, lr}
 801bad6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bada:	428b      	cmp	r3, r1
 801badc:	dc10      	bgt.n	801bb00 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bade:	8884      	ldrh	r4, [r0, #4]
 801bae0:	4423      	add	r3, r4
 801bae2:	b21b      	sxth	r3, r3
 801bae4:	4299      	cmp	r1, r3
 801bae6:	da0b      	bge.n	801bb00 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bae8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801baec:	4293      	cmp	r3, r2
 801baee:	dc07      	bgt.n	801bb00 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801baf0:	88c0      	ldrh	r0, [r0, #6]
 801baf2:	4418      	add	r0, r3
 801baf4:	b200      	sxth	r0, r0
 801baf6:	4282      	cmp	r2, r0
 801baf8:	bfac      	ite	ge
 801bafa:	2000      	movge	r0, #0
 801bafc:	2001      	movlt	r0, #1
 801bafe:	bd10      	pop	{r4, pc}
 801bb00:	2000      	movs	r0, #0
 801bb02:	e7fc      	b.n	801bafe <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801bb04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801bb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb06:	460c      	mov	r4, r1
 801bb08:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bb0a:	b089      	sub	sp, #36	; 0x24
 801bb0c:	4605      	mov	r5, r0
 801bb0e:	2900      	cmp	r1, #0
 801bb10:	d054      	beq.n	801bbbc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801bb12:	4668      	mov	r0, sp
 801bb14:	f7ff fe44 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb18:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801bb1a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801bb1c:	4668      	mov	r0, sp
 801bb1e:	8922      	ldrh	r2, [r4, #8]
 801bb20:	88e1      	ldrh	r1, [r4, #6]
 801bb22:	443a      	add	r2, r7
 801bb24:	4431      	add	r1, r6
 801bb26:	b212      	sxth	r2, r2
 801bb28:	b209      	sxth	r1, r1
 801bb2a:	f7ff ffd3 	bl	801bad4 <_ZNK8touchgfx4Rect9intersectEss>
 801bb2e:	b1d0      	cbz	r0, 801bb66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bb30:	89a2      	ldrh	r2, [r4, #12]
 801bb32:	4668      	mov	r0, sp
 801bb34:	8961      	ldrh	r1, [r4, #10]
 801bb36:	443a      	add	r2, r7
 801bb38:	4431      	add	r1, r6
 801bb3a:	b212      	sxth	r2, r2
 801bb3c:	b209      	sxth	r1, r1
 801bb3e:	f7ff ffc9 	bl	801bad4 <_ZNK8touchgfx4Rect9intersectEss>
 801bb42:	4603      	mov	r3, r0
 801bb44:	b978      	cbnz	r0, 801bb66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bb46:	4a1e      	ldr	r2, [pc, #120]	; (801bbc0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801bb48:	a904      	add	r1, sp, #16
 801bb4a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bb4c:	9204      	str	r2, [sp, #16]
 801bb4e:	2202      	movs	r2, #2
 801bb50:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bb54:	f88d 2014 	strb.w	r2, [sp, #20]
 801bb58:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bb5c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bb60:	6803      	ldr	r3, [r0, #0]
 801bb62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb64:	4798      	blx	r3
 801bb66:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801bb68:	a802      	add	r0, sp, #8
 801bb6a:	f7ff fe19 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb6e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bb72:	88e0      	ldrh	r0, [r4, #6]
 801bb74:	8961      	ldrh	r1, [r4, #10]
 801bb76:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801bb7a:	1a80      	subs	r0, r0, r2
 801bb7c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801bb80:	1a89      	subs	r1, r1, r2
 801bb82:	8923      	ldrh	r3, [r4, #8]
 801bb84:	4460      	add	r0, ip
 801bb86:	89a2      	ldrh	r2, [r4, #12]
 801bb88:	4461      	add	r1, ip
 801bb8a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801bb8c:	eba3 030e 	sub.w	r3, r3, lr
 801bb90:	eba2 020e 	sub.w	r2, r2, lr
 801bb94:	f8ad 0016 	strh.w	r0, [sp, #22]
 801bb98:	7927      	ldrb	r7, [r4, #4]
 801bb9a:	4433      	add	r3, r6
 801bb9c:	4432      	add	r2, r6
 801bb9e:	4c09      	ldr	r4, [pc, #36]	; (801bbc4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801bba0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bba2:	f8ad 101a 	strh.w	r1, [sp, #26]
 801bba6:	a904      	add	r1, sp, #16
 801bba8:	9404      	str	r4, [sp, #16]
 801bbaa:	f88d 7014 	strb.w	r7, [sp, #20]
 801bbae:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bbb2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bbb6:	6803      	ldr	r3, [r0, #0]
 801bbb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bbba:	4798      	blx	r3
 801bbbc:	b009      	add	sp, #36	; 0x24
 801bbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbc0:	0802bf28 	.word	0x0802bf28
 801bbc4:	0802bf3c 	.word	0x0802bf3c

0801bbc8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbcc:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801bbd0:	b0a1      	sub	sp, #132	; 0x84
 801bbd2:	4604      	mov	r4, r0
 801bbd4:	460d      	mov	r5, r1
 801bbd6:	790b      	ldrb	r3, [r1, #4]
 801bbd8:	f1b9 0f00 	cmp.w	r9, #0
 801bbdc:	d00f      	beq.n	801bbfe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	f040 80a2 	bne.w	801bd28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bbe4:	b021      	add	sp, #132	; 0x84
 801bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbea:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bbee:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bbf2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bbf6:	1d20      	adds	r0, r4, #4
 801bbf8:	f7f9 ffda 	bl	8015bb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bbfc:	e094      	b.n	801bd28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d1f0      	bne.n	801bbe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bc02:	4b5f      	ldr	r3, [pc, #380]	; (801bd80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801bc0a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801bc0e:	f1ba 0f03 	cmp.w	sl, #3
 801bc12:	ddea      	ble.n	801bbea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801bc14:	f1ba 0f0c 	cmp.w	sl, #12
 801bc18:	f04f 0303 	mov.w	r3, #3
 801bc1c:	f04f 0600 	mov.w	r6, #0
 801bc20:	4958      	ldr	r1, [pc, #352]	; (801bd84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801bc22:	bfd8      	it	le
 801bc24:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801bc28:	960a      	str	r6, [sp, #40]	; 0x28
 801bc2a:	bfd8      	it	le
 801bc2c:	fb92 f3f3 	sdivle	r3, r2, r3
 801bc30:	9301      	str	r3, [sp, #4]
 801bc32:	4b55      	ldr	r3, [pc, #340]	; (801bd88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801bc34:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc38:	4b54      	ldr	r3, [pc, #336]	; (801bd8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801bc3a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801bc3e:	2248      	movs	r2, #72	; 0x48
 801bc40:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc44:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bc48:	ab0e      	add	r3, sp, #56	; 0x38
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	f00c f9f6 	bl	802803c <memcpy>
 801bc50:	f04f 32ff 	mov.w	r2, #4294967295
 801bc54:	f8cd a008 	str.w	sl, [sp, #8]
 801bc58:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801bc5c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bc60:	46b3      	mov	fp, r6
 801bc62:	fb93 f3f2 	sdiv	r3, r3, r2
 801bc66:	b29b      	uxth	r3, r3
 801bc68:	9303      	str	r3, [sp, #12]
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	9a03      	ldr	r2, [sp, #12]
 801bc6e:	88ef      	ldrh	r7, [r5, #6]
 801bc70:	a80a      	add	r0, sp, #40	; 0x28
 801bc72:	9309      	str	r3, [sp, #36]	; 0x24
 801bc74:	9b07      	ldr	r3, [sp, #28]
 801bc76:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801bc7a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801bc7e:	fb13 f302 	smulbb	r3, r3, r2
 801bc82:	b29b      	uxth	r3, r3
 801bc84:	9304      	str	r3, [sp, #16]
 801bc86:	9b07      	ldr	r3, [sp, #28]
 801bc88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bc8c:	685b      	ldr	r3, [r3, #4]
 801bc8e:	fb13 f302 	smulbb	r3, r3, r2
 801bc92:	b29b      	uxth	r3, r3
 801bc94:	9305      	str	r3, [sp, #20]
 801bc96:	9b04      	ldr	r3, [sp, #16]
 801bc98:	441f      	add	r7, r3
 801bc9a:	9b05      	ldr	r3, [sp, #20]
 801bc9c:	4498      	add	r8, r3
 801bc9e:	b23f      	sxth	r7, r7
 801bca0:	fa0f f888 	sxth.w	r8, r8
 801bca4:	4639      	mov	r1, r7
 801bca6:	4642      	mov	r2, r8
 801bca8:	f7ff ff14 	bl	801bad4 <_ZNK8touchgfx4Rect9intersectEss>
 801bcac:	b380      	cbz	r0, 801bd10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bcae:	4639      	mov	r1, r7
 801bcb0:	ab09      	add	r3, sp, #36	; 0x24
 801bcb2:	4642      	mov	r2, r8
 801bcb4:	1d20      	adds	r0, r4, #4
 801bcb6:	f7f9 ff7b 	bl	8015bb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bcba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bcbc:	b341      	cbz	r1, 801bd10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bcbe:	4549      	cmp	r1, r9
 801bcc0:	d026      	beq.n	801bd10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bcc2:	a80c      	add	r0, sp, #48	; 0x30
 801bcc4:	f7ff fd6c 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bcc8:	2002      	movs	r0, #2
 801bcca:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801bcce:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801bcd2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bcd6:	fb92 f2f0 	sdiv	r2, r2, r0
 801bcda:	440a      	add	r2, r1
 801bcdc:	1a99      	subs	r1, r3, r2
 801bcde:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801bce2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bce6:	fb93 f3f0 	sdiv	r3, r3, r0
 801bcea:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801bcee:	4403      	add	r3, r0
 801bcf0:	1ad3      	subs	r3, r2, r3
 801bcf2:	9a06      	ldr	r2, [sp, #24]
 801bcf4:	435b      	muls	r3, r3
 801bcf6:	fb01 3301 	mla	r3, r1, r1, r3
 801bcfa:	4293      	cmp	r3, r2
 801bcfc:	d208      	bcs.n	801bd10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bcfe:	9a04      	ldr	r2, [sp, #16]
 801bd00:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bd04:	86a2      	strh	r2, [r4, #52]	; 0x34
 801bd06:	9a05      	ldr	r2, [sp, #20]
 801bd08:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801bd0c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801bd0e:	9306      	str	r3, [sp, #24]
 801bd10:	f10b 0b02 	add.w	fp, fp, #2
 801bd14:	f1bb 0f08 	cmp.w	fp, #8
 801bd18:	dda7      	ble.n	801bc6a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801bd1a:	9b02      	ldr	r3, [sp, #8]
 801bd1c:	3601      	adds	r6, #1
 801bd1e:	4453      	add	r3, sl
 801bd20:	9302      	str	r3, [sp, #8]
 801bd22:	9b01      	ldr	r3, [sp, #4]
 801bd24:	42b3      	cmp	r3, r6
 801bd26:	d199      	bne.n	801bc5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801bd28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bd2a:	2900      	cmp	r1, #0
 801bd2c:	f43f af5a 	beq.w	801bbe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bd30:	a80c      	add	r0, sp, #48	; 0x30
 801bd32:	2600      	movs	r6, #0
 801bd34:	f7ff fd34 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bd38:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801bd3c:	88ea      	ldrh	r2, [r5, #6]
 801bd3e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801bd42:	1ad2      	subs	r2, r2, r3
 801bd44:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bd46:	7929      	ldrb	r1, [r5, #4]
 801bd48:	441a      	add	r2, r3
 801bd4a:	892b      	ldrh	r3, [r5, #8]
 801bd4c:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801bd50:	a90e      	add	r1, sp, #56	; 0x38
 801bd52:	1a1b      	subs	r3, r3, r0
 801bd54:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801bd56:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801bd5a:	4403      	add	r3, r0
 801bd5c:	480c      	ldr	r0, [pc, #48]	; (801bd90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801bd5e:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801bd62:	900e      	str	r0, [sp, #56]	; 0x38
 801bd64:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bd66:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801bd6a:	6803      	ldr	r3, [r0, #0]
 801bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd6e:	4798      	blx	r3
 801bd70:	792b      	ldrb	r3, [r5, #4]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	f43f af36 	beq.w	801bbe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bd78:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801bd7c:	e732      	b.n	801bbe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bd7e:	bf00      	nop
 801bd80:	200060f8 	.word	0x200060f8
 801bd84:	08029cfc 	.word	0x08029cfc
 801bd88:	200060ea 	.word	0x200060ea
 801bd8c:	200060ec 	.word	0x200060ec
 801bd90:	0802bf28 	.word	0x0802bf28

0801bd94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801bd94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd96:	4604      	mov	r4, r0
 801bd98:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801bd9c:	3201      	adds	r2, #1
 801bd9e:	d112      	bne.n	801bdc6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801bda0:	2500      	movs	r5, #0
 801bda2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bda6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bdaa:	6803      	ldr	r3, [r0, #0]
 801bdac:	9500      	str	r5, [sp, #0]
 801bdae:	466d      	mov	r5, sp
 801bdb0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bdb4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bdb8:	4629      	mov	r1, r5
 801bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdbc:	4798      	blx	r3
 801bdbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bdc2:	e884 0003 	stmia.w	r4, {r0, r1}
 801bdc6:	4620      	mov	r0, r4
 801bdc8:	b003      	add	sp, #12
 801bdca:	bd30      	pop	{r4, r5, pc}

0801bdcc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801bdcc:	b513      	push	{r0, r1, r4, lr}
 801bdce:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801bdd2:	4604      	mov	r4, r0
 801bdd4:	3301      	adds	r3, #1
 801bdd6:	d109      	bne.n	801bdec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801bdd8:	4601      	mov	r1, r0
 801bdda:	4668      	mov	r0, sp
 801bddc:	f7ff fce0 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bde0:	f8bd 3000 	ldrh.w	r3, [sp]
 801bde4:	8423      	strh	r3, [r4, #32]
 801bde6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bdea:	8463      	strh	r3, [r4, #34]	; 0x22
 801bdec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801bdf0:	b002      	add	sp, #8
 801bdf2:	bd10      	pop	{r4, pc}

0801bdf4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801bdf4:	b513      	push	{r0, r1, r4, lr}
 801bdf6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801bdfa:	4604      	mov	r4, r0
 801bdfc:	3301      	adds	r3, #1
 801bdfe:	d109      	bne.n	801be14 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801be00:	4601      	mov	r1, r0
 801be02:	4668      	mov	r0, sp
 801be04:	f7ff fccc 	bl	801b7a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801be08:	f8bd 3000 	ldrh.w	r3, [sp]
 801be0c:	8423      	strh	r3, [r4, #32]
 801be0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801be12:	8463      	strh	r3, [r4, #34]	; 0x22
 801be14:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801be18:	b002      	add	sp, #8
 801be1a:	bd10      	pop	{r4, pc}

0801be1c <_ZN8touchgfx6ScreenC1Ev>:
 801be1c:	b570      	push	{r4, r5, r6, lr}
 801be1e:	4b16      	ldr	r3, [pc, #88]	; (801be78 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801be20:	4605      	mov	r5, r0
 801be22:	4a16      	ldr	r2, [pc, #88]	; (801be7c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801be24:	2101      	movs	r1, #1
 801be26:	f845 3b04 	str.w	r3, [r5], #4
 801be2a:	2300      	movs	r3, #0
 801be2c:	6042      	str	r2, [r0, #4]
 801be2e:	4604      	mov	r4, r0
 801be30:	8103      	strh	r3, [r0, #8]
 801be32:	8143      	strh	r3, [r0, #10]
 801be34:	8183      	strh	r3, [r0, #12]
 801be36:	81c3      	strh	r3, [r0, #14]
 801be38:	8203      	strh	r3, [r0, #16]
 801be3a:	8243      	strh	r3, [r0, #18]
 801be3c:	8283      	strh	r3, [r0, #20]
 801be3e:	82c3      	strh	r3, [r0, #22]
 801be40:	6203      	str	r3, [r0, #32]
 801be42:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801be46:	6343      	str	r3, [r0, #52]	; 0x34
 801be48:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801be4c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801be50:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801be54:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801be58:	4b09      	ldr	r3, [pc, #36]	; (801be80 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801be5a:	4628      	mov	r0, r5
 801be5c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801be60:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801be62:	4a08      	ldr	r2, [pc, #32]	; (801be84 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801be64:	f9b2 1000 	ldrsh.w	r1, [r2]
 801be68:	4798      	blx	r3
 801be6a:	6863      	ldr	r3, [r4, #4]
 801be6c:	4628      	mov	r0, r5
 801be6e:	4631      	mov	r1, r6
 801be70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be72:	4798      	blx	r3
 801be74:	4620      	mov	r0, r4
 801be76:	bd70      	pop	{r4, r5, r6, pc}
 801be78:	0802bf64 	.word	0x0802bf64
 801be7c:	0802ab0c 	.word	0x0802ab0c
 801be80:	200060ec 	.word	0x200060ec
 801be84:	200060ea 	.word	0x200060ea

0801be88 <_ZN8touchgfx6Screen4drawEv>:
 801be88:	4b09      	ldr	r3, [pc, #36]	; (801beb0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801be8a:	b507      	push	{r0, r1, r2, lr}
 801be8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be90:	2100      	movs	r1, #0
 801be92:	4b08      	ldr	r3, [pc, #32]	; (801beb4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801be94:	9100      	str	r1, [sp, #0]
 801be96:	4669      	mov	r1, sp
 801be98:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be9c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bea0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bea4:	6803      	ldr	r3, [r0, #0]
 801bea6:	689b      	ldr	r3, [r3, #8]
 801bea8:	4798      	blx	r3
 801beaa:	b003      	add	sp, #12
 801beac:	f85d fb04 	ldr.w	pc, [sp], #4
 801beb0:	200060ea 	.word	0x200060ea
 801beb4:	200060ec 	.word	0x200060ec

0801beb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bebc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801bec0:	b089      	sub	sp, #36	; 0x24
 801bec2:	4680      	mov	r8, r0
 801bec4:	460c      	mov	r4, r1
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	4615      	mov	r5, r2
 801beca:	dd0e      	ble.n	801beea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801becc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	dd0a      	ble.n	801beea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bed4:	4628      	mov	r0, r5
 801bed6:	f7ff ff5d 	bl	801bd94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801beda:	4621      	mov	r1, r4
 801bedc:	f7fe fb82 	bl	801a5e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bee0:	69eb      	ldr	r3, [r5, #28]
 801bee2:	b928      	cbnz	r0, 801bef0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801bee4:	461d      	mov	r5, r3
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d1f4      	bne.n	801bed4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801beea:	b009      	add	sp, #36	; 0x24
 801beec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bef0:	ae04      	add	r6, sp, #16
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	f000 80b5 	beq.w	801c062 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bef8:	682b      	ldr	r3, [r5, #0]
 801befa:	4629      	mov	r1, r5
 801befc:	a802      	add	r0, sp, #8
 801befe:	68db      	ldr	r3, [r3, #12]
 801bf00:	4798      	blx	r3
 801bf02:	4628      	mov	r0, r5
 801bf04:	f7ff ff62 	bl	801bdcc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bf08:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801bf0c:	4407      	add	r7, r0
 801bf0e:	4628      	mov	r0, r5
 801bf10:	f7ff ff70 	bl	801bdf4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bf14:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bf18:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801bf1c:	b23f      	sxth	r7, r7
 801bf1e:	4418      	add	r0, r3
 801bf20:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801bf24:	4621      	mov	r1, r4
 801bf26:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bf2a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801bf2e:	4630      	mov	r0, r6
 801bf30:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf34:	f8ad 7010 	strh.w	r7, [sp, #16]
 801bf38:	f7f9 feec 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801bf3c:	4628      	mov	r0, r5
 801bf3e:	f7ff ff29 	bl	801bd94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bf42:	ab06      	add	r3, sp, #24
 801bf44:	4602      	mov	r2, r0
 801bf46:	e896 0003 	ldmia.w	r6, {r0, r1}
 801bf4a:	e883 0003 	stmia.w	r3, {r0, r1}
 801bf4e:	4611      	mov	r1, r2
 801bf50:	4618      	mov	r0, r3
 801bf52:	f7f9 fedf 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801bf56:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801bf5a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bf5e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801bf62:	4299      	cmp	r1, r3
 801bf64:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801bf68:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801bf6c:	d10b      	bne.n	801bf86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bf6e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bf72:	4552      	cmp	r2, sl
 801bf74:	d107      	bne.n	801bf86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bf76:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801bf7a:	455a      	cmp	r2, fp
 801bf7c:	d103      	bne.n	801bf86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bf7e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801bf82:	454a      	cmp	r2, r9
 801bf84:	d06d      	beq.n	801c062 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bf86:	f1bb 0f00 	cmp.w	fp, #0
 801bf8a:	dd65      	ble.n	801c058 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801bf8c:	f1b9 0f00 	cmp.w	r9, #0
 801bf90:	dd62      	ble.n	801c058 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801bf92:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bf96:	fa1f f08a 	uxth.w	r0, sl
 801bf9a:	4552      	cmp	r2, sl
 801bf9c:	9000      	str	r0, [sp, #0]
 801bf9e:	da12      	bge.n	801bfc6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801bfa0:	9301      	str	r3, [sp, #4]
 801bfa2:	9b00      	ldr	r3, [sp, #0]
 801bfa4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801bfa8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bfac:	1a9a      	subs	r2, r3, r2
 801bfae:	f8ad 1010 	strh.w	r1, [sp, #16]
 801bfb2:	4631      	mov	r1, r6
 801bfb4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bfb8:	4640      	mov	r0, r8
 801bfba:	f8ad 2016 	strh.w	r2, [sp, #22]
 801bfbe:	69ea      	ldr	r2, [r5, #28]
 801bfc0:	f7ff ff7a 	bl	801beb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bfc4:	9b01      	ldr	r3, [sp, #4]
 801bfc6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bfca:	b29f      	uxth	r7, r3
 801bfcc:	429a      	cmp	r2, r3
 801bfce:	da0d      	bge.n	801bfec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801bfd0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bfd4:	1aba      	subs	r2, r7, r2
 801bfd6:	f8ad a012 	strh.w	sl, [sp, #18]
 801bfda:	4631      	mov	r1, r6
 801bfdc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bfe0:	4640      	mov	r0, r8
 801bfe2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bfe6:	69ea      	ldr	r2, [r5, #28]
 801bfe8:	f7ff ff66 	bl	801beb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bfec:	8822      	ldrh	r2, [r4, #0]
 801bfee:	445f      	add	r7, fp
 801bff0:	88a3      	ldrh	r3, [r4, #4]
 801bff2:	b2bf      	uxth	r7, r7
 801bff4:	4413      	add	r3, r2
 801bff6:	b23a      	sxth	r2, r7
 801bff8:	b29b      	uxth	r3, r3
 801bffa:	b219      	sxth	r1, r3
 801bffc:	4291      	cmp	r1, r2
 801bffe:	dd0d      	ble.n	801c01c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c000:	1bdb      	subs	r3, r3, r7
 801c002:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c006:	f8ad a012 	strh.w	sl, [sp, #18]
 801c00a:	4631      	mov	r1, r6
 801c00c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c010:	4640      	mov	r0, r8
 801c012:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c016:	69ea      	ldr	r2, [r5, #28]
 801c018:	f7ff ff4e 	bl	801beb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c01c:	88e2      	ldrh	r2, [r4, #6]
 801c01e:	8863      	ldrh	r3, [r4, #2]
 801c020:	4413      	add	r3, r2
 801c022:	9a00      	ldr	r2, [sp, #0]
 801c024:	444a      	add	r2, r9
 801c026:	b29b      	uxth	r3, r3
 801c028:	fa1f f982 	uxth.w	r9, r2
 801c02c:	b219      	sxth	r1, r3
 801c02e:	fa0f f289 	sxth.w	r2, r9
 801c032:	428a      	cmp	r2, r1
 801c034:	da15      	bge.n	801c062 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c036:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c03a:	eba3 0309 	sub.w	r3, r3, r9
 801c03e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c042:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c046:	4631      	mov	r1, r6
 801c048:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c04c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c050:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c054:	69ea      	ldr	r2, [r5, #28]
 801c056:	e001      	b.n	801c05c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c058:	69ea      	ldr	r2, [r5, #28]
 801c05a:	4621      	mov	r1, r4
 801c05c:	4640      	mov	r0, r8
 801c05e:	f7ff ff2b 	bl	801beb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c062:	4628      	mov	r0, r5
 801c064:	f7ff fe96 	bl	801bd94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c068:	6861      	ldr	r1, [r4, #4]
 801c06a:	4602      	mov	r2, r0
 801c06c:	4633      	mov	r3, r6
 801c06e:	6820      	ldr	r0, [r4, #0]
 801c070:	c303      	stmia	r3!, {r0, r1}
 801c072:	4611      	mov	r1, r2
 801c074:	4630      	mov	r0, r6
 801c076:	f7f9 fe4d 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801c07a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	f77f af33 	ble.w	801beea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c084:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	f77f af2e 	ble.w	801beea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c08e:	4628      	mov	r0, r5
 801c090:	f7ff fe9c 	bl	801bdcc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c094:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c098:	1a18      	subs	r0, r3, r0
 801c09a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c09e:	4628      	mov	r0, r5
 801c0a0:	f7ff fea8 	bl	801bdf4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c0a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c0a8:	4631      	mov	r1, r6
 801c0aa:	1a18      	subs	r0, r3, r0
 801c0ac:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c0b0:	4628      	mov	r0, r5
 801c0b2:	682b      	ldr	r3, [r5, #0]
 801c0b4:	689b      	ldr	r3, [r3, #8]
 801c0b6:	4798      	blx	r3
 801c0b8:	e717      	b.n	801beea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c0ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c0ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c0bc:	2300      	movs	r3, #0
 801c0be:	aa02      	add	r2, sp, #8
 801c0c0:	4604      	mov	r4, r0
 801c0c2:	3004      	adds	r0, #4
 801c0c4:	f842 3d04 	str.w	r3, [r2, #-4]!
 801c0c8:	460d      	mov	r5, r1
 801c0ca:	f7f9 fefb 	bl	8015ec4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c0ce:	9a01      	ldr	r2, [sp, #4]
 801c0d0:	b11a      	cbz	r2, 801c0da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801c0d2:	4629      	mov	r1, r5
 801c0d4:	4620      	mov	r0, r4
 801c0d6:	f7ff feef 	bl	801beb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c0da:	b003      	add	sp, #12
 801c0dc:	bd30      	pop	{r4, r5, pc}

0801c0de <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c0de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c0e0:	4602      	mov	r2, r0
 801c0e2:	4604      	mov	r4, r0
 801c0e4:	460d      	mov	r5, r1
 801c0e6:	466b      	mov	r3, sp
 801c0e8:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c0ec:	6851      	ldr	r1, [r2, #4]
 801c0ee:	c303      	stmia	r3!, {r0, r1}
 801c0f0:	4629      	mov	r1, r5
 801c0f2:	4668      	mov	r0, sp
 801c0f4:	f7f9 fe0e 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801c0f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c0fc:	4669      	mov	r1, sp
 801c0fe:	b123      	cbz	r3, 801c10a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801c100:	4620      	mov	r0, r4
 801c102:	f7ff ffda 	bl	801c0ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c106:	b003      	add	sp, #12
 801c108:	bd30      	pop	{r4, r5, pc}
 801c10a:	1d20      	adds	r0, r4, #4
 801c10c:	f7f9 fea1 	bl	8015e52 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c110:	e7f9      	b.n	801c106 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801c112 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c112:	460b      	mov	r3, r1
 801c114:	680a      	ldr	r2, [r1, #0]
 801c116:	1d01      	adds	r1, r0, #4
 801c118:	6992      	ldr	r2, [r2, #24]
 801c11a:	4618      	mov	r0, r3
 801c11c:	4710      	bx	r2

0801c11e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801c11e:	b510      	push	{r4, lr}
 801c120:	4298      	cmp	r0, r3
 801c122:	eb01 0402 	add.w	r4, r1, r2
 801c126:	b224      	sxth	r4, r4
 801c128:	d226      	bcs.n	801c178 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801c12a:	b32b      	cbz	r3, 801c178 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801c12c:	ee07 2a90 	vmov	s15, r2
 801c130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c134:	ee07 0a90 	vmov	s15, r0
 801c138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c13c:	ee07 3a90 	vmov	s15, r3
 801c140:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c144:	ee07 1a90 	vmov	s15, r1
 801c148:	ee67 6a26 	vmul.f32	s13, s14, s13
 801c14c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c150:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801c154:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c158:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c15c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c164:	bfcc      	ite	gt
 801c166:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c16a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c16e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c172:	ee17 3a90 	vmov	r3, s15
 801c176:	b21c      	sxth	r4, r3
 801c178:	4620      	mov	r0, r4
 801c17a:	bd10      	pop	{r4, pc}

0801c17c <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 801c17c:	f7ff bfcf 	b.w	801c11e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

0801c180 <_ZN8touchgfx12TextProviderC1Ev>:
 801c180:	2300      	movs	r3, #0
 801c182:	2201      	movs	r2, #1
 801c184:	b510      	push	{r4, lr}
 801c186:	4604      	mov	r4, r0
 801c188:	60c3      	str	r3, [r0, #12]
 801c18a:	7403      	strb	r3, [r0, #16]
 801c18c:	82c3      	strh	r3, [r0, #22]
 801c18e:	8303      	strh	r3, [r0, #24]
 801c190:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c192:	8603      	strh	r3, [r0, #48]	; 0x30
 801c194:	86c3      	strh	r3, [r0, #54]	; 0x36
 801c196:	8703      	strh	r3, [r0, #56]	; 0x38
 801c198:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c19a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c19e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c1a2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801c1a6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801c1aa:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801c1ae:	e9c0 3300 	strd	r3, r3, [r0]
 801c1b2:	f7f6 fdc5 	bl	8012d40 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c1b6:	4620      	mov	r0, r4
 801c1b8:	bd10      	pop	{r4, pc}

0801c1ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c1ba:	b530      	push	{r4, r5, lr}
 801c1bc:	2500      	movs	r5, #0
 801c1be:	2401      	movs	r4, #1
 801c1c0:	6843      	ldr	r3, [r0, #4]
 801c1c2:	b913      	cbnz	r3, 801c1ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c1c4:	6803      	ldr	r3, [r0, #0]
 801c1c6:	b1f3      	cbz	r3, 801c206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c1c8:	6043      	str	r3, [r0, #4]
 801c1ca:	7c03      	ldrb	r3, [r0, #16]
 801c1cc:	b143      	cbz	r3, 801c1e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c1ce:	68c3      	ldr	r3, [r0, #12]
 801c1d0:	b12b      	cbz	r3, 801c1de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c1d2:	881a      	ldrh	r2, [r3, #0]
 801c1d4:	b11a      	cbz	r2, 801c1de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c1d6:	1c9a      	adds	r2, r3, #2
 801c1d8:	60c2      	str	r2, [r0, #12]
 801c1da:	8818      	ldrh	r0, [r3, #0]
 801c1dc:	bd30      	pop	{r4, r5, pc}
 801c1de:	7405      	strb	r5, [r0, #16]
 801c1e0:	6843      	ldr	r3, [r0, #4]
 801c1e2:	8819      	ldrh	r1, [r3, #0]
 801c1e4:	b179      	cbz	r1, 801c206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c1e6:	1c9a      	adds	r2, r3, #2
 801c1e8:	2902      	cmp	r1, #2
 801c1ea:	6042      	str	r2, [r0, #4]
 801c1ec:	d1f5      	bne.n	801c1da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c1ee:	6883      	ldr	r3, [r0, #8]
 801c1f0:	1d1a      	adds	r2, r3, #4
 801c1f2:	6082      	str	r2, [r0, #8]
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	60c3      	str	r3, [r0, #12]
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d0e1      	beq.n	801c1c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c1fc:	881b      	ldrh	r3, [r3, #0]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d0de      	beq.n	801c1c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c202:	7404      	strb	r4, [r0, #16]
 801c204:	e7dc      	b.n	801c1c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c206:	2000      	movs	r0, #0
 801c208:	e7e8      	b.n	801c1dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c20a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801c20a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c20c:	2300      	movs	r3, #0
 801c20e:	6082      	str	r2, [r0, #8]
 801c210:	6001      	str	r1, [r0, #0]
 801c212:	6043      	str	r3, [r0, #4]
 801c214:	60c3      	str	r3, [r0, #12]
 801c216:	7403      	strb	r3, [r0, #16]
 801c218:	8603      	strh	r3, [r0, #48]	; 0x30
 801c21a:	8303      	strh	r3, [r0, #24]
 801c21c:	8703      	strh	r3, [r0, #56]	; 0x38
 801c21e:	b410      	push	{r4}
 801c220:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c224:	f7f6 bd8c 	b.w	8012d40 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c228 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c22a:	4605      	mov	r5, r0
 801c22c:	4608      	mov	r0, r1
 801c22e:	b1f1      	cbz	r1, 801c26e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c230:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801c234:	460b      	mov	r3, r1
 801c236:	f101 0708 	add.w	r7, r1, #8
 801c23a:	4622      	mov	r2, r4
 801c23c:	6818      	ldr	r0, [r3, #0]
 801c23e:	3308      	adds	r3, #8
 801c240:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c244:	4626      	mov	r6, r4
 801c246:	42bb      	cmp	r3, r7
 801c248:	c603      	stmia	r6!, {r0, r1}
 801c24a:	4634      	mov	r4, r6
 801c24c:	d1f6      	bne.n	801c23c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c24e:	6818      	ldr	r0, [r3, #0]
 801c250:	6030      	str	r0, [r6, #0]
 801c252:	4610      	mov	r0, r2
 801c254:	889b      	ldrh	r3, [r3, #4]
 801c256:	80b3      	strh	r3, [r6, #4]
 801c258:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801c25c:	015b      	lsls	r3, r3, #5
 801c25e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c262:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801c266:	430b      	orrs	r3, r1
 801c268:	425b      	negs	r3, r3
 801c26a:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801c26e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c270 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c270:	b538      	push	{r3, r4, r5, lr}
 801c272:	460c      	mov	r4, r1
 801c274:	6811      	ldr	r1, [r2, #0]
 801c276:	4610      	mov	r0, r2
 801c278:	68cd      	ldr	r5, [r1, #12]
 801c27a:	4619      	mov	r1, r3
 801c27c:	47a8      	blx	r5
 801c27e:	2800      	cmp	r0, #0
 801c280:	bf08      	it	eq
 801c282:	4620      	moveq	r0, r4
 801c284:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c288 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c28a:	4604      	mov	r4, r0
 801c28c:	4615      	mov	r5, r2
 801c28e:	4608      	mov	r0, r1
 801c290:	b93a      	cbnz	r2, 801c2a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c292:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c296:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801c29a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c29e:	4628      	mov	r0, r5
 801c2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2a2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c2a6:	8893      	ldrh	r3, [r2, #4]
 801c2a8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c2ac:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c2b0:	79ee      	ldrb	r6, [r5, #7]
 801c2b2:	4316      	orrs	r6, r2
 801c2b4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801c2b8:	189a      	adds	r2, r3, r2
 801c2ba:	b2b7      	uxth	r7, r6
 801c2bc:	b291      	uxth	r1, r2
 801c2be:	291d      	cmp	r1, #29
 801c2c0:	f200 8084 	bhi.w	801c3cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c2c4:	2201      	movs	r2, #1
 801c2c6:	10f6      	asrs	r6, r6, #3
 801c2c8:	408a      	lsls	r2, r1
 801c2ca:	4978      	ldr	r1, [pc, #480]	; (801c4ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801c2cc:	420a      	tst	r2, r1
 801c2ce:	d12e      	bne.n	801c32e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c2d0:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c2d4:	d07a      	beq.n	801c3cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c2d6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801c2da:	462b      	mov	r3, r5
 801c2dc:	f105 0e08 	add.w	lr, r5, #8
 801c2e0:	4615      	mov	r5, r2
 801c2e2:	6818      	ldr	r0, [r3, #0]
 801c2e4:	3308      	adds	r3, #8
 801c2e6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c2ea:	4694      	mov	ip, r2
 801c2ec:	4573      	cmp	r3, lr
 801c2ee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c2f2:	4662      	mov	r2, ip
 801c2f4:	d1f5      	bne.n	801c2e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801c2f6:	6818      	ldr	r0, [r3, #0]
 801c2f8:	f8cc 0000 	str.w	r0, [ip]
 801c2fc:	889b      	ldrh	r3, [r3, #4]
 801c2fe:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c302:	b2b3      	uxth	r3, r6
 801c304:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801c308:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801c30c:	1aca      	subs	r2, r1, r3
 801c30e:	1bcf      	subs	r7, r1, r7
 801c310:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c314:	b292      	uxth	r2, r2
 801c316:	1afb      	subs	r3, r7, r3
 801c318:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801c31c:	10d2      	asrs	r2, r2, #3
 801c31e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c322:	4302      	orrs	r2, r0
 801c324:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801c328:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801c32c:	e7b7      	b.n	801c29e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c32e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c330:	b92b      	cbnz	r3, 801c33e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801c332:	4b5f      	ldr	r3, [pc, #380]	; (801c4b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801c334:	21c0      	movs	r1, #192	; 0xc0
 801c336:	4a5f      	ldr	r2, [pc, #380]	; (801c4b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801c338:	485f      	ldr	r0, [pc, #380]	; (801c4b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801c33a:	f00b fe01 	bl	8027f40 <__assert_func>
 801c33e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c340:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c344:	8b59      	ldrh	r1, [r3, #26]
 801c346:	f640 6333 	movw	r3, #3635	; 0xe33
 801c34a:	4299      	cmp	r1, r3
 801c34c:	d110      	bne.n	801c370 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801c34e:	6803      	ldr	r3, [r0, #0]
 801c350:	68db      	ldr	r3, [r3, #12]
 801c352:	4798      	blx	r3
 801c354:	7b41      	ldrb	r1, [r0, #13]
 801c356:	00cb      	lsls	r3, r1, #3
 801c358:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c35c:	7a03      	ldrb	r3, [r0, #8]
 801c35e:	0648      	lsls	r0, r1, #25
 801c360:	ea43 0302 	orr.w	r3, r3, r2
 801c364:	bf44      	itt	mi
 801c366:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c36a:	b21b      	sxthmi	r3, r3
 801c36c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c370:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801c374:	462a      	mov	r2, r5
 801c376:	f105 0c08 	add.w	ip, r5, #8
 801c37a:	443b      	add	r3, r7
 801c37c:	4433      	add	r3, r6
 801c37e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801c382:	b29b      	uxth	r3, r3
 801c384:	4635      	mov	r5, r6
 801c386:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c38a:	6810      	ldr	r0, [r2, #0]
 801c38c:	3208      	adds	r2, #8
 801c38e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c392:	4637      	mov	r7, r6
 801c394:	4562      	cmp	r2, ip
 801c396:	c703      	stmia	r7!, {r0, r1}
 801c398:	463e      	mov	r6, r7
 801c39a:	d1f6      	bne.n	801c38a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c39c:	6810      	ldr	r0, [r2, #0]
 801c39e:	6038      	str	r0, [r7, #0]
 801c3a0:	8892      	ldrh	r2, [r2, #4]
 801c3a2:	80ba      	strh	r2, [r7, #4]
 801c3a4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c3a8:	10db      	asrs	r3, r3, #3
 801c3aa:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c3ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c3b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c3b6:	4313      	orrs	r3, r2
 801c3b8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801c3bc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c3c0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801c3c4:	1a9b      	subs	r3, r3, r2
 801c3c6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801c3ca:	e768      	b.n	801c29e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c3cc:	f023 0204 	bic.w	r2, r3, #4
 801c3d0:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c3d4:	428a      	cmp	r2, r1
 801c3d6:	d003      	beq.n	801c3e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801c3d8:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c3dc:	4293      	cmp	r3, r2
 801c3de:	d120      	bne.n	801c422 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801c3e0:	3b01      	subs	r3, #1
 801c3e2:	4602      	mov	r2, r0
 801c3e4:	4629      	mov	r1, r5
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	b29b      	uxth	r3, r3
 801c3ea:	f7ff ff41 	bl	801c270 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c3ee:	7b41      	ldrb	r1, [r0, #13]
 801c3f0:	00cb      	lsls	r3, r1, #3
 801c3f2:	0649      	lsls	r1, r1, #25
 801c3f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c3f8:	7a03      	ldrb	r3, [r0, #8]
 801c3fa:	ea43 0302 	orr.w	r3, r3, r2
 801c3fe:	bf44      	itt	mi
 801c400:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c404:	b21b      	sxthmi	r3, r3
 801c406:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c40a:	7b6b      	ldrb	r3, [r5, #13]
 801c40c:	7aaa      	ldrb	r2, [r5, #10]
 801c40e:	005b      	lsls	r3, r3, #1
 801c410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c414:	4313      	orrs	r3, r2
 801c416:	115a      	asrs	r2, r3, #5
 801c418:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c41c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c420:	e035      	b.n	801c48e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c422:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c426:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c42a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c42e:	7a2a      	ldrb	r2, [r5, #8]
 801c430:	ea42 0201 	orr.w	r2, r2, r1
 801c434:	f640 6109 	movw	r1, #3593	; 0xe09
 801c438:	bf1c      	itt	ne
 801c43a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c43e:	b212      	sxthne	r2, r2
 801c440:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c444:	f023 0210 	bic.w	r2, r3, #16
 801c448:	428a      	cmp	r2, r1
 801c44a:	d003      	beq.n	801c454 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801c44c:	f640 6213 	movw	r2, #3603	; 0xe13
 801c450:	4293      	cmp	r3, r2
 801c452:	d129      	bne.n	801c4a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c454:	7b6e      	ldrb	r6, [r5, #13]
 801c456:	4629      	mov	r1, r5
 801c458:	0076      	lsls	r6, r6, #1
 801c45a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c45e:	7aae      	ldrb	r6, [r5, #10]
 801c460:	4316      	orrs	r6, r2
 801c462:	f640 6213 	movw	r2, #3603	; 0xe13
 801c466:	4293      	cmp	r3, r2
 801c468:	4602      	mov	r2, r0
 801c46a:	4620      	mov	r0, r4
 801c46c:	bf16      	itet	ne
 801c46e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c472:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c476:	b29b      	uxthne	r3, r3
 801c478:	f7ff fefa 	bl	801c270 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c47c:	7b43      	ldrb	r3, [r0, #13]
 801c47e:	7a82      	ldrb	r2, [r0, #10]
 801c480:	005b      	lsls	r3, r3, #1
 801c482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c486:	4313      	orrs	r3, r2
 801c488:	1af6      	subs	r6, r6, r3
 801c48a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801c48e:	7b69      	ldrb	r1, [r5, #13]
 801c490:	00cb      	lsls	r3, r1, #3
 801c492:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c496:	7a2b      	ldrb	r3, [r5, #8]
 801c498:	4313      	orrs	r3, r2
 801c49a:	064a      	lsls	r2, r1, #25
 801c49c:	bf44      	itt	mi
 801c49e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c4a2:	b21b      	sxthmi	r3, r3
 801c4a4:	1bdb      	subs	r3, r3, r7
 801c4a6:	e73f      	b.n	801c328 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	e7b7      	b.n	801c41c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801c4ac:	3fc00079 	.word	0x3fc00079
 801c4b0:	0802bf90 	.word	0x0802bf90
 801c4b4:	0802c202 	.word	0x0802c202
 801c4b8:	0802bf99 	.word	0x0802bf99

0801c4bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c4c0:	4604      	mov	r4, r0
 801c4c2:	b942      	cbnz	r2, 801c4d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c4c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c4c8:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c4cc:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c4d0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c4d4:	e046      	b.n	801c564 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c4d6:	7b51      	ldrb	r1, [r2, #13]
 801c4d8:	8893      	ldrh	r3, [r2, #4]
 801c4da:	010f      	lsls	r7, r1, #4
 801c4dc:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c4e0:	79d7      	ldrb	r7, [r2, #7]
 801c4e2:	4307      	orrs	r7, r0
 801c4e4:	2f04      	cmp	r7, #4
 801c4e6:	b2bd      	uxth	r5, r7
 801c4e8:	bfcc      	ite	gt
 801c4ea:	08bf      	lsrgt	r7, r7, #2
 801c4ec:	2701      	movle	r7, #1
 801c4ee:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c4f2:	f200 80ab 	bhi.w	801c64c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c4f6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c4fa:	4283      	cmp	r3, r0
 801c4fc:	d216      	bcs.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c4fe:	f240 605b 	movw	r0, #1627	; 0x65b
 801c502:	4283      	cmp	r3, r0
 801c504:	d859      	bhi.n	801c5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c506:	f240 6057 	movw	r0, #1623	; 0x657
 801c50a:	4283      	cmp	r3, r0
 801c50c:	d20e      	bcs.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c50e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c512:	d24a      	bcs.n	801c5aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c514:	f240 604e 	movw	r0, #1614	; 0x64e
 801c518:	4283      	cmp	r3, r0
 801c51a:	d207      	bcs.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c51c:	f240 601a 	movw	r0, #1562	; 0x61a
 801c520:	4283      	cmp	r3, r0
 801c522:	d02a      	beq.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c524:	d821      	bhi.n	801c56a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c526:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c52a:	d35b      	bcc.n	801c5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c52c:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801c530:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c534:	f040 80d0 	bne.w	801c6d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c538:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801c53c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c540:	f040 80ca 	bne.w	801c6d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c544:	00cb      	lsls	r3, r1, #3
 801c546:	0649      	lsls	r1, r1, #25
 801c548:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c54c:	7a13      	ldrb	r3, [r2, #8]
 801c54e:	ea43 0300 	orr.w	r3, r3, r0
 801c552:	bf44      	itt	mi
 801c554:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c558:	b21b      	sxthmi	r3, r3
 801c55a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c55e:	1b5d      	subs	r5, r3, r5
 801c560:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c564:	4610      	mov	r0, r2
 801c566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c56a:	f240 604b 	movw	r0, #1611	; 0x64b
 801c56e:	4283      	cmp	r3, r0
 801c570:	d338      	bcc.n	801c5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c572:	f240 604c 	movw	r0, #1612	; 0x64c
 801c576:	4283      	cmp	r3, r0
 801c578:	d9d8      	bls.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c57a:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801c57e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801c582:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c586:	f040 80f2 	bne.w	801c76e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c58a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c58e:	f040 80ee 	bne.w	801c76e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c592:	00cb      	lsls	r3, r1, #3
 801c594:	064e      	lsls	r6, r1, #25
 801c596:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c59a:	7a13      	ldrb	r3, [r2, #8]
 801c59c:	ea43 0300 	orr.w	r3, r3, r0
 801c5a0:	bf44      	itt	mi
 801c5a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c5a6:	b21b      	sxthmi	r3, r3
 801c5a8:	e7d9      	b.n	801c55e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801c5aa:	f240 6054 	movw	r0, #1620	; 0x654
 801c5ae:	4283      	cmp	r3, r0
 801c5b0:	d8e3      	bhi.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c5b2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c5b6:	d9e0      	bls.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c5b8:	e7b8      	b.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c5ba:	f240 6074 	movw	r0, #1652	; 0x674
 801c5be:	4283      	cmp	r3, r0
 801c5c0:	d0b4      	beq.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c5c2:	d82d      	bhi.n	801c620 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801c5c4:	f240 605e 	movw	r0, #1630	; 0x65e
 801c5c8:	4283      	cmp	r3, r0
 801c5ca:	d804      	bhi.n	801c5d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801c5cc:	f240 605d 	movw	r0, #1629	; 0x65d
 801c5d0:	4283      	cmp	r3, r0
 801c5d2:	d3d2      	bcc.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c5d4:	e7aa      	b.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c5d6:	f240 605f 	movw	r0, #1631	; 0x65f
 801c5da:	4283      	cmp	r3, r0
 801c5dc:	d0cd      	beq.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c5de:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c5e2:	d0a3      	beq.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c5e4:	00cb      	lsls	r3, r1, #3
 801c5e6:	0649      	lsls	r1, r1, #25
 801c5e8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c5ec:	7a13      	ldrb	r3, [r2, #8]
 801c5ee:	ea43 0300 	orr.w	r3, r3, r0
 801c5f2:	bf44      	itt	mi
 801c5f4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c5f8:	b21b      	sxthmi	r3, r3
 801c5fa:	1b5d      	subs	r5, r3, r5
 801c5fc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c600:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c604:	7b53      	ldrb	r3, [r2, #13]
 801c606:	015b      	lsls	r3, r3, #5
 801c608:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c60c:	7993      	ldrb	r3, [r2, #6]
 801c60e:	430b      	orrs	r3, r1
 801c610:	2105      	movs	r1, #5
 801c612:	005b      	lsls	r3, r3, #1
 801c614:	fb93 f3f1 	sdiv	r3, r3, r1
 801c618:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c61c:	440b      	add	r3, r1
 801c61e:	e757      	b.n	801c4d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c620:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c624:	4283      	cmp	r3, r0
 801c626:	d809      	bhi.n	801c63c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801c628:	f240 60df 	movw	r0, #1759	; 0x6df
 801c62c:	4283      	cmp	r3, r0
 801c62e:	f4bf af7d 	bcs.w	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c632:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c636:	2b05      	cmp	r3, #5
 801c638:	d8d4      	bhi.n	801c5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c63a:	e777      	b.n	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c63c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c640:	4283      	cmp	r3, r0
 801c642:	d09a      	beq.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c644:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801c648:	4283      	cmp	r3, r0
 801c64a:	e7ca      	b.n	801c5e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801c64c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801c650:	d22b      	bcs.n	801c6aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801c652:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801c656:	4283      	cmp	r3, r0
 801c658:	d28f      	bcs.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c65a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c65e:	4283      	cmp	r3, r0
 801c660:	d816      	bhi.n	801c690 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801c662:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801c666:	4283      	cmp	r3, r0
 801c668:	f4bf af60 	bcs.w	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c66c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801c670:	4283      	cmp	r3, r0
 801c672:	d80a      	bhi.n	801c68a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801c674:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801c678:	4283      	cmp	r3, r0
 801c67a:	f4bf af57 	bcs.w	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c67e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801c682:	4283      	cmp	r3, r0
 801c684:	f43f af79 	beq.w	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c688:	e7ac      	b.n	801c5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c68a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801c68e:	e7f8      	b.n	801c682 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801c690:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801c694:	4283      	cmp	r3, r0
 801c696:	d802      	bhi.n	801c69e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801c698:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c69c:	e798      	b.n	801c5d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801c69e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801c6a2:	4283      	cmp	r3, r0
 801c6a4:	f47f af42 	bne.w	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c6a8:	e767      	b.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c6aa:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801c6ae:	4283      	cmp	r3, r0
 801c6b0:	f43f af63 	beq.w	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c6b4:	d802      	bhi.n	801c6bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801c6b6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801c6ba:	e7f2      	b.n	801c6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801c6bc:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801c6c0:	4283      	cmp	r3, r0
 801c6c2:	d805      	bhi.n	801c6d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801c6c4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801c6c8:	4283      	cmp	r3, r0
 801c6ca:	f4ff af2f 	bcc.w	801c52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c6ce:	e754      	b.n	801c57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c6d0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801c6d4:	4283      	cmp	r3, r0
 801c6d6:	e7af      	b.n	801c638 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801c6d8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801c6dc:	4617      	mov	r7, r2
 801c6de:	f102 0808 	add.w	r8, r2, #8
 801c6e2:	4666      	mov	r6, ip
 801c6e4:	6838      	ldr	r0, [r7, #0]
 801c6e6:	3708      	adds	r7, #8
 801c6e8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c6ec:	46e6      	mov	lr, ip
 801c6ee:	4547      	cmp	r7, r8
 801c6f0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c6f4:	46f4      	mov	ip, lr
 801c6f6:	d1f5      	bne.n	801c6e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801c6f8:	6838      	ldr	r0, [r7, #0]
 801c6fa:	f8ce 0000 	str.w	r0, [lr]
 801c6fe:	88b9      	ldrh	r1, [r7, #4]
 801c700:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c704:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c708:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c70c:	d009      	beq.n	801c722 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c70e:	7b51      	ldrb	r1, [r2, #13]
 801c710:	7992      	ldrb	r2, [r2, #6]
 801c712:	0149      	lsls	r1, r1, #5
 801c714:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c718:	4311      	orrs	r1, r2
 801c71a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c71e:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c722:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c726:	d00d      	beq.n	801c744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801c728:	442b      	add	r3, r5
 801c72a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c72e:	b29b      	uxth	r3, r3
 801c730:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c734:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c738:	10db      	asrs	r3, r3, #3
 801c73a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c73e:	4313      	orrs	r3, r2
 801c740:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c744:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c748:	00cb      	lsls	r3, r1, #3
 801c74a:	064f      	lsls	r7, r1, #25
 801c74c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c750:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c754:	ea43 0302 	orr.w	r3, r3, r2
 801c758:	bf44      	itt	mi
 801c75a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c75e:	b21b      	sxthmi	r3, r3
 801c760:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c764:	1b5d      	subs	r5, r3, r5
 801c766:	4632      	mov	r2, r6
 801c768:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c76c:	e6fa      	b.n	801c564 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c76e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801c772:	4694      	mov	ip, r2
 801c774:	f102 0908 	add.w	r9, r2, #8
 801c778:	4676      	mov	r6, lr
 801c77a:	f8dc 0000 	ldr.w	r0, [ip]
 801c77e:	f10c 0c08 	add.w	ip, ip, #8
 801c782:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801c786:	46f0      	mov	r8, lr
 801c788:	45cc      	cmp	ip, r9
 801c78a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c78e:	46c6      	mov	lr, r8
 801c790:	d1f3      	bne.n	801c77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801c792:	f8dc 0000 	ldr.w	r0, [ip]
 801c796:	f8c8 0000 	str.w	r0, [r8]
 801c79a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801c79e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c7a2:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c7a6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c7aa:	d009      	beq.n	801c7c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801c7ac:	7b51      	ldrb	r1, [r2, #13]
 801c7ae:	7992      	ldrb	r2, [r2, #6]
 801c7b0:	0149      	lsls	r1, r1, #5
 801c7b2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c7b6:	4311      	orrs	r1, r2
 801c7b8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c7bc:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c7c0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c7c4:	d00d      	beq.n	801c7e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801c7c6:	1bdb      	subs	r3, r3, r7
 801c7c8:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c7cc:	b29b      	uxth	r3, r3
 801c7ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c7d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c7d6:	10db      	asrs	r3, r3, #3
 801c7d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c7dc:	4313      	orrs	r3, r2
 801c7de:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c7e2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c7e6:	00cb      	lsls	r3, r1, #3
 801c7e8:	0648      	lsls	r0, r1, #25
 801c7ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c7ee:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c7f2:	ea43 0302 	orr.w	r3, r3, r2
 801c7f6:	bf44      	itt	mi
 801c7f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c7fc:	b21b      	sxthmi	r3, r3
 801c7fe:	e7b1      	b.n	801c764 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801c800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c804:	461e      	mov	r6, r3
 801c806:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c808:	4604      	mov	r4, r0
 801c80a:	4617      	mov	r7, r2
 801c80c:	b92b      	cbnz	r3, 801c81a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801c80e:	4b25      	ldr	r3, [pc, #148]	; (801c8a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801c810:	21c0      	movs	r1, #192	; 0xc0
 801c812:	4a25      	ldr	r2, [pc, #148]	; (801c8a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801c814:	4825      	ldr	r0, [pc, #148]	; (801c8ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801c816:	f00b fb93 	bl	8027f40 <__assert_func>
 801c81a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c81c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c820:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c824:	f7f6 f9e6 	bl	8012bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c828:	4605      	mov	r5, r0
 801c82a:	b918      	cbnz	r0, 801c834 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801c82c:	6030      	str	r0, [r6, #0]
 801c82e:	4628      	mov	r0, r5
 801c830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c834:	683b      	ldr	r3, [r7, #0]
 801c836:	4601      	mov	r1, r0
 801c838:	4638      	mov	r0, r7
 801c83a:	68db      	ldr	r3, [r3, #12]
 801c83c:	4798      	blx	r3
 801c83e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c842:	4602      	mov	r2, r0
 801c844:	6030      	str	r0, [r6, #0]
 801c846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c84a:	d213      	bcs.n	801c874 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801c84c:	4643      	mov	r3, r8
 801c84e:	4639      	mov	r1, r7
 801c850:	4620      	mov	r0, r4
 801c852:	f7ff fe33 	bl	801c4bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c856:	6030      	str	r0, [r6, #0]
 801c858:	6833      	ldr	r3, [r6, #0]
 801c85a:	b143      	cbz	r3, 801c86e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801c85c:	7b5a      	ldrb	r2, [r3, #13]
 801c85e:	7a9b      	ldrb	r3, [r3, #10]
 801c860:	0052      	lsls	r2, r2, #1
 801c862:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c866:	4313      	orrs	r3, r2
 801c868:	bf0c      	ite	eq
 801c86a:	2301      	moveq	r3, #1
 801c86c:	2300      	movne	r3, #0
 801c86e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c872:	e7dc      	b.n	801c82e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801c874:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c878:	b29b      	uxth	r3, r3
 801c87a:	2b7f      	cmp	r3, #127	; 0x7f
 801c87c:	d804      	bhi.n	801c888 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801c87e:	4639      	mov	r1, r7
 801c880:	4620      	mov	r0, r4
 801c882:	f7ff fd01 	bl	801c288 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c886:	e7e6      	b.n	801c856 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c888:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d0e3      	beq.n	801c858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c890:	f640 1302 	movw	r3, #2306	; 0x902
 801c894:	429d      	cmp	r5, r3
 801c896:	d1df      	bne.n	801c858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c898:	4601      	mov	r1, r0
 801c89a:	4620      	mov	r0, r4
 801c89c:	f7ff fcc4 	bl	801c228 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c8a0:	e7d9      	b.n	801c856 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c8a2:	bf00      	nop
 801c8a4:	0802bf90 	.word	0x0802bf90
 801c8a8:	0802c202 	.word	0x0802c202
 801c8ac:	0802bf99 	.word	0x0802bf99

0801c8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c8b4:	461e      	mov	r6, r3
 801c8b6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c8b8:	4604      	mov	r4, r0
 801c8ba:	4617      	mov	r7, r2
 801c8bc:	b92b      	cbnz	r3, 801c8ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801c8be:	4b26      	ldr	r3, [pc, #152]	; (801c958 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801c8c0:	21c0      	movs	r1, #192	; 0xc0
 801c8c2:	4a26      	ldr	r2, [pc, #152]	; (801c95c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801c8c4:	4826      	ldr	r0, [pc, #152]	; (801c960 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801c8c6:	f00b fb3b 	bl	8027f40 <__assert_func>
 801c8ca:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c8cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c8d0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c8d4:	f7f6 f98e 	bl	8012bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c8d8:	4605      	mov	r5, r0
 801c8da:	b918      	cbnz	r0, 801c8e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801c8dc:	6030      	str	r0, [r6, #0]
 801c8de:	4628      	mov	r0, r5
 801c8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c8e4:	683b      	ldr	r3, [r7, #0]
 801c8e6:	4601      	mov	r1, r0
 801c8e8:	4638      	mov	r0, r7
 801c8ea:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c8ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c8f2:	47c8      	blx	r9
 801c8f4:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c8f8:	4602      	mov	r2, r0
 801c8fa:	6030      	str	r0, [r6, #0]
 801c8fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c900:	d213      	bcs.n	801c92a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801c902:	4643      	mov	r3, r8
 801c904:	4639      	mov	r1, r7
 801c906:	4620      	mov	r0, r4
 801c908:	f7ff fdd8 	bl	801c4bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c90c:	6030      	str	r0, [r6, #0]
 801c90e:	6833      	ldr	r3, [r6, #0]
 801c910:	b143      	cbz	r3, 801c924 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801c912:	7b5a      	ldrb	r2, [r3, #13]
 801c914:	7a9b      	ldrb	r3, [r3, #10]
 801c916:	0052      	lsls	r2, r2, #1
 801c918:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c91c:	4313      	orrs	r3, r2
 801c91e:	bf0c      	ite	eq
 801c920:	2301      	moveq	r3, #1
 801c922:	2300      	movne	r3, #0
 801c924:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c928:	e7d9      	b.n	801c8de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801c92a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c92e:	b29b      	uxth	r3, r3
 801c930:	2b7f      	cmp	r3, #127	; 0x7f
 801c932:	d804      	bhi.n	801c93e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801c934:	4639      	mov	r1, r7
 801c936:	4620      	mov	r0, r4
 801c938:	f7ff fca6 	bl	801c288 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c93c:	e7e6      	b.n	801c90c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c93e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c942:	2b00      	cmp	r3, #0
 801c944:	d0e3      	beq.n	801c90e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c946:	f640 1302 	movw	r3, #2306	; 0x902
 801c94a:	429d      	cmp	r5, r3
 801c94c:	d1df      	bne.n	801c90e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c94e:	4601      	mov	r1, r0
 801c950:	4620      	mov	r0, r4
 801c952:	f7ff fc69 	bl	801c228 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c956:	e7d9      	b.n	801c90c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c958:	0802bf90 	.word	0x0802bf90
 801c95c:	0802c202 	.word	0x0802c202
 801c960:	0802bf99 	.word	0x0802bf99

0801c964 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c964:	b510      	push	{r4, lr}
 801c966:	4604      	mov	r4, r0
 801c968:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801c96a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c96c:	b9d9      	cbnz	r1, 801c9a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801c96e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c970:	2b0a      	cmp	r3, #10
 801c972:	d036      	beq.n	801c9e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c974:	4620      	mov	r0, r4
 801c976:	f7ff fc20 	bl	801c1ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c97a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c97c:	2b09      	cmp	r3, #9
 801c97e:	d906      	bls.n	801c98e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801c980:	4b18      	ldr	r3, [pc, #96]	; (801c9e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801c982:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c986:	4a18      	ldr	r2, [pc, #96]	; (801c9e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801c988:	4818      	ldr	r0, [pc, #96]	; (801c9ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801c98a:	f00b fad9 	bl	8027f40 <__assert_func>
 801c98e:	1c5a      	adds	r2, r3, #1
 801c990:	8622      	strh	r2, [r4, #48]	; 0x30
 801c992:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c994:	4413      	add	r3, r2
 801c996:	b29b      	uxth	r3, r3
 801c998:	2b09      	cmp	r3, #9
 801c99a:	bf88      	it	hi
 801c99c:	3b0a      	subhi	r3, #10
 801c99e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c9a2:	8358      	strh	r0, [r3, #26]
 801c9a4:	e7e3      	b.n	801c96e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801c9a6:	2b0a      	cmp	r3, #10
 801c9a8:	d01b      	beq.n	801c9e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c9aa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c9ac:	3901      	subs	r1, #1
 801c9ae:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c9b2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801c9b4:	8721      	strh	r1, [r4, #56]	; 0x38
 801c9b6:	1c51      	adds	r1, r2, #1
 801c9b8:	b289      	uxth	r1, r1
 801c9ba:	2901      	cmp	r1, #1
 801c9bc:	bf8a      	itet	hi
 801c9be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c9c2:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801c9c4:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801c9c6:	2b09      	cmp	r3, #9
 801c9c8:	d8da      	bhi.n	801c980 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801c9ca:	1c5a      	adds	r2, r3, #1
 801c9cc:	8622      	strh	r2, [r4, #48]	; 0x30
 801c9ce:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c9d0:	4413      	add	r3, r2
 801c9d2:	b29b      	uxth	r3, r3
 801c9d4:	2b09      	cmp	r3, #9
 801c9d6:	bf88      	it	hi
 801c9d8:	3b0a      	subhi	r3, #10
 801c9da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c9de:	8358      	strh	r0, [r3, #26]
 801c9e0:	e7c2      	b.n	801c968 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c9e2:	bd10      	pop	{r4, pc}
 801c9e4:	0802bfc5 	.word	0x0802bfc5
 801c9e8:	0802c358 	.word	0x0802c358
 801c9ec:	0802bf99 	.word	0x0802bf99

0801c9f0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c9f0:	b538      	push	{r3, r4, r5, lr}
 801c9f2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c9f4:	4604      	mov	r4, r0
 801c9f6:	b92a      	cbnz	r2, 801ca04 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c9f8:	4b13      	ldr	r3, [pc, #76]	; (801ca48 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c9fa:	21d5      	movs	r1, #213	; 0xd5
 801c9fc:	4a13      	ldr	r2, [pc, #76]	; (801ca4c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c9fe:	4814      	ldr	r0, [pc, #80]	; (801ca50 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801ca00:	f00b fa9e 	bl	8027f40 <__assert_func>
 801ca04:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ca06:	3a01      	subs	r2, #1
 801ca08:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ca0c:	8b4d      	ldrh	r5, [r1, #26]
 801ca0e:	8602      	strh	r2, [r0, #48]	; 0x30
 801ca10:	1c5a      	adds	r2, r3, #1
 801ca12:	b292      	uxth	r2, r2
 801ca14:	2a09      	cmp	r2, #9
 801ca16:	bf8a      	itet	hi
 801ca18:	3b09      	subhi	r3, #9
 801ca1a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801ca1c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801ca1e:	f7ff ffa1 	bl	801c964 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ca22:	8b23      	ldrh	r3, [r4, #24]
 801ca24:	2b01      	cmp	r3, #1
 801ca26:	bf9c      	itt	ls
 801ca28:	3301      	addls	r3, #1
 801ca2a:	8323      	strhls	r3, [r4, #24]
 801ca2c:	8ae3      	ldrh	r3, [r4, #22]
 801ca2e:	b90b      	cbnz	r3, 801ca34 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801ca30:	2302      	movs	r3, #2
 801ca32:	82e3      	strh	r3, [r4, #22]
 801ca34:	8ae3      	ldrh	r3, [r4, #22]
 801ca36:	4628      	mov	r0, r5
 801ca38:	3b01      	subs	r3, #1
 801ca3a:	b29b      	uxth	r3, r3
 801ca3c:	82e3      	strh	r3, [r4, #22]
 801ca3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ca42:	8265      	strh	r5, [r4, #18]
 801ca44:	bd38      	pop	{r3, r4, r5, pc}
 801ca46:	bf00      	nop
 801ca48:	0802bf90 	.word	0x0802bf90
 801ca4c:	0802c2ad 	.word	0x0802c2ad
 801ca50:	0802bf99 	.word	0x0802bf99

0801ca54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ca54:	428a      	cmp	r2, r1
 801ca56:	b538      	push	{r3, r4, r5, lr}
 801ca58:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801ca5a:	d90c      	bls.n	801ca76 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801ca5c:	b92c      	cbnz	r4, 801ca6a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801ca5e:	4b1c      	ldr	r3, [pc, #112]	; (801cad0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801ca60:	21e1      	movs	r1, #225	; 0xe1
 801ca62:	4a1c      	ldr	r2, [pc, #112]	; (801cad4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801ca64:	481c      	ldr	r0, [pc, #112]	; (801cad8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801ca66:	f00b fa6b 	bl	8027f40 <__assert_func>
 801ca6a:	3c01      	subs	r4, #1
 801ca6c:	4b1b      	ldr	r3, [pc, #108]	; (801cadc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801ca6e:	4a1c      	ldr	r2, [pc, #112]	; (801cae0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801ca70:	21c5      	movs	r1, #197	; 0xc5
 801ca72:	8604      	strh	r4, [r0, #48]	; 0x30
 801ca74:	e7f6      	b.n	801ca64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ca76:	428c      	cmp	r4, r1
 801ca78:	d203      	bcs.n	801ca82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801ca7a:	4b1a      	ldr	r3, [pc, #104]	; (801cae4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801ca7c:	21cb      	movs	r1, #203	; 0xcb
 801ca7e:	4a1a      	ldr	r2, [pc, #104]	; (801cae8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801ca80:	e7f0      	b.n	801ca64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ca82:	1a64      	subs	r4, r4, r1
 801ca84:	250a      	movs	r5, #10
 801ca86:	8604      	strh	r4, [r0, #48]	; 0x30
 801ca88:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801ca8a:	4421      	add	r1, r4
 801ca8c:	b289      	uxth	r1, r1
 801ca8e:	2909      	cmp	r1, #9
 801ca90:	bf88      	it	hi
 801ca92:	390a      	subhi	r1, #10
 801ca94:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ca96:	b1ba      	cbz	r2, 801cac8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801ca98:	3a01      	subs	r2, #1
 801ca9a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801ca9c:	b292      	uxth	r2, r2
 801ca9e:	2909      	cmp	r1, #9
 801caa0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801caa4:	d903      	bls.n	801caae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801caa6:	4b11      	ldr	r3, [pc, #68]	; (801caec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801caa8:	21e6      	movs	r1, #230	; 0xe6
 801caaa:	4a11      	ldr	r2, [pc, #68]	; (801caf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801caac:	e7da      	b.n	801ca64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801caae:	3101      	adds	r1, #1
 801cab0:	8601      	strh	r1, [r0, #48]	; 0x30
 801cab2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801cab4:	b901      	cbnz	r1, 801cab8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801cab6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801cab8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801caba:	3901      	subs	r1, #1
 801cabc:	b289      	uxth	r1, r1
 801cabe:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801cac0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801cac4:	834c      	strh	r4, [r1, #26]
 801cac6:	e7e6      	b.n	801ca96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801cac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cacc:	f7ff bf4a 	b.w	801c964 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cad0:	0802bf90 	.word	0x0802bf90
 801cad4:	0802c086 	.word	0x0802c086
 801cad8:	0802bf99 	.word	0x0802bf99
 801cadc:	0802bfd1 	.word	0x0802bfd1
 801cae0:	0802c130 	.word	0x0802c130
 801cae4:	0802bfdf 	.word	0x0802bfdf
 801cae8:	0802c407 	.word	0x0802c407
 801caec:	0802bfeb 	.word	0x0802bfeb
 801caf0:	0802bffe 	.word	0x0802bffe

0801caf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801caf4:	3a01      	subs	r2, #1
 801caf6:	b570      	push	{r4, r5, r6, lr}
 801caf8:	b292      	uxth	r2, r2
 801cafa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801cafe:	42b2      	cmp	r2, r6
 801cb00:	d019      	beq.n	801cb36 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801cb02:	8b04      	ldrh	r4, [r0, #24]
 801cb04:	f831 5b02 	ldrh.w	r5, [r1], #2
 801cb08:	4294      	cmp	r4, r2
 801cb0a:	d805      	bhi.n	801cb18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801cb0c:	4b19      	ldr	r3, [pc, #100]	; (801cb74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cb0e:	4a1a      	ldr	r2, [pc, #104]	; (801cb78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801cb10:	21c5      	movs	r1, #197	; 0xc5
 801cb12:	481a      	ldr	r0, [pc, #104]	; (801cb7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801cb14:	f00b fa14 	bl	8027f40 <__assert_func>
 801cb18:	8ac4      	ldrh	r4, [r0, #22]
 801cb1a:	4414      	add	r4, r2
 801cb1c:	3a01      	subs	r2, #1
 801cb1e:	b2a4      	uxth	r4, r4
 801cb20:	b292      	uxth	r2, r2
 801cb22:	2c01      	cmp	r4, #1
 801cb24:	bf88      	it	hi
 801cb26:	3c02      	subhi	r4, #2
 801cb28:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cb2c:	8a64      	ldrh	r4, [r4, #18]
 801cb2e:	42ac      	cmp	r4, r5
 801cb30:	d0e5      	beq.n	801cafe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801cb32:	2000      	movs	r0, #0
 801cb34:	bd70      	pop	{r4, r5, r6, pc}
 801cb36:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cb3a:	2400      	movs	r4, #0
 801cb3c:	4413      	add	r3, r2
 801cb3e:	b2a2      	uxth	r2, r4
 801cb40:	429a      	cmp	r2, r3
 801cb42:	da14      	bge.n	801cb6e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801cb44:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801cb46:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cb4a:	4296      	cmp	r6, r2
 801cb4c:	d802      	bhi.n	801cb54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801cb4e:	4b09      	ldr	r3, [pc, #36]	; (801cb74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cb50:	4a0b      	ldr	r2, [pc, #44]	; (801cb80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801cb52:	e7dd      	b.n	801cb10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801cb54:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801cb56:	3401      	adds	r4, #1
 801cb58:	4432      	add	r2, r6
 801cb5a:	b292      	uxth	r2, r2
 801cb5c:	2a09      	cmp	r2, #9
 801cb5e:	bf88      	it	hi
 801cb60:	3a0a      	subhi	r2, #10
 801cb62:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cb66:	8b52      	ldrh	r2, [r2, #26]
 801cb68:	42aa      	cmp	r2, r5
 801cb6a:	d0e8      	beq.n	801cb3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801cb6c:	e7e1      	b.n	801cb32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801cb6e:	2001      	movs	r0, #1
 801cb70:	e7e0      	b.n	801cb34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801cb72:	bf00      	nop
 801cb74:	0802bfd1 	.word	0x0802bfd1
 801cb78:	0802c48b 	.word	0x0802c48b
 801cb7c:	0802bf99 	.word	0x0802bf99
 801cb80:	0802c130 	.word	0x0802c130

0801cb84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801cb84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb88:	4605      	mov	r5, r0
 801cb8a:	4616      	mov	r6, r2
 801cb8c:	1c8c      	adds	r4, r1, #2
 801cb8e:	8809      	ldrh	r1, [r1, #0]
 801cb90:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801cb94:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801cb98:	42b3      	cmp	r3, r6
 801cb9a:	d124      	bne.n	801cbe6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801cb9c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801cba0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cba4:	f001 070f 	and.w	r7, r1, #15
 801cba8:	4652      	mov	r2, sl
 801cbaa:	f8cd 8000 	str.w	r8, [sp]
 801cbae:	464b      	mov	r3, r9
 801cbb0:	4621      	mov	r1, r4
 801cbb2:	4628      	mov	r0, r5
 801cbb4:	f7ff ff9e 	bl	801caf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801cbb8:	4683      	mov	fp, r0
 801cbba:	b168      	cbz	r0, 801cbd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cbbc:	eb0a 0109 	add.w	r1, sl, r9
 801cbc0:	463a      	mov	r2, r7
 801cbc2:	4628      	mov	r0, r5
 801cbc4:	4441      	add	r1, r8
 801cbc6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801cbca:	4649      	mov	r1, r9
 801cbcc:	f7ff ff42 	bl	801ca54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801cbd0:	4658      	mov	r0, fp
 801cbd2:	b003      	add	sp, #12
 801cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbd8:	eb07 010a 	add.w	r1, r7, sl
 801cbdc:	4449      	add	r1, r9
 801cbde:	4441      	add	r1, r8
 801cbe0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cbe4:	e7d2      	b.n	801cb8c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cbe6:	f04f 0b00 	mov.w	fp, #0
 801cbea:	e7f1      	b.n	801cbd0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cbec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cbec:	b570      	push	{r4, r5, r6, lr}
 801cbee:	8810      	ldrh	r0, [r2, #0]
 801cbf0:	4298      	cmp	r0, r3
 801cbf2:	d817      	bhi.n	801cc24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cbf4:	1e48      	subs	r0, r1, #1
 801cbf6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801cbfa:	4298      	cmp	r0, r3
 801cbfc:	d312      	bcc.n	801cc24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cbfe:	2400      	movs	r4, #0
 801cc00:	428c      	cmp	r4, r1
 801cc02:	d20f      	bcs.n	801cc24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cc04:	1860      	adds	r0, r4, r1
 801cc06:	1040      	asrs	r0, r0, #1
 801cc08:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801cc0c:	0085      	lsls	r5, r0, #2
 801cc0e:	42b3      	cmp	r3, r6
 801cc10:	d902      	bls.n	801cc18 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801cc12:	3001      	adds	r0, #1
 801cc14:	b284      	uxth	r4, r0
 801cc16:	e7f3      	b.n	801cc00 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cc18:	d201      	bcs.n	801cc1e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801cc1a:	b281      	uxth	r1, r0
 801cc1c:	e7f0      	b.n	801cc00 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cc1e:	442a      	add	r2, r5
 801cc20:	8850      	ldrh	r0, [r2, #2]
 801cc22:	bd70      	pop	{r4, r5, r6, pc}
 801cc24:	2000      	movs	r0, #0
 801cc26:	e7fc      	b.n	801cc22 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801cc28 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc2c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801cc2e:	4604      	mov	r4, r0
 801cc30:	260b      	movs	r6, #11
 801cc32:	886f      	ldrh	r7, [r5, #2]
 801cc34:	087f      	lsrs	r7, r7, #1
 801cc36:	3e01      	subs	r6, #1
 801cc38:	d01b      	beq.n	801cc72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801cc3a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cc3c:	b92b      	cbnz	r3, 801cc4a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801cc3e:	4b0e      	ldr	r3, [pc, #56]	; (801cc78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801cc40:	21c0      	movs	r1, #192	; 0xc0
 801cc42:	4a0e      	ldr	r2, [pc, #56]	; (801cc7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801cc44:	480e      	ldr	r0, [pc, #56]	; (801cc80 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801cc46:	f00b f97b 	bl	8027f40 <__assert_func>
 801cc4a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801cc4c:	462a      	mov	r2, r5
 801cc4e:	4639      	mov	r1, r7
 801cc50:	4620      	mov	r0, r4
 801cc52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cc56:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801cc5a:	4643      	mov	r3, r8
 801cc5c:	f7ff ffc6 	bl	801cbec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801cc60:	b138      	cbz	r0, 801cc72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801cc62:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801cc66:	4642      	mov	r2, r8
 801cc68:	4620      	mov	r0, r4
 801cc6a:	f7ff ff8b 	bl	801cb84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801cc6e:	2800      	cmp	r0, #0
 801cc70:	d1e1      	bne.n	801cc36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801cc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc76:	bf00      	nop
 801cc78:	0802bf90 	.word	0x0802bf90
 801cc7c:	0802c202 	.word	0x0802c202
 801cc80:	0802bf99 	.word	0x0802bf99

0801cc84 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 801cc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc86:	2300      	movs	r3, #0
 801cc88:	b08d      	sub	sp, #52	; 0x34
 801cc8a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801cc8e:	f101 0710 	add.w	r7, r1, #16
 801cc92:	9304      	str	r3, [sp, #16]
 801cc94:	aa04      	add	r2, sp, #16
 801cc96:	9305      	str	r3, [sp, #20]
 801cc98:	9306      	str	r3, [sp, #24]
 801cc9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801cc9e:	9307      	str	r3, [sp, #28]
 801cca0:	4613      	mov	r3, r2
 801cca2:	460c      	mov	r4, r1
 801cca4:	4605      	mov	r5, r0
 801cca6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801cce0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 801ccaa:	ecb4 7a01 	vldmia	r4!, {s14}
 801ccae:	ecf5 6a01 	vldmia	r5!, {s13}
 801ccb2:	42bc      	cmp	r4, r7
 801ccb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ccb8:	d1f7      	bne.n	801ccaa <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 801ccba:	3010      	adds	r0, #16
 801ccbc:	ece2 7a01 	vstmia	r2!, {s15}
 801ccc0:	42b0      	cmp	r0, r6
 801ccc2:	d1ee      	bne.n	801cca2 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 801ccc4:	ac0c      	add	r4, sp, #48	; 0x30
 801ccc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ccc8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801cccc:	ed9d 0a08 	vldr	s0, [sp, #32]
 801ccd0:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801ccd4:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801ccd8:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 801ccdc:	b00d      	add	sp, #52	; 0x34
 801ccde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cce0:	00000000 	.word	0x00000000

0801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>:
 801cce4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801cce8:	2300      	movs	r3, #0
 801ccea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801cd10 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 801ccee:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	4293      	cmp	r3, r2
 801ccf6:	f102 0201 	add.w	r2, r2, #1
 801ccfa:	fe47 6a87 	vseleq.f32	s13, s15, s14
 801ccfe:	2a04      	cmp	r2, #4
 801cd00:	ece1 6a01 	vstmia	r1!, {s13}
 801cd04:	d1f6      	bne.n	801ccf4 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 801cd06:	3301      	adds	r3, #1
 801cd08:	2b04      	cmp	r3, #4
 801cd0a:	d1f0      	bne.n	801ccee <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 801cd0c:	4770      	bx	lr
 801cd0e:	bf00      	nop
 801cd10:	00000000 	.word	0x00000000

0801cd14 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 801cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd18:	460c      	mov	r4, r1
 801cd1a:	4605      	mov	r5, r0
 801cd1c:	4690      	mov	r8, r2
 801cd1e:	f7ff ffe1 	bl	801cce4 <_ZN8touchgfx9Matrix4x4C1Ev>
 801cd22:	4628      	mov	r0, r5
 801cd24:	4621      	mov	r1, r4
 801cd26:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801cd2a:	2300      	movs	r3, #0
 801cd2c:	eb08 0603 	add.w	r6, r8, r3
 801cd30:	460f      	mov	r7, r1
 801cd32:	2400      	movs	r4, #0
 801cd34:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801cd68 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 801cd38:	4632      	mov	r2, r6
 801cd3a:	3401      	adds	r4, #1
 801cd3c:	ecf7 6a01 	vldmia	r7!, {s13}
 801cd40:	3610      	adds	r6, #16
 801cd42:	ed92 7a00 	vldr	s14, [r2]
 801cd46:	2c04      	cmp	r4, #4
 801cd48:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cd4c:	d1f4      	bne.n	801cd38 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801cd4e:	18c2      	adds	r2, r0, r3
 801cd50:	3304      	adds	r3, #4
 801cd52:	2b10      	cmp	r3, #16
 801cd54:	edc2 7a00 	vstr	s15, [r2]
 801cd58:	d1e8      	bne.n	801cd2c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 801cd5a:	3110      	adds	r1, #16
 801cd5c:	3010      	adds	r0, #16
 801cd5e:	4561      	cmp	r1, ip
 801cd60:	d1e3      	bne.n	801cd2a <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 801cd62:	4628      	mov	r0, r5
 801cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd68:	00000000 	.word	0x00000000

0801cd6c <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 801cd6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801cd70:	f100 0320 	add.w	r3, r0, #32
 801cd74:	3030      	adds	r0, #48	; 0x30
 801cd76:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801cd7a:	ecf3 7a01 	vldmia	r3!, {s15}
 801cd7e:	4283      	cmp	r3, r0
 801cd80:	ee60 7a27 	vmul.f32	s15, s0, s15
 801cd84:	edc3 7a03 	vstr	s15, [r3, #12]
 801cd88:	d1f7      	bne.n	801cd7a <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 801cd8a:	4770      	bx	lr

0801cd8c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 801cd8c:	b510      	push	{r4, lr}
 801cd8e:	ed2d 8b02 	vpush	{d8}
 801cd92:	eef0 8a40 	vmov.f32	s17, s0
 801cd96:	4604      	mov	r4, r0
 801cd98:	f00b f82a 	bl	8027df0 <sinf>
 801cd9c:	eeb0 8a40 	vmov.f32	s16, s0
 801cda0:	eeb0 0a68 	vmov.f32	s0, s17
 801cda4:	f00a ff4c 	bl	8027c40 <cosf>
 801cda8:	eeb1 6a48 	vneg.f32	s12, s16
 801cdac:	f104 0310 	add.w	r3, r4, #16
 801cdb0:	f104 0220 	add.w	r2, r4, #32
 801cdb4:	edd3 7a04 	vldr	s15, [r3, #16]
 801cdb8:	edd3 6a00 	vldr	s13, [r3]
 801cdbc:	ee26 7a27 	vmul.f32	s14, s12, s15
 801cdc0:	ee67 7a80 	vmul.f32	s15, s15, s0
 801cdc4:	eea6 7a80 	vfma.f32	s14, s13, s0
 801cdc8:	eee6 7a88 	vfma.f32	s15, s13, s16
 801cdcc:	eca3 7a01 	vstmia	r3!, {s14}
 801cdd0:	429a      	cmp	r2, r3
 801cdd2:	edc3 7a03 	vstr	s15, [r3, #12]
 801cdd6:	d1ed      	bne.n	801cdb4 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 801cdd8:	4620      	mov	r0, r4
 801cdda:	ecbd 8b02 	vpop	{d8}
 801cdde:	bd10      	pop	{r4, pc}

0801cde0 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 801cde0:	b510      	push	{r4, lr}
 801cde2:	ed2d 8b02 	vpush	{d8}
 801cde6:	eef0 8a40 	vmov.f32	s17, s0
 801cdea:	4604      	mov	r4, r0
 801cdec:	f00b f800 	bl	8027df0 <sinf>
 801cdf0:	eeb0 8a40 	vmov.f32	s16, s0
 801cdf4:	eeb0 0a68 	vmov.f32	s0, s17
 801cdf8:	f00a ff22 	bl	8027c40 <cosf>
 801cdfc:	eeb1 6a48 	vneg.f32	s12, s16
 801ce00:	4623      	mov	r3, r4
 801ce02:	f104 0210 	add.w	r2, r4, #16
 801ce06:	edd3 7a08 	vldr	s15, [r3, #32]
 801ce0a:	edd3 6a00 	vldr	s13, [r3]
 801ce0e:	ee27 7a88 	vmul.f32	s14, s15, s16
 801ce12:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ce16:	eea6 7a80 	vfma.f32	s14, s13, s0
 801ce1a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ce1e:	eca3 7a01 	vstmia	r3!, {s14}
 801ce22:	429a      	cmp	r2, r3
 801ce24:	edc3 7a07 	vstr	s15, [r3, #28]
 801ce28:	d1ed      	bne.n	801ce06 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801ce2a:	4620      	mov	r0, r4
 801ce2c:	ecbd 8b02 	vpop	{d8}
 801ce30:	bd10      	pop	{r4, pc}

0801ce32 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 801ce32:	b510      	push	{r4, lr}
 801ce34:	ed2d 8b02 	vpush	{d8}
 801ce38:	eef0 8a40 	vmov.f32	s17, s0
 801ce3c:	4604      	mov	r4, r0
 801ce3e:	f00a ffd7 	bl	8027df0 <sinf>
 801ce42:	eeb0 8a40 	vmov.f32	s16, s0
 801ce46:	eeb0 0a68 	vmov.f32	s0, s17
 801ce4a:	f00a fef9 	bl	8027c40 <cosf>
 801ce4e:	eeb1 6a48 	vneg.f32	s12, s16
 801ce52:	4623      	mov	r3, r4
 801ce54:	f104 0210 	add.w	r2, r4, #16
 801ce58:	edd3 7a04 	vldr	s15, [r3, #16]
 801ce5c:	edd3 6a00 	vldr	s13, [r3]
 801ce60:	ee26 7a27 	vmul.f32	s14, s12, s15
 801ce64:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ce68:	eea6 7a80 	vfma.f32	s14, s13, s0
 801ce6c:	eee6 7a88 	vfma.f32	s15, s13, s16
 801ce70:	eca3 7a01 	vstmia	r3!, {s14}
 801ce74:	429a      	cmp	r2, r3
 801ce76:	edc3 7a03 	vstr	s15, [r3, #12]
 801ce7a:	d1ed      	bne.n	801ce58 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 801ce7c:	4620      	mov	r0, r4
 801ce7e:	ecbd 8b02 	vpop	{d8}
 801ce82:	bd10      	pop	{r4, pc}

0801ce84 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 801ce84:	4603      	mov	r3, r0
 801ce86:	f100 0210 	add.w	r2, r0, #16
 801ce8a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801ce8e:	edd3 7a00 	vldr	s15, [r3]
 801ce92:	eee7 7a00 	vfma.f32	s15, s14, s0
 801ce96:	ece3 7a01 	vstmia	r3!, {s15}
 801ce9a:	4293      	cmp	r3, r2
 801ce9c:	d1f5      	bne.n	801ce8a <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 801ce9e:	4770      	bx	lr

0801cea0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 801cea0:	f100 0310 	add.w	r3, r0, #16
 801cea4:	f100 0220 	add.w	r2, r0, #32
 801cea8:	ed93 7a08 	vldr	s14, [r3, #32]
 801ceac:	edd3 7a00 	vldr	s15, [r3]
 801ceb0:	eee7 7a00 	vfma.f32	s15, s14, s0
 801ceb4:	ece3 7a01 	vstmia	r3!, {s15}
 801ceb8:	4293      	cmp	r3, r2
 801ceba:	d1f5      	bne.n	801cea8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 801cebc:	4770      	bx	lr

0801cebe <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 801cebe:	f100 0320 	add.w	r3, r0, #32
 801cec2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801cec6:	ed93 7a04 	vldr	s14, [r3, #16]
 801ceca:	edd3 7a00 	vldr	s15, [r3]
 801cece:	eee7 7a00 	vfma.f32	s15, s14, s0
 801ced2:	ece3 7a01 	vstmia	r3!, {s15}
 801ced6:	4293      	cmp	r3, r2
 801ced8:	d1f5      	bne.n	801cec6 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801ceda:	4770      	bx	lr

0801cedc <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801cedc:	4603      	mov	r3, r0
 801cede:	f100 0210 	add.w	r2, r0, #16
 801cee2:	edd3 7a00 	vldr	s15, [r3]
 801cee6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ceea:	ece3 7a01 	vstmia	r3!, {s15}
 801ceee:	4293      	cmp	r3, r2
 801cef0:	d1f7      	bne.n	801cee2 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 801cef2:	4770      	bx	lr

0801cef4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 801cef4:	f100 0310 	add.w	r3, r0, #16
 801cef8:	f100 0220 	add.w	r2, r0, #32
 801cefc:	edd3 7a00 	vldr	s15, [r3]
 801cf00:	ee67 7a80 	vmul.f32	s15, s15, s0
 801cf04:	ece3 7a01 	vstmia	r3!, {s15}
 801cf08:	4293      	cmp	r3, r2
 801cf0a:	d1f7      	bne.n	801cefc <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801cf0c:	4770      	bx	lr

0801cf0e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801cf0e:	f100 0320 	add.w	r3, r0, #32
 801cf12:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801cf16:	edd3 7a00 	vldr	s15, [r3]
 801cf1a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801cf1e:	ece3 7a01 	vstmia	r3!, {s15}
 801cf22:	4293      	cmp	r3, r2
 801cf24:	d1f7      	bne.n	801cf16 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 801cf26:	4770      	bx	lr

0801cf28 <_ZN8touchgfx8ceil28_4El>:
 801cf28:	f110 030f 	adds.w	r3, r0, #15
 801cf2c:	d401      	bmi.n	801cf32 <_ZN8touchgfx8ceil28_4El+0xa>
 801cf2e:	1118      	asrs	r0, r3, #4
 801cf30:	4770      	bx	lr
 801cf32:	2210      	movs	r2, #16
 801cf34:	f1c0 0001 	rsb	r0, r0, #1
 801cf38:	fb93 f3f2 	sdiv	r3, r3, r2
 801cf3c:	f010 000f 	ands.w	r0, r0, #15
 801cf40:	bf18      	it	ne
 801cf42:	2001      	movne	r0, #1
 801cf44:	1a18      	subs	r0, r3, r0
 801cf46:	4770      	bx	lr

0801cf48 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801cf48:	2900      	cmp	r1, #0
 801cf4a:	b538      	push	{r3, r4, r5, lr}
 801cf4c:	dc05      	bgt.n	801cf5a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801cf4e:	4b0f      	ldr	r3, [pc, #60]	; (801cf8c <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801cf50:	21fa      	movs	r1, #250	; 0xfa
 801cf52:	4a0f      	ldr	r2, [pc, #60]	; (801cf90 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801cf54:	480f      	ldr	r0, [pc, #60]	; (801cf94 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801cf56:	f00a fff3 	bl	8027f40 <__assert_func>
 801cf5a:	2800      	cmp	r0, #0
 801cf5c:	db06      	blt.n	801cf6c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801cf5e:	fb90 f4f1 	sdiv	r4, r0, r1
 801cf62:	fb01 0114 	mls	r1, r1, r4, r0
 801cf66:	6014      	str	r4, [r2, #0]
 801cf68:	6019      	str	r1, [r3, #0]
 801cf6a:	bd38      	pop	{r3, r4, r5, pc}
 801cf6c:	4240      	negs	r0, r0
 801cf6e:	fb90 f4f1 	sdiv	r4, r0, r1
 801cf72:	4265      	negs	r5, r4
 801cf74:	fb01 0014 	mls	r0, r1, r4, r0
 801cf78:	6015      	str	r5, [r2, #0]
 801cf7a:	6018      	str	r0, [r3, #0]
 801cf7c:	2800      	cmp	r0, #0
 801cf7e:	d0f4      	beq.n	801cf6a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801cf80:	6810      	ldr	r0, [r2, #0]
 801cf82:	3801      	subs	r0, #1
 801cf84:	6010      	str	r0, [r2, #0]
 801cf86:	6818      	ldr	r0, [r3, #0]
 801cf88:	1a09      	subs	r1, r1, r0
 801cf8a:	e7ed      	b.n	801cf68 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801cf8c:	0802c55c 	.word	0x0802c55c
 801cf90:	0802c59b 	.word	0x0802c59b
 801cf94:	0802c56c 	.word	0x0802c56c

0801cf98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801cf98:	b570      	push	{r4, r5, r6, lr}
 801cf9a:	694a      	ldr	r2, [r1, #20]
 801cf9c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801cf9e:	684b      	ldr	r3, [r1, #4]
 801cfa0:	1b54      	subs	r4, r2, r5
 801cfa2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801cfa4:	f000 8106 	beq.w	801d1b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801cfa8:	1b9b      	subs	r3, r3, r6
 801cfaa:	d003      	beq.n	801cfb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801cfac:	4363      	muls	r3, r4
 801cfae:	2210      	movs	r2, #16
 801cfb0:	fb93 f3f2 	sdiv	r3, r3, r2
 801cfb4:	680c      	ldr	r4, [r1, #0]
 801cfb6:	698a      	ldr	r2, [r1, #24]
 801cfb8:	1b65      	subs	r5, r4, r5
 801cfba:	f000 80fd 	beq.w	801d1b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801cfbe:	1b92      	subs	r2, r2, r6
 801cfc0:	d003      	beq.n	801cfca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801cfc2:	436a      	muls	r2, r5
 801cfc4:	2410      	movs	r4, #16
 801cfc6:	fb92 f2f4 	sdiv	r2, r2, r4
 801cfca:	1a9b      	subs	r3, r3, r2
 801cfcc:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d1f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801cfd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cfd4:	460a      	mov	r2, r1
 801cfd6:	ee07 3a90 	vmov	s15, r3
 801cfda:	f100 040c 	add.w	r4, r0, #12
 801cfde:	4603      	mov	r3, r0
 801cfe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfe4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801cfe8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801cfec:	eeb1 6a43 	vneg.f32	s12, s6
 801cff0:	edd2 7a02 	vldr	s15, [r2, #8]
 801cff4:	3214      	adds	r2, #20
 801cff6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cffa:	ece3 6a01 	vstmia	r3!, {s13}
 801cffe:	429c      	cmp	r4, r3
 801d000:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d004:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d008:	edc3 7a02 	vstr	s15, [r3, #8]
 801d00c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d010:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d014:	edc3 7a05 	vstr	s15, [r3, #20]
 801d018:	d1ea      	bne.n	801cff0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d01a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d01c:	698b      	ldr	r3, [r1, #24]
 801d01e:	edd0 4a02 	vldr	s9, [r0, #8]
 801d022:	1a9b      	subs	r3, r3, r2
 801d024:	edd0 3a00 	vldr	s7, [r0]
 801d028:	edd0 6a01 	vldr	s13, [r0, #4]
 801d02c:	ee07 3a90 	vmov	s15, r3
 801d030:	684b      	ldr	r3, [r1, #4]
 801d032:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d036:	ed90 5a05 	vldr	s10, [r0, #20]
 801d03a:	1a9b      	subs	r3, r3, r2
 801d03c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d040:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d044:	ed90 2a03 	vldr	s4, [r0, #12]
 801d048:	ee07 3a10 	vmov	s14, r3
 801d04c:	edd0 5a04 	vldr	s11, [r0, #16]
 801d050:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d054:	ed90 1a07 	vldr	s2, [r0, #28]
 801d058:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d05c:	edd0 2a06 	vldr	s5, [r0, #24]
 801d060:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d064:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d068:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d06c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d070:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d074:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d078:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d07c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d07e:	694a      	ldr	r2, [r1, #20]
 801d080:	1b13      	subs	r3, r2, r4
 801d082:	ee07 3a10 	vmov	s14, r3
 801d086:	680b      	ldr	r3, [r1, #0]
 801d088:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d08c:	1b1b      	subs	r3, r3, r4
 801d08e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d092:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d096:	ee07 3a10 	vmov	s14, r3
 801d09a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d09e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d0a2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d0a6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d0aa:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d0ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d0b0:	698b      	ldr	r3, [r1, #24]
 801d0b2:	1a9b      	subs	r3, r3, r2
 801d0b4:	ee06 3a90 	vmov	s13, r3
 801d0b8:	684b      	ldr	r3, [r1, #4]
 801d0ba:	1a9b      	subs	r3, r3, r2
 801d0bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d0c0:	ee07 3a10 	vmov	s14, r3
 801d0c4:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d0c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d0cc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d0d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d0d4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d0d8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d0dc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d0e0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d0e2:	694a      	ldr	r2, [r1, #20]
 801d0e4:	1b13      	subs	r3, r2, r4
 801d0e6:	ee07 3a10 	vmov	s14, r3
 801d0ea:	680b      	ldr	r3, [r1, #0]
 801d0ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d0f0:	1b1b      	subs	r3, r3, r4
 801d0f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d0f6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d0fa:	ee07 3a10 	vmov	s14, r3
 801d0fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d102:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d106:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d10a:	edd0 5a08 	vldr	s11, [r0, #32]
 801d10e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d112:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d116:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d11a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d11e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d120:	698b      	ldr	r3, [r1, #24]
 801d122:	1a9b      	subs	r3, r3, r2
 801d124:	ee07 3a10 	vmov	s14, r3
 801d128:	684b      	ldr	r3, [r1, #4]
 801d12a:	1a9b      	subs	r3, r3, r2
 801d12c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d130:	ee01 3a90 	vmov	s3, r3
 801d134:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d138:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d13c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d140:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d144:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d148:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d14c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d150:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d152:	694a      	ldr	r2, [r1, #20]
 801d154:	1b13      	subs	r3, r2, r4
 801d156:	ee03 3a10 	vmov	s6, r3
 801d15a:	680b      	ldr	r3, [r1, #0]
 801d15c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d160:	1b1b      	subs	r3, r3, r4
 801d162:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d166:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d16a:	ee03 3a10 	vmov	s6, r3
 801d16e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d172:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d176:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d17a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d17e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d182:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d186:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d18a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d192:	dd13      	ble.n	801d1bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d198:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d19c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d19e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d1a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1aa:	dd15      	ble.n	801d1d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d1ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d1b0:	6403      	str	r3, [r0, #64]	; 0x40
 801d1b2:	bd70      	pop	{r4, r5, r6, pc}
 801d1b4:	4623      	mov	r3, r4
 801d1b6:	e6fd      	b.n	801cfb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d1b8:	462a      	mov	r2, r5
 801d1ba:	e706      	b.n	801cfca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d1bc:	d502      	bpl.n	801d1c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d1be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d1c2:	e7e9      	b.n	801d198 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d1c4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d1c8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d1cc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1d4:	dade      	bge.n	801d194 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d1d6:	e7f2      	b.n	801d1be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d1d8:	d502      	bpl.n	801d1e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d1da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d1de:	e7e7      	b.n	801d1b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d1e0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d1e4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d1e8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1f0:	dadc      	bge.n	801d1ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d1f2:	e7f2      	b.n	801d1da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d1f4:	3d800000 	.word	0x3d800000

0801d1f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1fc:	f04f 0814 	mov.w	r8, #20
 801d200:	4604      	mov	r4, r0
 801d202:	4617      	mov	r7, r2
 801d204:	460d      	mov	r5, r1
 801d206:	fb08 f903 	mul.w	r9, r8, r3
 801d20a:	461e      	mov	r6, r3
 801d20c:	eb02 0a09 	add.w	sl, r2, r9
 801d210:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d214:	f7ff fe88 	bl	801cf28 <_ZN8touchgfx8ceil28_4El>
 801d218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d21a:	6160      	str	r0, [r4, #20]
 801d21c:	fb08 f803 	mul.w	r8, r8, r3
 801d220:	9001      	str	r0, [sp, #4]
 801d222:	eb07 0b08 	add.w	fp, r7, r8
 801d226:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d22a:	f7ff fe7d 	bl	801cf28 <_ZN8touchgfx8ceil28_4El>
 801d22e:	9a01      	ldr	r2, [sp, #4]
 801d230:	1a80      	subs	r0, r0, r2
 801d232:	61a0      	str	r0, [r4, #24]
 801d234:	2800      	cmp	r0, #0
 801d236:	f000 8088 	beq.w	801d34a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801d23a:	f857 3009 	ldr.w	r3, [r7, r9]
 801d23e:	f857 c008 	ldr.w	ip, [r7, r8]
 801d242:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d246:	ebac 0c03 	sub.w	ip, ip, r3
 801d24a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801d24e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801d252:	1a40      	subs	r0, r0, r1
 801d254:	fb0b f202 	mul.w	r2, fp, r2
 801d258:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801d25c:	fb0c 2211 	mls	r2, ip, r1, r2
 801d260:	4641      	mov	r1, r8
 801d262:	fb00 2003 	mla	r0, r0, r3, r2
 801d266:	f104 0310 	add.w	r3, r4, #16
 801d26a:	4622      	mov	r2, r4
 801d26c:	3801      	subs	r0, #1
 801d26e:	4440      	add	r0, r8
 801d270:	f7ff fe6a 	bl	801cf48 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d274:	f104 0308 	add.w	r3, r4, #8
 801d278:	1d22      	adds	r2, r4, #4
 801d27a:	4641      	mov	r1, r8
 801d27c:	4658      	mov	r0, fp
 801d27e:	f7ff fe63 	bl	801cf48 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d282:	f8c4 800c 	str.w	r8, [r4, #12]
 801d286:	6962      	ldr	r2, [r4, #20]
 801d288:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d28c:	eddf 6a31 	vldr	s13, [pc, #196]	; 801d354 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d290:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d294:	6822      	ldr	r2, [r4, #0]
 801d296:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d29a:	ee07 3a10 	vmov	s14, r3
 801d29e:	f857 3009 	ldr.w	r3, [r7, r9]
 801d2a2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d2a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d2aa:	ee07 3a90 	vmov	s15, r3
 801d2ae:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801d2b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d2b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d2ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d2be:	edd3 6a00 	vldr	s13, [r3]
 801d2c2:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d2c6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d2ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d2ce:	edc4 6a07 	vstr	s13, [r4, #28]
 801d2d2:	edd4 6a01 	vldr	s13, [r4, #4]
 801d2d6:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801d2da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d2de:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d2e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d2e6:	ed84 6a08 	vstr	s12, [r4, #32]
 801d2ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d2ec:	6262      	str	r2, [r4, #36]	; 0x24
 801d2ee:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801d2f2:	ed93 6a03 	vldr	s12, [r3, #12]
 801d2f6:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d2fa:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d2fe:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d302:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801d306:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d30a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801d30e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d312:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801d316:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801d318:	6322      	str	r2, [r4, #48]	; 0x30
 801d31a:	ed93 6a06 	vldr	s12, [r3, #24]
 801d31e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801d322:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d326:	eeb0 7a46 	vmov.f32	s14, s12
 801d32a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801d32e:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d332:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801d336:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801d33a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801d33e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d342:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801d346:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801d348:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d34a:	4620      	mov	r0, r4
 801d34c:	b003      	add	sp, #12
 801d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d352:	bf00      	nop
 801d354:	3d800000 	.word	0x3d800000

0801d358 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d358:	4602      	mov	r2, r0
 801d35a:	b148      	cbz	r0, 801d370 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d35c:	2300      	movs	r3, #0
 801d35e:	b298      	uxth	r0, r3
 801d360:	3301      	adds	r3, #1
 801d362:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d366:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d36a:	2900      	cmp	r1, #0
 801d36c:	d1f7      	bne.n	801d35e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d36e:	4770      	bx	lr
 801d370:	4770      	bx	lr

0801d372 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d372:	b530      	push	{r4, r5, lr}
 801d374:	4604      	mov	r4, r0
 801d376:	b159      	cbz	r1, 801d390 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d378:	b148      	cbz	r0, 801d38e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d37a:	2300      	movs	r3, #0
 801d37c:	b298      	uxth	r0, r3
 801d37e:	4282      	cmp	r2, r0
 801d380:	d905      	bls.n	801d38e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d382:	5ccd      	ldrb	r5, [r1, r3]
 801d384:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d388:	3301      	adds	r3, #1
 801d38a:	2d00      	cmp	r5, #0
 801d38c:	d1f6      	bne.n	801d37c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d38e:	bd30      	pop	{r4, r5, pc}
 801d390:	4608      	mov	r0, r1
 801d392:	e7fc      	b.n	801d38e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d394 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d394:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d396:	468c      	mov	ip, r1
 801d398:	b08b      	sub	sp, #44	; 0x2c
 801d39a:	2100      	movs	r1, #0
 801d39c:	ae01      	add	r6, sp, #4
 801d39e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d3a2:	211f      	movs	r1, #31
 801d3a4:	fbb0 f7f3 	udiv	r7, r0, r3
 801d3a8:	fb03 0517 	mls	r5, r3, r7, r0
 801d3ac:	4638      	mov	r0, r7
 801d3ae:	b2ec      	uxtb	r4, r5
 801d3b0:	2d09      	cmp	r5, #9
 801d3b2:	bfd4      	ite	le
 801d3b4:	3430      	addle	r4, #48	; 0x30
 801d3b6:	3457      	addgt	r4, #87	; 0x57
 801d3b8:	b2e4      	uxtb	r4, r4
 801d3ba:	558c      	strb	r4, [r1, r6]
 801d3bc:	1e4c      	subs	r4, r1, #1
 801d3be:	b92f      	cbnz	r7, 801d3cc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d3c0:	4431      	add	r1, r6
 801d3c2:	4660      	mov	r0, ip
 801d3c4:	f7ff ffd5 	bl	801d372 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d3c8:	b00b      	add	sp, #44	; 0x2c
 801d3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3cc:	4621      	mov	r1, r4
 801d3ce:	e7e9      	b.n	801d3a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d3d0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3d2:	4607      	mov	r7, r0
 801d3d4:	b08b      	sub	sp, #44	; 0x2c
 801d3d6:	4608      	mov	r0, r1
 801d3d8:	b341      	cbz	r1, 801d42c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d3da:	1e99      	subs	r1, r3, #2
 801d3dc:	2922      	cmp	r1, #34	; 0x22
 801d3de:	d825      	bhi.n	801d42c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d3e0:	2100      	movs	r1, #0
 801d3e2:	463c      	mov	r4, r7
 801d3e4:	261f      	movs	r6, #31
 801d3e6:	f10d 0c04 	add.w	ip, sp, #4
 801d3ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d3ee:	1e71      	subs	r1, r6, #1
 801d3f0:	fb94 fef3 	sdiv	lr, r4, r3
 801d3f4:	fb03 441e 	mls	r4, r3, lr, r4
 801d3f8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d3fc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d400:	b2ec      	uxtb	r4, r5
 801d402:	2d09      	cmp	r5, #9
 801d404:	bfd4      	ite	le
 801d406:	3430      	addle	r4, #48	; 0x30
 801d408:	3457      	addgt	r4, #87	; 0x57
 801d40a:	b2e4      	uxtb	r4, r4
 801d40c:	f80c 4006 	strb.w	r4, [ip, r6]
 801d410:	4674      	mov	r4, lr
 801d412:	b96c      	cbnz	r4, 801d430 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d414:	2f00      	cmp	r7, #0
 801d416:	da05      	bge.n	801d424 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d418:	ab0a      	add	r3, sp, #40	; 0x28
 801d41a:	4419      	add	r1, r3
 801d41c:	232d      	movs	r3, #45	; 0x2d
 801d41e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d422:	1eb1      	subs	r1, r6, #2
 801d424:	3101      	adds	r1, #1
 801d426:	4461      	add	r1, ip
 801d428:	f7ff ffa3 	bl	801d372 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d42c:	b00b      	add	sp, #44	; 0x2c
 801d42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d430:	460e      	mov	r6, r1
 801d432:	e7dc      	b.n	801d3ee <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d434 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d438:	b085      	sub	sp, #20
 801d43a:	4691      	mov	r9, r2
 801d43c:	6802      	ldr	r2, [r0, #0]
 801d43e:	4688      	mov	r8, r1
 801d440:	461c      	mov	r4, r3
 801d442:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d446:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d44a:	4683      	mov	fp, r0
 801d44c:	4610      	mov	r0, r2
 801d44e:	9103      	str	r1, [sp, #12]
 801d450:	9302      	str	r3, [sp, #8]
 801d452:	9201      	str	r2, [sp, #4]
 801d454:	f7ff ff80 	bl	801d358 <_ZN8touchgfx7Unicode6strlenEPKt>
 801d458:	f1b8 0f00 	cmp.w	r8, #0
 801d45c:	bf0c      	ite	eq
 801d45e:	4684      	moveq	ip, r0
 801d460:	f100 0c01 	addne.w	ip, r0, #1
 801d464:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d468:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d46c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d46e:	fa1f fc8c 	uxth.w	ip, ip
 801d472:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d474:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d478:	9903      	ldr	r1, [sp, #12]
 801d47a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d47e:	d041      	beq.n	801d504 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d480:	d834      	bhi.n	801d4ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d482:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d486:	d059      	beq.n	801d53c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d488:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d48c:	d03a      	beq.n	801d504 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d48e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d492:	d034      	beq.n	801d4fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d494:	2400      	movs	r4, #0
 801d496:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d49a:	3a01      	subs	r2, #1
 801d49c:	b169      	cbz	r1, 801d4ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d49e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d4a0:	458c      	cmp	ip, r1
 801d4a2:	da09      	bge.n	801d4b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d4a4:	eba1 010c 	sub.w	r1, r1, ip
 801d4a8:	b289      	uxth	r1, r1
 801d4aa:	b933      	cbnz	r3, 801d4ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d4ac:	2e00      	cmp	r6, #0
 801d4ae:	d051      	beq.n	801d554 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	d04f      	beq.n	801d554 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d4b4:	440c      	add	r4, r1
 801d4b6:	b2a4      	uxth	r4, r4
 801d4b8:	2100      	movs	r1, #0
 801d4ba:	682b      	ldr	r3, [r5, #0]
 801d4bc:	4293      	cmp	r3, r2
 801d4be:	da07      	bge.n	801d4d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d4c0:	f1b8 0f00 	cmp.w	r8, #0
 801d4c4:	d004      	beq.n	801d4d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d4c6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d4ca:	682b      	ldr	r3, [r5, #0]
 801d4cc:	3301      	adds	r3, #1
 801d4ce:	602b      	str	r3, [r5, #0]
 801d4d0:	2730      	movs	r7, #48	; 0x30
 801d4d2:	2c00      	cmp	r4, #0
 801d4d4:	d04e      	beq.n	801d574 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d4d6:	682e      	ldr	r6, [r5, #0]
 801d4d8:	3c01      	subs	r4, #1
 801d4da:	42b2      	cmp	r2, r6
 801d4dc:	b2a4      	uxth	r4, r4
 801d4de:	dd49      	ble.n	801d574 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d4e0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d4e4:	682b      	ldr	r3, [r5, #0]
 801d4e6:	3301      	adds	r3, #1
 801d4e8:	602b      	str	r3, [r5, #0]
 801d4ea:	e7f2      	b.n	801d4d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d4ec:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d4f0:	d01d      	beq.n	801d52e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d4f2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d4f6:	d002      	beq.n	801d4fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d4f8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d4fc:	e7c9      	b.n	801d492 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d4fe:	4684      	mov	ip, r0
 801d500:	f04f 0800 	mov.w	r8, #0
 801d504:	2c00      	cmp	r4, #0
 801d506:	d0c6      	beq.n	801d496 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d508:	b947      	cbnz	r7, 801d51c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d50a:	2801      	cmp	r0, #1
 801d50c:	d106      	bne.n	801d51c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d50e:	8814      	ldrh	r4, [r2, #0]
 801d510:	2c30      	cmp	r4, #48	; 0x30
 801d512:	bf02      	ittt	eq
 801d514:	3202      	addeq	r2, #2
 801d516:	4638      	moveq	r0, r7
 801d518:	f8cb 2000 	streq.w	r2, [fp]
 801d51c:	45bc      	cmp	ip, r7
 801d51e:	da14      	bge.n	801d54a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d520:	b2bf      	uxth	r7, r7
 801d522:	eba7 040c 	sub.w	r4, r7, ip
 801d526:	46bc      	mov	ip, r7
 801d528:	b2a4      	uxth	r4, r4
 801d52a:	2600      	movs	r6, #0
 801d52c:	e7b3      	b.n	801d496 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d52e:	4684      	mov	ip, r0
 801d530:	b16c      	cbz	r4, 801d54e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d532:	42b8      	cmp	r0, r7
 801d534:	dd00      	ble.n	801d538 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d536:	b2b8      	uxth	r0, r7
 801d538:	2400      	movs	r4, #0
 801d53a:	e003      	b.n	801d544 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d53c:	f04f 0c01 	mov.w	ip, #1
 801d540:	2400      	movs	r4, #0
 801d542:	4660      	mov	r0, ip
 801d544:	4626      	mov	r6, r4
 801d546:	46a0      	mov	r8, r4
 801d548:	e7a5      	b.n	801d496 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d54a:	2400      	movs	r4, #0
 801d54c:	e7ed      	b.n	801d52a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d54e:	4626      	mov	r6, r4
 801d550:	46a0      	mov	r8, r4
 801d552:	e7a0      	b.n	801d496 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d554:	2900      	cmp	r1, #0
 801d556:	d0b0      	beq.n	801d4ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d558:	2720      	movs	r7, #32
 801d55a:	682e      	ldr	r6, [r5, #0]
 801d55c:	2900      	cmp	r1, #0
 801d55e:	d0ac      	beq.n	801d4ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d560:	3901      	subs	r1, #1
 801d562:	4296      	cmp	r6, r2
 801d564:	b289      	uxth	r1, r1
 801d566:	daa7      	bge.n	801d4b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d568:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d56c:	682b      	ldr	r3, [r5, #0]
 801d56e:	3301      	adds	r3, #1
 801d570:	602b      	str	r3, [r5, #0]
 801d572:	e7f2      	b.n	801d55a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d574:	b188      	cbz	r0, 801d59a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d576:	682b      	ldr	r3, [r5, #0]
 801d578:	3801      	subs	r0, #1
 801d57a:	429a      	cmp	r2, r3
 801d57c:	b280      	uxth	r0, r0
 801d57e:	dd0c      	ble.n	801d59a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d580:	f8db 3000 	ldr.w	r3, [fp]
 801d584:	1c9c      	adds	r4, r3, #2
 801d586:	f8cb 4000 	str.w	r4, [fp]
 801d58a:	881c      	ldrh	r4, [r3, #0]
 801d58c:	682b      	ldr	r3, [r5, #0]
 801d58e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d592:	682b      	ldr	r3, [r5, #0]
 801d594:	3301      	adds	r3, #1
 801d596:	602b      	str	r3, [r5, #0]
 801d598:	e7ec      	b.n	801d574 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d59a:	2620      	movs	r6, #32
 801d59c:	b151      	cbz	r1, 801d5b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d59e:	6828      	ldr	r0, [r5, #0]
 801d5a0:	3901      	subs	r1, #1
 801d5a2:	4282      	cmp	r2, r0
 801d5a4:	b289      	uxth	r1, r1
 801d5a6:	dd05      	ble.n	801d5b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d5a8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d5ac:	682b      	ldr	r3, [r5, #0]
 801d5ae:	3301      	adds	r3, #1
 801d5b0:	602b      	str	r3, [r5, #0]
 801d5b2:	e7f3      	b.n	801d59c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d5b4:	b005      	add	sp, #20
 801d5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d5ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d5ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d5be:	2400      	movs	r4, #0
 801d5c0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d5c4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801d5c8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801d5cc:	8014      	strh	r4, [r2, #0]
 801d5ce:	701c      	strb	r4, [r3, #0]
 801d5d0:	f888 4000 	strb.w	r4, [r8]
 801d5d4:	f88c 4000 	strb.w	r4, [ip]
 801d5d8:	f88e 4000 	strb.w	r4, [lr]
 801d5dc:	703c      	strb	r4, [r7, #0]
 801d5de:	6804      	ldr	r4, [r0, #0]
 801d5e0:	b1a4      	cbz	r4, 801d60c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d5e2:	8824      	ldrh	r4, [r4, #0]
 801d5e4:	f04f 0901 	mov.w	r9, #1
 801d5e8:	b314      	cbz	r4, 801d630 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d5ea:	2c2b      	cmp	r4, #43	; 0x2b
 801d5ec:	d001      	beq.n	801d5f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d5ee:	2c20      	cmp	r4, #32
 801d5f0:	d110      	bne.n	801d614 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d5f2:	8014      	strh	r4, [r2, #0]
 801d5f4:	6804      	ldr	r4, [r0, #0]
 801d5f6:	b10c      	cbz	r4, 801d5fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d5f8:	3402      	adds	r4, #2
 801d5fa:	6004      	str	r4, [r0, #0]
 801d5fc:	680c      	ldr	r4, [r1, #0]
 801d5fe:	b10c      	cbz	r4, 801d604 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d600:	3401      	adds	r4, #1
 801d602:	600c      	str	r4, [r1, #0]
 801d604:	6804      	ldr	r4, [r0, #0]
 801d606:	b17c      	cbz	r4, 801d628 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d608:	8824      	ldrh	r4, [r4, #0]
 801d60a:	e7ed      	b.n	801d5e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d60c:	680c      	ldr	r4, [r1, #0]
 801d60e:	b17c      	cbz	r4, 801d630 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d610:	7824      	ldrb	r4, [r4, #0]
 801d612:	e7e7      	b.n	801d5e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801d614:	2c2d      	cmp	r4, #45	; 0x2d
 801d616:	d102      	bne.n	801d61e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801d618:	f883 9000 	strb.w	r9, [r3]
 801d61c:	e7ea      	b.n	801d5f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d61e:	2c23      	cmp	r4, #35	; 0x23
 801d620:	d107      	bne.n	801d632 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801d622:	f888 9000 	strb.w	r9, [r8]
 801d626:	e7e5      	b.n	801d5f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d628:	680c      	ldr	r4, [r1, #0]
 801d62a:	b10c      	cbz	r4, 801d630 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d62c:	7824      	ldrb	r4, [r4, #0]
 801d62e:	e7db      	b.n	801d5e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d630:	2400      	movs	r4, #0
 801d632:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801d636:	2b09      	cmp	r3, #9
 801d638:	d901      	bls.n	801d63e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801d63a:	2c2a      	cmp	r4, #42	; 0x2a
 801d63c:	d122      	bne.n	801d684 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d63e:	2301      	movs	r3, #1
 801d640:	2c30      	cmp	r4, #48	; 0x30
 801d642:	f88e 3000 	strb.w	r3, [lr]
 801d646:	d10d      	bne.n	801d664 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d648:	f88c 3000 	strb.w	r3, [ip]
 801d64c:	6803      	ldr	r3, [r0, #0]
 801d64e:	b10b      	cbz	r3, 801d654 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d650:	3302      	adds	r3, #2
 801d652:	6003      	str	r3, [r0, #0]
 801d654:	680b      	ldr	r3, [r1, #0]
 801d656:	b10b      	cbz	r3, 801d65c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d658:	3301      	adds	r3, #1
 801d65a:	600b      	str	r3, [r1, #0]
 801d65c:	6803      	ldr	r3, [r0, #0]
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d02f      	beq.n	801d6c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d662:	881c      	ldrh	r4, [r3, #0]
 801d664:	2c2a      	cmp	r4, #42	; 0x2a
 801d666:	d135      	bne.n	801d6d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d668:	f04f 33ff 	mov.w	r3, #4294967295
 801d66c:	6033      	str	r3, [r6, #0]
 801d66e:	6803      	ldr	r3, [r0, #0]
 801d670:	b10b      	cbz	r3, 801d676 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d672:	3302      	adds	r3, #2
 801d674:	6003      	str	r3, [r0, #0]
 801d676:	680b      	ldr	r3, [r1, #0]
 801d678:	b10b      	cbz	r3, 801d67e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d67a:	3301      	adds	r3, #1
 801d67c:	600b      	str	r3, [r1, #0]
 801d67e:	6803      	ldr	r3, [r0, #0]
 801d680:	b31b      	cbz	r3, 801d6ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d682:	881c      	ldrh	r4, [r3, #0]
 801d684:	2c2e      	cmp	r4, #46	; 0x2e
 801d686:	d11a      	bne.n	801d6be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d688:	2301      	movs	r3, #1
 801d68a:	703b      	strb	r3, [r7, #0]
 801d68c:	6803      	ldr	r3, [r0, #0]
 801d68e:	b10b      	cbz	r3, 801d694 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d690:	3302      	adds	r3, #2
 801d692:	6003      	str	r3, [r0, #0]
 801d694:	680b      	ldr	r3, [r1, #0]
 801d696:	b10b      	cbz	r3, 801d69c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d698:	3301      	adds	r3, #1
 801d69a:	600b      	str	r3, [r1, #0]
 801d69c:	6803      	ldr	r3, [r0, #0]
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d036      	beq.n	801d710 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d6a2:	881b      	ldrh	r3, [r3, #0]
 801d6a4:	2b2a      	cmp	r3, #42	; 0x2a
 801d6a6:	d137      	bne.n	801d718 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d6a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ac:	602b      	str	r3, [r5, #0]
 801d6ae:	6803      	ldr	r3, [r0, #0]
 801d6b0:	b10b      	cbz	r3, 801d6b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d6b2:	3302      	adds	r3, #2
 801d6b4:	6003      	str	r3, [r0, #0]
 801d6b6:	680b      	ldr	r3, [r1, #0]
 801d6b8:	b10b      	cbz	r3, 801d6be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d6ba:	3301      	adds	r3, #1
 801d6bc:	600b      	str	r3, [r1, #0]
 801d6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6c2:	680c      	ldr	r4, [r1, #0]
 801d6c4:	b134      	cbz	r4, 801d6d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d6c6:	7824      	ldrb	r4, [r4, #0]
 801d6c8:	e7cc      	b.n	801d664 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d6ca:	680b      	ldr	r3, [r1, #0]
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d0f6      	beq.n	801d6be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d6d0:	781c      	ldrb	r4, [r3, #0]
 801d6d2:	e7d7      	b.n	801d684 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d6d4:	2300      	movs	r3, #0
 801d6d6:	220a      	movs	r2, #10
 801d6d8:	6033      	str	r3, [r6, #0]
 801d6da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d6de:	fa1f f38c 	uxth.w	r3, ip
 801d6e2:	2b09      	cmp	r3, #9
 801d6e4:	d8ce      	bhi.n	801d684 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d6e6:	6833      	ldr	r3, [r6, #0]
 801d6e8:	fb02 c303 	mla	r3, r2, r3, ip
 801d6ec:	6033      	str	r3, [r6, #0]
 801d6ee:	6803      	ldr	r3, [r0, #0]
 801d6f0:	b10b      	cbz	r3, 801d6f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d6f2:	3302      	adds	r3, #2
 801d6f4:	6003      	str	r3, [r0, #0]
 801d6f6:	680b      	ldr	r3, [r1, #0]
 801d6f8:	b10b      	cbz	r3, 801d6fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d6fa:	3301      	adds	r3, #1
 801d6fc:	600b      	str	r3, [r1, #0]
 801d6fe:	6803      	ldr	r3, [r0, #0]
 801d700:	b10b      	cbz	r3, 801d706 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801d702:	881c      	ldrh	r4, [r3, #0]
 801d704:	e7e9      	b.n	801d6da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d706:	680c      	ldr	r4, [r1, #0]
 801d708:	2c00      	cmp	r4, #0
 801d70a:	d0e6      	beq.n	801d6da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d70c:	7824      	ldrb	r4, [r4, #0]
 801d70e:	e7e4      	b.n	801d6da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d710:	680b      	ldr	r3, [r1, #0]
 801d712:	b10b      	cbz	r3, 801d718 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d714:	781b      	ldrb	r3, [r3, #0]
 801d716:	e7c5      	b.n	801d6a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801d718:	2200      	movs	r2, #0
 801d71a:	240a      	movs	r4, #10
 801d71c:	602a      	str	r2, [r5, #0]
 801d71e:	3b30      	subs	r3, #48	; 0x30
 801d720:	682a      	ldr	r2, [r5, #0]
 801d722:	b29e      	uxth	r6, r3
 801d724:	2e09      	cmp	r6, #9
 801d726:	d813      	bhi.n	801d750 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801d728:	fb04 3302 	mla	r3, r4, r2, r3
 801d72c:	602b      	str	r3, [r5, #0]
 801d72e:	6803      	ldr	r3, [r0, #0]
 801d730:	b10b      	cbz	r3, 801d736 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801d732:	3302      	adds	r3, #2
 801d734:	6003      	str	r3, [r0, #0]
 801d736:	680b      	ldr	r3, [r1, #0]
 801d738:	b10b      	cbz	r3, 801d73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801d73a:	3301      	adds	r3, #1
 801d73c:	600b      	str	r3, [r1, #0]
 801d73e:	6803      	ldr	r3, [r0, #0]
 801d740:	b10b      	cbz	r3, 801d746 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801d742:	881b      	ldrh	r3, [r3, #0]
 801d744:	e7eb      	b.n	801d71e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d746:	680b      	ldr	r3, [r1, #0]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d0e8      	beq.n	801d71e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d74c:	781b      	ldrb	r3, [r3, #0]
 801d74e:	e7e6      	b.n	801d71e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d750:	2a06      	cmp	r2, #6
 801d752:	bfa8      	it	ge
 801d754:	2206      	movge	r2, #6
 801d756:	602a      	str	r2, [r5, #0]
 801d758:	e7b1      	b.n	801d6be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801d75a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801d75a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d75e:	b0a3      	sub	sp, #140	; 0x8c
 801d760:	2600      	movs	r6, #0
 801d762:	4607      	mov	r7, r0
 801d764:	4688      	mov	r8, r1
 801d766:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801d76a:	4631      	mov	r1, r6
 801d76c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801d76e:	4648      	mov	r0, r9
 801d770:	960d      	str	r6, [sp, #52]	; 0x34
 801d772:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d776:	2242      	movs	r2, #66	; 0x42
 801d778:	f7fe f8b0 	bl	801b8dc <_ZN8touchgfx6memsetEPvhm>
 801d77c:	b15f      	cbz	r7, 801d796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801d77e:	f108 3aff 	add.w	sl, r8, #4294967295
 801d782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d786:	b152      	cbz	r2, 801d79e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801d788:	8812      	ldrh	r2, [r2, #0]
 801d78a:	b10a      	cbz	r2, 801d790 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d78c:	459a      	cmp	sl, r3
 801d78e:	dc2e      	bgt.n	801d7ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801d790:	2200      	movs	r2, #0
 801d792:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d796:	4638      	mov	r0, r7
 801d798:	b023      	add	sp, #140	; 0x8c
 801d79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d79e:	9a08      	ldr	r2, [sp, #32]
 801d7a0:	2a00      	cmp	r2, #0
 801d7a2:	d0f5      	beq.n	801d790 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d7a4:	7812      	ldrb	r2, [r2, #0]
 801d7a6:	e7f0      	b.n	801d78a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801d7a8:	2d00      	cmp	r5, #0
 801d7aa:	d0ea      	beq.n	801d782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d7ac:	782a      	ldrb	r2, [r5, #0]
 801d7ae:	b142      	cbz	r2, 801d7c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801d7b0:	2a25      	cmp	r2, #37	; 0x25
 801d7b2:	d001      	beq.n	801d7b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801d7b4:	459a      	cmp	sl, r3
 801d7b6:	dc08      	bgt.n	801d7ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801d7b8:	f1bb 0f00 	cmp.w	fp, #0
 801d7bc:	d121      	bne.n	801d802 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801d7be:	2d00      	cmp	r5, #0
 801d7c0:	d0df      	beq.n	801d782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d7c2:	782a      	ldrb	r2, [r5, #0]
 801d7c4:	f04f 0b00 	mov.w	fp, #0
 801d7c8:	e01d      	b.n	801d806 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801d7ca:	f1bb 0f00 	cmp.w	fp, #0
 801d7ce:	d077      	beq.n	801d8c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801d7d0:	f8bb 2000 	ldrh.w	r2, [fp]
 801d7d4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d7d8:	f1bb 0f00 	cmp.w	fp, #0
 801d7dc:	d002      	beq.n	801d7e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801d7de:	f10b 0202 	add.w	r2, fp, #2
 801d7e2:	9209      	str	r2, [sp, #36]	; 0x24
 801d7e4:	b10d      	cbz	r5, 801d7ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801d7e6:	3501      	adds	r5, #1
 801d7e8:	9508      	str	r5, [sp, #32]
 801d7ea:	3301      	adds	r3, #1
 801d7ec:	930d      	str	r3, [sp, #52]	; 0x34
 801d7ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7f0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801d7f4:	f1bb 0f00 	cmp.w	fp, #0
 801d7f8:	d0d6      	beq.n	801d7a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801d7fa:	f8bb 2000 	ldrh.w	r2, [fp]
 801d7fe:	2a00      	cmp	r2, #0
 801d800:	d1d6      	bne.n	801d7b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801d802:	f8bb 2000 	ldrh.w	r2, [fp]
 801d806:	2a00      	cmp	r2, #0
 801d808:	d0bb      	beq.n	801d782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d80a:	459a      	cmp	sl, r3
 801d80c:	ddb9      	ble.n	801d782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d80e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801d812:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801d816:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801d81a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801d81e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801d822:	960e      	str	r6, [sp, #56]	; 0x38
 801d824:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801d828:	960f      	str	r6, [sp, #60]	; 0x3c
 801d82a:	f1bb 0f00 	cmp.w	fp, #0
 801d82e:	d002      	beq.n	801d836 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801d830:	f10b 0302 	add.w	r3, fp, #2
 801d834:	9309      	str	r3, [sp, #36]	; 0x24
 801d836:	b10d      	cbz	r5, 801d83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801d838:	1c6b      	adds	r3, r5, #1
 801d83a:	9308      	str	r3, [sp, #32]
 801d83c:	ab0f      	add	r3, sp, #60	; 0x3c
 801d83e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801d842:	a908      	add	r1, sp, #32
 801d844:	a809      	add	r0, sp, #36	; 0x24
 801d846:	9305      	str	r3, [sp, #20]
 801d848:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801d84c:	9304      	str	r3, [sp, #16]
 801d84e:	ab0e      	add	r3, sp, #56	; 0x38
 801d850:	9303      	str	r3, [sp, #12]
 801d852:	ab0c      	add	r3, sp, #48	; 0x30
 801d854:	9302      	str	r3, [sp, #8]
 801d856:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801d85a:	9301      	str	r3, [sp, #4]
 801d85c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801d860:	9300      	str	r3, [sp, #0]
 801d862:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801d866:	f7ff fea8 	bl	801d5ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d86a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	bfbf      	itttt	lt
 801d870:	6823      	ldrlt	r3, [r4, #0]
 801d872:	3404      	addlt	r4, #4
 801d874:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d878:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d87a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	bfbe      	ittt	lt
 801d880:	6823      	ldrlt	r3, [r4, #0]
 801d882:	3404      	addlt	r4, #4
 801d884:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d888:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d88c:	bfb8      	it	lt
 801d88e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801d890:	b1d9      	cbz	r1, 801d8ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801d892:	880b      	ldrh	r3, [r1, #0]
 801d894:	2b69      	cmp	r3, #105	; 0x69
 801d896:	d01f      	beq.n	801d8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d898:	d82f      	bhi.n	801d8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801d89a:	2b58      	cmp	r3, #88	; 0x58
 801d89c:	d01c      	beq.n	801d8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d89e:	d818      	bhi.n	801d8d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801d8a0:	2b25      	cmp	r3, #37	; 0x25
 801d8a2:	d034      	beq.n	801d90e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801d8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8a6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d8aa:	f1bb 0f00 	cmp.w	fp, #0
 801d8ae:	f000 80b7 	beq.w	801da20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801d8b2:	f8bb 5000 	ldrh.w	r5, [fp]
 801d8b6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d8ba:	3301      	adds	r3, #1
 801d8bc:	930d      	str	r3, [sp, #52]	; 0x34
 801d8be:	e029      	b.n	801d914 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d8c0:	b10d      	cbz	r5, 801d8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801d8c2:	782a      	ldrb	r2, [r5, #0]
 801d8c4:	e786      	b.n	801d7d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d8c6:	462a      	mov	r2, r5
 801d8c8:	e784      	b.n	801d7d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d8ca:	2a00      	cmp	r2, #0
 801d8cc:	d0ea      	beq.n	801d8a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d8ce:	7813      	ldrb	r3, [r2, #0]
 801d8d0:	e7e0      	b.n	801d894 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d8d2:	3b63      	subs	r3, #99	; 0x63
 801d8d4:	2b01      	cmp	r3, #1
 801d8d6:	d8e5      	bhi.n	801d8a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d8d8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d8dc:	b329      	cbz	r1, 801d92a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d8de:	880b      	ldrh	r3, [r1, #0]
 801d8e0:	2b69      	cmp	r3, #105	; 0x69
 801d8e2:	d063      	beq.n	801d9ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d8e4:	d825      	bhi.n	801d932 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801d8e6:	2b63      	cmp	r3, #99	; 0x63
 801d8e8:	d038      	beq.n	801d95c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801d8ea:	2b64      	cmp	r3, #100	; 0x64
 801d8ec:	d05e      	beq.n	801d9ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d8ee:	2b58      	cmp	r3, #88	; 0x58
 801d8f0:	d07a      	beq.n	801d9e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801d8f2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801d8f6:	4625      	mov	r5, r4
 801d8f8:	e036      	b.n	801d968 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d8fa:	2b73      	cmp	r3, #115	; 0x73
 801d8fc:	d0ec      	beq.n	801d8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d8fe:	d802      	bhi.n	801d906 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801d900:	2b6f      	cmp	r3, #111	; 0x6f
 801d902:	d1cf      	bne.n	801d8a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d904:	e7e8      	b.n	801d8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d906:	2b75      	cmp	r3, #117	; 0x75
 801d908:	d0e6      	beq.n	801d8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d90a:	2b78      	cmp	r3, #120	; 0x78
 801d90c:	e7f9      	b.n	801d902 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801d90e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d910:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d916:	b10b      	cbz	r3, 801d91c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801d918:	3302      	adds	r3, #2
 801d91a:	9309      	str	r3, [sp, #36]	; 0x24
 801d91c:	9b08      	ldr	r3, [sp, #32]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	f43f af2f 	beq.w	801d782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d924:	3301      	adds	r3, #1
 801d926:	9308      	str	r3, [sp, #32]
 801d928:	e72b      	b.n	801d782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d92a:	2a00      	cmp	r2, #0
 801d92c:	d0e1      	beq.n	801d8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d92e:	7813      	ldrb	r3, [r2, #0]
 801d930:	e7d6      	b.n	801d8e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801d932:	2b73      	cmp	r3, #115	; 0x73
 801d934:	d036      	beq.n	801d9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801d936:	d807      	bhi.n	801d948 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801d938:	2b6f      	cmp	r3, #111	; 0x6f
 801d93a:	d1da      	bne.n	801d8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d93c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d93e:	1d25      	adds	r5, r4, #4
 801d940:	2308      	movs	r3, #8
 801d942:	eba8 0202 	sub.w	r2, r8, r2
 801d946:	e049      	b.n	801d9dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d948:	2b75      	cmp	r3, #117	; 0x75
 801d94a:	d042      	beq.n	801d9d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801d94c:	2b78      	cmp	r3, #120	; 0x78
 801d94e:	d1d0      	bne.n	801d8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d952:	1d25      	adds	r5, r4, #4
 801d954:	2310      	movs	r3, #16
 801d956:	eba8 0202 	sub.w	r2, r8, r2
 801d95a:	e03f      	b.n	801d9dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d95c:	7823      	ldrb	r3, [r4, #0]
 801d95e:	1d25      	adds	r5, r4, #4
 801d960:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d964:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d96a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d051      	beq.n	801da16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801d972:	881a      	ldrh	r2, [r3, #0]
 801d974:	a80d      	add	r0, sp, #52	; 0x34
 801d976:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801d97a:	462c      	mov	r4, r5
 801d97c:	9005      	str	r0, [sp, #20]
 801d97e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801d982:	9004      	str	r0, [sp, #16]
 801d984:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d986:	9003      	str	r0, [sp, #12]
 801d988:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801d98c:	9002      	str	r0, [sp, #8]
 801d98e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d990:	9001      	str	r0, [sp, #4]
 801d992:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801d996:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d99a:	9000      	str	r0, [sp, #0]
 801d99c:	a810      	add	r0, sp, #64	; 0x40
 801d99e:	f7ff fd49 	bl	801d434 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d9a2:	e7b7      	b.n	801d914 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d9a4:	1d25      	adds	r5, r4, #4
 801d9a6:	6823      	ldr	r3, [r4, #0]
 801d9a8:	9310      	str	r3, [sp, #64]	; 0x40
 801d9aa:	e7dd      	b.n	801d968 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d9ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d9ae:	230a      	movs	r3, #10
 801d9b0:	4649      	mov	r1, r9
 801d9b2:	6820      	ldr	r0, [r4, #0]
 801d9b4:	eba8 0202 	sub.w	r2, r8, r2
 801d9b8:	1d25      	adds	r5, r4, #4
 801d9ba:	b292      	uxth	r2, r2
 801d9bc:	f7ff fd08 	bl	801d3d0 <_ZN8touchgfx7Unicode4itoaElPtti>
 801d9c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d9c4:	2b2d      	cmp	r3, #45	; 0x2d
 801d9c6:	d1cf      	bne.n	801d968 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d9c8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d9cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9ce:	3302      	adds	r3, #2
 801d9d0:	e7ea      	b.n	801d9a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801d9d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d9d4:	1d25      	adds	r5, r4, #4
 801d9d6:	230a      	movs	r3, #10
 801d9d8:	eba8 0202 	sub.w	r2, r8, r2
 801d9dc:	b292      	uxth	r2, r2
 801d9de:	4649      	mov	r1, r9
 801d9e0:	6820      	ldr	r0, [r4, #0]
 801d9e2:	f7ff fcd7 	bl	801d394 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d9e6:	e7bf      	b.n	801d968 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d9e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d9ea:	2310      	movs	r3, #16
 801d9ec:	4649      	mov	r1, r9
 801d9ee:	6820      	ldr	r0, [r4, #0]
 801d9f0:	eba8 0202 	sub.w	r2, r8, r2
 801d9f4:	1d25      	adds	r5, r4, #4
 801d9f6:	b292      	uxth	r2, r2
 801d9f8:	f7ff fccc 	bl	801d394 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d9fc:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801da00:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801da04:	2b00      	cmp	r3, #0
 801da06:	d0af      	beq.n	801d968 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801da08:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801da0c:	2919      	cmp	r1, #25
 801da0e:	d8f7      	bhi.n	801da00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801da10:	3b20      	subs	r3, #32
 801da12:	8013      	strh	r3, [r2, #0]
 801da14:	e7f4      	b.n	801da00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801da16:	9a08      	ldr	r2, [sp, #32]
 801da18:	2a00      	cmp	r2, #0
 801da1a:	d0ab      	beq.n	801d974 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801da1c:	7812      	ldrb	r2, [r2, #0]
 801da1e:	e7a9      	b.n	801d974 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801da20:	2d00      	cmp	r5, #0
 801da22:	f43f af48 	beq.w	801d8b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801da26:	782d      	ldrb	r5, [r5, #0]
 801da28:	e745      	b.n	801d8b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801da2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801da2a:	b507      	push	{r0, r1, r2, lr}
 801da2c:	9300      	str	r3, [sp, #0]
 801da2e:	4613      	mov	r3, r2
 801da30:	2200      	movs	r2, #0
 801da32:	f7ff fe92 	bl	801d75a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801da36:	b003      	add	sp, #12
 801da38:	f85d fb04 	ldr.w	pc, [sp], #4

0801da3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801da3c:	b40c      	push	{r2, r3}
 801da3e:	b507      	push	{r0, r1, r2, lr}
 801da40:	ab04      	add	r3, sp, #16
 801da42:	f853 2b04 	ldr.w	r2, [r3], #4
 801da46:	9301      	str	r3, [sp, #4]
 801da48:	f7ff ffef 	bl	801da2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801da4c:	b003      	add	sp, #12
 801da4e:	f85d eb04 	ldr.w	lr, [sp], #4
 801da52:	b002      	add	sp, #8
 801da54:	4770      	bx	lr
	...

0801da58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801da58:	4b01      	ldr	r3, [pc, #4]	; (801da60 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801da5a:	6018      	str	r0, [r3, #0]
 801da5c:	4770      	bx	lr
 801da5e:	bf00      	nop
 801da60:	20006158 	.word	0x20006158

0801da64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801da64:	4b06      	ldr	r3, [pc, #24]	; (801da80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801da66:	881a      	ldrh	r2, [r3, #0]
 801da68:	4282      	cmp	r2, r0
 801da6a:	d807      	bhi.n	801da7c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801da6c:	4b05      	ldr	r3, [pc, #20]	; (801da84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801da6e:	881b      	ldrh	r3, [r3, #0]
 801da70:	4413      	add	r3, r2
 801da72:	4298      	cmp	r0, r3
 801da74:	bfac      	ite	ge
 801da76:	2000      	movge	r0, #0
 801da78:	2001      	movlt	r0, #1
 801da7a:	4770      	bx	lr
 801da7c:	2000      	movs	r0, #0
 801da7e:	4770      	bx	lr
 801da80:	20006178 	.word	0x20006178
 801da84:	2000617c 	.word	0x2000617c

0801da88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801da88:	b508      	push	{r3, lr}
 801da8a:	4601      	mov	r1, r0
 801da8c:	f7ff ffea 	bl	801da64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801da90:	b118      	cbz	r0, 801da9a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801da92:	4b02      	ldr	r3, [pc, #8]	; (801da9c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801da9a:	bd08      	pop	{r3, pc}
 801da9c:	2000615c 	.word	0x2000615c

0801daa0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801daa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801daa4:	4d28      	ldr	r5, [pc, #160]	; (801db48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801daa6:	682b      	ldr	r3, [r5, #0]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d04a      	beq.n	801db42 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801daac:	4a27      	ldr	r2, [pc, #156]	; (801db4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801daae:	4e28      	ldr	r6, [pc, #160]	; (801db50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801dab0:	8810      	ldrh	r0, [r2, #0]
 801dab2:	f8b6 8000 	ldrh.w	r8, [r6]
 801dab6:	4c27      	ldr	r4, [pc, #156]	; (801db54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801dab8:	4440      	add	r0, r8
 801daba:	4f27      	ldr	r7, [pc, #156]	; (801db58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801dabc:	1c41      	adds	r1, r0, #1
 801dabe:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801dac2:	f021 0101 	bic.w	r1, r1, #1
 801dac6:	eb03 020e 	add.w	r2, r3, lr
 801daca:	0409      	lsls	r1, r1, #16
 801dacc:	6022      	str	r2, [r4, #0]
 801dace:	0c09      	lsrs	r1, r1, #16
 801dad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801dad4:	eb0e 010c 	add.w	r1, lr, ip
 801dad8:	185a      	adds	r2, r3, r1
 801dada:	603a      	str	r2, [r7, #0]
 801dadc:	220e      	movs	r2, #14
 801dade:	fb02 f208 	mul.w	r2, r2, r8
 801dae2:	3203      	adds	r2, #3
 801dae4:	f022 0203 	bic.w	r2, r2, #3
 801dae8:	4411      	add	r1, r2
 801daea:	440b      	add	r3, r1
 801daec:	491b      	ldr	r1, [pc, #108]	; (801db5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801daee:	600b      	str	r3, [r1, #0]
 801daf0:	2300      	movs	r3, #0
 801daf2:	491b      	ldr	r1, [pc, #108]	; (801db60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801daf4:	800b      	strh	r3, [r1, #0]
 801daf6:	491b      	ldr	r1, [pc, #108]	; (801db64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801daf8:	6809      	ldr	r1, [r1, #0]
 801dafa:	eba1 010e 	sub.w	r1, r1, lr
 801dafe:	eba1 010c 	sub.w	r1, r1, ip
 801db02:	469c      	mov	ip, r3
 801db04:	1a8a      	subs	r2, r1, r2
 801db06:	4918      	ldr	r1, [pc, #96]	; (801db68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801db08:	600a      	str	r2, [r1, #0]
 801db0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801db0e:	4a17      	ldr	r2, [pc, #92]	; (801db6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801db10:	8013      	strh	r3, [r2, #0]
 801db12:	4283      	cmp	r3, r0
 801db14:	d10d      	bne.n	801db32 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801db16:	8835      	ldrh	r5, [r6, #0]
 801db18:	2300      	movs	r3, #0
 801db1a:	6838      	ldr	r0, [r7, #0]
 801db1c:	240e      	movs	r4, #14
 801db1e:	429d      	cmp	r5, r3
 801db20:	d90f      	bls.n	801db42 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801db22:	fb04 0203 	mla	r2, r4, r3, r0
 801db26:	3301      	adds	r3, #1
 801db28:	7b11      	ldrb	r1, [r2, #12]
 801db2a:	f36f 1145 	bfc	r1, #5, #1
 801db2e:	7311      	strb	r1, [r2, #12]
 801db30:	e7f5      	b.n	801db1e <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801db32:	682a      	ldr	r2, [r5, #0]
 801db34:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801db38:	6822      	ldr	r2, [r4, #0]
 801db3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801db3e:	3301      	adds	r3, #1
 801db40:	e7e7      	b.n	801db12 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801db42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db46:	bf00      	nop
 801db48:	2000615c 	.word	0x2000615c
 801db4c:	20006178 	.word	0x20006178
 801db50:	2000617c 	.word	0x2000617c
 801db54:	20006170 	.word	0x20006170
 801db58:	20006160 	.word	0x20006160
 801db5c:	20006168 	.word	0x20006168
 801db60:	2000617a 	.word	0x2000617a
 801db64:	20006164 	.word	0x20006164
 801db68:	20006174 	.word	0x20006174
 801db6c:	2000616c 	.word	0x2000616c

0801db70 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801db70:	4b10      	ldr	r3, [pc, #64]	; (801dbb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801db72:	b510      	push	{r4, lr}
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	b9db      	cbnz	r3, 801dbb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801db78:	b1d1      	cbz	r1, 801dbb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801db7a:	4b0f      	ldr	r3, [pc, #60]	; (801dbb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801db7c:	240e      	movs	r4, #14
 801db7e:	801a      	strh	r2, [r3, #0]
 801db80:	b292      	uxth	r2, r2
 801db82:	4b0e      	ldr	r3, [pc, #56]	; (801dbbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801db84:	881b      	ldrh	r3, [r3, #0]
 801db86:	4413      	add	r3, r2
 801db88:	4362      	muls	r2, r4
 801db8a:	2406      	movs	r4, #6
 801db8c:	fb04 2203 	mla	r2, r4, r3, r2
 801db90:	428a      	cmp	r2, r1
 801db92:	d305      	bcc.n	801dba0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801db94:	4b0a      	ldr	r3, [pc, #40]	; (801dbc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801db96:	2137      	movs	r1, #55	; 0x37
 801db98:	4a0a      	ldr	r2, [pc, #40]	; (801dbc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801db9a:	480b      	ldr	r0, [pc, #44]	; (801dbc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801db9c:	f00a f9d0 	bl	8027f40 <__assert_func>
 801dba0:	4b0a      	ldr	r3, [pc, #40]	; (801dbcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801dba2:	6019      	str	r1, [r3, #0]
 801dba4:	4b0a      	ldr	r3, [pc, #40]	; (801dbd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801dba6:	6018      	str	r0, [r3, #0]
 801dba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbac:	f7ff bf78 	b.w	801daa0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dbb0:	bd10      	pop	{r4, pc}
 801dbb2:	bf00      	nop
 801dbb4:	20006168 	.word	0x20006168
 801dbb8:	2000617c 	.word	0x2000617c
 801dbbc:	20006178 	.word	0x20006178
 801dbc0:	0802c639 	.word	0x0802c639
 801dbc4:	0802c692 	.word	0x0802c692
 801dbc8:	0802c614 	.word	0x0802c614
 801dbcc:	20006164 	.word	0x20006164
 801dbd0:	2000615c 	.word	0x2000615c

0801dbd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dbd4:	b470      	push	{r4, r5, r6}
 801dbd6:	4c07      	ldr	r4, [pc, #28]	; (801dbf4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dbd8:	4605      	mov	r5, r0
 801dbda:	4610      	mov	r0, r2
 801dbdc:	9a03      	ldr	r2, [sp, #12]
 801dbde:	6826      	ldr	r6, [r4, #0]
 801dbe0:	b936      	cbnz	r6, 801dbf0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dbe2:	6025      	str	r5, [r4, #0]
 801dbe4:	4c04      	ldr	r4, [pc, #16]	; (801dbf8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dbe6:	8021      	strh	r1, [r4, #0]
 801dbe8:	4619      	mov	r1, r3
 801dbea:	bc70      	pop	{r4, r5, r6}
 801dbec:	f7ff bfc0 	b.w	801db70 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dbf0:	bc70      	pop	{r4, r5, r6}
 801dbf2:	4770      	bx	lr
 801dbf4:	20006180 	.word	0x20006180
 801dbf8:	20006178 	.word	0x20006178

0801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dbfc:	b508      	push	{r3, lr}
 801dbfe:	4b14      	ldr	r3, [pc, #80]	; (801dc50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dc00:	6819      	ldr	r1, [r3, #0]
 801dc02:	b931      	cbnz	r1, 801dc12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801dc04:	4b13      	ldr	r3, [pc, #76]	; (801dc54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dc06:	f240 3187 	movw	r1, #903	; 0x387
 801dc0a:	4a13      	ldr	r2, [pc, #76]	; (801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dc0c:	4813      	ldr	r0, [pc, #76]	; (801dc5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dc0e:	f00a f997 	bl	8027f40 <__assert_func>
 801dc12:	4a13      	ldr	r2, [pc, #76]	; (801dc60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dc14:	8803      	ldrh	r3, [r0, #0]
 801dc16:	8812      	ldrh	r2, [r2, #0]
 801dc18:	4293      	cmp	r3, r2
 801dc1a:	d204      	bcs.n	801dc26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801dc1c:	2214      	movs	r2, #20
 801dc1e:	fb02 1303 	mla	r3, r2, r3, r1
 801dc22:	8918      	ldrh	r0, [r3, #8]
 801dc24:	bd08      	pop	{r3, pc}
 801dc26:	490f      	ldr	r1, [pc, #60]	; (801dc64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801dc28:	8809      	ldrh	r1, [r1, #0]
 801dc2a:	4411      	add	r1, r2
 801dc2c:	428b      	cmp	r3, r1
 801dc2e:	da06      	bge.n	801dc3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801dc30:	1a9b      	subs	r3, r3, r2
 801dc32:	4a0d      	ldr	r2, [pc, #52]	; (801dc68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801dc34:	210e      	movs	r1, #14
 801dc36:	6812      	ldr	r2, [r2, #0]
 801dc38:	fb01 2303 	mla	r3, r1, r3, r2
 801dc3c:	e7f1      	b.n	801dc22 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801dc3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dc42:	4293      	cmp	r3, r2
 801dc44:	bf0a      	itet	eq
 801dc46:	4b09      	ldreq	r3, [pc, #36]	; (801dc6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801dc48:	2000      	movne	r0, #0
 801dc4a:	8818      	ldrheq	r0, [r3, #0]
 801dc4c:	e7ea      	b.n	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801dc4e:	bf00      	nop
 801dc50:	20006180 	.word	0x20006180
 801dc54:	0802ba15 	.word	0x0802ba15
 801dc58:	0802c73f 	.word	0x0802c73f
 801dc5c:	0802c614 	.word	0x0802c614
 801dc60:	20006178 	.word	0x20006178
 801dc64:	2000617c 	.word	0x2000617c
 801dc68:	20006160 	.word	0x20006160
 801dc6c:	200060ea 	.word	0x200060ea

0801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dc70:	b508      	push	{r3, lr}
 801dc72:	4b14      	ldr	r3, [pc, #80]	; (801dcc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dc74:	6819      	ldr	r1, [r3, #0]
 801dc76:	b931      	cbnz	r1, 801dc86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801dc78:	4b13      	ldr	r3, [pc, #76]	; (801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dc7a:	f240 319b 	movw	r1, #923	; 0x39b
 801dc7e:	4a13      	ldr	r2, [pc, #76]	; (801dccc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dc80:	4813      	ldr	r0, [pc, #76]	; (801dcd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dc82:	f00a f95d 	bl	8027f40 <__assert_func>
 801dc86:	4a13      	ldr	r2, [pc, #76]	; (801dcd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dc88:	8803      	ldrh	r3, [r0, #0]
 801dc8a:	8812      	ldrh	r2, [r2, #0]
 801dc8c:	4293      	cmp	r3, r2
 801dc8e:	d204      	bcs.n	801dc9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801dc90:	2214      	movs	r2, #20
 801dc92:	fb02 1303 	mla	r3, r2, r3, r1
 801dc96:	8958      	ldrh	r0, [r3, #10]
 801dc98:	bd08      	pop	{r3, pc}
 801dc9a:	490f      	ldr	r1, [pc, #60]	; (801dcd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801dc9c:	8809      	ldrh	r1, [r1, #0]
 801dc9e:	4411      	add	r1, r2
 801dca0:	428b      	cmp	r3, r1
 801dca2:	da06      	bge.n	801dcb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801dca4:	1a9b      	subs	r3, r3, r2
 801dca6:	4a0d      	ldr	r2, [pc, #52]	; (801dcdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801dca8:	210e      	movs	r1, #14
 801dcaa:	6812      	ldr	r2, [r2, #0]
 801dcac:	fb01 2303 	mla	r3, r1, r3, r2
 801dcb0:	e7f1      	b.n	801dc96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801dcb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dcb6:	4293      	cmp	r3, r2
 801dcb8:	bf0a      	itet	eq
 801dcba:	4b09      	ldreq	r3, [pc, #36]	; (801dce0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801dcbc:	2000      	movne	r0, #0
 801dcbe:	8818      	ldrheq	r0, [r3, #0]
 801dcc0:	e7ea      	b.n	801dc98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801dcc2:	bf00      	nop
 801dcc4:	20006180 	.word	0x20006180
 801dcc8:	0802ba15 	.word	0x0802ba15
 801dccc:	0802c76b 	.word	0x0802c76b
 801dcd0:	0802c614 	.word	0x0802c614
 801dcd4:	20006178 	.word	0x20006178
 801dcd8:	2000617c 	.word	0x2000617c
 801dcdc:	20006160 	.word	0x20006160
 801dce0:	200060ec 	.word	0x200060ec

0801dce4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dce4:	4b23      	ldr	r3, [pc, #140]	; (801dd74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801dce6:	b510      	push	{r4, lr}
 801dce8:	681c      	ldr	r4, [r3, #0]
 801dcea:	b934      	cbnz	r4, 801dcfa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801dcec:	4b22      	ldr	r3, [pc, #136]	; (801dd78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801dcee:	f240 31af 	movw	r1, #943	; 0x3af
 801dcf2:	4a22      	ldr	r2, [pc, #136]	; (801dd7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801dcf4:	4822      	ldr	r0, [pc, #136]	; (801dd80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801dcf6:	f00a f923 	bl	8027f40 <__assert_func>
 801dcfa:	4a22      	ldr	r2, [pc, #136]	; (801dd84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801dcfc:	880b      	ldrh	r3, [r1, #0]
 801dcfe:	8812      	ldrh	r2, [r2, #0]
 801dd00:	4293      	cmp	r3, r2
 801dd02:	d211      	bcs.n	801dd28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801dd04:	2214      	movs	r2, #20
 801dd06:	fb02 4303 	mla	r3, r2, r3, r4
 801dd0a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801dd0e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801dd12:	8a1a      	ldrh	r2, [r3, #16]
 801dd14:	8a5b      	ldrh	r3, [r3, #18]
 801dd16:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dd1a:	8004      	strh	r4, [r0, #0]
 801dd1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd20:	8041      	strh	r1, [r0, #2]
 801dd22:	8082      	strh	r2, [r0, #4]
 801dd24:	80c3      	strh	r3, [r0, #6]
 801dd26:	e00e      	b.n	801dd46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801dd28:	4917      	ldr	r1, [pc, #92]	; (801dd88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801dd2a:	8809      	ldrh	r1, [r1, #0]
 801dd2c:	4411      	add	r1, r2
 801dd2e:	428b      	cmp	r3, r1
 801dd30:	da0a      	bge.n	801dd48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801dd32:	1a9b      	subs	r3, r3, r2
 801dd34:	4a15      	ldr	r2, [pc, #84]	; (801dd8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801dd36:	210e      	movs	r1, #14
 801dd38:	6812      	ldr	r2, [r2, #0]
 801dd3a:	fb01 2303 	mla	r3, r1, r3, r2
 801dd3e:	681a      	ldr	r2, [r3, #0]
 801dd40:	6002      	str	r2, [r0, #0]
 801dd42:	685a      	ldr	r2, [r3, #4]
 801dd44:	6042      	str	r2, [r0, #4]
 801dd46:	bd10      	pop	{r4, pc}
 801dd48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd4c:	4293      	cmp	r3, r2
 801dd4e:	d10b      	bne.n	801dd68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801dd50:	4b0f      	ldr	r3, [pc, #60]	; (801dd90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801dd52:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dd56:	4b0f      	ldr	r3, [pc, #60]	; (801dd94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801dd58:	8081      	strh	r1, [r0, #4]
 801dd5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dd5e:	2300      	movs	r3, #0
 801dd60:	80c2      	strh	r2, [r0, #6]
 801dd62:	8003      	strh	r3, [r0, #0]
 801dd64:	8043      	strh	r3, [r0, #2]
 801dd66:	e7ee      	b.n	801dd46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801dd68:	2300      	movs	r3, #0
 801dd6a:	8003      	strh	r3, [r0, #0]
 801dd6c:	8043      	strh	r3, [r0, #2]
 801dd6e:	8083      	strh	r3, [r0, #4]
 801dd70:	e7d8      	b.n	801dd24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801dd72:	bf00      	nop
 801dd74:	20006180 	.word	0x20006180
 801dd78:	0802ba15 	.word	0x0802ba15
 801dd7c:	0802c6d8 	.word	0x0802c6d8
 801dd80:	0802c614 	.word	0x0802c614
 801dd84:	20006178 	.word	0x20006178
 801dd88:	2000617c 	.word	0x2000617c
 801dd8c:	20006160 	.word	0x20006160
 801dd90:	200060ea 	.word	0x200060ea
 801dd94:	200060ec 	.word	0x200060ec

0801dd98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801dd98:	4b18      	ldr	r3, [pc, #96]	; (801ddfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	b34b      	cbz	r3, 801ddf2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801dd9e:	4a18      	ldr	r2, [pc, #96]	; (801de00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801dda0:	8800      	ldrh	r0, [r0, #0]
 801dda2:	8812      	ldrh	r2, [r2, #0]
 801dda4:	4290      	cmp	r0, r2
 801dda6:	d211      	bcs.n	801ddcc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801dda8:	2214      	movs	r2, #20
 801ddaa:	fb02 3300 	mla	r3, r2, r0, r3
 801ddae:	8a1a      	ldrh	r2, [r3, #16]
 801ddb0:	8919      	ldrh	r1, [r3, #8]
 801ddb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ddb6:	428a      	cmp	r2, r1
 801ddb8:	db1d      	blt.n	801ddf6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ddba:	8a58      	ldrh	r0, [r3, #18]
 801ddbc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ddc0:	895b      	ldrh	r3, [r3, #10]
 801ddc2:	4298      	cmp	r0, r3
 801ddc4:	bfac      	ite	ge
 801ddc6:	2000      	movge	r0, #0
 801ddc8:	2001      	movlt	r0, #1
 801ddca:	4770      	bx	lr
 801ddcc:	4b0d      	ldr	r3, [pc, #52]	; (801de04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ddce:	881b      	ldrh	r3, [r3, #0]
 801ddd0:	4413      	add	r3, r2
 801ddd2:	4298      	cmp	r0, r3
 801ddd4:	da0d      	bge.n	801ddf2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ddd6:	4b0c      	ldr	r3, [pc, #48]	; (801de08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801ddd8:	1a80      	subs	r0, r0, r2
 801ddda:	220e      	movs	r2, #14
 801dddc:	681b      	ldr	r3, [r3, #0]
 801ddde:	fb02 3300 	mla	r3, r2, r0, r3
 801dde2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801dde6:	891a      	ldrh	r2, [r3, #8]
 801dde8:	4291      	cmp	r1, r2
 801ddea:	db04      	blt.n	801ddf6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ddec:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ddf0:	e7e6      	b.n	801ddc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801ddf2:	2000      	movs	r0, #0
 801ddf4:	4770      	bx	lr
 801ddf6:	2001      	movs	r0, #1
 801ddf8:	4770      	bx	lr
 801ddfa:	bf00      	nop
 801ddfc:	20006180 	.word	0x20006180
 801de00:	20006178 	.word	0x20006178
 801de04:	2000617c 	.word	0x2000617c
 801de08:	20006160 	.word	0x20006160

0801de0c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801de0c:	b508      	push	{r3, lr}
 801de0e:	4b12      	ldr	r3, [pc, #72]	; (801de58 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801de10:	6819      	ldr	r1, [r3, #0]
 801de12:	b931      	cbnz	r1, 801de22 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801de14:	4b11      	ldr	r3, [pc, #68]	; (801de5c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801de16:	f240 31d3 	movw	r1, #979	; 0x3d3
 801de1a:	4a11      	ldr	r2, [pc, #68]	; (801de60 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801de1c:	4811      	ldr	r0, [pc, #68]	; (801de64 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801de1e:	f00a f88f 	bl	8027f40 <__assert_func>
 801de22:	8803      	ldrh	r3, [r0, #0]
 801de24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801de28:	4293      	cmp	r3, r2
 801de2a:	d012      	beq.n	801de52 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801de2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801de30:	4293      	cmp	r3, r2
 801de32:	d103      	bne.n	801de3c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801de34:	4b0c      	ldr	r3, [pc, #48]	; (801de68 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801de3a:	bd08      	pop	{r3, pc}
 801de3c:	4a0b      	ldr	r2, [pc, #44]	; (801de6c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801de3e:	6812      	ldr	r2, [r2, #0]
 801de40:	b11a      	cbz	r2, 801de4a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801de42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801de46:	2800      	cmp	r0, #0
 801de48:	d1f7      	bne.n	801de3a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801de4a:	2214      	movs	r2, #20
 801de4c:	4353      	muls	r3, r2
 801de4e:	58c8      	ldr	r0, [r1, r3]
 801de50:	e7f3      	b.n	801de3a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801de52:	2000      	movs	r0, #0
 801de54:	e7f1      	b.n	801de3a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801de56:	bf00      	nop
 801de58:	20006180 	.word	0x20006180
 801de5c:	0802ba15 	.word	0x0802ba15
 801de60:	0802c70e 	.word	0x0802c70e
 801de64:	0802c614 	.word	0x0802c614
 801de68:	200060f8 	.word	0x200060f8
 801de6c:	2000615c 	.word	0x2000615c

0801de70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801de70:	8802      	ldrh	r2, [r0, #0]
 801de72:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801de76:	429a      	cmp	r2, r3
 801de78:	d845      	bhi.n	801df06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801de7a:	4b24      	ldr	r3, [pc, #144]	; (801df0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801de7c:	8818      	ldrh	r0, [r3, #0]
 801de7e:	4282      	cmp	r2, r0
 801de80:	d221      	bcs.n	801dec6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801de82:	4b23      	ldr	r3, [pc, #140]	; (801df10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801de84:	6819      	ldr	r1, [r3, #0]
 801de86:	2314      	movs	r3, #20
 801de88:	fb03 1302 	mla	r3, r3, r2, r1
 801de8c:	6858      	ldr	r0, [r3, #4]
 801de8e:	2800      	cmp	r0, #0
 801de90:	d03a      	beq.n	801df08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801de92:	4920      	ldr	r1, [pc, #128]	; (801df14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801de94:	6809      	ldr	r1, [r1, #0]
 801de96:	2900      	cmp	r1, #0
 801de98:	d036      	beq.n	801df08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801de9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801de9e:	2900      	cmp	r1, #0
 801dea0:	d032      	beq.n	801df08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801dea2:	891a      	ldrh	r2, [r3, #8]
 801dea4:	8958      	ldrh	r0, [r3, #10]
 801dea6:	4350      	muls	r0, r2
 801dea8:	7c5a      	ldrb	r2, [r3, #17]
 801deaa:	7cdb      	ldrb	r3, [r3, #19]
 801deac:	0952      	lsrs	r2, r2, #5
 801deae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801deb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801deb6:	2b0b      	cmp	r3, #11
 801deb8:	bf18      	it	ne
 801deba:	0040      	lslne	r0, r0, #1
 801debc:	3003      	adds	r0, #3
 801debe:	f020 0003 	bic.w	r0, r0, #3
 801dec2:	4408      	add	r0, r1
 801dec4:	4770      	bx	lr
 801dec6:	4b14      	ldr	r3, [pc, #80]	; (801df18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801dec8:	881b      	ldrh	r3, [r3, #0]
 801deca:	4403      	add	r3, r0
 801decc:	429a      	cmp	r2, r3
 801dece:	da1a      	bge.n	801df06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ded0:	4b12      	ldr	r3, [pc, #72]	; (801df1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801ded2:	1a10      	subs	r0, r2, r0
 801ded4:	210e      	movs	r1, #14
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	fb01 3000 	mla	r0, r1, r0, r3
 801dedc:	7b03      	ldrb	r3, [r0, #12]
 801dede:	f003 031f 	and.w	r3, r3, #31
 801dee2:	2b0b      	cmp	r3, #11
 801dee4:	d10b      	bne.n	801defe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801dee6:	8903      	ldrh	r3, [r0, #8]
 801dee8:	8940      	ldrh	r0, [r0, #10]
 801deea:	4358      	muls	r0, r3
 801deec:	4b09      	ldr	r3, [pc, #36]	; (801df14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801deee:	3003      	adds	r0, #3
 801def0:	6819      	ldr	r1, [r3, #0]
 801def2:	f020 0303 	bic.w	r3, r0, #3
 801def6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801defa:	4418      	add	r0, r3
 801defc:	4770      	bx	lr
 801defe:	2b0d      	cmp	r3, #13
 801df00:	d101      	bne.n	801df06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801df02:	300d      	adds	r0, #13
 801df04:	4770      	bx	lr
 801df06:	2000      	movs	r0, #0
 801df08:	4770      	bx	lr
 801df0a:	bf00      	nop
 801df0c:	20006178 	.word	0x20006178
 801df10:	20006180 	.word	0x20006180
 801df14:	2000615c 	.word	0x2000615c
 801df18:	2000617c 	.word	0x2000617c
 801df1c:	20006160 	.word	0x20006160

0801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801df20:	4b19      	ldr	r3, [pc, #100]	; (801df88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801df22:	6819      	ldr	r1, [r3, #0]
 801df24:	8803      	ldrh	r3, [r0, #0]
 801df26:	b1e9      	cbz	r1, 801df64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801df28:	4a18      	ldr	r2, [pc, #96]	; (801df8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801df2a:	8812      	ldrh	r2, [r2, #0]
 801df2c:	429a      	cmp	r2, r3
 801df2e:	d90a      	bls.n	801df46 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801df30:	2214      	movs	r2, #20
 801df32:	fb02 1303 	mla	r3, r2, r3, r1
 801df36:	7c58      	ldrb	r0, [r3, #17]
 801df38:	0942      	lsrs	r2, r0, #5
 801df3a:	7cd8      	ldrb	r0, [r3, #19]
 801df3c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801df40:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801df44:	4770      	bx	lr
 801df46:	4912      	ldr	r1, [pc, #72]	; (801df90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801df48:	8809      	ldrh	r1, [r1, #0]
 801df4a:	4411      	add	r1, r2
 801df4c:	428b      	cmp	r3, r1
 801df4e:	da09      	bge.n	801df64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801df50:	1a9b      	subs	r3, r3, r2
 801df52:	4a10      	ldr	r2, [pc, #64]	; (801df94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801df54:	210e      	movs	r1, #14
 801df56:	6812      	ldr	r2, [r2, #0]
 801df58:	fb01 2303 	mla	r3, r1, r3, r2
 801df5c:	7b18      	ldrb	r0, [r3, #12]
 801df5e:	f000 001f 	and.w	r0, r0, #31
 801df62:	4770      	bx	lr
 801df64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801df68:	4293      	cmp	r3, r2
 801df6a:	d10a      	bne.n	801df82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801df6c:	4b0a      	ldr	r3, [pc, #40]	; (801df98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801df74:	b10a      	cbz	r2, 801df7a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801df76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801df78:	b900      	cbnz	r0, 801df7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801df7a:	6898      	ldr	r0, [r3, #8]
 801df7c:	6803      	ldr	r3, [r0, #0]
 801df7e:	6a1b      	ldr	r3, [r3, #32]
 801df80:	4718      	bx	r3
 801df82:	2000      	movs	r0, #0
 801df84:	4770      	bx	lr
 801df86:	bf00      	nop
 801df88:	20006180 	.word	0x20006180
 801df8c:	20006178 	.word	0x20006178
 801df90:	2000617c 	.word	0x2000617c
 801df94:	20006160 	.word	0x20006160
 801df98:	200060f8 	.word	0x200060f8

0801df9c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801df9c:	2018      	movs	r0, #24
 801df9e:	4770      	bx	lr

0801dfa0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801dfa0:	2001      	movs	r0, #1
 801dfa2:	4770      	bx	lr

0801dfa4 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801dfa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801dfa8:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801dfac:	4770      	bx	lr

0801dfae <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801dfae:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801dfb2:	4770      	bx	lr

0801dfb4 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801dfb4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801dfb8:	4770      	bx	lr

0801dfba <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801dfba:	b2c8      	uxtb	r0, r1
 801dfbc:	4770      	bx	lr

0801dfbe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dfbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfc2:	b085      	sub	sp, #20
 801dfc4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801dfc6:	9203      	str	r2, [sp, #12]
 801dfc8:	6870      	ldr	r0, [r6, #4]
 801dfca:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801dfce:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801dfd2:	9101      	str	r1, [sp, #4]
 801dfd4:	fa1f f885 	uxth.w	r8, r5
 801dfd8:	43ed      	mvns	r5, r5
 801dfda:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801dfde:	b2ed      	uxtb	r5, r5
 801dfe0:	fb00 2404 	mla	r4, r0, r4, r2
 801dfe4:	6832      	ldr	r2, [r6, #0]
 801dfe6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dfea:	4414      	add	r4, r2
 801dfec:	f8dc 2000 	ldr.w	r2, [ip]
 801dff0:	9202      	str	r2, [sp, #8]
 801dff2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801dff6:	f102 0e04 	add.w	lr, r2, #4
 801dffa:	9a01      	ldr	r2, [sp, #4]
 801dffc:	2a00      	cmp	r2, #0
 801dffe:	dc03      	bgt.n	801e008 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e000:	9a03      	ldr	r2, [sp, #12]
 801e002:	2a00      	cmp	r2, #0
 801e004:	f340 8116 	ble.w	801e234 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e00a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801e00e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e012:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e014:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801e018:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	dd0e      	ble.n	801e03e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e020:	1406      	asrs	r6, r0, #16
 801e022:	d405      	bmi.n	801e030 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e024:	4556      	cmp	r6, sl
 801e026:	da03      	bge.n	801e030 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e028:	1416      	asrs	r6, r2, #16
 801e02a:	d401      	bmi.n	801e030 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e02c:	454e      	cmp	r6, r9
 801e02e:	db07      	blt.n	801e040 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e030:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e032:	3b01      	subs	r3, #1
 801e034:	3403      	adds	r4, #3
 801e036:	4430      	add	r0, r6
 801e038:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e03a:	4432      	add	r2, r6
 801e03c:	e7ee      	b.n	801e01c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e03e:	d063      	beq.n	801e108 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e040:	1e5e      	subs	r6, r3, #1
 801e042:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801e044:	fb07 0706 	mla	r7, r7, r6, r0
 801e048:	143f      	asrs	r7, r7, #16
 801e04a:	d454      	bmi.n	801e0f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e04c:	4557      	cmp	r7, sl
 801e04e:	da52      	bge.n	801e0f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e050:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801e052:	fb07 2606 	mla	r6, r7, r6, r2
 801e056:	1436      	asrs	r6, r6, #16
 801e058:	d44d      	bmi.n	801e0f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e05a:	454e      	cmp	r6, r9
 801e05c:	da4b      	bge.n	801e0f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e05e:	1ce6      	adds	r6, r4, #3
 801e060:	4699      	mov	r9, r3
 801e062:	f1b9 0f00 	cmp.w	r9, #0
 801e066:	f106 0603 	add.w	r6, r6, #3
 801e06a:	dd48      	ble.n	801e0fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801e06c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801e070:	1417      	asrs	r7, r2, #16
 801e072:	9902      	ldr	r1, [sp, #8]
 801e074:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e078:	f109 39ff 	add.w	r9, r9, #4294967295
 801e07c:	fb0b 1707 	mla	r7, fp, r7, r1
 801e080:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e084:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e086:	f817 700a 	ldrb.w	r7, [r7, sl]
 801e08a:	fb1b fb05 	smulbb	fp, fp, r5
 801e08e:	4408      	add	r0, r1
 801e090:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e092:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e096:	440a      	add	r2, r1
 801e098:	eb0e 0a07 	add.w	sl, lr, r7
 801e09c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801e0a0:	fb07 b708 	mla	r7, r7, r8, fp
 801e0a4:	b2bf      	uxth	r7, r7
 801e0a6:	f107 0b01 	add.w	fp, r7, #1
 801e0aa:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e0ae:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e0b2:	fb1b fb05 	smulbb	fp, fp, r5
 801e0b6:	123f      	asrs	r7, r7, #8
 801e0b8:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e0bc:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e0c0:	fb07 b708 	mla	r7, r7, r8, fp
 801e0c4:	b2bf      	uxth	r7, r7
 801e0c6:	f107 0b01 	add.w	fp, r7, #1
 801e0ca:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e0ce:	123f      	asrs	r7, r7, #8
 801e0d0:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e0d4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e0d8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e0dc:	fb1a fa05 	smulbb	sl, sl, r5
 801e0e0:	fb07 a708 	mla	r7, r7, r8, sl
 801e0e4:	b2bf      	uxth	r7, r7
 801e0e6:	f107 0a01 	add.w	sl, r7, #1
 801e0ea:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e0ee:	123f      	asrs	r7, r7, #8
 801e0f0:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e0f4:	e7b5      	b.n	801e062 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801e0f6:	2700      	movs	r7, #0
 801e0f8:	1bde      	subs	r6, r3, r7
 801e0fa:	2e00      	cmp	r6, #0
 801e0fc:	dc42      	bgt.n	801e184 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801e0fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e106:	441c      	add	r4, r3
 801e108:	9b01      	ldr	r3, [sp, #4]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	f340 8092 	ble.w	801e234 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e116:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e11a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e11e:	eef0 6a62 	vmov.f32	s13, s5
 801e122:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e126:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e12a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e12e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801e132:	eef0 6a43 	vmov.f32	s13, s6
 801e136:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e13a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801e13e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e142:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e146:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e14a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e14e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e152:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e156:	ee12 2a90 	vmov	r2, s5
 801e15a:	eef0 2a47 	vmov.f32	s5, s14
 801e15e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e162:	ee13 2a10 	vmov	r2, s6
 801e166:	9311      	str	r3, [sp, #68]	; 0x44
 801e168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e16a:	eeb0 3a67 	vmov.f32	s6, s15
 801e16e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e172:	9312      	str	r3, [sp, #72]	; 0x48
 801e174:	9b01      	ldr	r3, [sp, #4]
 801e176:	9a03      	ldr	r2, [sp, #12]
 801e178:	3b01      	subs	r3, #1
 801e17a:	9301      	str	r3, [sp, #4]
 801e17c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e17e:	bf08      	it	eq
 801e180:	4613      	moveq	r3, r2
 801e182:	e73a      	b.n	801dffa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e184:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e188:	d44e      	bmi.n	801e228 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e18a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e18e:	4556      	cmp	r6, sl
 801e190:	dd4a      	ble.n	801e228 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e192:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e196:	d447      	bmi.n	801e228 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e198:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801e19c:	4559      	cmp	r1, fp
 801e19e:	dd43      	ble.n	801e228 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e1a0:	fa0f f986 	sxth.w	r9, r6
 801e1a4:	9902      	ldr	r1, [sp, #8]
 801e1a6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e1aa:	fb0b 1909 	mla	r9, fp, r9, r1
 801e1ae:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e1b2:	f819 900a 	ldrb.w	r9, [r9, sl]
 801e1b6:	fb1b fb05 	smulbb	fp, fp, r5
 801e1ba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e1be:	eb0e 0a09 	add.w	sl, lr, r9
 801e1c2:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801e1c6:	fb09 b908 	mla	r9, r9, r8, fp
 801e1ca:	fa1f f989 	uxth.w	r9, r9
 801e1ce:	f109 0b01 	add.w	fp, r9, #1
 801e1d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e1d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e1da:	f804 9006 	strb.w	r9, [r4, r6]
 801e1de:	4426      	add	r6, r4
 801e1e0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e1e4:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e1e8:	fb1b fb05 	smulbb	fp, fp, r5
 801e1ec:	fb09 b908 	mla	r9, r9, r8, fp
 801e1f0:	fa1f f989 	uxth.w	r9, r9
 801e1f4:	f109 0b01 	add.w	fp, r9, #1
 801e1f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e1fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e200:	f886 9001 	strb.w	r9, [r6, #1]
 801e204:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e208:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e20c:	fb1a fa05 	smulbb	sl, sl, r5
 801e210:	fb09 a908 	mla	r9, r9, r8, sl
 801e214:	fa1f f989 	uxth.w	r9, r9
 801e218:	f109 0a01 	add.w	sl, r9, #1
 801e21c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e220:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e224:	f886 9002 	strb.w	r9, [r6, #2]
 801e228:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e22a:	3701      	adds	r7, #1
 801e22c:	4408      	add	r0, r1
 801e22e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e230:	440a      	add	r2, r1
 801e232:	e761      	b.n	801e0f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e234:	b005      	add	sp, #20
 801e236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e23a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e23a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e23e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e240:	4693      	mov	fp, r2
 801e242:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e248:	6868      	ldr	r0, [r5, #4]
 801e24a:	6877      	ldr	r7, [r6, #4]
 801e24c:	9100      	str	r1, [sp, #0]
 801e24e:	3704      	adds	r7, #4
 801e250:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e254:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801e258:	fb00 2404 	mla	r4, r0, r4, r2
 801e25c:	682a      	ldr	r2, [r5, #0]
 801e25e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e262:	4414      	add	r4, r2
 801e264:	6832      	ldr	r2, [r6, #0]
 801e266:	9201      	str	r2, [sp, #4]
 801e268:	9a00      	ldr	r2, [sp, #0]
 801e26a:	2a00      	cmp	r2, #0
 801e26c:	dc03      	bgt.n	801e276 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e26e:	f1bb 0f00 	cmp.w	fp, #0
 801e272:	f340 80bc 	ble.w	801e3ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e278:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801e27c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e282:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801e286:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	dd0c      	ble.n	801e2a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e28e:	1405      	asrs	r5, r0, #16
 801e290:	d405      	bmi.n	801e29e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e292:	4555      	cmp	r5, sl
 801e294:	da03      	bge.n	801e29e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e296:	1415      	asrs	r5, r2, #16
 801e298:	d401      	bmi.n	801e29e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e29a:	454d      	cmp	r5, r9
 801e29c:	db05      	blt.n	801e2aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e29e:	4440      	add	r0, r8
 801e2a0:	4472      	add	r2, lr
 801e2a2:	3b01      	subs	r3, #1
 801e2a4:	3403      	adds	r4, #3
 801e2a6:	e7f0      	b.n	801e28a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e2a8:	d03f      	beq.n	801e32a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801e2aa:	1e5d      	subs	r5, r3, #1
 801e2ac:	fb08 0c05 	mla	ip, r8, r5, r0
 801e2b0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801e2b4:	d42e      	bmi.n	801e314 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e2b6:	45d4      	cmp	ip, sl
 801e2b8:	da2c      	bge.n	801e314 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e2ba:	fb0e 2505 	mla	r5, lr, r5, r2
 801e2be:	142d      	asrs	r5, r5, #16
 801e2c0:	d428      	bmi.n	801e314 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e2c2:	454d      	cmp	r5, r9
 801e2c4:	da26      	bge.n	801e314 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e2c6:	1ce5      	adds	r5, r4, #3
 801e2c8:	469c      	mov	ip, r3
 801e2ca:	f1bc 0f00 	cmp.w	ip, #0
 801e2ce:	f105 0503 	add.w	r5, r5, #3
 801e2d2:	dd25      	ble.n	801e320 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801e2d4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801e2d8:	ea4f 4922 	mov.w	r9, r2, asr #16
 801e2dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e2e0:	4472      	add	r2, lr
 801e2e2:	468a      	mov	sl, r1
 801e2e4:	9901      	ldr	r1, [sp, #4]
 801e2e6:	fb0a 1909 	mla	r9, sl, r9, r1
 801e2ea:	1401      	asrs	r1, r0, #16
 801e2ec:	4440      	add	r0, r8
 801e2ee:	f819 9001 	ldrb.w	r9, [r9, r1]
 801e2f2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e2f6:	eb07 0a09 	add.w	sl, r7, r9
 801e2fa:	f817 9009 	ldrb.w	r9, [r7, r9]
 801e2fe:	f805 9c06 	strb.w	r9, [r5, #-6]
 801e302:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e306:	f805 9c05 	strb.w	r9, [r5, #-5]
 801e30a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e30e:	f805 9c04 	strb.w	r9, [r5, #-4]
 801e312:	e7da      	b.n	801e2ca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e314:	2500      	movs	r5, #0
 801e316:	eba3 0c05 	sub.w	ip, r3, r5
 801e31a:	f1bc 0f00 	cmp.w	ip, #0
 801e31e:	dc3b      	bgt.n	801e398 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e320:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e324:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e328:	441c      	add	r4, r3
 801e32a:	9b00      	ldr	r3, [sp, #0]
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	dd5e      	ble.n	801e3ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e330:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e336:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e33a:	eeb0 6a62 	vmov.f32	s12, s5
 801e33e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e342:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e346:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e34a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e34e:	eeb0 6a43 	vmov.f32	s12, s6
 801e352:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e356:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e35a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e35e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e362:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e366:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e36a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e36e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e372:	ee12 2a90 	vmov	r2, s5
 801e376:	eef0 2a47 	vmov.f32	s5, s14
 801e37a:	fb92 f8f3 	sdiv	r8, r2, r3
 801e37e:	ee13 2a10 	vmov	r2, s6
 801e382:	eeb0 3a67 	vmov.f32	s6, s15
 801e386:	fb92 fef3 	sdiv	lr, r2, r3
 801e38a:	9b00      	ldr	r3, [sp, #0]
 801e38c:	3b01      	subs	r3, #1
 801e38e:	9300      	str	r3, [sp, #0]
 801e390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e392:	bf08      	it	eq
 801e394:	465b      	moveq	r3, fp
 801e396:	e767      	b.n	801e268 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e398:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e39c:	d423      	bmi.n	801e3e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e39e:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801e3a2:	45cc      	cmp	ip, r9
 801e3a4:	dd1f      	ble.n	801e3e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e3a6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e3aa:	d41c      	bmi.n	801e3e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e3ac:	68f1      	ldr	r1, [r6, #12]
 801e3ae:	4551      	cmp	r1, sl
 801e3b0:	dd19      	ble.n	801e3e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e3b2:	fa0f fc8c 	sxth.w	ip, ip
 801e3b6:	9901      	ldr	r1, [sp, #4]
 801e3b8:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801e3bc:	f81c c009 	ldrb.w	ip, [ip, r9]
 801e3c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e3c4:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801e3c8:	eb07 090c 	add.w	r9, r7, ip
 801e3cc:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801e3d0:	f804 a00c 	strb.w	sl, [r4, ip]
 801e3d4:	44a4      	add	ip, r4
 801e3d6:	f899 a001 	ldrb.w	sl, [r9, #1]
 801e3da:	f88c a001 	strb.w	sl, [ip, #1]
 801e3de:	f899 9002 	ldrb.w	r9, [r9, #2]
 801e3e2:	f88c 9002 	strb.w	r9, [ip, #2]
 801e3e6:	4440      	add	r0, r8
 801e3e8:	4472      	add	r2, lr
 801e3ea:	3501      	adds	r5, #1
 801e3ec:	e793      	b.n	801e316 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801e3ee:	b003      	add	sp, #12
 801e3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3f8:	b085      	sub	sp, #20
 801e3fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e3fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e400:	9202      	str	r2, [sp, #8]
 801e402:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e406:	6860      	ldr	r0, [r4, #4]
 801e408:	9203      	str	r2, [sp, #12]
 801e40a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e40e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801e412:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e416:	fb00 2505 	mla	r5, r0, r5, r2
 801e41a:	6822      	ldr	r2, [r4, #0]
 801e41c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e420:	4415      	add	r5, r2
 801e422:	f8dc 2000 	ldr.w	r2, [ip]
 801e426:	9200      	str	r2, [sp, #0]
 801e428:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e42c:	3204      	adds	r2, #4
 801e42e:	9201      	str	r2, [sp, #4]
 801e430:	2900      	cmp	r1, #0
 801e432:	dc03      	bgt.n	801e43c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e434:	9a02      	ldr	r2, [sp, #8]
 801e436:	2a00      	cmp	r2, #0
 801e438:	f340 8127 	ble.w	801e68a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801e43c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e43e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e442:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e446:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e448:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e44c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e450:	2b00      	cmp	r3, #0
 801e452:	dd0d      	ble.n	801e470 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e454:	1422      	asrs	r2, r4, #16
 801e456:	d405      	bmi.n	801e464 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e458:	4542      	cmp	r2, r8
 801e45a:	da03      	bge.n	801e464 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e45c:	1402      	asrs	r2, r0, #16
 801e45e:	d401      	bmi.n	801e464 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e460:	42ba      	cmp	r2, r7
 801e462:	db06      	blt.n	801e472 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e466:	4474      	add	r4, lr
 801e468:	3b01      	subs	r3, #1
 801e46a:	3503      	adds	r5, #3
 801e46c:	4410      	add	r0, r2
 801e46e:	e7ef      	b.n	801e450 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e470:	d075      	beq.n	801e55e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e472:	1e5a      	subs	r2, r3, #1
 801e474:	fb0e 4602 	mla	r6, lr, r2, r4
 801e478:	1436      	asrs	r6, r6, #16
 801e47a:	d465      	bmi.n	801e548 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e47c:	4546      	cmp	r6, r8
 801e47e:	da63      	bge.n	801e548 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e480:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e482:	fb06 0202 	mla	r2, r6, r2, r0
 801e486:	1412      	asrs	r2, r2, #16
 801e488:	d45e      	bmi.n	801e548 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e48a:	42ba      	cmp	r2, r7
 801e48c:	da5c      	bge.n	801e548 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e48e:	1cef      	adds	r7, r5, #3
 801e490:	4699      	mov	r9, r3
 801e492:	f1b9 0f00 	cmp.w	r9, #0
 801e496:	dd5d      	ble.n	801e554 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e498:	1402      	asrs	r2, r0, #16
 801e49a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e49e:	1426      	asrs	r6, r4, #16
 801e4a0:	4692      	mov	sl, r2
 801e4a2:	9a00      	ldr	r2, [sp, #0]
 801e4a4:	fb08 220a 	mla	r2, r8, sl, r2
 801e4a8:	5d92      	ldrb	r2, [r2, r6]
 801e4aa:	9e01      	ldr	r6, [sp, #4]
 801e4ac:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801e4b0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801e4b4:	d041      	beq.n	801e53a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e4b6:	9a03      	ldr	r2, [sp, #12]
 801e4b8:	fa5f fb86 	uxtb.w	fp, r6
 801e4bc:	fb02 f808 	mul.w	r8, r2, r8
 801e4c0:	f108 0201 	add.w	r2, r8, #1
 801e4c4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801e4c8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801e4cc:	1212      	asrs	r2, r2, #8
 801e4ce:	fa1f fa82 	uxth.w	sl, r2
 801e4d2:	43d2      	mvns	r2, r2
 801e4d4:	fb1b fb0a 	smulbb	fp, fp, sl
 801e4d8:	b2d2      	uxtb	r2, r2
 801e4da:	fb08 b802 	mla	r8, r8, r2, fp
 801e4de:	fa1f f888 	uxth.w	r8, r8
 801e4e2:	f108 0b01 	add.w	fp, r8, #1
 801e4e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e4ea:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e4ee:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e4f2:	fb1b fb0a 	smulbb	fp, fp, sl
 801e4f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e4fa:	fb16 fa0a 	smulbb	sl, r6, sl
 801e4fe:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801e502:	f807 8c03 	strb.w	r8, [r7, #-3]
 801e506:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801e50a:	fb06 aa02 	mla	sl, r6, r2, sl
 801e50e:	fb08 b802 	mla	r8, r8, r2, fp
 801e512:	fa1f fa8a 	uxth.w	sl, sl
 801e516:	fa1f f888 	uxth.w	r8, r8
 801e51a:	f10a 0601 	add.w	r6, sl, #1
 801e51e:	f108 0b01 	add.w	fp, r8, #1
 801e522:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e526:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e52a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e52e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e532:	f807 ac01 	strb.w	sl, [r7, #-1]
 801e536:	f807 8c02 	strb.w	r8, [r7, #-2]
 801e53a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e53c:	4474      	add	r4, lr
 801e53e:	3703      	adds	r7, #3
 801e540:	f109 39ff 	add.w	r9, r9, #4294967295
 801e544:	4410      	add	r0, r2
 801e546:	e7a4      	b.n	801e492 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e548:	f04f 0800 	mov.w	r8, #0
 801e54c:	eba3 0208 	sub.w	r2, r3, r8
 801e550:	2a00      	cmp	r2, #0
 801e552:	dc3b      	bgt.n	801e5cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801e554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e55c:	441d      	add	r5, r3
 801e55e:	2900      	cmp	r1, #0
 801e560:	f340 8093 	ble.w	801e68a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801e564:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e56a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e56e:	3901      	subs	r1, #1
 801e570:	eeb0 6a62 	vmov.f32	s12, s5
 801e574:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e578:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e57c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e580:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e584:	eeb0 6a43 	vmov.f32	s12, s6
 801e588:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e58c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e590:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e594:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e598:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e59c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e5a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e5a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e5a8:	ee12 2a90 	vmov	r2, s5
 801e5ac:	eef0 2a47 	vmov.f32	s5, s14
 801e5b0:	fb92 fef3 	sdiv	lr, r2, r3
 801e5b4:	ee13 2a10 	vmov	r2, s6
 801e5b8:	eeb0 3a67 	vmov.f32	s6, s15
 801e5bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5c0:	9a02      	ldr	r2, [sp, #8]
 801e5c2:	9312      	str	r3, [sp, #72]	; 0x48
 801e5c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e5c6:	bf08      	it	eq
 801e5c8:	4613      	moveq	r3, r2
 801e5ca:	e731      	b.n	801e430 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e5cc:	1427      	asrs	r7, r4, #16
 801e5ce:	d456      	bmi.n	801e67e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e5d0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e5d4:	42be      	cmp	r6, r7
 801e5d6:	dd52      	ble.n	801e67e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e5d8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e5dc:	d44f      	bmi.n	801e67e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e5de:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e5e2:	454a      	cmp	r2, r9
 801e5e4:	dd4b      	ble.n	801e67e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e5e6:	9a00      	ldr	r2, [sp, #0]
 801e5e8:	b236      	sxth	r6, r6
 801e5ea:	fb09 2606 	mla	r6, r9, r6, r2
 801e5ee:	5df2      	ldrb	r2, [r6, r7]
 801e5f0:	9e01      	ldr	r6, [sp, #4]
 801e5f2:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e5f6:	0e3a      	lsrs	r2, r7, #24
 801e5f8:	d041      	beq.n	801e67e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e5fa:	9e03      	ldr	r6, [sp, #12]
 801e5fc:	fa5f fb87 	uxtb.w	fp, r7
 801e600:	4372      	muls	r2, r6
 801e602:	1c56      	adds	r6, r2, #1
 801e604:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e608:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801e60c:	1212      	asrs	r2, r2, #8
 801e60e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e612:	fa1f fa82 	uxth.w	sl, r2
 801e616:	43d2      	mvns	r2, r2
 801e618:	fb1b fb0a 	smulbb	fp, fp, sl
 801e61c:	b2d2      	uxtb	r2, r2
 801e61e:	fb09 b902 	mla	r9, r9, r2, fp
 801e622:	fa1f f989 	uxth.w	r9, r9
 801e626:	f109 0b01 	add.w	fp, r9, #1
 801e62a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e62e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e632:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e636:	fb1b fb0a 	smulbb	fp, fp, sl
 801e63a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e63e:	fb17 fa0a 	smulbb	sl, r7, sl
 801e642:	f805 9006 	strb.w	r9, [r5, r6]
 801e646:	442e      	add	r6, r5
 801e648:	78b7      	ldrb	r7, [r6, #2]
 801e64a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e64e:	fb07 aa02 	mla	sl, r7, r2, sl
 801e652:	fb09 b902 	mla	r9, r9, r2, fp
 801e656:	fa1f fa8a 	uxth.w	sl, sl
 801e65a:	fa1f f989 	uxth.w	r9, r9
 801e65e:	f10a 0701 	add.w	r7, sl, #1
 801e662:	f109 0b01 	add.w	fp, r9, #1
 801e666:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e66a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e66e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e672:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e676:	f886 a002 	strb.w	sl, [r6, #2]
 801e67a:	f886 9001 	strb.w	r9, [r6, #1]
 801e67e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e680:	4474      	add	r4, lr
 801e682:	f108 0801 	add.w	r8, r8, #1
 801e686:	4410      	add	r0, r2
 801e688:	e760      	b.n	801e54c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801e68a:	b005      	add	sp, #20
 801e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e690 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e694:	b085      	sub	sp, #20
 801e696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e69a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e69c:	9203      	str	r2, [sp, #12]
 801e69e:	6868      	ldr	r0, [r5, #4]
 801e6a0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e6a4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801e6a8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e6ac:	fb00 2404 	mla	r4, r0, r4, r2
 801e6b0:	682a      	ldr	r2, [r5, #0]
 801e6b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e6b6:	4414      	add	r4, r2
 801e6b8:	f8dc 2000 	ldr.w	r2, [ip]
 801e6bc:	9201      	str	r2, [sp, #4]
 801e6be:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e6c2:	3204      	adds	r2, #4
 801e6c4:	9202      	str	r2, [sp, #8]
 801e6c6:	2900      	cmp	r1, #0
 801e6c8:	dc03      	bgt.n	801e6d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e6ca:	9a03      	ldr	r2, [sp, #12]
 801e6cc:	2a00      	cmp	r2, #0
 801e6ce:	f340 8137 	ble.w	801e940 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e6d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e6d4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e6d8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e6dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e6de:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e6e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	dd0d      	ble.n	801e706 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e6ea:	1405      	asrs	r5, r0, #16
 801e6ec:	d405      	bmi.n	801e6fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e6ee:	4545      	cmp	r5, r8
 801e6f0:	da03      	bge.n	801e6fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e6f2:	1415      	asrs	r5, r2, #16
 801e6f4:	d401      	bmi.n	801e6fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e6f6:	42bd      	cmp	r5, r7
 801e6f8:	db06      	blt.n	801e708 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e6fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e6fc:	4470      	add	r0, lr
 801e6fe:	3b01      	subs	r3, #1
 801e700:	3403      	adds	r4, #3
 801e702:	442a      	add	r2, r5
 801e704:	e7ef      	b.n	801e6e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e706:	d070      	beq.n	801e7ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801e708:	1e5d      	subs	r5, r3, #1
 801e70a:	fb0e 0605 	mla	r6, lr, r5, r0
 801e70e:	1436      	asrs	r6, r6, #16
 801e710:	d462      	bmi.n	801e7d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e712:	4546      	cmp	r6, r8
 801e714:	da60      	bge.n	801e7d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e716:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e718:	fb06 2505 	mla	r5, r6, r5, r2
 801e71c:	142d      	asrs	r5, r5, #16
 801e71e:	d45b      	bmi.n	801e7d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e720:	42bd      	cmp	r5, r7
 801e722:	da59      	bge.n	801e7d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e724:	1ce5      	adds	r5, r4, #3
 801e726:	469a      	mov	sl, r3
 801e728:	f1ba 0f00 	cmp.w	sl, #0
 801e72c:	dd58      	ble.n	801e7e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801e72e:	1416      	asrs	r6, r2, #16
 801e730:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e734:	1407      	asrs	r7, r0, #16
 801e736:	46b1      	mov	r9, r6
 801e738:	9e01      	ldr	r6, [sp, #4]
 801e73a:	fb08 6609 	mla	r6, r8, r9, r6
 801e73e:	5df6      	ldrb	r6, [r6, r7]
 801e740:	9f02      	ldr	r7, [sp, #8]
 801e742:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801e746:	0e37      	lsrs	r7, r6, #24
 801e748:	2fff      	cmp	r7, #255	; 0xff
 801e74a:	f000 80f0 	beq.w	801e92e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801e74e:	fa5f f887 	uxtb.w	r8, r7
 801e752:	b3d7      	cbz	r7, 801e7ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e754:	fa1f f788 	uxth.w	r7, r8
 801e758:	ea6f 0808 	mvn.w	r8, r8
 801e75c:	fa5f fb86 	uxtb.w	fp, r6
 801e760:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801e764:	fa5f f888 	uxtb.w	r8, r8
 801e768:	fb1b fb07 	smulbb	fp, fp, r7
 801e76c:	fb09 b908 	mla	r9, r9, r8, fp
 801e770:	fa1f f989 	uxth.w	r9, r9
 801e774:	f109 0b01 	add.w	fp, r9, #1
 801e778:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e77c:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e780:	fb1b fb08 	smulbb	fp, fp, r8
 801e784:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e788:	f805 9c03 	strb.w	r9, [r5, #-3]
 801e78c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801e790:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e794:	fb09 b907 	mla	r9, r9, r7, fp
 801e798:	fa1f f989 	uxth.w	r9, r9
 801e79c:	f109 0b01 	add.w	fp, r9, #1
 801e7a0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e7a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7a8:	f805 9c02 	strb.w	r9, [r5, #-2]
 801e7ac:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801e7b0:	fb19 f808 	smulbb	r8, r9, r8
 801e7b4:	fb06 8607 	mla	r6, r6, r7, r8
 801e7b8:	b2b6      	uxth	r6, r6
 801e7ba:	f106 0801 	add.w	r8, r6, #1
 801e7be:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801e7c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e7c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 801e7ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e7cc:	4470      	add	r0, lr
 801e7ce:	3503      	adds	r5, #3
 801e7d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e7d4:	4432      	add	r2, r6
 801e7d6:	e7a7      	b.n	801e728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e7d8:	2600      	movs	r6, #0
 801e7da:	1b9d      	subs	r5, r3, r6
 801e7dc:	2d00      	cmp	r5, #0
 801e7de:	dc3b      	bgt.n	801e858 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e7e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e7e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7e8:	441c      	add	r4, r3
 801e7ea:	2900      	cmp	r1, #0
 801e7ec:	f340 80a8 	ble.w	801e940 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e7f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e7fa:	3901      	subs	r1, #1
 801e7fc:	eeb0 6a62 	vmov.f32	s12, s5
 801e800:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e804:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e808:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e80c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e810:	eeb0 6a43 	vmov.f32	s12, s6
 801e814:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e818:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e81c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e820:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e824:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e828:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e82c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e830:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e834:	ee12 2a90 	vmov	r2, s5
 801e838:	eef0 2a47 	vmov.f32	s5, s14
 801e83c:	fb92 fef3 	sdiv	lr, r2, r3
 801e840:	ee13 2a10 	vmov	r2, s6
 801e844:	eeb0 3a67 	vmov.f32	s6, s15
 801e848:	fb92 f3f3 	sdiv	r3, r2, r3
 801e84c:	9a03      	ldr	r2, [sp, #12]
 801e84e:	9312      	str	r3, [sp, #72]	; 0x48
 801e850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e852:	bf08      	it	eq
 801e854:	4613      	moveq	r3, r2
 801e856:	e736      	b.n	801e6c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e858:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e85c:	d457      	bmi.n	801e90e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e85e:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801e862:	4547      	cmp	r7, r8
 801e864:	dd53      	ble.n	801e90e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e866:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e86a:	d450      	bmi.n	801e90e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e86c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801e870:	454d      	cmp	r5, r9
 801e872:	dd4c      	ble.n	801e90e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e874:	9d01      	ldr	r5, [sp, #4]
 801e876:	b23f      	sxth	r7, r7
 801e878:	fb09 5707 	mla	r7, r9, r7, r5
 801e87c:	f817 5008 	ldrb.w	r5, [r7, r8]
 801e880:	9f02      	ldr	r7, [sp, #8]
 801e882:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801e886:	0e2f      	lsrs	r7, r5, #24
 801e888:	2fff      	cmp	r7, #255	; 0xff
 801e88a:	d045      	beq.n	801e918 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e88c:	fa5f f987 	uxtb.w	r9, r7
 801e890:	b3ef      	cbz	r7, 801e90e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e892:	fa1f f889 	uxth.w	r8, r9
 801e896:	ea6f 0909 	mvn.w	r9, r9
 801e89a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e89e:	fa5f fb85 	uxtb.w	fp, r5
 801e8a2:	f814 a007 	ldrb.w	sl, [r4, r7]
 801e8a6:	fa5f f989 	uxtb.w	r9, r9
 801e8aa:	fb1b fb08 	smulbb	fp, fp, r8
 801e8ae:	fb0a ba09 	mla	sl, sl, r9, fp
 801e8b2:	fa1f fa8a 	uxth.w	sl, sl
 801e8b6:	f10a 0b01 	add.w	fp, sl, #1
 801e8ba:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e8be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e8c2:	f804 a007 	strb.w	sl, [r4, r7]
 801e8c6:	4427      	add	r7, r4
 801e8c8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e8cc:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801e8d0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e8d4:	fb1b fb09 	smulbb	fp, fp, r9
 801e8d8:	fb0a ba08 	mla	sl, sl, r8, fp
 801e8dc:	fa1f fa8a 	uxth.w	sl, sl
 801e8e0:	f10a 0b01 	add.w	fp, sl, #1
 801e8e4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e8e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e8ec:	f887 a001 	strb.w	sl, [r7, #1]
 801e8f0:	f897 a002 	ldrb.w	sl, [r7, #2]
 801e8f4:	fb1a f909 	smulbb	r9, sl, r9
 801e8f8:	fb05 9508 	mla	r5, r5, r8, r9
 801e8fc:	b2ad      	uxth	r5, r5
 801e8fe:	f105 0901 	add.w	r9, r5, #1
 801e902:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801e906:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e90a:	f887 9002 	strb.w	r9, [r7, #2]
 801e90e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e910:	4470      	add	r0, lr
 801e912:	3601      	adds	r6, #1
 801e914:	442a      	add	r2, r5
 801e916:	e760      	b.n	801e7da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e918:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e91c:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801e920:	55e5      	strb	r5, [r4, r7]
 801e922:	4427      	add	r7, r4
 801e924:	0c2d      	lsrs	r5, r5, #16
 801e926:	f887 8001 	strb.w	r8, [r7, #1]
 801e92a:	70bd      	strb	r5, [r7, #2]
 801e92c:	e7ef      	b.n	801e90e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e92e:	0a37      	lsrs	r7, r6, #8
 801e930:	f805 6c03 	strb.w	r6, [r5, #-3]
 801e934:	0c36      	lsrs	r6, r6, #16
 801e936:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e93a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801e93e:	e744      	b.n	801e7ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e940:	b005      	add	sp, #20
 801e942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e946 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e94a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e94c:	9201      	str	r2, [sp, #4]
 801e94e:	6870      	ldr	r0, [r6, #4]
 801e950:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801e954:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801e958:	fa1f fe85 	uxth.w	lr, r5
 801e95c:	43ed      	mvns	r5, r5
 801e95e:	f8dc 8000 	ldr.w	r8, [ip]
 801e962:	b2ed      	uxtb	r5, r5
 801e964:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e968:	fb00 2404 	mla	r4, r0, r4, r2
 801e96c:	6832      	ldr	r2, [r6, #0]
 801e96e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e972:	4414      	add	r4, r2
 801e974:	2900      	cmp	r1, #0
 801e976:	dc03      	bgt.n	801e980 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e978:	9a01      	ldr	r2, [sp, #4]
 801e97a:	2a00      	cmp	r2, #0
 801e97c:	f340 810d 	ble.w	801eb9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e982:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801e986:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e98a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e98c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801e990:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e994:	2b00      	cmp	r3, #0
 801e996:	dd0e      	ble.n	801e9b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e998:	1406      	asrs	r6, r0, #16
 801e99a:	d405      	bmi.n	801e9a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e99c:	4556      	cmp	r6, sl
 801e99e:	da03      	bge.n	801e9a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e9a0:	1416      	asrs	r6, r2, #16
 801e9a2:	d401      	bmi.n	801e9a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e9a4:	454e      	cmp	r6, r9
 801e9a6:	db07      	blt.n	801e9b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e9a8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e9aa:	3b01      	subs	r3, #1
 801e9ac:	3403      	adds	r4, #3
 801e9ae:	4430      	add	r0, r6
 801e9b0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e9b2:	4432      	add	r2, r6
 801e9b4:	e7ee      	b.n	801e994 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e9b6:	d060      	beq.n	801ea7a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801e9b8:	1e5e      	subs	r6, r3, #1
 801e9ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e9bc:	fb07 0706 	mla	r7, r7, r6, r0
 801e9c0:	143f      	asrs	r7, r7, #16
 801e9c2:	d451      	bmi.n	801ea68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e9c4:	4557      	cmp	r7, sl
 801e9c6:	da4f      	bge.n	801ea68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e9c8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e9ca:	fb07 2606 	mla	r6, r7, r6, r2
 801e9ce:	1436      	asrs	r6, r6, #16
 801e9d0:	d44a      	bmi.n	801ea68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e9d2:	454e      	cmp	r6, r9
 801e9d4:	da48      	bge.n	801ea68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e9d6:	1ce6      	adds	r6, r4, #3
 801e9d8:	4699      	mov	r9, r3
 801e9da:	f1b9 0f00 	cmp.w	r9, #0
 801e9de:	f106 0603 	add.w	r6, r6, #3
 801e9e2:	dd45      	ble.n	801ea70 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801e9e4:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801e9e8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e9ec:	1417      	asrs	r7, r2, #16
 801e9ee:	f109 39ff 	add.w	r9, r9, #4294967295
 801e9f2:	fb0b a707 	mla	r7, fp, r7, sl
 801e9f6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e9fa:	fb1b fb05 	smulbb	fp, fp, r5
 801e9fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ea02:	eb08 0a07 	add.w	sl, r8, r7
 801ea06:	f818 7007 	ldrb.w	r7, [r8, r7]
 801ea0a:	fb07 b70e 	mla	r7, r7, lr, fp
 801ea0e:	b2bf      	uxth	r7, r7
 801ea10:	f107 0b01 	add.w	fp, r7, #1
 801ea14:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ea18:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ea1c:	fb1b fb05 	smulbb	fp, fp, r5
 801ea20:	123f      	asrs	r7, r7, #8
 801ea22:	f806 7c06 	strb.w	r7, [r6, #-6]
 801ea26:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801ea2a:	fb07 b70e 	mla	r7, r7, lr, fp
 801ea2e:	b2bf      	uxth	r7, r7
 801ea30:	f107 0b01 	add.w	fp, r7, #1
 801ea34:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ea38:	123f      	asrs	r7, r7, #8
 801ea3a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801ea3e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801ea42:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ea46:	fb1a fa05 	smulbb	sl, sl, r5
 801ea4a:	fb07 a70e 	mla	r7, r7, lr, sl
 801ea4e:	b2bf      	uxth	r7, r7
 801ea50:	f107 0a01 	add.w	sl, r7, #1
 801ea54:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ea58:	123f      	asrs	r7, r7, #8
 801ea5a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801ea5e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ea60:	4438      	add	r0, r7
 801ea62:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ea64:	443a      	add	r2, r7
 801ea66:	e7b8      	b.n	801e9da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ea68:	2700      	movs	r7, #0
 801ea6a:	1bde      	subs	r6, r3, r7
 801ea6c:	2e00      	cmp	r6, #0
 801ea6e:	dc3f      	bgt.n	801eaf0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801ea70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea78:	441c      	add	r4, r3
 801ea7a:	2900      	cmp	r1, #0
 801ea7c:	f340 808d 	ble.w	801eb9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ea80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ea84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea86:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea8a:	3901      	subs	r1, #1
 801ea8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea90:	eef0 6a62 	vmov.f32	s13, s5
 801ea94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ea98:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eaa0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801eaa4:	eef0 6a43 	vmov.f32	s13, s6
 801eaa8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eaac:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801eab0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eab4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eab8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eabc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eac0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eac4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eac8:	ee12 2a90 	vmov	r2, s5
 801eacc:	eef0 2a47 	vmov.f32	s5, s14
 801ead0:	fb92 f3f3 	sdiv	r3, r2, r3
 801ead4:	ee13 2a10 	vmov	r2, s6
 801ead8:	930f      	str	r3, [sp, #60]	; 0x3c
 801eada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eadc:	eeb0 3a67 	vmov.f32	s6, s15
 801eae0:	fb92 f3f3 	sdiv	r3, r2, r3
 801eae4:	9a01      	ldr	r2, [sp, #4]
 801eae6:	9310      	str	r3, [sp, #64]	; 0x40
 801eae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eaea:	bf08      	it	eq
 801eaec:	4613      	moveq	r3, r2
 801eaee:	e741      	b.n	801e974 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801eaf0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801eaf4:	d44b      	bmi.n	801eb8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801eaf6:	f8dc b008 	ldr.w	fp, [ip, #8]
 801eafa:	45cb      	cmp	fp, r9
 801eafc:	dd47      	ble.n	801eb8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801eafe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801eb02:	d444      	bmi.n	801eb8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801eb04:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801eb08:	4556      	cmp	r6, sl
 801eb0a:	dd40      	ble.n	801eb8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801eb0c:	fa0f f68b 	sxth.w	r6, fp
 801eb10:	fb0a 9906 	mla	r9, sl, r6, r9
 801eb14:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801eb18:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801eb1c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801eb20:	fb1b fb05 	smulbb	fp, fp, r5
 801eb24:	eb08 0a09 	add.w	sl, r8, r9
 801eb28:	f818 9009 	ldrb.w	r9, [r8, r9]
 801eb2c:	fb09 b90e 	mla	r9, r9, lr, fp
 801eb30:	fa1f f989 	uxth.w	r9, r9
 801eb34:	f109 0b01 	add.w	fp, r9, #1
 801eb38:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eb3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb40:	f804 9006 	strb.w	r9, [r4, r6]
 801eb44:	4426      	add	r6, r4
 801eb46:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801eb4a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801eb4e:	fb1b fb05 	smulbb	fp, fp, r5
 801eb52:	fb09 b90e 	mla	r9, r9, lr, fp
 801eb56:	fa1f f989 	uxth.w	r9, r9
 801eb5a:	f109 0b01 	add.w	fp, r9, #1
 801eb5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eb62:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb66:	f886 9001 	strb.w	r9, [r6, #1]
 801eb6a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801eb6e:	f896 a002 	ldrb.w	sl, [r6, #2]
 801eb72:	fb1a fa05 	smulbb	sl, sl, r5
 801eb76:	fb09 a90e 	mla	r9, r9, lr, sl
 801eb7a:	fa1f f989 	uxth.w	r9, r9
 801eb7e:	f109 0a01 	add.w	sl, r9, #1
 801eb82:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801eb86:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb8a:	f886 9002 	strb.w	r9, [r6, #2]
 801eb8e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801eb90:	3701      	adds	r7, #1
 801eb92:	4430      	add	r0, r6
 801eb94:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801eb96:	4432      	add	r2, r6
 801eb98:	e767      	b.n	801ea6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801eb9a:	b003      	add	sp, #12
 801eb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eba0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eba4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801eba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ebaa:	9201      	str	r2, [sp, #4]
 801ebac:	6868      	ldr	r0, [r5, #4]
 801ebae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ebb0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ebb4:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801ebb8:	fb00 2404 	mla	r4, r0, r4, r2
 801ebbc:	682a      	ldr	r2, [r5, #0]
 801ebbe:	f8d7 8000 	ldr.w	r8, [r7]
 801ebc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ebc6:	4414      	add	r4, r2
 801ebc8:	2900      	cmp	r1, #0
 801ebca:	dc03      	bgt.n	801ebd4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ebcc:	9a01      	ldr	r2, [sp, #4]
 801ebce:	2a00      	cmp	r2, #0
 801ebd0:	f340 80af 	ble.w	801ed32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ebd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ebd6:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ebda:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ebde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ebe0:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801ebe4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	dd0c      	ble.n	801ec06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ebec:	1405      	asrs	r5, r0, #16
 801ebee:	d405      	bmi.n	801ebfc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ebf0:	4555      	cmp	r5, sl
 801ebf2:	da03      	bge.n	801ebfc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ebf4:	1415      	asrs	r5, r2, #16
 801ebf6:	d401      	bmi.n	801ebfc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ebf8:	454d      	cmp	r5, r9
 801ebfa:	db05      	blt.n	801ec08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ebfc:	4470      	add	r0, lr
 801ebfe:	4462      	add	r2, ip
 801ec00:	3b01      	subs	r3, #1
 801ec02:	3403      	adds	r4, #3
 801ec04:	e7f0      	b.n	801ebe8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ec06:	d038      	beq.n	801ec7a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ec08:	1e5d      	subs	r5, r3, #1
 801ec0a:	fb0e 0605 	mla	r6, lr, r5, r0
 801ec0e:	1436      	asrs	r6, r6, #16
 801ec10:	d42a      	bmi.n	801ec68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ec12:	4556      	cmp	r6, sl
 801ec14:	da28      	bge.n	801ec68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ec16:	fb0c 2505 	mla	r5, ip, r5, r2
 801ec1a:	142d      	asrs	r5, r5, #16
 801ec1c:	d424      	bmi.n	801ec68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ec1e:	454d      	cmp	r5, r9
 801ec20:	da22      	bge.n	801ec68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ec22:	1ce6      	adds	r6, r4, #3
 801ec24:	4699      	mov	r9, r3
 801ec26:	f1b9 0f00 	cmp.w	r9, #0
 801ec2a:	f106 0603 	add.w	r6, r6, #3
 801ec2e:	dd1f      	ble.n	801ec70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801ec30:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ec34:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ec38:	1415      	asrs	r5, r2, #16
 801ec3a:	4470      	add	r0, lr
 801ec3c:	4462      	add	r2, ip
 801ec3e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec42:	fb0b a505 	mla	r5, fp, r5, sl
 801ec46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec4a:	eb08 0a05 	add.w	sl, r8, r5
 801ec4e:	f818 5005 	ldrb.w	r5, [r8, r5]
 801ec52:	f806 5c06 	strb.w	r5, [r6, #-6]
 801ec56:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ec5a:	f806 5c05 	strb.w	r5, [r6, #-5]
 801ec5e:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801ec62:	f806 5c04 	strb.w	r5, [r6, #-4]
 801ec66:	e7de      	b.n	801ec26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ec68:	2600      	movs	r6, #0
 801ec6a:	1b9d      	subs	r5, r3, r6
 801ec6c:	2d00      	cmp	r5, #0
 801ec6e:	dc38      	bgt.n	801ece2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ec70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec78:	441c      	add	r4, r3
 801ec7a:	2900      	cmp	r1, #0
 801ec7c:	dd59      	ble.n	801ed32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ec7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec88:	3901      	subs	r1, #1
 801ec8a:	eeb0 6a62 	vmov.f32	s12, s5
 801ec8e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ec92:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec9a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ec9e:	eeb0 6a43 	vmov.f32	s12, s6
 801eca2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eca6:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ecaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ecae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ecb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecbe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecc2:	ee12 2a90 	vmov	r2, s5
 801ecc6:	eef0 2a47 	vmov.f32	s5, s14
 801ecca:	fb92 fef3 	sdiv	lr, r2, r3
 801ecce:	ee13 2a10 	vmov	r2, s6
 801ecd2:	eeb0 3a67 	vmov.f32	s6, s15
 801ecd6:	fb92 fcf3 	sdiv	ip, r2, r3
 801ecda:	9a01      	ldr	r2, [sp, #4]
 801ecdc:	bf08      	it	eq
 801ecde:	4613      	moveq	r3, r2
 801ece0:	e772      	b.n	801ebc8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ece2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ece6:	d420      	bmi.n	801ed2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ece8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ecec:	45cb      	cmp	fp, r9
 801ecee:	dd1c      	ble.n	801ed2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ecf0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ecf4:	d419      	bmi.n	801ed2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ecf6:	68fd      	ldr	r5, [r7, #12]
 801ecf8:	4555      	cmp	r5, sl
 801ecfa:	dd16      	ble.n	801ed2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ecfc:	fa0f f58b 	sxth.w	r5, fp
 801ed00:	fb0a 9505 	mla	r5, sl, r5, r9
 801ed04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed08:	f818 9005 	ldrb.w	r9, [r8, r5]
 801ed0c:	eb08 0b05 	add.w	fp, r8, r5
 801ed10:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801ed14:	f804 9005 	strb.w	r9, [r4, r5]
 801ed18:	4425      	add	r5, r4
 801ed1a:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ed1e:	f885 9001 	strb.w	r9, [r5, #1]
 801ed22:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ed26:	f885 9002 	strb.w	r9, [r5, #2]
 801ed2a:	4470      	add	r0, lr
 801ed2c:	4462      	add	r2, ip
 801ed2e:	3601      	adds	r6, #1
 801ed30:	e79b      	b.n	801ec6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801ed32:	b003      	add	sp, #12
 801ed34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed38 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed3c:	b085      	sub	sp, #20
 801ed3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ed42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ed44:	9202      	str	r2, [sp, #8]
 801ed46:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801ed4a:	6860      	ldr	r0, [r4, #4]
 801ed4c:	9203      	str	r2, [sp, #12]
 801ed4e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ed52:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801ed56:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ed5a:	fb00 2505 	mla	r5, r0, r5, r2
 801ed5e:	6822      	ldr	r2, [r4, #0]
 801ed60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed64:	4415      	add	r5, r2
 801ed66:	f8dc 2000 	ldr.w	r2, [ip]
 801ed6a:	9201      	str	r2, [sp, #4]
 801ed6c:	2900      	cmp	r1, #0
 801ed6e:	dc03      	bgt.n	801ed78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ed70:	9a02      	ldr	r2, [sp, #8]
 801ed72:	2a00      	cmp	r2, #0
 801ed74:	f340 8122 	ble.w	801efbc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ed78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed7a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ed7e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ed82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ed84:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ed88:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	dd0d      	ble.n	801edac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ed90:	1422      	asrs	r2, r4, #16
 801ed92:	d405      	bmi.n	801eda0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed94:	4542      	cmp	r2, r8
 801ed96:	da03      	bge.n	801eda0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed98:	1402      	asrs	r2, r0, #16
 801ed9a:	d401      	bmi.n	801eda0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed9c:	42ba      	cmp	r2, r7
 801ed9e:	db06      	blt.n	801edae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eda0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eda2:	4474      	add	r4, lr
 801eda4:	3b01      	subs	r3, #1
 801eda6:	3503      	adds	r5, #3
 801eda8:	4410      	add	r0, r2
 801edaa:	e7ef      	b.n	801ed8c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801edac:	d072      	beq.n	801ee94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801edae:	1e5a      	subs	r2, r3, #1
 801edb0:	fb0e 4602 	mla	r6, lr, r2, r4
 801edb4:	1436      	asrs	r6, r6, #16
 801edb6:	d462      	bmi.n	801ee7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801edb8:	4546      	cmp	r6, r8
 801edba:	da60      	bge.n	801ee7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801edbc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801edbe:	fb06 0202 	mla	r2, r6, r2, r0
 801edc2:	1412      	asrs	r2, r2, #16
 801edc4:	d45b      	bmi.n	801ee7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801edc6:	42ba      	cmp	r2, r7
 801edc8:	da59      	bge.n	801ee7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801edca:	1cef      	adds	r7, r5, #3
 801edcc:	4699      	mov	r9, r3
 801edce:	f1b9 0f00 	cmp.w	r9, #0
 801edd2:	dd5a      	ble.n	801ee8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801edd4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801edd8:	1426      	asrs	r6, r4, #16
 801edda:	1402      	asrs	r2, r0, #16
 801eddc:	fb08 6202 	mla	r2, r8, r2, r6
 801ede0:	9e01      	ldr	r6, [sp, #4]
 801ede2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ede6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801edea:	d041      	beq.n	801ee70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801edec:	9a03      	ldr	r2, [sp, #12]
 801edee:	fa5f fb86 	uxtb.w	fp, r6
 801edf2:	fb02 f808 	mul.w	r8, r2, r8
 801edf6:	f108 0201 	add.w	r2, r8, #1
 801edfa:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801edfe:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801ee02:	1212      	asrs	r2, r2, #8
 801ee04:	fa1f fa82 	uxth.w	sl, r2
 801ee08:	43d2      	mvns	r2, r2
 801ee0a:	fb1b fb0a 	smulbb	fp, fp, sl
 801ee0e:	b2d2      	uxtb	r2, r2
 801ee10:	fb08 b802 	mla	r8, r8, r2, fp
 801ee14:	fa1f f888 	uxth.w	r8, r8
 801ee18:	f108 0b01 	add.w	fp, r8, #1
 801ee1c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ee20:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ee24:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ee28:	fb1b fb0a 	smulbb	fp, fp, sl
 801ee2c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ee30:	fb16 fa0a 	smulbb	sl, r6, sl
 801ee34:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ee38:	f807 8c03 	strb.w	r8, [r7, #-3]
 801ee3c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801ee40:	fb06 aa02 	mla	sl, r6, r2, sl
 801ee44:	fb08 b802 	mla	r8, r8, r2, fp
 801ee48:	fa1f fa8a 	uxth.w	sl, sl
 801ee4c:	fa1f f888 	uxth.w	r8, r8
 801ee50:	f10a 0601 	add.w	r6, sl, #1
 801ee54:	f108 0b01 	add.w	fp, r8, #1
 801ee58:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ee5c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ee60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ee64:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ee68:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ee6c:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ee70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ee72:	4474      	add	r4, lr
 801ee74:	3703      	adds	r7, #3
 801ee76:	f109 39ff 	add.w	r9, r9, #4294967295
 801ee7a:	4410      	add	r0, r2
 801ee7c:	e7a7      	b.n	801edce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ee7e:	f04f 0800 	mov.w	r8, #0
 801ee82:	eba3 0208 	sub.w	r2, r3, r8
 801ee86:	2a00      	cmp	r2, #0
 801ee88:	dc3b      	bgt.n	801ef02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ee8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee92:	441d      	add	r5, r3
 801ee94:	2900      	cmp	r1, #0
 801ee96:	f340 8091 	ble.w	801efbc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ee9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eea0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eea4:	3901      	subs	r1, #1
 801eea6:	eeb0 6a62 	vmov.f32	s12, s5
 801eeaa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eeae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eeb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eeb6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eeba:	eeb0 6a43 	vmov.f32	s12, s6
 801eebe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eec2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eec6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eeca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eece:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eed2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eed6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eeda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eede:	ee12 2a90 	vmov	r2, s5
 801eee2:	eef0 2a47 	vmov.f32	s5, s14
 801eee6:	fb92 fef3 	sdiv	lr, r2, r3
 801eeea:	ee13 2a10 	vmov	r2, s6
 801eeee:	eeb0 3a67 	vmov.f32	s6, s15
 801eef2:	fb92 f3f3 	sdiv	r3, r2, r3
 801eef6:	9a02      	ldr	r2, [sp, #8]
 801eef8:	9312      	str	r3, [sp, #72]	; 0x48
 801eefa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eefc:	bf08      	it	eq
 801eefe:	4613      	moveq	r3, r2
 801ef00:	e734      	b.n	801ed6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ef02:	1427      	asrs	r7, r4, #16
 801ef04:	d454      	bmi.n	801efb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ef06:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ef0a:	42be      	cmp	r6, r7
 801ef0c:	dd50      	ble.n	801efb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ef0e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ef12:	d44d      	bmi.n	801efb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ef14:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ef18:	454a      	cmp	r2, r9
 801ef1a:	dd49      	ble.n	801efb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ef1c:	b236      	sxth	r6, r6
 801ef1e:	9a01      	ldr	r2, [sp, #4]
 801ef20:	fb09 7606 	mla	r6, r9, r6, r7
 801ef24:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801ef28:	0e3a      	lsrs	r2, r7, #24
 801ef2a:	d041      	beq.n	801efb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ef2c:	9e03      	ldr	r6, [sp, #12]
 801ef2e:	fa5f fb87 	uxtb.w	fp, r7
 801ef32:	4372      	muls	r2, r6
 801ef34:	1c56      	adds	r6, r2, #1
 801ef36:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ef3a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801ef3e:	1212      	asrs	r2, r2, #8
 801ef40:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ef44:	fa1f fa82 	uxth.w	sl, r2
 801ef48:	43d2      	mvns	r2, r2
 801ef4a:	fb1b fb0a 	smulbb	fp, fp, sl
 801ef4e:	b2d2      	uxtb	r2, r2
 801ef50:	fb09 b902 	mla	r9, r9, r2, fp
 801ef54:	fa1f f989 	uxth.w	r9, r9
 801ef58:	f109 0b01 	add.w	fp, r9, #1
 801ef5c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ef60:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ef64:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ef68:	fb1b fb0a 	smulbb	fp, fp, sl
 801ef6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ef70:	fb17 fa0a 	smulbb	sl, r7, sl
 801ef74:	f805 9006 	strb.w	r9, [r5, r6]
 801ef78:	442e      	add	r6, r5
 801ef7a:	78b7      	ldrb	r7, [r6, #2]
 801ef7c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ef80:	fb07 aa02 	mla	sl, r7, r2, sl
 801ef84:	fb09 b902 	mla	r9, r9, r2, fp
 801ef88:	fa1f fa8a 	uxth.w	sl, sl
 801ef8c:	fa1f f989 	uxth.w	r9, r9
 801ef90:	f10a 0701 	add.w	r7, sl, #1
 801ef94:	f109 0b01 	add.w	fp, r9, #1
 801ef98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ef9c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801efa0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801efa4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801efa8:	f886 a002 	strb.w	sl, [r6, #2]
 801efac:	f886 9001 	strb.w	r9, [r6, #1]
 801efb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801efb2:	4474      	add	r4, lr
 801efb4:	f108 0801 	add.w	r8, r8, #1
 801efb8:	4410      	add	r0, r2
 801efba:	e762      	b.n	801ee82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801efbc:	b005      	add	sp, #20
 801efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801efc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efc6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801efc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801efcc:	9201      	str	r2, [sp, #4]
 801efce:	6860      	ldr	r0, [r4, #4]
 801efd0:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801efd4:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801efd8:	fb00 2505 	mla	r5, r0, r5, r2
 801efdc:	6822      	ldr	r2, [r4, #0]
 801efde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801efe2:	4415      	add	r5, r2
 801efe4:	f8dc 2000 	ldr.w	r2, [ip]
 801efe8:	9200      	str	r2, [sp, #0]
 801efea:	2900      	cmp	r1, #0
 801efec:	dc03      	bgt.n	801eff6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801efee:	9a01      	ldr	r2, [sp, #4]
 801eff0:	2a00      	cmp	r2, #0
 801eff2:	f340 812b 	ble.w	801f24c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eff8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801effc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f002:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f006:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	dd0e      	ble.n	801f02c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f00e:	1422      	asrs	r2, r4, #16
 801f010:	d405      	bmi.n	801f01e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f012:	4572      	cmp	r2, lr
 801f014:	da03      	bge.n	801f01e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f016:	1402      	asrs	r2, r0, #16
 801f018:	d401      	bmi.n	801f01e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f01a:	42ba      	cmp	r2, r7
 801f01c:	db07      	blt.n	801f02e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f01e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f020:	3b01      	subs	r3, #1
 801f022:	3503      	adds	r5, #3
 801f024:	4414      	add	r4, r2
 801f026:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f028:	4410      	add	r0, r2
 801f02a:	e7ee      	b.n	801f00a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f02c:	d06f      	beq.n	801f10e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f02e:	1e5a      	subs	r2, r3, #1
 801f030:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f032:	fb06 4602 	mla	r6, r6, r2, r4
 801f036:	1436      	asrs	r6, r6, #16
 801f038:	d45e      	bmi.n	801f0f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f03a:	4576      	cmp	r6, lr
 801f03c:	da5c      	bge.n	801f0f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f03e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f040:	fb06 0202 	mla	r2, r6, r2, r0
 801f044:	1412      	asrs	r2, r2, #16
 801f046:	d457      	bmi.n	801f0f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f048:	42ba      	cmp	r2, r7
 801f04a:	da55      	bge.n	801f0f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f04c:	1cee      	adds	r6, r5, #3
 801f04e:	469a      	mov	sl, r3
 801f050:	f1ba 0f00 	cmp.w	sl, #0
 801f054:	dd56      	ble.n	801f104 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f056:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f05a:	1427      	asrs	r7, r4, #16
 801f05c:	1402      	asrs	r2, r0, #16
 801f05e:	fb0e 7202 	mla	r2, lr, r2, r7
 801f062:	9f00      	ldr	r7, [sp, #0]
 801f064:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801f068:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801f06c:	d03c      	beq.n	801f0e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f06e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f072:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f076:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f07a:	fa5f f28e 	uxtb.w	r2, lr
 801f07e:	b2ff      	uxtb	r7, r7
 801f080:	f000 80dd 	beq.w	801f23e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f084:	fa1f f882 	uxth.w	r8, r2
 801f088:	43d2      	mvns	r2, r2
 801f08a:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801f08e:	fb17 f708 	smulbb	r7, r7, r8
 801f092:	b2d2      	uxtb	r2, r2
 801f094:	fb19 f908 	smulbb	r9, r9, r8
 801f098:	fb0e 7702 	mla	r7, lr, r2, r7
 801f09c:	fb1b f808 	smulbb	r8, fp, r8
 801f0a0:	b2bf      	uxth	r7, r7
 801f0a2:	f107 0e01 	add.w	lr, r7, #1
 801f0a6:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f0aa:	123f      	asrs	r7, r7, #8
 801f0ac:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f0b0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801f0b4:	fb07 9902 	mla	r9, r7, r2, r9
 801f0b8:	fa1f f989 	uxth.w	r9, r9
 801f0bc:	f109 0701 	add.w	r7, r9, #1
 801f0c0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f0c4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f0c8:	fb07 8802 	mla	r8, r7, r2, r8
 801f0cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f0d0:	fa1f f888 	uxth.w	r8, r8
 801f0d4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801f0d8:	f108 0201 	add.w	r2, r8, #1
 801f0dc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f0e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f0e4:	f806 8c01 	strb.w	r8, [r6, #-1]
 801f0e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f0ea:	3603      	adds	r6, #3
 801f0ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f0f0:	4414      	add	r4, r2
 801f0f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f0f4:	4410      	add	r0, r2
 801f0f6:	e7ab      	b.n	801f050 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f0f8:	f04f 0e00 	mov.w	lr, #0
 801f0fc:	eba3 020e 	sub.w	r2, r3, lr
 801f100:	2a00      	cmp	r2, #0
 801f102:	dc3d      	bgt.n	801f180 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f104:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f108:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f10c:	441d      	add	r5, r3
 801f10e:	2900      	cmp	r1, #0
 801f110:	f340 809c 	ble.w	801f24c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f114:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f11a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f11e:	3901      	subs	r1, #1
 801f120:	eeb0 6a62 	vmov.f32	s12, s5
 801f124:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f128:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f12c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f130:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f134:	eeb0 6a43 	vmov.f32	s12, s6
 801f138:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f13c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f140:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f144:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f148:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f14c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f150:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f154:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f158:	ee12 2a90 	vmov	r2, s5
 801f15c:	eef0 2a47 	vmov.f32	s5, s14
 801f160:	fb92 f3f3 	sdiv	r3, r2, r3
 801f164:	ee13 2a10 	vmov	r2, s6
 801f168:	930f      	str	r3, [sp, #60]	; 0x3c
 801f16a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f16c:	eeb0 3a67 	vmov.f32	s6, s15
 801f170:	fb92 f3f3 	sdiv	r3, r2, r3
 801f174:	9a01      	ldr	r2, [sp, #4]
 801f176:	9310      	str	r3, [sp, #64]	; 0x40
 801f178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f17a:	bf08      	it	eq
 801f17c:	4613      	moveq	r3, r2
 801f17e:	e734      	b.n	801efea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801f180:	1427      	asrs	r7, r4, #16
 801f182:	d44d      	bmi.n	801f220 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f184:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f188:	42be      	cmp	r6, r7
 801f18a:	dd49      	ble.n	801f220 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f18c:	ea5f 4820 	movs.w	r8, r0, asr #16
 801f190:	d446      	bmi.n	801f220 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f192:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f196:	4542      	cmp	r2, r8
 801f198:	dd42      	ble.n	801f220 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f19a:	b236      	sxth	r6, r6
 801f19c:	9a00      	ldr	r2, [sp, #0]
 801f19e:	fb08 7606 	mla	r6, r8, r6, r7
 801f1a2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801f1a6:	0e3a      	lsrs	r2, r7, #24
 801f1a8:	d03a      	beq.n	801f220 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f1aa:	2aff      	cmp	r2, #255	; 0xff
 801f1ac:	b2d6      	uxtb	r6, r2
 801f1ae:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f1b2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f1b6:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801f1ba:	b2ff      	uxtb	r7, r7
 801f1bc:	d037      	beq.n	801f22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801f1be:	fa1f f986 	uxth.w	r9, r6
 801f1c2:	4472      	add	r2, lr
 801f1c4:	43f6      	mvns	r6, r6
 801f1c6:	f815 8002 	ldrb.w	r8, [r5, r2]
 801f1ca:	fb17 f709 	smulbb	r7, r7, r9
 801f1ce:	fb1a fa09 	smulbb	sl, sl, r9
 801f1d2:	b2f6      	uxtb	r6, r6
 801f1d4:	fb1b f909 	smulbb	r9, fp, r9
 801f1d8:	fb08 7706 	mla	r7, r8, r6, r7
 801f1dc:	b2bf      	uxth	r7, r7
 801f1de:	f107 0801 	add.w	r8, r7, #1
 801f1e2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801f1e6:	123f      	asrs	r7, r7, #8
 801f1e8:	54af      	strb	r7, [r5, r2]
 801f1ea:	442a      	add	r2, r5
 801f1ec:	7857      	ldrb	r7, [r2, #1]
 801f1ee:	fb07 aa06 	mla	sl, r7, r6, sl
 801f1f2:	fa1f fa8a 	uxth.w	sl, sl
 801f1f6:	f10a 0701 	add.w	r7, sl, #1
 801f1fa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f1fe:	7897      	ldrb	r7, [r2, #2]
 801f200:	fb07 9906 	mla	r9, r7, r6, r9
 801f204:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f208:	fa1f f989 	uxth.w	r9, r9
 801f20c:	f882 a001 	strb.w	sl, [r2, #1]
 801f210:	f109 0601 	add.w	r6, r9, #1
 801f214:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f218:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f21c:	f882 9002 	strb.w	r9, [r2, #2]
 801f220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f222:	f10e 0e01 	add.w	lr, lr, #1
 801f226:	4414      	add	r4, r2
 801f228:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f22a:	4410      	add	r0, r2
 801f22c:	e766      	b.n	801f0fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f22e:	4472      	add	r2, lr
 801f230:	54af      	strb	r7, [r5, r2]
 801f232:	442a      	add	r2, r5
 801f234:	f882 a001 	strb.w	sl, [r2, #1]
 801f238:	f882 b002 	strb.w	fp, [r2, #2]
 801f23c:	e7f0      	b.n	801f220 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f23e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f242:	f806 9c02 	strb.w	r9, [r6, #-2]
 801f246:	f806 bc01 	strb.w	fp, [r6, #-1]
 801f24a:	e74d      	b.n	801f0e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f24c:	b003      	add	sp, #12
 801f24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f254 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f258:	b087      	sub	sp, #28
 801f25a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f25e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f260:	9204      	str	r2, [sp, #16]
 801f262:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f266:	6860      	ldr	r0, [r4, #4]
 801f268:	9205      	str	r2, [sp, #20]
 801f26a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f26e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801f272:	9101      	str	r1, [sp, #4]
 801f274:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f278:	fb00 2505 	mla	r5, r0, r5, r2
 801f27c:	6822      	ldr	r2, [r4, #0]
 801f27e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f282:	4415      	add	r5, r2
 801f284:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f288:	3201      	adds	r2, #1
 801f28a:	f022 0201 	bic.w	r2, r2, #1
 801f28e:	9202      	str	r2, [sp, #8]
 801f290:	f8dc 2000 	ldr.w	r2, [ip]
 801f294:	9203      	str	r2, [sp, #12]
 801f296:	9a01      	ldr	r2, [sp, #4]
 801f298:	2a00      	cmp	r2, #0
 801f29a:	dc03      	bgt.n	801f2a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f29c:	9a04      	ldr	r2, [sp, #16]
 801f29e:	2a00      	cmp	r2, #0
 801f2a0:	f340 8135 	ble.w	801f50e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f2a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f2a6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f2aa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f2ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f2b0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f2b4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	dd0d      	ble.n	801f2d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f2bc:	1422      	asrs	r2, r4, #16
 801f2be:	d405      	bmi.n	801f2cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f2c0:	4542      	cmp	r2, r8
 801f2c2:	da03      	bge.n	801f2cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f2c4:	1402      	asrs	r2, r0, #16
 801f2c6:	d401      	bmi.n	801f2cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f2c8:	42ba      	cmp	r2, r7
 801f2ca:	db06      	blt.n	801f2da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f2cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2ce:	4474      	add	r4, lr
 801f2d0:	3b01      	subs	r3, #1
 801f2d2:	3503      	adds	r5, #3
 801f2d4:	4410      	add	r0, r2
 801f2d6:	e7ef      	b.n	801f2b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f2d8:	d077      	beq.n	801f3ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f2da:	1e5a      	subs	r2, r3, #1
 801f2dc:	fb0e 4602 	mla	r6, lr, r2, r4
 801f2e0:	1436      	asrs	r6, r6, #16
 801f2e2:	d469      	bmi.n	801f3b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f2e4:	4546      	cmp	r6, r8
 801f2e6:	da67      	bge.n	801f3b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f2e8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f2ea:	fb06 0202 	mla	r2, r6, r2, r0
 801f2ee:	1412      	asrs	r2, r2, #16
 801f2f0:	d462      	bmi.n	801f3b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f2f2:	42ba      	cmp	r2, r7
 801f2f4:	da60      	bge.n	801f3b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f2f6:	1cee      	adds	r6, r5, #3
 801f2f8:	4699      	mov	r9, r3
 801f2fa:	f1b9 0f00 	cmp.w	r9, #0
 801f2fe:	dd5f      	ble.n	801f3c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f300:	1422      	asrs	r2, r4, #16
 801f302:	9902      	ldr	r1, [sp, #8]
 801f304:	1407      	asrs	r7, r0, #16
 801f306:	fb01 2707 	mla	r7, r1, r7, r2
 801f30a:	9903      	ldr	r1, [sp, #12]
 801f30c:	087a      	lsrs	r2, r7, #1
 801f30e:	5c8a      	ldrb	r2, [r1, r2]
 801f310:	07f9      	lsls	r1, r7, #31
 801f312:	bf54      	ite	pl
 801f314:	f002 020f 	andpl.w	r2, r2, #15
 801f318:	1112      	asrmi	r2, r2, #4
 801f31a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f31e:	b2d2      	uxtb	r2, r2
 801f320:	2a00      	cmp	r2, #0
 801f322:	d042      	beq.n	801f3aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f324:	497b      	ldr	r1, [pc, #492]	; (801f514 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801f326:	680f      	ldr	r7, [r1, #0]
 801f328:	9905      	ldr	r1, [sp, #20]
 801f32a:	fa5f fb87 	uxtb.w	fp, r7
 801f32e:	434a      	muls	r2, r1
 801f330:	f102 0801 	add.w	r8, r2, #1
 801f334:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801f338:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801f33c:	1212      	asrs	r2, r2, #8
 801f33e:	fa1f fa82 	uxth.w	sl, r2
 801f342:	43d2      	mvns	r2, r2
 801f344:	fb1b fb0a 	smulbb	fp, fp, sl
 801f348:	b2d2      	uxtb	r2, r2
 801f34a:	fb08 b802 	mla	r8, r8, r2, fp
 801f34e:	fa1f f888 	uxth.w	r8, r8
 801f352:	f108 0b01 	add.w	fp, r8, #1
 801f356:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f35a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f35e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f362:	fb1b fb0a 	smulbb	fp, fp, sl
 801f366:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f36a:	fb17 fa0a 	smulbb	sl, r7, sl
 801f36e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f372:	f806 8c03 	strb.w	r8, [r6, #-3]
 801f376:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801f37a:	fb07 aa02 	mla	sl, r7, r2, sl
 801f37e:	fb08 b802 	mla	r8, r8, r2, fp
 801f382:	fa1f fa8a 	uxth.w	sl, sl
 801f386:	fa1f f888 	uxth.w	r8, r8
 801f38a:	f10a 0701 	add.w	r7, sl, #1
 801f38e:	f108 0b01 	add.w	fp, r8, #1
 801f392:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f396:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f39a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f39e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f3a2:	f806 ac01 	strb.w	sl, [r6, #-1]
 801f3a6:	f806 8c02 	strb.w	r8, [r6, #-2]
 801f3aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f3ac:	4474      	add	r4, lr
 801f3ae:	3603      	adds	r6, #3
 801f3b0:	f109 39ff 	add.w	r9, r9, #4294967295
 801f3b4:	4410      	add	r0, r2
 801f3b6:	e7a0      	b.n	801f2fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f3b8:	2700      	movs	r7, #0
 801f3ba:	1bda      	subs	r2, r3, r7
 801f3bc:	2a00      	cmp	r2, #0
 801f3be:	dc3e      	bgt.n	801f43e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f3c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3c8:	441d      	add	r5, r3
 801f3ca:	9b01      	ldr	r3, [sp, #4]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	f340 809e 	ble.w	801f50e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f3d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3dc:	eeb0 6a62 	vmov.f32	s12, s5
 801f3e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f3e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3ec:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f3f0:	eeb0 6a43 	vmov.f32	s12, s6
 801f3f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3f8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f3fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f400:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f404:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f408:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f40c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f410:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f414:	ee12 2a90 	vmov	r2, s5
 801f418:	eef0 2a47 	vmov.f32	s5, s14
 801f41c:	fb92 fef3 	sdiv	lr, r2, r3
 801f420:	ee13 2a10 	vmov	r2, s6
 801f424:	eeb0 3a67 	vmov.f32	s6, s15
 801f428:	fb92 f3f3 	sdiv	r3, r2, r3
 801f42c:	9314      	str	r3, [sp, #80]	; 0x50
 801f42e:	9b01      	ldr	r3, [sp, #4]
 801f430:	9a04      	ldr	r2, [sp, #16]
 801f432:	3b01      	subs	r3, #1
 801f434:	9301      	str	r3, [sp, #4]
 801f436:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f438:	bf08      	it	eq
 801f43a:	4613      	moveq	r3, r2
 801f43c:	e72b      	b.n	801f296 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f43e:	1426      	asrs	r6, r4, #16
 801f440:	d460      	bmi.n	801f504 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f442:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f446:	42b2      	cmp	r2, r6
 801f448:	dd5c      	ble.n	801f504 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f44a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801f44e:	d459      	bmi.n	801f504 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f450:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f454:	4542      	cmp	r2, r8
 801f456:	dd55      	ble.n	801f504 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f458:	9a02      	ldr	r2, [sp, #8]
 801f45a:	9903      	ldr	r1, [sp, #12]
 801f45c:	fb08 6602 	mla	r6, r8, r2, r6
 801f460:	0872      	lsrs	r2, r6, #1
 801f462:	07f6      	lsls	r6, r6, #31
 801f464:	5c8a      	ldrb	r2, [r1, r2]
 801f466:	bf54      	ite	pl
 801f468:	f002 020f 	andpl.w	r2, r2, #15
 801f46c:	1112      	asrmi	r2, r2, #4
 801f46e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f472:	b2d2      	uxtb	r2, r2
 801f474:	2a00      	cmp	r2, #0
 801f476:	d045      	beq.n	801f504 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f478:	4926      	ldr	r1, [pc, #152]	; (801f514 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801f47a:	f8d1 8000 	ldr.w	r8, [r1]
 801f47e:	9905      	ldr	r1, [sp, #20]
 801f480:	fa5f fb88 	uxtb.w	fp, r8
 801f484:	434a      	muls	r2, r1
 801f486:	1c56      	adds	r6, r2, #1
 801f488:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f48c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f490:	1212      	asrs	r2, r2, #8
 801f492:	f815 9006 	ldrb.w	r9, [r5, r6]
 801f496:	fa1f fa82 	uxth.w	sl, r2
 801f49a:	43d2      	mvns	r2, r2
 801f49c:	fb1b fb0a 	smulbb	fp, fp, sl
 801f4a0:	b2d2      	uxtb	r2, r2
 801f4a2:	fb09 b902 	mla	r9, r9, r2, fp
 801f4a6:	fa1f f989 	uxth.w	r9, r9
 801f4aa:	f109 0b01 	add.w	fp, r9, #1
 801f4ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f4b2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801f4b6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801f4ba:	fb1b fb0a 	smulbb	fp, fp, sl
 801f4be:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f4c2:	fb18 fa0a 	smulbb	sl, r8, sl
 801f4c6:	f805 9006 	strb.w	r9, [r5, r6]
 801f4ca:	442e      	add	r6, r5
 801f4cc:	f896 8002 	ldrb.w	r8, [r6, #2]
 801f4d0:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f4d4:	fb08 aa02 	mla	sl, r8, r2, sl
 801f4d8:	fb09 b902 	mla	r9, r9, r2, fp
 801f4dc:	fa1f fa8a 	uxth.w	sl, sl
 801f4e0:	fa1f f989 	uxth.w	r9, r9
 801f4e4:	f10a 0801 	add.w	r8, sl, #1
 801f4e8:	f109 0b01 	add.w	fp, r9, #1
 801f4ec:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801f4f0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f4f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f4f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f4fc:	f886 a002 	strb.w	sl, [r6, #2]
 801f500:	f886 9001 	strb.w	r9, [r6, #1]
 801f504:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f506:	4474      	add	r4, lr
 801f508:	3701      	adds	r7, #1
 801f50a:	4410      	add	r0, r2
 801f50c:	e755      	b.n	801f3ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801f50e:	b007      	add	sp, #28
 801f510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f514:	20006100 	.word	0x20006100

0801f518 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f51c:	b085      	sub	sp, #20
 801f51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f522:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f524:	9203      	str	r2, [sp, #12]
 801f526:	6860      	ldr	r0, [r4, #4]
 801f528:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801f52c:	9100      	str	r1, [sp, #0]
 801f52e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801f532:	fb00 2606 	mla	r6, r0, r6, r2
 801f536:	6822      	ldr	r2, [r4, #0]
 801f538:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f53c:	4416      	add	r6, r2
 801f53e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f542:	3201      	adds	r2, #1
 801f544:	f022 0201 	bic.w	r2, r2, #1
 801f548:	9201      	str	r2, [sp, #4]
 801f54a:	f8dc 2000 	ldr.w	r2, [ip]
 801f54e:	9202      	str	r2, [sp, #8]
 801f550:	9a00      	ldr	r2, [sp, #0]
 801f552:	2a00      	cmp	r2, #0
 801f554:	dc03      	bgt.n	801f55e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f556:	9a03      	ldr	r2, [sp, #12]
 801f558:	2a00      	cmp	r2, #0
 801f55a:	f340 8140 	ble.w	801f7de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801f55e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f560:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f564:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801f568:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f56a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f56e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f572:	2b00      	cmp	r3, #0
 801f574:	dd0e      	ble.n	801f594 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f576:	142a      	asrs	r2, r5, #16
 801f578:	d405      	bmi.n	801f586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f57a:	4572      	cmp	r2, lr
 801f57c:	da03      	bge.n	801f586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f57e:	1422      	asrs	r2, r4, #16
 801f580:	d401      	bmi.n	801f586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f582:	42ba      	cmp	r2, r7
 801f584:	db07      	blt.n	801f596 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f586:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f588:	3b01      	subs	r3, #1
 801f58a:	3603      	adds	r6, #3
 801f58c:	4415      	add	r5, r2
 801f58e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f590:	4414      	add	r4, r2
 801f592:	e7ee      	b.n	801f572 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f594:	d072      	beq.n	801f67c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f596:	1e5a      	subs	r2, r3, #1
 801f598:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f59a:	fb00 5002 	mla	r0, r0, r2, r5
 801f59e:	1400      	asrs	r0, r0, #16
 801f5a0:	d463      	bmi.n	801f66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f5a2:	4570      	cmp	r0, lr
 801f5a4:	da61      	bge.n	801f66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f5a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f5a8:	fb00 4202 	mla	r2, r0, r2, r4
 801f5ac:	1412      	asrs	r2, r2, #16
 801f5ae:	d45c      	bmi.n	801f66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f5b0:	42ba      	cmp	r2, r7
 801f5b2:	da5a      	bge.n	801f66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f5b4:	1cf0      	adds	r0, r6, #3
 801f5b6:	469a      	mov	sl, r3
 801f5b8:	f1ba 0f00 	cmp.w	sl, #0
 801f5bc:	dd59      	ble.n	801f672 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801f5be:	142a      	asrs	r2, r5, #16
 801f5c0:	9901      	ldr	r1, [sp, #4]
 801f5c2:	1427      	asrs	r7, r4, #16
 801f5c4:	fb01 2707 	mla	r7, r1, r7, r2
 801f5c8:	9902      	ldr	r1, [sp, #8]
 801f5ca:	087a      	lsrs	r2, r7, #1
 801f5cc:	5c8a      	ldrb	r2, [r1, r2]
 801f5ce:	07f9      	lsls	r1, r7, #31
 801f5d0:	bf54      	ite	pl
 801f5d2:	f002 020f 	andpl.w	r2, r2, #15
 801f5d6:	1112      	asrmi	r2, r2, #4
 801f5d8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f5dc:	b2d2      	uxtb	r2, r2
 801f5de:	2a00      	cmp	r2, #0
 801f5e0:	d03b      	beq.n	801f65a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f5e2:	4980      	ldr	r1, [pc, #512]	; (801f7e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801f5e4:	2aff      	cmp	r2, #255	; 0xff
 801f5e6:	680f      	ldr	r7, [r1, #0]
 801f5e8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f5ec:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f5f0:	b2ff      	uxtb	r7, r7
 801f5f2:	f000 80ed 	beq.w	801f7d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801f5f6:	fa1f f882 	uxth.w	r8, r2
 801f5fa:	43d2      	mvns	r2, r2
 801f5fc:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801f600:	fb17 f708 	smulbb	r7, r7, r8
 801f604:	b2d2      	uxtb	r2, r2
 801f606:	fb19 f908 	smulbb	r9, r9, r8
 801f60a:	fb0e 7702 	mla	r7, lr, r2, r7
 801f60e:	fb1b f808 	smulbb	r8, fp, r8
 801f612:	b2bf      	uxth	r7, r7
 801f614:	f107 0e01 	add.w	lr, r7, #1
 801f618:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f61c:	123f      	asrs	r7, r7, #8
 801f61e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f622:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801f626:	fb07 9902 	mla	r9, r7, r2, r9
 801f62a:	fa1f f989 	uxth.w	r9, r9
 801f62e:	f109 0701 	add.w	r7, r9, #1
 801f632:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f636:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801f63a:	fb07 8802 	mla	r8, r7, r2, r8
 801f63e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f642:	fa1f f888 	uxth.w	r8, r8
 801f646:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f64a:	f108 0201 	add.w	r2, r8, #1
 801f64e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f652:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f656:	f800 8c01 	strb.w	r8, [r0, #-1]
 801f65a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f65c:	3003      	adds	r0, #3
 801f65e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f662:	4415      	add	r5, r2
 801f664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f666:	4414      	add	r4, r2
 801f668:	e7a6      	b.n	801f5b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f66a:	2700      	movs	r7, #0
 801f66c:	1bda      	subs	r2, r3, r7
 801f66e:	2a00      	cmp	r2, #0
 801f670:	dc40      	bgt.n	801f6f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f672:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f676:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f67a:	441e      	add	r6, r3
 801f67c:	9b00      	ldr	r3, [sp, #0]
 801f67e:	2b00      	cmp	r3, #0
 801f680:	f340 80ad 	ble.w	801f7de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801f684:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f68a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f68e:	eeb0 6a62 	vmov.f32	s12, s5
 801f692:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f696:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f69a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f69e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f6a2:	eeb0 6a43 	vmov.f32	s12, s6
 801f6a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6aa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f6ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6c6:	ee12 2a90 	vmov	r2, s5
 801f6ca:	eef0 2a47 	vmov.f32	s5, s14
 801f6ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6d2:	ee13 2a10 	vmov	r2, s6
 801f6d6:	9311      	str	r3, [sp, #68]	; 0x44
 801f6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6da:	eeb0 3a67 	vmov.f32	s6, s15
 801f6de:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6e2:	9312      	str	r3, [sp, #72]	; 0x48
 801f6e4:	9b00      	ldr	r3, [sp, #0]
 801f6e6:	9a03      	ldr	r2, [sp, #12]
 801f6e8:	3b01      	subs	r3, #1
 801f6ea:	9300      	str	r3, [sp, #0]
 801f6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6ee:	bf08      	it	eq
 801f6f0:	4613      	moveq	r3, r2
 801f6f2:	e72d      	b.n	801f550 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f6f4:	1428      	asrs	r0, r5, #16
 801f6f6:	d45c      	bmi.n	801f7b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f6f8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f6fc:	4282      	cmp	r2, r0
 801f6fe:	dd58      	ble.n	801f7b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f700:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f704:	d455      	bmi.n	801f7b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f706:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f70a:	4572      	cmp	r2, lr
 801f70c:	dd51      	ble.n	801f7b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f70e:	9a01      	ldr	r2, [sp, #4]
 801f710:	9902      	ldr	r1, [sp, #8]
 801f712:	fb0e 0002 	mla	r0, lr, r2, r0
 801f716:	0842      	lsrs	r2, r0, #1
 801f718:	07c0      	lsls	r0, r0, #31
 801f71a:	5c8a      	ldrb	r2, [r1, r2]
 801f71c:	bf54      	ite	pl
 801f71e:	f002 020f 	andpl.w	r2, r2, #15
 801f722:	1112      	asrmi	r2, r2, #4
 801f724:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f728:	b2d2      	uxtb	r2, r2
 801f72a:	2a00      	cmp	r2, #0
 801f72c:	d041      	beq.n	801f7b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f72e:	492d      	ldr	r1, [pc, #180]	; (801f7e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801f730:	2aff      	cmp	r2, #255	; 0xff
 801f732:	6808      	ldr	r0, [r1, #0]
 801f734:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801f738:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f73c:	fa5f fe80 	uxtb.w	lr, r0
 801f740:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801f744:	d03b      	beq.n	801f7be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f746:	fa1f f982 	uxth.w	r9, r2
 801f74a:	4438      	add	r0, r7
 801f74c:	43d2      	mvns	r2, r2
 801f74e:	f816 8000 	ldrb.w	r8, [r6, r0]
 801f752:	fb1e fe09 	smulbb	lr, lr, r9
 801f756:	fb1a fa09 	smulbb	sl, sl, r9
 801f75a:	b2d2      	uxtb	r2, r2
 801f75c:	fb1b f909 	smulbb	r9, fp, r9
 801f760:	fb08 ee02 	mla	lr, r8, r2, lr
 801f764:	fa1f fe8e 	uxth.w	lr, lr
 801f768:	f10e 0801 	add.w	r8, lr, #1
 801f76c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801f770:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f774:	f806 e000 	strb.w	lr, [r6, r0]
 801f778:	4430      	add	r0, r6
 801f77a:	f890 e001 	ldrb.w	lr, [r0, #1]
 801f77e:	fb0e aa02 	mla	sl, lr, r2, sl
 801f782:	fa1f fa8a 	uxth.w	sl, sl
 801f786:	f10a 0e01 	add.w	lr, sl, #1
 801f78a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801f78e:	f890 e002 	ldrb.w	lr, [r0, #2]
 801f792:	fb0e 9902 	mla	r9, lr, r2, r9
 801f796:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f79a:	fa1f f989 	uxth.w	r9, r9
 801f79e:	f880 a001 	strb.w	sl, [r0, #1]
 801f7a2:	f109 0201 	add.w	r2, r9, #1
 801f7a6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801f7aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f7ae:	f880 9002 	strb.w	r9, [r0, #2]
 801f7b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f7b4:	3701      	adds	r7, #1
 801f7b6:	4415      	add	r5, r2
 801f7b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f7ba:	4414      	add	r4, r2
 801f7bc:	e756      	b.n	801f66c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f7be:	4438      	add	r0, r7
 801f7c0:	f806 e000 	strb.w	lr, [r6, r0]
 801f7c4:	4430      	add	r0, r6
 801f7c6:	f880 a001 	strb.w	sl, [r0, #1]
 801f7ca:	f880 b002 	strb.w	fp, [r0, #2]
 801f7ce:	e7f0      	b.n	801f7b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f7d0:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f7d4:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f7d8:	f800 bc01 	strb.w	fp, [r0, #-1]
 801f7dc:	e73d      	b.n	801f65a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f7de:	b005      	add	sp, #20
 801f7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7e4:	20006100 	.word	0x20006100

0801f7e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f7e8:	4770      	bx	lr

0801f7ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f7ea:	4770      	bx	lr

0801f7ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f7ec:	4770      	bx	lr

0801f7ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f7ee:	4770      	bx	lr

0801f7f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f7f0:	4770      	bx	lr

0801f7f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f7f2:	4770      	bx	lr

0801f7f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f7f4:	4770      	bx	lr

0801f7f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f7f6:	4770      	bx	lr

0801f7f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f7f8:	4770      	bx	lr

0801f7fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f7fa:	4770      	bx	lr

0801f7fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f7fc:	4770      	bx	lr

0801f7fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f7fe:	4770      	bx	lr

0801f800 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f800:	4770      	bx	lr

0801f802 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f802:	4770      	bx	lr

0801f804 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f804:	4770      	bx	lr

0801f806 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f806:	4770      	bx	lr

0801f808 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f808:	4770      	bx	lr

0801f80a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f80a:	4770      	bx	lr

0801f80c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f80c:	4770      	bx	lr

0801f80e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f80e:	4770      	bx	lr

0801f810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f810:	2bff      	cmp	r3, #255	; 0xff
 801f812:	b508      	push	{r3, lr}
 801f814:	d04f      	beq.n	801f8b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801f816:	2a2c      	cmp	r2, #44	; 0x2c
 801f818:	d032      	beq.n	801f880 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801f81a:	d80f      	bhi.n	801f83c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801f81c:	2a08      	cmp	r2, #8
 801f81e:	d046      	beq.n	801f8ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f820:	d805      	bhi.n	801f82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801f822:	2a04      	cmp	r2, #4
 801f824:	d041      	beq.n	801f8aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f826:	2a05      	cmp	r2, #5
 801f828:	d03d      	beq.n	801f8a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f82a:	2000      	movs	r0, #0
 801f82c:	e027      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f82e:	2a0a      	cmp	r2, #10
 801f830:	d03d      	beq.n	801f8ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f832:	d301      	bcc.n	801f838 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801f834:	2a0b      	cmp	r2, #11
 801f836:	d1f8      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f838:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f83a:	e020      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f83c:	2a30      	cmp	r2, #48	; 0x30
 801f83e:	d038      	beq.n	801f8b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f840:	d808      	bhi.n	801f854 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801f842:	2a2e      	cmp	r2, #46	; 0x2e
 801f844:	684b      	ldr	r3, [r1, #4]
 801f846:	d029      	beq.n	801f89c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801f848:	d90b      	bls.n	801f862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801f84a:	781b      	ldrb	r3, [r3, #0]
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d1ec      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f850:	6a00      	ldr	r0, [r0, #32]
 801f852:	e014      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f854:	2a32      	cmp	r2, #50	; 0x32
 801f856:	d02c      	beq.n	801f8b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f858:	d301      	bcc.n	801f85e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801f85a:	2a33      	cmp	r2, #51	; 0x33
 801f85c:	d1e5      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f85e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f860:	e00d      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f862:	781b      	ldrb	r3, [r3, #0]
 801f864:	2b01      	cmp	r3, #1
 801f866:	d009      	beq.n	801f87c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801f868:	d3f2      	bcc.n	801f850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801f86a:	2b02      	cmp	r3, #2
 801f86c:	d1dd      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f86e:	4b39      	ldr	r3, [pc, #228]	; (801f954 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f870:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 801f874:	4a38      	ldr	r2, [pc, #224]	; (801f958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f876:	4839      	ldr	r0, [pc, #228]	; (801f95c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801f878:	f008 fb62 	bl	8027f40 <__assert_func>
 801f87c:	6900      	ldr	r0, [r0, #16]
 801f87e:	bd08      	pop	{r3, pc}
 801f880:	684b      	ldr	r3, [r1, #4]
 801f882:	781b      	ldrb	r3, [r3, #0]
 801f884:	2b01      	cmp	r3, #1
 801f886:	d007      	beq.n	801f898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801f888:	d30b      	bcc.n	801f8a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f88a:	2b02      	cmp	r3, #2
 801f88c:	d1cd      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f88e:	4b31      	ldr	r3, [pc, #196]	; (801f954 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f894:	4a30      	ldr	r2, [pc, #192]	; (801f958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f896:	e7ee      	b.n	801f876 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f898:	6880      	ldr	r0, [r0, #8]
 801f89a:	e7f0      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f89c:	781b      	ldrb	r3, [r3, #0]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d1c3      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f8a2:	6980      	ldr	r0, [r0, #24]
 801f8a4:	e7eb      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f8a6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f8a8:	e7e9      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f8aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f8ac:	e7e7      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f8ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f8b0:	e7e5      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f8b2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f8b4:	e7e3      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f8b6:	2a2c      	cmp	r2, #44	; 0x2c
 801f8b8:	d030      	beq.n	801f91c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801f8ba:	d80f      	bhi.n	801f8dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801f8bc:	2a08      	cmp	r2, #8
 801f8be:	d044      	beq.n	801f94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f8c0:	d805      	bhi.n	801f8ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801f8c2:	2a04      	cmp	r2, #4
 801f8c4:	d03f      	beq.n	801f946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f8c6:	2a05      	cmp	r2, #5
 801f8c8:	d1af      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f8ca:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f8cc:	e7d7      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f8ce:	2a0a      	cmp	r2, #10
 801f8d0:	d03b      	beq.n	801f94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f8d2:	d301      	bcc.n	801f8d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801f8d4:	2a0b      	cmp	r2, #11
 801f8d6:	d1a8      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f8d8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f8da:	e7d0      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f8dc:	2a30      	cmp	r2, #48	; 0x30
 801f8de:	d036      	beq.n	801f94e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f8e0:	d808      	bhi.n	801f8f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801f8e2:	2a2e      	cmp	r2, #46	; 0x2e
 801f8e4:	684b      	ldr	r3, [r1, #4]
 801f8e6:	d028      	beq.n	801f93a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801f8e8:	d90b      	bls.n	801f902 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801f8ea:	781b      	ldrb	r3, [r3, #0]
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d19c      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f8f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f8f2:	e7c4      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f8f4:	2a32      	cmp	r2, #50	; 0x32
 801f8f6:	d02a      	beq.n	801f94e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f8f8:	d301      	bcc.n	801f8fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801f8fa:	2a33      	cmp	r2, #51	; 0x33
 801f8fc:	d195      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f8fe:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f900:	e7bd      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f902:	781b      	ldrb	r3, [r3, #0]
 801f904:	2b01      	cmp	r3, #1
 801f906:	d007      	beq.n	801f918 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801f908:	d3f2      	bcc.n	801f8f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801f90a:	2b02      	cmp	r3, #2
 801f90c:	d18d      	bne.n	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f90e:	4b11      	ldr	r3, [pc, #68]	; (801f954 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f910:	f240 4131 	movw	r1, #1073	; 0x431
 801f914:	4a10      	ldr	r2, [pc, #64]	; (801f958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f916:	e7ae      	b.n	801f876 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f918:	6940      	ldr	r0, [r0, #20]
 801f91a:	e7b0      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f91c:	684b      	ldr	r3, [r1, #4]
 801f91e:	781b      	ldrb	r3, [r3, #0]
 801f920:	2b01      	cmp	r3, #1
 801f922:	d008      	beq.n	801f936 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801f924:	d30d      	bcc.n	801f942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f926:	2b02      	cmp	r3, #2
 801f928:	f47f af7f 	bne.w	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f92c:	4b09      	ldr	r3, [pc, #36]	; (801f954 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f92e:	f240 413d 	movw	r1, #1085	; 0x43d
 801f932:	4a09      	ldr	r2, [pc, #36]	; (801f958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f934:	e79f      	b.n	801f876 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f936:	68c0      	ldr	r0, [r0, #12]
 801f938:	e7a1      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f93a:	781b      	ldrb	r3, [r3, #0]
 801f93c:	2b00      	cmp	r3, #0
 801f93e:	f47f af74 	bne.w	801f82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f942:	69c0      	ldr	r0, [r0, #28]
 801f944:	e79b      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f946:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f948:	e799      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f94a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f94c:	e797      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f94e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f950:	e795      	b.n	801f87e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f952:	bf00      	nop
 801f954:	0802c94f 	.word	0x0802c94f
 801f958:	0802d107 	.word	0x0802d107
 801f95c:	0802c99b 	.word	0x0802c99b

0801f960 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801f960:	b508      	push	{r3, lr}
 801f962:	4b06      	ldr	r3, [pc, #24]	; (801f97c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801f964:	8818      	ldrh	r0, [r3, #0]
 801f966:	b928      	cbnz	r0, 801f974 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801f968:	4b05      	ldr	r3, [pc, #20]	; (801f980 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801f96a:	2154      	movs	r1, #84	; 0x54
 801f96c:	4a05      	ldr	r2, [pc, #20]	; (801f984 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801f96e:	4806      	ldr	r0, [pc, #24]	; (801f988 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801f970:	f008 fae6 	bl	8027f40 <__assert_func>
 801f974:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f978:	b280      	uxth	r0, r0
 801f97a:	bd08      	pop	{r3, pc}
 801f97c:	200060f0 	.word	0x200060f0
 801f980:	0802cbe8 	.word	0x0802cbe8
 801f984:	0802d0cc 	.word	0x0802d0cc
 801f988:	0802cc2a 	.word	0x0802cc2a

0801f98c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f990:	4616      	mov	r6, r2
 801f992:	b087      	sub	sp, #28
 801f994:	461f      	mov	r7, r3
 801f996:	b34b      	cbz	r3, 801f9ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f998:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	dd25      	ble.n	801f9ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f9a0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	dd21      	ble.n	801f9ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f9a8:	6808      	ldr	r0, [r1, #0]
 801f9aa:	ab04      	add	r3, sp, #16
 801f9ac:	6849      	ldr	r1, [r1, #4]
 801f9ae:	4c5a      	ldr	r4, [pc, #360]	; (801fb18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801f9b0:	c303      	stmia	r3!, {r0, r1}
 801f9b2:	a804      	add	r0, sp, #16
 801f9b4:	f7fa fd16 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f9b8:	6820      	ldr	r0, [r4, #0]
 801f9ba:	6803      	ldr	r3, [r0, #0]
 801f9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f9be:	4798      	blx	r3
 801f9c0:	2fff      	cmp	r7, #255	; 0xff
 801f9c2:	4623      	mov	r3, r4
 801f9c4:	d015      	beq.n	801f9f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f9c6:	f010 0f08 	tst.w	r0, #8
 801f9ca:	d015      	beq.n	801f9f8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801f9cc:	6818      	ldr	r0, [r3, #0]
 801f9ce:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f9d2:	6801      	ldr	r1, [r0, #0]
 801f9d4:	9401      	str	r4, [sp, #4]
 801f9d6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f9da:	9702      	str	r7, [sp, #8]
 801f9dc:	9400      	str	r4, [sp, #0]
 801f9de:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f9e2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801f9e4:	4631      	mov	r1, r6
 801f9e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f9ea:	47a0      	blx	r4
 801f9ec:	b007      	add	sp, #28
 801f9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9f2:	f010 0f02 	tst.w	r0, #2
 801f9f6:	e7e8      	b.n	801f9ca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801f9f8:	6818      	ldr	r0, [r3, #0]
 801f9fa:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801f9fe:	6803      	ldr	r3, [r0, #0]
 801fa00:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801fa04:	6a1b      	ldr	r3, [r3, #32]
 801fa06:	4798      	blx	r3
 801fa08:	4944      	ldr	r1, [pc, #272]	; (801fb1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801fa0a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801fa0e:	2fff      	cmp	r7, #255	; 0xff
 801fa10:	f8b1 c000 	ldrh.w	ip, [r1]
 801fa14:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801fa18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801fa1c:	4688      	mov	r8, r1
 801fa1e:	fb0c 2303 	mla	r3, ip, r3, r2
 801fa22:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801fa26:	b2f2      	uxtb	r2, r6
 801fa28:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801fa2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa30:	4418      	add	r0, r3
 801fa32:	d112      	bne.n	801fa5a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801fa34:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa38:	2100      	movs	r1, #0
 801fa3a:	42a9      	cmp	r1, r5
 801fa3c:	da66      	bge.n	801fb0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801fa3e:	4603      	mov	r3, r0
 801fa40:	2700      	movs	r7, #0
 801fa42:	42a7      	cmp	r7, r4
 801fa44:	f103 0303 	add.w	r3, r3, #3
 801fa48:	da57      	bge.n	801fafa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801fa4a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801fa4e:	3701      	adds	r7, #1
 801fa50:	f803 ec02 	strb.w	lr, [r3, #-2]
 801fa54:	f803 cc01 	strb.w	ip, [r3, #-1]
 801fa58:	e7f3      	b.n	801fa42 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801fa5a:	b2bb      	uxth	r3, r7
 801fa5c:	f04f 0800 	mov.w	r8, #0
 801fa60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa64:	fb0c fc03 	mul.w	ip, ip, r3
 801fa68:	fb0e fe03 	mul.w	lr, lr, r3
 801fa6c:	435a      	muls	r2, r3
 801fa6e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801fa72:	460f      	mov	r7, r1
 801fa74:	b29b      	uxth	r3, r3
 801fa76:	45a8      	cmp	r8, r5
 801fa78:	da48      	bge.n	801fb0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801fa7a:	4601      	mov	r1, r0
 801fa7c:	f04f 0a00 	mov.w	sl, #0
 801fa80:	45a2      	cmp	sl, r4
 801fa82:	f101 0103 	add.w	r1, r1, #3
 801fa86:	da2f      	bge.n	801fae8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801fa88:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801fa8c:	f10a 0a01 	add.w	sl, sl, #1
 801fa90:	fb19 f903 	smulbb	r9, r9, r3
 801fa94:	4491      	add	r9, r2
 801fa96:	fa1f f989 	uxth.w	r9, r9
 801fa9a:	f109 0b01 	add.w	fp, r9, #1
 801fa9e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801faa2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801faa6:	f801 9c03 	strb.w	r9, [r1, #-3]
 801faaa:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801faae:	fb19 f903 	smulbb	r9, r9, r3
 801fab2:	44f1      	add	r9, lr
 801fab4:	fa1f f989 	uxth.w	r9, r9
 801fab8:	f109 0b01 	add.w	fp, r9, #1
 801fabc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fac0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fac4:	f801 9c02 	strb.w	r9, [r1, #-2]
 801fac8:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801facc:	fb19 f903 	smulbb	r9, r9, r3
 801fad0:	44e1      	add	r9, ip
 801fad2:	fa1f f989 	uxth.w	r9, r9
 801fad6:	f109 0b01 	add.w	fp, r9, #1
 801fada:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fade:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fae2:	f801 9c01 	strb.w	r9, [r1, #-1]
 801fae6:	e7cb      	b.n	801fa80 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801fae8:	8839      	ldrh	r1, [r7, #0]
 801faea:	f108 0801 	add.w	r8, r8, #1
 801faee:	1b09      	subs	r1, r1, r4
 801faf0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801faf4:	4431      	add	r1, r6
 801faf6:	4408      	add	r0, r1
 801faf8:	e7bd      	b.n	801fa76 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801fafa:	f8b8 3000 	ldrh.w	r3, [r8]
 801fafe:	3101      	adds	r1, #1
 801fb00:	1b1b      	subs	r3, r3, r4
 801fb02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb06:	4433      	add	r3, r6
 801fb08:	4418      	add	r0, r3
 801fb0a:	e796      	b.n	801fa3a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801fb0c:	4b02      	ldr	r3, [pc, #8]	; (801fb18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801fb0e:	6818      	ldr	r0, [r3, #0]
 801fb10:	6803      	ldr	r3, [r0, #0]
 801fb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb14:	4798      	blx	r3
 801fb16:	e769      	b.n	801f9ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801fb18:	200060f8 	.word	0x200060f8
 801fb1c:	200060f0 	.word	0x200060f0

0801fb20 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801fb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb24:	b08d      	sub	sp, #52	; 0x34
 801fb26:	460c      	mov	r4, r1
 801fb28:	4617      	mov	r7, r2
 801fb2a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801fb2e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801fb32:	2e00      	cmp	r6, #0
 801fb34:	d04a      	beq.n	801fbcc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801fb36:	6810      	ldr	r0, [r2, #0]
 801fb38:	ad08      	add	r5, sp, #32
 801fb3a:	6851      	ldr	r1, [r2, #4]
 801fb3c:	c503      	stmia	r5!, {r0, r1}
 801fb3e:	6818      	ldr	r0, [r3, #0]
 801fb40:	ad0a      	add	r5, sp, #40	; 0x28
 801fb42:	6859      	ldr	r1, [r3, #4]
 801fb44:	c503      	stmia	r5!, {r0, r1}
 801fb46:	a808      	add	r0, sp, #32
 801fb48:	f7fa fc4c 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fb4c:	4639      	mov	r1, r7
 801fb4e:	a80a      	add	r0, sp, #40	; 0x28
 801fb50:	4f59      	ldr	r7, [pc, #356]	; (801fcb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801fb52:	f7fa fc2f 	bl	801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fb56:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801fb5a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801fb5e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801fb62:	6838      	ldr	r0, [r7, #0]
 801fb64:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fb68:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801fb6c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801fb70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fb74:	440c      	add	r4, r1
 801fb76:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801fb7a:	440a      	add	r2, r1
 801fb7c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801fb80:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801fb84:	4413      	add	r3, r2
 801fb86:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801fb8a:	6803      	ldr	r3, [r0, #0]
 801fb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb8e:	4798      	blx	r3
 801fb90:	2eff      	cmp	r6, #255	; 0xff
 801fb92:	f000 8089 	beq.w	801fca8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801fb96:	0743      	lsls	r3, r0, #29
 801fb98:	d405      	bmi.n	801fba6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801fb9a:	f1b9 0f00 	cmp.w	r9, #0
 801fb9e:	d018      	beq.n	801fbd2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801fba0:	f010 0f10 	tst.w	r0, #16
 801fba4:	d015      	beq.n	801fbd2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801fba6:	6838      	ldr	r0, [r7, #0]
 801fba8:	b2ad      	uxth	r5, r5
 801fbaa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801fbae:	6801      	ldr	r1, [r0, #0]
 801fbb0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801fbb4:	9500      	str	r5, [sp, #0]
 801fbb6:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801fbba:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801fbbe:	9602      	str	r6, [sp, #8]
 801fbc0:	fa1f f688 	uxth.w	r6, r8
 801fbc4:	9601      	str	r6, [sp, #4]
 801fbc6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801fbc8:	4621      	mov	r1, r4
 801fbca:	47a8      	blx	r5
 801fbcc:	b00d      	add	sp, #52	; 0x34
 801fbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbd2:	6838      	ldr	r0, [r7, #0]
 801fbd4:	6803      	ldr	r3, [r0, #0]
 801fbd6:	6a1b      	ldr	r3, [r3, #32]
 801fbd8:	4798      	blx	r3
 801fbda:	4a38      	ldr	r2, [pc, #224]	; (801fcbc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801fbdc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801fbe0:	2eff      	cmp	r6, #255	; 0xff
 801fbe2:	8813      	ldrh	r3, [r2, #0]
 801fbe4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801fbe8:	fb0c 1303 	mla	r3, ip, r3, r1
 801fbec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801fbf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fbf4:	4418      	add	r0, r3
 801fbf6:	d032      	beq.n	801fc5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801fbf8:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801fbfc:	f04f 0c00 	mov.w	ip, #0
 801fc00:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801fc04:	9306      	str	r3, [sp, #24]
 801fc06:	45c4      	cmp	ip, r8
 801fc08:	da49      	bge.n	801fc9e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801fc0a:	4686      	mov	lr, r0
 801fc0c:	46a1      	mov	r9, r4
 801fc0e:	eba9 0304 	sub.w	r3, r9, r4
 801fc12:	428b      	cmp	r3, r1
 801fc14:	da13      	bge.n	801fc3e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801fc16:	f819 3b01 	ldrb.w	r3, [r9], #1
 801fc1a:	f89e b000 	ldrb.w	fp, [lr]
 801fc1e:	9307      	str	r3, [sp, #28]
 801fc20:	9b06      	ldr	r3, [sp, #24]
 801fc22:	fb1b fb03 	smulbb	fp, fp, r3
 801fc26:	9b07      	ldr	r3, [sp, #28]
 801fc28:	fb03 b306 	mla	r3, r3, r6, fp
 801fc2c:	b29b      	uxth	r3, r3
 801fc2e:	f103 0b01 	add.w	fp, r3, #1
 801fc32:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801fc36:	121b      	asrs	r3, r3, #8
 801fc38:	f80e 3b01 	strb.w	r3, [lr], #1
 801fc3c:	e7e7      	b.n	801fc0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801fc3e:	8813      	ldrh	r3, [r2, #0]
 801fc40:	f10c 0c01 	add.w	ip, ip, #1
 801fc44:	1b5b      	subs	r3, r3, r5
 801fc46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc4a:	4453      	add	r3, sl
 801fc4c:	4418      	add	r0, r3
 801fc4e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801fc52:	1b5b      	subs	r3, r3, r5
 801fc54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc58:	4453      	add	r3, sl
 801fc5a:	441c      	add	r4, r3
 801fc5c:	e7d3      	b.n	801fc06 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801fc5e:	2600      	movs	r6, #0
 801fc60:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801fc64:	4546      	cmp	r6, r8
 801fc66:	da1a      	bge.n	801fc9e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801fc68:	f100 3eff 	add.w	lr, r0, #4294967295
 801fc6c:	4623      	mov	r3, r4
 801fc6e:	eba3 0904 	sub.w	r9, r3, r4
 801fc72:	4589      	cmp	r9, r1
 801fc74:	da04      	bge.n	801fc80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801fc76:	f813 9b01 	ldrb.w	r9, [r3], #1
 801fc7a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801fc7e:	e7f6      	b.n	801fc6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801fc80:	8813      	ldrh	r3, [r2, #0]
 801fc82:	3601      	adds	r6, #1
 801fc84:	1b5b      	subs	r3, r3, r5
 801fc86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc8a:	4463      	add	r3, ip
 801fc8c:	4418      	add	r0, r3
 801fc8e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801fc92:	1b5b      	subs	r3, r3, r5
 801fc94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc98:	4463      	add	r3, ip
 801fc9a:	441c      	add	r4, r3
 801fc9c:	e7e2      	b.n	801fc64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801fc9e:	6838      	ldr	r0, [r7, #0]
 801fca0:	6803      	ldr	r3, [r0, #0]
 801fca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fca4:	4798      	blx	r3
 801fca6:	e791      	b.n	801fbcc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801fca8:	f1b9 0f00 	cmp.w	r9, #0
 801fcac:	f47f af78 	bne.w	801fba0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801fcb0:	f010 0f01 	tst.w	r0, #1
 801fcb4:	e776      	b.n	801fba4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801fcb6:	bf00      	nop
 801fcb8:	200060f8 	.word	0x200060f8
 801fcbc:	200060f0 	.word	0x200060f0

0801fcc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fcc0:	b510      	push	{r4, lr}
 801fcc2:	4604      	mov	r4, r0
 801fcc4:	2104      	movs	r1, #4
 801fcc6:	f007 ff68 	bl	8027b9a <_ZdlPvj>
 801fcca:	4620      	mov	r0, r4
 801fccc:	bd10      	pop	{r4, pc}

0801fcce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801fcce:	b510      	push	{r4, lr}
 801fcd0:	4604      	mov	r4, r0
 801fcd2:	2104      	movs	r1, #4
 801fcd4:	f007 ff61 	bl	8027b9a <_ZdlPvj>
 801fcd8:	4620      	mov	r0, r4
 801fcda:	bd10      	pop	{r4, pc}

0801fcdc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fcdc:	b510      	push	{r4, lr}
 801fcde:	4604      	mov	r4, r0
 801fce0:	2104      	movs	r1, #4
 801fce2:	f007 ff5a 	bl	8027b9a <_ZdlPvj>
 801fce6:	4620      	mov	r0, r4
 801fce8:	bd10      	pop	{r4, pc}

0801fcea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fcea:	b510      	push	{r4, lr}
 801fcec:	4604      	mov	r4, r0
 801fcee:	2104      	movs	r1, #4
 801fcf0:	f007 ff53 	bl	8027b9a <_ZdlPvj>
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	bd10      	pop	{r4, pc}

0801fcf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fcf8:	b510      	push	{r4, lr}
 801fcfa:	4604      	mov	r4, r0
 801fcfc:	2104      	movs	r1, #4
 801fcfe:	f007 ff4c 	bl	8027b9a <_ZdlPvj>
 801fd02:	4620      	mov	r0, r4
 801fd04:	bd10      	pop	{r4, pc}

0801fd06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fd06:	b510      	push	{r4, lr}
 801fd08:	4604      	mov	r4, r0
 801fd0a:	2104      	movs	r1, #4
 801fd0c:	f007 ff45 	bl	8027b9a <_ZdlPvj>
 801fd10:	4620      	mov	r0, r4
 801fd12:	bd10      	pop	{r4, pc}

0801fd14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801fd14:	b510      	push	{r4, lr}
 801fd16:	4604      	mov	r4, r0
 801fd18:	2104      	movs	r1, #4
 801fd1a:	f007 ff3e 	bl	8027b9a <_ZdlPvj>
 801fd1e:	4620      	mov	r0, r4
 801fd20:	bd10      	pop	{r4, pc}

0801fd22 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fd22:	b510      	push	{r4, lr}
 801fd24:	4604      	mov	r4, r0
 801fd26:	2104      	movs	r1, #4
 801fd28:	f007 ff37 	bl	8027b9a <_ZdlPvj>
 801fd2c:	4620      	mov	r0, r4
 801fd2e:	bd10      	pop	{r4, pc}

0801fd30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fd30:	b510      	push	{r4, lr}
 801fd32:	4604      	mov	r4, r0
 801fd34:	2104      	movs	r1, #4
 801fd36:	f007 ff30 	bl	8027b9a <_ZdlPvj>
 801fd3a:	4620      	mov	r0, r4
 801fd3c:	bd10      	pop	{r4, pc}

0801fd3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801fd3e:	b510      	push	{r4, lr}
 801fd40:	4604      	mov	r4, r0
 801fd42:	2104      	movs	r1, #4
 801fd44:	f007 ff29 	bl	8027b9a <_ZdlPvj>
 801fd48:	4620      	mov	r0, r4
 801fd4a:	bd10      	pop	{r4, pc}

0801fd4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fd4c:	b510      	push	{r4, lr}
 801fd4e:	4604      	mov	r4, r0
 801fd50:	2104      	movs	r1, #4
 801fd52:	f007 ff22 	bl	8027b9a <_ZdlPvj>
 801fd56:	4620      	mov	r0, r4
 801fd58:	bd10      	pop	{r4, pc}

0801fd5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fd5a:	b510      	push	{r4, lr}
 801fd5c:	4604      	mov	r4, r0
 801fd5e:	2104      	movs	r1, #4
 801fd60:	f007 ff1b 	bl	8027b9a <_ZdlPvj>
 801fd64:	4620      	mov	r0, r4
 801fd66:	bd10      	pop	{r4, pc}

0801fd68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fd68:	b510      	push	{r4, lr}
 801fd6a:	4604      	mov	r4, r0
 801fd6c:	2104      	movs	r1, #4
 801fd6e:	f007 ff14 	bl	8027b9a <_ZdlPvj>
 801fd72:	4620      	mov	r0, r4
 801fd74:	bd10      	pop	{r4, pc}

0801fd76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fd76:	b510      	push	{r4, lr}
 801fd78:	4604      	mov	r4, r0
 801fd7a:	2104      	movs	r1, #4
 801fd7c:	f007 ff0d 	bl	8027b9a <_ZdlPvj>
 801fd80:	4620      	mov	r0, r4
 801fd82:	bd10      	pop	{r4, pc}

0801fd84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801fd84:	b510      	push	{r4, lr}
 801fd86:	4604      	mov	r4, r0
 801fd88:	2104      	movs	r1, #4
 801fd8a:	f007 ff06 	bl	8027b9a <_ZdlPvj>
 801fd8e:	4620      	mov	r0, r4
 801fd90:	bd10      	pop	{r4, pc}

0801fd92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fd92:	b510      	push	{r4, lr}
 801fd94:	4604      	mov	r4, r0
 801fd96:	2104      	movs	r1, #4
 801fd98:	f007 feff 	bl	8027b9a <_ZdlPvj>
 801fd9c:	4620      	mov	r0, r4
 801fd9e:	bd10      	pop	{r4, pc}

0801fda0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801fda0:	b510      	push	{r4, lr}
 801fda2:	4604      	mov	r4, r0
 801fda4:	2104      	movs	r1, #4
 801fda6:	f007 fef8 	bl	8027b9a <_ZdlPvj>
 801fdaa:	4620      	mov	r0, r4
 801fdac:	bd10      	pop	{r4, pc}

0801fdae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801fdae:	b510      	push	{r4, lr}
 801fdb0:	4604      	mov	r4, r0
 801fdb2:	2104      	movs	r1, #4
 801fdb4:	f007 fef1 	bl	8027b9a <_ZdlPvj>
 801fdb8:	4620      	mov	r0, r4
 801fdba:	bd10      	pop	{r4, pc}

0801fdbc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801fdbc:	b510      	push	{r4, lr}
 801fdbe:	4604      	mov	r4, r0
 801fdc0:	2104      	movs	r1, #4
 801fdc2:	f007 feea 	bl	8027b9a <_ZdlPvj>
 801fdc6:	4620      	mov	r0, r4
 801fdc8:	bd10      	pop	{r4, pc}

0801fdca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801fdca:	b510      	push	{r4, lr}
 801fdcc:	4604      	mov	r4, r0
 801fdce:	2104      	movs	r1, #4
 801fdd0:	f007 fee3 	bl	8027b9a <_ZdlPvj>
 801fdd4:	4620      	mov	r0, r4
 801fdd6:	bd10      	pop	{r4, pc}

0801fdd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fddc:	4d9e      	ldr	r5, [pc, #632]	; (8020058 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801fdde:	4690      	mov	r8, r2
 801fde0:	b08f      	sub	sp, #60	; 0x3c
 801fde2:	4604      	mov	r4, r0
 801fde4:	682a      	ldr	r2, [r5, #0]
 801fde6:	4689      	mov	r9, r1
 801fde8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801fdec:	2a02      	cmp	r2, #2
 801fdee:	d106      	bne.n	801fdfe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801fdf0:	4b9a      	ldr	r3, [pc, #616]	; (802005c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801fdf2:	f240 11e7 	movw	r1, #487	; 0x1e7
 801fdf6:	4a9a      	ldr	r2, [pc, #616]	; (8020060 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fdf8:	489a      	ldr	r0, [pc, #616]	; (8020064 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801fdfa:	f008 f8a1 	bl	8027f40 <__assert_func>
 801fdfe:	ae0e      	add	r6, sp, #56	; 0x38
 801fe00:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801fe04:	4630      	mov	r0, r6
 801fe06:	f7fe f88b 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fe0a:	6823      	ldr	r3, [r4, #0]
 801fe0c:	4607      	mov	r7, r0
 801fe0e:	4620      	mov	r0, r4
 801fe10:	6a1b      	ldr	r3, [r3, #32]
 801fe12:	4798      	blx	r3
 801fe14:	4287      	cmp	r7, r0
 801fe16:	d004      	beq.n	801fe22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801fe18:	4b93      	ldr	r3, [pc, #588]	; (8020068 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801fe1a:	f240 11e9 	movw	r1, #489	; 0x1e9
 801fe1e:	4a90      	ldr	r2, [pc, #576]	; (8020060 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fe20:	e7ea      	b.n	801fdf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801fe22:	4630      	mov	r0, r6
 801fe24:	f7fd fff2 	bl	801de0c <_ZNK8touchgfx6Bitmap7getDataEv>
 801fe28:	4607      	mov	r7, r0
 801fe2a:	b920      	cbnz	r0, 801fe36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801fe2c:	4b8f      	ldr	r3, [pc, #572]	; (802006c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801fe2e:	f240 11eb 	movw	r1, #491	; 0x1eb
 801fe32:	4a8b      	ldr	r2, [pc, #556]	; (8020060 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fe34:	e7e0      	b.n	801fdf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801fe36:	f8d8 0000 	ldr.w	r0, [r8]
 801fe3a:	ab06      	add	r3, sp, #24
 801fe3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fe40:	f9b8 a000 	ldrsh.w	sl, [r8]
 801fe44:	c303      	stmia	r3!, {r0, r1}
 801fe46:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801fe4a:	ab08      	add	r3, sp, #32
 801fe4c:	f8d9 0000 	ldr.w	r0, [r9]
 801fe50:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801fe54:	c303      	stmia	r3!, {r0, r1}
 801fe56:	4630      	mov	r0, r6
 801fe58:	f7fd fed0 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fe5c:	4680      	mov	r8, r0
 801fe5e:	4630      	mov	r0, r6
 801fe60:	4e83      	ldr	r6, [pc, #524]	; (8020070 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801fe62:	f7fd ff05 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801fe66:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801fe6a:	f10d 0920 	add.w	r9, sp, #32
 801fe6e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801fe72:	a806      	add	r0, sp, #24
 801fe74:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801fe78:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801fe7c:	f7fa fab2 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe80:	4648      	mov	r0, r9
 801fe82:	f7fa faaf 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe86:	a80a      	add	r0, sp, #40	; 0x28
 801fe88:	f7fa faac 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe8c:	4b79      	ldr	r3, [pc, #484]	; (8020074 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801fe8e:	2100      	movs	r1, #0
 801fe90:	f9b6 2000 	ldrsh.w	r2, [r6]
 801fe94:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fe98:	4648      	mov	r0, r9
 801fe9a:	910c      	str	r1, [sp, #48]	; 0x30
 801fe9c:	a90c      	add	r1, sp, #48	; 0x30
 801fe9e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801fea2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801fea6:	f7f5 ff35 	bl	8015d14 <_ZN8touchgfx4RectaNERKS0_>
 801feaa:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801feae:	9602      	str	r6, [sp, #8]
 801feb0:	f1bc 0f00 	cmp.w	ip, #0
 801feb4:	f340 80a4 	ble.w	8020000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801feb8:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801febc:	2e00      	cmp	r6, #0
 801febe:	f340 809f 	ble.w	8020000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fec2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801fec6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801feca:	4288      	cmp	r0, r1
 801fecc:	db36      	blt.n	801ff3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fece:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801fed2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801fed6:	429a      	cmp	r2, r3
 801fed8:	db30      	blt.n	801ff3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801feda:	4460      	add	r0, ip
 801fedc:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801fee0:	4461      	add	r1, ip
 801fee2:	b200      	sxth	r0, r0
 801fee4:	b209      	sxth	r1, r1
 801fee6:	4288      	cmp	r0, r1
 801fee8:	dc28      	bgt.n	801ff3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801feea:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801feee:	4432      	add	r2, r6
 801fef0:	440b      	add	r3, r1
 801fef2:	b212      	sxth	r2, r2
 801fef4:	b21b      	sxth	r3, r3
 801fef6:	429a      	cmp	r2, r3
 801fef8:	dc20      	bgt.n	801ff3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fefa:	6823      	ldr	r3, [r4, #0]
 801fefc:	4620      	mov	r0, r4
 801fefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff00:	4798      	blx	r3
 801ff02:	4682      	mov	sl, r0
 801ff04:	6828      	ldr	r0, [r5, #0]
 801ff06:	6803      	ldr	r3, [r0, #0]
 801ff08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff0a:	4798      	blx	r3
 801ff0c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ff10:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ff14:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ff18:	9303      	str	r3, [sp, #12]
 801ff1a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ff1e:	1a9b      	subs	r3, r3, r2
 801ff20:	b29b      	uxth	r3, r3
 801ff22:	b21c      	sxth	r4, r3
 801ff24:	2c00      	cmp	r4, #0
 801ff26:	dc0e      	bgt.n	801ff46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801ff28:	b134      	cbz	r4, 801ff38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801ff2a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ff2e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ff32:	4413      	add	r3, r2
 801ff34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ff38:	463c      	mov	r4, r7
 801ff3a:	e00b      	b.n	801ff54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801ff3c:	4b4e      	ldr	r3, [pc, #312]	; (8020078 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801ff3e:	f240 11f9 	movw	r1, #505	; 0x1f9
 801ff42:	4a47      	ldr	r2, [pc, #284]	; (8020060 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ff44:	e758      	b.n	801fdf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ff46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ff4a:	ebab 0303 	sub.w	r3, fp, r3
 801ff4e:	443c      	add	r4, r7
 801ff50:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ff54:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ff58:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ff5c:	1a9b      	subs	r3, r3, r2
 801ff5e:	b29b      	uxth	r3, r3
 801ff60:	b219      	sxth	r1, r3
 801ff62:	2900      	cmp	r1, #0
 801ff64:	dd50      	ble.n	8020008 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801ff66:	9a03      	ldr	r2, [sp, #12]
 801ff68:	fb02 4401 	mla	r4, r2, r1, r4
 801ff6c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801ff70:	1ad3      	subs	r3, r2, r3
 801ff72:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ff76:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ff7a:	f1bc 0f00 	cmp.w	ip, #0
 801ff7e:	dd3f      	ble.n	8020000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ff80:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ff84:	2e00      	cmp	r6, #0
 801ff86:	dd3b      	ble.n	8020000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ff88:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ff8c:	2203      	movs	r2, #3
 801ff8e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ff92:	fb0a f801 	mul.w	r8, sl, r1
 801ff96:	fb13 8802 	smlabb	r8, r3, r2, r8
 801ff9a:	9a02      	ldr	r2, [sp, #8]
 801ff9c:	4480      	add	r8, r0
 801ff9e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801ffa2:	8812      	ldrh	r2, [r2, #0]
 801ffa4:	4584      	cmp	ip, r0
 801ffa6:	eba2 0303 	sub.w	r3, r2, r3
 801ffaa:	bfa8      	it	ge
 801ffac:	4684      	movge	ip, r0
 801ffae:	459c      	cmp	ip, r3
 801ffb0:	bfa8      	it	ge
 801ffb2:	469c      	movge	ip, r3
 801ffb4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801ffb8:	429e      	cmp	r6, r3
 801ffba:	bfa8      	it	ge
 801ffbc:	461e      	movge	r6, r3
 801ffbe:	4b2d      	ldr	r3, [pc, #180]	; (8020074 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801ffc0:	881b      	ldrh	r3, [r3, #0]
 801ffc2:	1a59      	subs	r1, r3, r1
 801ffc4:	4633      	mov	r3, r6
 801ffc6:	428e      	cmp	r6, r1
 801ffc8:	bfa8      	it	ge
 801ffca:	460b      	movge	r3, r1
 801ffcc:	4562      	cmp	r2, ip
 801ffce:	9302      	str	r3, [sp, #8]
 801ffd0:	d12d      	bne.n	802002e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801ffd2:	455a      	cmp	r2, fp
 801ffd4:	d12b      	bne.n	802002e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801ffd6:	6828      	ldr	r0, [r5, #0]
 801ffd8:	6803      	ldr	r3, [r0, #0]
 801ffda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ffdc:	4798      	blx	r3
 801ffde:	07c3      	lsls	r3, r0, #31
 801ffe0:	d51b      	bpl.n	802001a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801ffe2:	6828      	ldr	r0, [r5, #0]
 801ffe4:	9b02      	ldr	r3, [sp, #8]
 801ffe6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801ffea:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ffee:	6803      	ldr	r3, [r0, #0]
 801fff0:	f8cd b000 	str.w	fp, [sp]
 801fff4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801fff6:	4623      	mov	r3, r4
 801fff8:	e899 0006 	ldmia.w	r9, {r1, r2}
 801fffc:	47a8      	blx	r5
 801fffe:	4607      	mov	r7, r0
 8020000:	4638      	mov	r0, r7
 8020002:	b00f      	add	sp, #60	; 0x3c
 8020004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020008:	bf1f      	itttt	ne
 802000a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 802000e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8020012:	189b      	addne	r3, r3, r2
 8020014:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020018:	e7ad      	b.n	801ff76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 802001a:	6828      	ldr	r0, [r5, #0]
 802001c:	4642      	mov	r2, r8
 802001e:	4621      	mov	r1, r4
 8020020:	6803      	ldr	r3, [r0, #0]
 8020022:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8020024:	9b02      	ldr	r3, [sp, #8]
 8020026:	fb03 f30a 	mul.w	r3, r3, sl
 802002a:	47a8      	blx	r5
 802002c:	e7e8      	b.n	8020000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802002e:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 8020032:	f04f 0900 	mov.w	r9, #0
 8020036:	9b02      	ldr	r3, [sp, #8]
 8020038:	454b      	cmp	r3, r9
 802003a:	dde1      	ble.n	8020000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802003c:	6828      	ldr	r0, [r5, #0]
 802003e:	4642      	mov	r2, r8
 8020040:	4621      	mov	r1, r4
 8020042:	44d0      	add	r8, sl
 8020044:	6803      	ldr	r3, [r0, #0]
 8020046:	f109 0901 	add.w	r9, r9, #1
 802004a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802004c:	461e      	mov	r6, r3
 802004e:	465b      	mov	r3, fp
 8020050:	47b0      	blx	r6
 8020052:	9b03      	ldr	r3, [sp, #12]
 8020054:	441c      	add	r4, r3
 8020056:	e7ee      	b.n	8020036 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8020058:	200060f8 	.word	0x200060f8
 802005c:	0802c9cd 	.word	0x0802c9cd
 8020060:	0802d1b1 	.word	0x0802d1b1
 8020064:	0802c99b 	.word	0x0802c99b
 8020068:	0802ca7f 	.word	0x0802ca7f
 802006c:	0802cad4 	.word	0x0802cad4
 8020070:	200060f0 	.word	0x200060f0
 8020074:	200060f2 	.word	0x200060f2
 8020078:	0802cb12 	.word	0x0802cb12

0802007c <_ZN8touchgfx8LCD24bppC1Ev>:
 802007c:	4a0b      	ldr	r2, [pc, #44]	; (80200ac <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 802007e:	6002      	str	r2, [r0, #0]
 8020080:	2200      	movs	r2, #0
 8020082:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020086:	e9c0 2204 	strd	r2, r2, [r0, #16]
 802008a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 802008e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020092:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020096:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 802009a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 802009e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80200a2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80200a6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80200aa:	4770      	bx	lr
 80200ac:	0802cdf8 	.word	0x0802cdf8

080200b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80200b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200b4:	b093      	sub	sp, #76	; 0x4c
 80200b6:	880c      	ldrh	r4, [r1, #0]
 80200b8:	4605      	mov	r5, r0
 80200ba:	460f      	mov	r7, r1
 80200bc:	4691      	mov	r9, r2
 80200be:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 80200c2:	b12c      	cbz	r4, 80200d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80200c4:	4b71      	ldr	r3, [pc, #452]	; (802028c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80200c6:	2167      	movs	r1, #103	; 0x67
 80200c8:	4a71      	ldr	r2, [pc, #452]	; (8020290 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80200ca:	4872      	ldr	r0, [pc, #456]	; (8020294 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80200cc:	f007 ff38 	bl	8027f40 <__assert_func>
 80200d0:	6810      	ldr	r0, [r2, #0]
 80200d2:	ae0e      	add	r6, sp, #56	; 0x38
 80200d4:	6851      	ldr	r1, [r2, #4]
 80200d6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 802029c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 80200da:	c603      	stmia	r6!, {r0, r1}
 80200dc:	6818      	ldr	r0, [r3, #0]
 80200de:	ae10      	add	r6, sp, #64	; 0x40
 80200e0:	6859      	ldr	r1, [r3, #4]
 80200e2:	c603      	stmia	r6!, {r0, r1}
 80200e4:	a80e      	add	r0, sp, #56	; 0x38
 80200e6:	f7fa f97d 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80200ea:	4649      	mov	r1, r9
 80200ec:	a810      	add	r0, sp, #64	; 0x40
 80200ee:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8020298 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80200f2:	f7fa f95f 	bl	801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80200f6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80200fa:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80200fe:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020102:	f8d9 0000 	ldr.w	r0, [r9]
 8020106:	fb11 2103 	smlabb	r1, r1, r3, r2
 802010a:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 802010e:	440d      	add	r5, r1
 8020110:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020114:	440a      	add	r2, r1
 8020116:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802011a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802011e:	4413      	add	r3, r2
 8020120:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020124:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8020128:	930b      	str	r3, [sp, #44]	; 0x2c
 802012a:	6803      	ldr	r3, [r0, #0]
 802012c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020130:	4798      	blx	r3
 8020132:	2801      	cmp	r0, #1
 8020134:	d11e      	bne.n	8020174 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8020136:	220b      	movs	r2, #11
 8020138:	9008      	str	r0, [sp, #32]
 802013a:	b2b6      	uxth	r6, r6
 802013c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020140:	9207      	str	r2, [sp, #28]
 8020142:	4629      	mov	r1, r5
 8020144:	f8ba 2000 	ldrh.w	r2, [sl]
 8020148:	f8cd 8010 	str.w	r8, [sp, #16]
 802014c:	9601      	str	r6, [sp, #4]
 802014e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020152:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020156:	9203      	str	r2, [sp, #12]
 8020158:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802015c:	9202      	str	r2, [sp, #8]
 802015e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8020162:	9200      	str	r2, [sp, #0]
 8020164:	463a      	mov	r2, r7
 8020166:	f8d9 0000 	ldr.w	r0, [r9]
 802016a:	f7f6 fa1f 	bl	80165ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802016e:	b013      	add	sp, #76	; 0x4c
 8020170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020174:	f8d9 0000 	ldr.w	r0, [r9]
 8020178:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 802017c:	6803      	ldr	r3, [r0, #0]
 802017e:	6a1b      	ldr	r3, [r3, #32]
 8020180:	4798      	blx	r3
 8020182:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8020186:	f8ba 3000 	ldrh.w	r3, [sl]
 802018a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802018e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8020192:	fb01 2303 	mla	r3, r1, r3, r2
 8020196:	4621      	mov	r1, r4
 8020198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802019c:	4418      	add	r0, r3
 802019e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80201a2:	930c      	str	r3, [sp, #48]	; 0x30
 80201a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201a6:	4299      	cmp	r1, r3
 80201a8:	da6a      	bge.n	8020280 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80201aa:	1cc2      	adds	r2, r0, #3
 80201ac:	46aa      	mov	sl, r5
 80201ae:	ebaa 0305 	sub.w	r3, sl, r5
 80201b2:	429e      	cmp	r6, r3
 80201b4:	dd55      	ble.n	8020262 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 80201b6:	2404      	movs	r4, #4
 80201b8:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80201bc:	fb14 4303 	smlabb	r3, r4, r3, r4
 80201c0:	eb07 0e03 	add.w	lr, r7, r3
 80201c4:	f89e 4003 	ldrb.w	r4, [lr, #3]
 80201c8:	b184      	cbz	r4, 80201ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80201ca:	2cff      	cmp	r4, #255	; 0xff
 80201cc:	f817 b003 	ldrb.w	fp, [r7, r3]
 80201d0:	d10e      	bne.n	80201f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80201d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80201d6:	d10b      	bne.n	80201f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80201d8:	f802 bc03 	strb.w	fp, [r2, #-3]
 80201dc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80201e0:	f802 3c02 	strb.w	r3, [r2, #-2]
 80201e4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80201e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80201ec:	3203      	adds	r2, #3
 80201ee:	e7de      	b.n	80201ae <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 80201f0:	fb08 f404 	mul.w	r4, r8, r4
 80201f4:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 80201f8:	1c63      	adds	r3, r4, #1
 80201fa:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80201fe:	121b      	asrs	r3, r3, #8
 8020200:	b29c      	uxth	r4, r3
 8020202:	43db      	mvns	r3, r3
 8020204:	fb1b fb04 	smulbb	fp, fp, r4
 8020208:	b2db      	uxtb	r3, r3
 802020a:	fb0c bc03 	mla	ip, ip, r3, fp
 802020e:	fa1f fc8c 	uxth.w	ip, ip
 8020212:	f10c 0b01 	add.w	fp, ip, #1
 8020216:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802021a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 802021e:	fb1b fb03 	smulbb	fp, fp, r3
 8020222:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020226:	f802 cc03 	strb.w	ip, [r2, #-3]
 802022a:	f89e c001 	ldrb.w	ip, [lr, #1]
 802022e:	fb0c bc04 	mla	ip, ip, r4, fp
 8020232:	fa1f fc8c 	uxth.w	ip, ip
 8020236:	f10c 0b01 	add.w	fp, ip, #1
 802023a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802023e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020242:	f802 cc02 	strb.w	ip, [r2, #-2]
 8020246:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 802024a:	f89e e002 	ldrb.w	lr, [lr, #2]
 802024e:	fb1c f303 	smulbb	r3, ip, r3
 8020252:	fb0e 3304 	mla	r3, lr, r4, r3
 8020256:	b29b      	uxth	r3, r3
 8020258:	1c5c      	adds	r4, r3, #1
 802025a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802025e:	121b      	asrs	r3, r3, #8
 8020260:	e7c2      	b.n	80201e8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020264:	3101      	adds	r1, #1
 8020266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020268:	881b      	ldrh	r3, [r3, #0]
 802026a:	1b9b      	subs	r3, r3, r6
 802026c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020270:	4413      	add	r3, r2
 8020272:	4418      	add	r0, r3
 8020274:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8020278:	1b9b      	subs	r3, r3, r6
 802027a:	444b      	add	r3, r9
 802027c:	441d      	add	r5, r3
 802027e:	e791      	b.n	80201a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8020280:	4b05      	ldr	r3, [pc, #20]	; (8020298 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8020282:	6818      	ldr	r0, [r3, #0]
 8020284:	6803      	ldr	r3, [r0, #0]
 8020286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020288:	4798      	blx	r3
 802028a:	e770      	b.n	802016e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 802028c:	0802c8ff 	.word	0x0802c8ff
 8020290:	0802cfd3 	.word	0x0802cfd3
 8020294:	0802c99b 	.word	0x0802c99b
 8020298:	200060f8 	.word	0x200060f8
 802029c:	200060f0 	.word	0x200060f0

080202a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80202a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202a4:	4614      	mov	r4, r2
 80202a6:	880a      	ldrh	r2, [r1, #0]
 80202a8:	b091      	sub	sp, #68	; 0x44
 80202aa:	4680      	mov	r8, r0
 80202ac:	2a01      	cmp	r2, #1
 80202ae:	460e      	mov	r6, r1
 80202b0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80202b4:	d005      	beq.n	80202c2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 80202b6:	4b6d      	ldr	r3, [pc, #436]	; (802046c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 80202b8:	21b1      	movs	r1, #177	; 0xb1
 80202ba:	4a6d      	ldr	r2, [pc, #436]	; (8020470 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 80202bc:	486d      	ldr	r0, [pc, #436]	; (8020474 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 80202be:	f007 fe3f 	bl	8027f40 <__assert_func>
 80202c2:	6820      	ldr	r0, [r4, #0]
 80202c4:	ad0c      	add	r5, sp, #48	; 0x30
 80202c6:	6861      	ldr	r1, [r4, #4]
 80202c8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8020478 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 80202cc:	c503      	stmia	r5!, {r0, r1}
 80202ce:	6818      	ldr	r0, [r3, #0]
 80202d0:	ad0e      	add	r5, sp, #56	; 0x38
 80202d2:	6859      	ldr	r1, [r3, #4]
 80202d4:	c503      	stmia	r5!, {r0, r1}
 80202d6:	a80c      	add	r0, sp, #48	; 0x30
 80202d8:	f7fa f884 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202dc:	4621      	mov	r1, r4
 80202de:	a80e      	add	r0, sp, #56	; 0x38
 80202e0:	f7fa f868 	bl	801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80202e4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80202e8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80202ec:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80202f0:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80202f4:	fb11 2103 	smlabb	r1, r1, r3, r2
 80202f8:	eb08 0401 	add.w	r4, r8, r1
 80202fc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020300:	f8df 8178 	ldr.w	r8, [pc, #376]	; 802047c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 8020304:	440a      	add	r2, r1
 8020306:	f8d8 0000 	ldr.w	r0, [r8]
 802030a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 802030e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020312:	4413      	add	r3, r2
 8020314:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020318:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 802031c:	930a      	str	r3, [sp, #40]	; 0x28
 802031e:	6803      	ldr	r3, [r0, #0]
 8020320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020324:	4798      	blx	r3
 8020326:	2801      	cmp	r0, #1
 8020328:	d11e      	bne.n	8020368 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 802032a:	220b      	movs	r2, #11
 802032c:	9008      	str	r0, [sp, #32]
 802032e:	b2ad      	uxth	r5, r5
 8020330:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020334:	9207      	str	r2, [sp, #28]
 8020336:	4621      	mov	r1, r4
 8020338:	f8b9 2000 	ldrh.w	r2, [r9]
 802033c:	9501      	str	r5, [sp, #4]
 802033e:	9206      	str	r2, [sp, #24]
 8020340:	2200      	movs	r2, #0
 8020342:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8020346:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802034a:	9203      	str	r2, [sp, #12]
 802034c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020350:	9202      	str	r2, [sp, #8]
 8020352:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020356:	9200      	str	r2, [sp, #0]
 8020358:	4632      	mov	r2, r6
 802035a:	f8d8 0000 	ldr.w	r0, [r8]
 802035e:	f7f6 f925 	bl	80165ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020362:	b011      	add	sp, #68	; 0x44
 8020364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020368:	f8d8 0000 	ldr.w	r0, [r8]
 802036c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8020370:	6803      	ldr	r3, [r0, #0]
 8020372:	6a1b      	ldr	r3, [r3, #32]
 8020374:	4798      	blx	r3
 8020376:	f8b9 3000 	ldrh.w	r3, [r9]
 802037a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 802037e:	f04f 0e00 	mov.w	lr, #0
 8020382:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020386:	fa1f f987 	uxth.w	r9, r7
 802038a:	fb01 2303 	mla	r3, r1, r3, r2
 802038e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8020392:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020396:	b289      	uxth	r1, r1
 8020398:	4418      	add	r0, r3
 802039a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 802039e:	930b      	str	r3, [sp, #44]	; 0x2c
 80203a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203a2:	459e      	cmp	lr, r3
 80203a4:	da5c      	bge.n	8020460 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 80203a6:	1cc3      	adds	r3, r0, #3
 80203a8:	46a2      	mov	sl, r4
 80203aa:	ebaa 0204 	sub.w	r2, sl, r4
 80203ae:	4295      	cmp	r5, r2
 80203b0:	dd46      	ble.n	8020440 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 80203b2:	f04f 0c03 	mov.w	ip, #3
 80203b6:	f04f 0b04 	mov.w	fp, #4
 80203ba:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80203be:	2fff      	cmp	r7, #255	; 0xff
 80203c0:	fb1c b202 	smlabb	r2, ip, r2, fp
 80203c4:	eb06 0c02 	add.w	ip, r6, r2
 80203c8:	f816 b002 	ldrb.w	fp, [r6, r2]
 80203cc:	d02f      	beq.n	802042e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 80203ce:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80203d2:	fb12 f201 	smulbb	r2, r2, r1
 80203d6:	fb0b 2209 	mla	r2, fp, r9, r2
 80203da:	b292      	uxth	r2, r2
 80203dc:	f102 0b01 	add.w	fp, r2, #1
 80203e0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80203e4:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 80203e8:	fb1b fb01 	smulbb	fp, fp, r1
 80203ec:	1212      	asrs	r2, r2, #8
 80203ee:	f803 2c03 	strb.w	r2, [r3, #-3]
 80203f2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80203f6:	fb02 b209 	mla	r2, r2, r9, fp
 80203fa:	b292      	uxth	r2, r2
 80203fc:	f102 0b01 	add.w	fp, r2, #1
 8020400:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020404:	1212      	asrs	r2, r2, #8
 8020406:	f803 2c02 	strb.w	r2, [r3, #-2]
 802040a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 802040e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 8020412:	fb1c fc01 	smulbb	ip, ip, r1
 8020416:	fb02 c209 	mla	r2, r2, r9, ip
 802041a:	b292      	uxth	r2, r2
 802041c:	f102 0c01 	add.w	ip, r2, #1
 8020420:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020424:	1212      	asrs	r2, r2, #8
 8020426:	f803 2c01 	strb.w	r2, [r3, #-1]
 802042a:	3303      	adds	r3, #3
 802042c:	e7bd      	b.n	80203aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 802042e:	f803 bc03 	strb.w	fp, [r3, #-3]
 8020432:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020436:	f803 2c02 	strb.w	r2, [r3, #-2]
 802043a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 802043e:	e7f2      	b.n	8020426 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 8020440:	4b0d      	ldr	r3, [pc, #52]	; (8020478 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8020442:	f10e 0e01 	add.w	lr, lr, #1
 8020446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020448:	881b      	ldrh	r3, [r3, #0]
 802044a:	1b5b      	subs	r3, r3, r5
 802044c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020450:	4413      	add	r3, r2
 8020452:	4418      	add	r0, r3
 8020454:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020458:	1b5b      	subs	r3, r3, r5
 802045a:	4443      	add	r3, r8
 802045c:	441c      	add	r4, r3
 802045e:	e79f      	b.n	80203a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8020460:	4b06      	ldr	r3, [pc, #24]	; (802047c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020462:	6818      	ldr	r0, [r3, #0]
 8020464:	6803      	ldr	r3, [r0, #0]
 8020466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020468:	4798      	blx	r3
 802046a:	e77a      	b.n	8020362 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 802046c:	0802c7e3 	.word	0x0802c7e3
 8020470:	0802cec6 	.word	0x0802cec6
 8020474:	0802c99b 	.word	0x0802c99b
 8020478:	200060f0 	.word	0x200060f0
 802047c:	200060f8 	.word	0x200060f8

08020480 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020480:	b570      	push	{r4, r5, r6, lr}
 8020482:	780d      	ldrb	r5, [r1, #0]
 8020484:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8020488:	2d01      	cmp	r5, #1
 802048a:	d00d      	beq.n	80204a8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 802048c:	d307      	bcc.n	802049e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 802048e:	2d02      	cmp	r5, #2
 8020490:	d10f      	bne.n	80204b2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8020492:	4b08      	ldr	r3, [pc, #32]	; (80204b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8020494:	215a      	movs	r1, #90	; 0x5a
 8020496:	4a08      	ldr	r2, [pc, #32]	; (80204b8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8020498:	4808      	ldr	r0, [pc, #32]	; (80204bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 802049a:	f007 fd51 	bl	8027f40 <__assert_func>
 802049e:	9404      	str	r4, [sp, #16]
 80204a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80204a4:	f7ff be04 	b.w	80200b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80204a8:	9404      	str	r4, [sp, #16]
 80204aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80204ae:	f7ff bef7 	b.w	80202a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80204b2:	bd70      	pop	{r4, r5, r6, pc}
 80204b4:	0802c798 	.word	0x0802c798
 80204b8:	0802ce44 	.word	0x0802ce44
 80204bc:	0802c99b 	.word	0x0802c99b

080204c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80204c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204c4:	4605      	mov	r5, r0
 80204c6:	b08f      	sub	sp, #60	; 0x3c
 80204c8:	460c      	mov	r4, r1
 80204ca:	461f      	mov	r7, r3
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	d04e      	beq.n	802056e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 80204d0:	6808      	ldr	r0, [r1, #0]
 80204d2:	ab0a      	add	r3, sp, #40	; 0x28
 80204d4:	6849      	ldr	r1, [r1, #4]
 80204d6:	4e81      	ldr	r6, [pc, #516]	; (80206dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 80204d8:	c303      	stmia	r3!, {r0, r1}
 80204da:	6810      	ldr	r0, [r2, #0]
 80204dc:	ab0c      	add	r3, sp, #48	; 0x30
 80204de:	6851      	ldr	r1, [r2, #4]
 80204e0:	c303      	stmia	r3!, {r0, r1}
 80204e2:	a80a      	add	r0, sp, #40	; 0x28
 80204e4:	f7f9 ff7e 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204e8:	4621      	mov	r1, r4
 80204ea:	a80c      	add	r0, sp, #48	; 0x30
 80204ec:	f7f9 ff62 	bl	801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80204f0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80204f4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80204f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80204fc:	6830      	ldr	r0, [r6, #0]
 80204fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020502:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 8020506:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 802050a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 802050e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8020512:	440a      	add	r2, r1
 8020514:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8020518:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802051c:	4413      	add	r3, r2
 802051e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020522:	6803      	ldr	r3, [r0, #0]
 8020524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020526:	4798      	blx	r3
 8020528:	2fff      	cmp	r7, #255	; 0xff
 802052a:	4633      	mov	r3, r6
 802052c:	4e6c      	ldr	r6, [pc, #432]	; (80206e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 802052e:	d021      	beq.n	8020574 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8020530:	f010 0f04 	tst.w	r0, #4
 8020534:	6818      	ldr	r0, [r3, #0]
 8020536:	d020      	beq.n	802057a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 8020538:	2100      	movs	r1, #0
 802053a:	f04f 0e01 	mov.w	lr, #1
 802053e:	f8d0 c000 	ldr.w	ip, [r0]
 8020542:	b2a4      	uxth	r4, r4
 8020544:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8020548:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802054c:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 8020550:	8836      	ldrh	r6, [r6, #0]
 8020552:	9703      	str	r7, [sp, #12]
 8020554:	9400      	str	r4, [sp, #0]
 8020556:	e9cd 1604 	strd	r1, r6, [sp, #16]
 802055a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802055e:	9102      	str	r1, [sp, #8]
 8020560:	fa1f f188 	uxth.w	r1, r8
 8020564:	9101      	str	r1, [sp, #4]
 8020566:	4629      	mov	r1, r5
 8020568:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 802056c:	47a0      	blx	r4
 802056e:	b00f      	add	sp, #60	; 0x3c
 8020570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020574:	f010 0f01 	tst.w	r0, #1
 8020578:	e7dc      	b.n	8020534 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 802057a:	6803      	ldr	r3, [r0, #0]
 802057c:	6a1b      	ldr	r3, [r3, #32]
 802057e:	4798      	blx	r3
 8020580:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8020584:	8833      	ldrh	r3, [r6, #0]
 8020586:	2fff      	cmp	r7, #255	; 0xff
 8020588:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802058c:	fb01 2303 	mla	r3, r1, r3, r2
 8020590:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8020594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020598:	4418      	add	r0, r3
 802059a:	d128      	bne.n	80205ee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 802059c:	0051      	lsls	r1, r2, #1
 802059e:	2700      	movs	r7, #0
 80205a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80205a4:	4547      	cmp	r7, r8
 80205a6:	f280 8092 	bge.w	80206ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 80205aa:	4684      	mov	ip, r0
 80205ac:	f04f 0e00 	mov.w	lr, #0
 80205b0:	45a6      	cmp	lr, r4
 80205b2:	f10c 0c03 	add.w	ip, ip, #3
 80205b6:	da7c      	bge.n	80206b2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 80205b8:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 80205bc:	f10e 0e01 	add.w	lr, lr, #1
 80205c0:	ea4f 2a29 	mov.w	sl, r9, asr #8
 80205c4:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 80205c8:	ea4f 03e9 	mov.w	r3, r9, asr #3
 80205cc:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80205d0:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 80205d4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80205d8:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 80205dc:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80205e0:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80205e4:	f80c ac01 	strb.w	sl, [ip, #-1]
 80205e8:	f80c 3c02 	strb.w	r3, [ip, #-2]
 80205ec:	e7e0      	b.n	80205b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 80205ee:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80205f2:	ea6f 0c07 	mvn.w	ip, r7
 80205f6:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 80205fa:	f04f 0900 	mov.w	r9, #0
 80205fe:	9309      	str	r3, [sp, #36]	; 0x24
 8020600:	fa5f fc8c 	uxtb.w	ip, ip
 8020604:	b2bb      	uxth	r3, r7
 8020606:	45c1      	cmp	r9, r8
 8020608:	da61      	bge.n	80206ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 802060a:	4601      	mov	r1, r0
 802060c:	f04f 0e00 	mov.w	lr, #0
 8020610:	45a6      	cmp	lr, r4
 8020612:	f101 0103 	add.w	r1, r1, #3
 8020616:	da3b      	bge.n	8020690 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 8020618:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 802061c:	f10e 0e01 	add.w	lr, lr, #1
 8020620:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 8020624:	1216      	asrs	r6, r2, #8
 8020626:	10d7      	asrs	r7, r2, #3
 8020628:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 802062c:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 8020630:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020634:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020638:	fb1b fb0c 	smulbb	fp, fp, ip
 802063c:	b2d2      	uxtb	r2, r2
 802063e:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8020642:	fb02 b203 	mla	r2, r2, r3, fp
 8020646:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802064a:	fb17 f703 	smulbb	r7, r7, r3
 802064e:	fb16 f603 	smulbb	r6, r6, r3
 8020652:	b292      	uxth	r2, r2
 8020654:	f102 0b01 	add.w	fp, r2, #1
 8020658:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802065c:	1212      	asrs	r2, r2, #8
 802065e:	f801 2c03 	strb.w	r2, [r1, #-3]
 8020662:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 8020666:	fb02 770c 	mla	r7, r2, ip, r7
 802066a:	b2bf      	uxth	r7, r7
 802066c:	1c7a      	adds	r2, r7, #1
 802066e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020672:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8020676:	fb02 660c 	mla	r6, r2, ip, r6
 802067a:	123f      	asrs	r7, r7, #8
 802067c:	b2b6      	uxth	r6, r6
 802067e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8020682:	1c72      	adds	r2, r6, #1
 8020684:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020688:	1236      	asrs	r6, r6, #8
 802068a:	f801 6c01 	strb.w	r6, [r1, #-1]
 802068e:	e7bf      	b.n	8020610 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 8020690:	4a13      	ldr	r2, [pc, #76]	; (80206e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 8020692:	f109 0901 	add.w	r9, r9, #1
 8020696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020698:	8812      	ldrh	r2, [r2, #0]
 802069a:	1b12      	subs	r2, r2, r4
 802069c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206a0:	440a      	add	r2, r1
 80206a2:	4410      	add	r0, r2
 80206a4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80206a8:	1b12      	subs	r2, r2, r4
 80206aa:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 80206ae:	4415      	add	r5, r2
 80206b0:	e7a9      	b.n	8020606 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 80206b2:	8833      	ldrh	r3, [r6, #0]
 80206b4:	3701      	adds	r7, #1
 80206b6:	1b1b      	subs	r3, r3, r4
 80206b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206bc:	4413      	add	r3, r2
 80206be:	4418      	add	r0, r3
 80206c0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80206c4:	1b1b      	subs	r3, r3, r4
 80206c6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80206ca:	441d      	add	r5, r3
 80206cc:	e76a      	b.n	80205a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 80206ce:	4b03      	ldr	r3, [pc, #12]	; (80206dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 80206d0:	6818      	ldr	r0, [r3, #0]
 80206d2:	6803      	ldr	r3, [r0, #0]
 80206d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206d6:	4798      	blx	r3
 80206d8:	e749      	b.n	802056e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 80206da:	bf00      	nop
 80206dc:	200060f8 	.word	0x200060f8
 80206e0:	200060f0 	.word	0x200060f0

080206e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80206e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206e8:	b08b      	sub	sp, #44	; 0x2c
 80206ea:	460c      	mov	r4, r1
 80206ec:	4680      	mov	r8, r0
 80206ee:	469a      	mov	sl, r3
 80206f0:	6808      	ldr	r0, [r1, #0]
 80206f2:	ab06      	add	r3, sp, #24
 80206f4:	6849      	ldr	r1, [r1, #4]
 80206f6:	c303      	stmia	r3!, {r0, r1}
 80206f8:	6810      	ldr	r0, [r2, #0]
 80206fa:	ab08      	add	r3, sp, #32
 80206fc:	6851      	ldr	r1, [r2, #4]
 80206fe:	c303      	stmia	r3!, {r0, r1}
 8020700:	a806      	add	r0, sp, #24
 8020702:	f7f9 fe6f 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020706:	4621      	mov	r1, r4
 8020708:	a808      	add	r0, sp, #32
 802070a:	4c61      	ldr	r4, [pc, #388]	; (8020890 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 802070c:	f7f9 fe52 	bl	801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020710:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020714:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020718:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802071c:	6820      	ldr	r0, [r4, #0]
 802071e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020722:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 8020726:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 802072a:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 802072e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020732:	440a      	add	r2, r1
 8020734:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020738:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802073c:	4413      	add	r3, r2
 802073e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020742:	6803      	ldr	r3, [r0, #0]
 8020744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020746:	4798      	blx	r3
 8020748:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802074c:	d118      	bne.n	8020780 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 802074e:	f010 0f20 	tst.w	r0, #32
 8020752:	6820      	ldr	r0, [r4, #0]
 8020754:	d017      	beq.n	8020786 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8020756:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802075a:	b2bf      	uxth	r7, r7
 802075c:	6801      	ldr	r1, [r0, #0]
 802075e:	9402      	str	r4, [sp, #8]
 8020760:	fa1f f489 	uxth.w	r4, r9
 8020764:	f8cd a00c 	str.w	sl, [sp, #12]
 8020768:	9401      	str	r4, [sp, #4]
 802076a:	9700      	str	r7, [sp, #0]
 802076c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020770:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8020772:	4641      	mov	r1, r8
 8020774:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020778:	47a0      	blx	r4
 802077a:	b00b      	add	sp, #44	; 0x2c
 802077c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020780:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020784:	e7e5      	b.n	8020752 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020786:	6803      	ldr	r3, [r0, #0]
 8020788:	6a1b      	ldr	r3, [r3, #32]
 802078a:	4798      	blx	r3
 802078c:	4b41      	ldr	r3, [pc, #260]	; (8020894 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 802078e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020792:	f04f 0c00 	mov.w	ip, #0
 8020796:	881a      	ldrh	r2, [r3, #0]
 8020798:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802079c:	fb04 1202 	mla	r2, r4, r2, r1
 80207a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80207a4:	4410      	add	r0, r2
 80207a6:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 80207aa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80207ae:	0092      	lsls	r2, r2, #2
 80207b0:	9105      	str	r1, [sp, #20]
 80207b2:	9204      	str	r2, [sp, #16]
 80207b4:	45cc      	cmp	ip, r9
 80207b6:	da65      	bge.n	8020884 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 80207b8:	1cc4      	adds	r4, r0, #3
 80207ba:	f108 0504 	add.w	r5, r8, #4
 80207be:	f04f 0e00 	mov.w	lr, #0
 80207c2:	45be      	cmp	lr, r7
 80207c4:	da4d      	bge.n	8020862 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 80207c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80207ca:	b181      	cbz	r1, 80207ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80207cc:	29ff      	cmp	r1, #255	; 0xff
 80207ce:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 80207d2:	d111      	bne.n	80207f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 80207d4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80207d8:	d10e      	bne.n	80207f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 80207da:	f804 bc03 	strb.w	fp, [r4, #-3]
 80207de:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 80207e2:	f804 2c02 	strb.w	r2, [r4, #-2]
 80207e6:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80207ea:	f804 2c01 	strb.w	r2, [r4, #-1]
 80207ee:	f10e 0e01 	add.w	lr, lr, #1
 80207f2:	3403      	adds	r4, #3
 80207f4:	3504      	adds	r5, #4
 80207f6:	e7e4      	b.n	80207c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 80207f8:	fb0a f101 	mul.w	r1, sl, r1
 80207fc:	1c4a      	adds	r2, r1, #1
 80207fe:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020802:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8020806:	1212      	asrs	r2, r2, #8
 8020808:	b296      	uxth	r6, r2
 802080a:	43d2      	mvns	r2, r2
 802080c:	fb1b fb06 	smulbb	fp, fp, r6
 8020810:	b2d2      	uxtb	r2, r2
 8020812:	fb01 b102 	mla	r1, r1, r2, fp
 8020816:	b289      	uxth	r1, r1
 8020818:	f101 0b01 	add.w	fp, r1, #1
 802081c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8020820:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 8020824:	fb1b fb02 	smulbb	fp, fp, r2
 8020828:	1209      	asrs	r1, r1, #8
 802082a:	f804 1c03 	strb.w	r1, [r4, #-3]
 802082e:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 8020832:	fb01 b106 	mla	r1, r1, r6, fp
 8020836:	b289      	uxth	r1, r1
 8020838:	f101 0b01 	add.w	fp, r1, #1
 802083c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8020840:	1209      	asrs	r1, r1, #8
 8020842:	f804 1c02 	strb.w	r1, [r4, #-2]
 8020846:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802084a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 802084e:	fb11 f202 	smulbb	r2, r1, r2
 8020852:	fb0b 2206 	mla	r2, fp, r6, r2
 8020856:	b292      	uxth	r2, r2
 8020858:	1c56      	adds	r6, r2, #1
 802085a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802085e:	1212      	asrs	r2, r2, #8
 8020860:	e7c3      	b.n	80207ea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8020862:	881a      	ldrh	r2, [r3, #0]
 8020864:	f10c 0c01 	add.w	ip, ip, #1
 8020868:	9905      	ldr	r1, [sp, #20]
 802086a:	1bd2      	subs	r2, r2, r7
 802086c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020870:	440a      	add	r2, r1
 8020872:	9904      	ldr	r1, [sp, #16]
 8020874:	4410      	add	r0, r2
 8020876:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802087a:	1bd2      	subs	r2, r2, r7
 802087c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8020880:	4490      	add	r8, r2
 8020882:	e797      	b.n	80207b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8020884:	4b02      	ldr	r3, [pc, #8]	; (8020890 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8020886:	6818      	ldr	r0, [r3, #0]
 8020888:	6803      	ldr	r3, [r0, #0]
 802088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802088c:	4798      	blx	r3
 802088e:	e774      	b.n	802077a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8020890:	200060f8 	.word	0x200060f8
 8020894:	200060f0 	.word	0x200060f0

08020898 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802089c:	b085      	sub	sp, #20
 802089e:	4606      	mov	r6, r0
 80208a0:	460c      	mov	r4, r1
 80208a2:	4691      	mov	r9, r2
 80208a4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80208a8:	4698      	mov	r8, r3
 80208aa:	b3a5      	cbz	r5, 8020916 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 80208ac:	4608      	mov	r0, r1
 80208ae:	f7fd f9a5 	bl	801dbfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80208b2:	4607      	mov	r7, r0
 80208b4:	4620      	mov	r0, r4
 80208b6:	f7fd f9db 	bl	801dc70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80208ba:	f8ad 000e 	strh.w	r0, [sp, #14]
 80208be:	4620      	mov	r0, r4
 80208c0:	f8ad 9008 	strh.w	r9, [sp, #8]
 80208c4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80208c8:	f8ad 700c 	strh.w	r7, [sp, #12]
 80208cc:	f7fd fb28 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80208d0:	b1a0      	cbz	r0, 80208fc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80208d2:	4620      	mov	r0, r4
 80208d4:	f7fd fb24 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80208d8:	2801      	cmp	r0, #1
 80208da:	d00f      	beq.n	80208fc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80208dc:	4620      	mov	r0, r4
 80208de:	f7fd fb1f 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80208e2:	2802      	cmp	r0, #2
 80208e4:	d00a      	beq.n	80208fc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80208e6:	4620      	mov	r0, r4
 80208e8:	f7fd fb1a 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80208ec:	280b      	cmp	r0, #11
 80208ee:	d005      	beq.n	80208fc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80208f0:	4b21      	ldr	r3, [pc, #132]	; (8020978 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 80208f2:	213e      	movs	r1, #62	; 0x3e
 80208f4:	4a21      	ldr	r2, [pc, #132]	; (802097c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 80208f6:	4822      	ldr	r0, [pc, #136]	; (8020980 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 80208f8:	f007 fb22 	bl	8027f40 <__assert_func>
 80208fc:	4620      	mov	r0, r4
 80208fe:	f7fd fb0f 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020902:	2802      	cmp	r0, #2
 8020904:	4620      	mov	r0, r4
 8020906:	d109      	bne.n	802091c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 8020908:	f7fd fa80 	bl	801de0c <_ZNK8touchgfx6Bitmap7getDataEv>
 802090c:	462b      	mov	r3, r5
 802090e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020910:	a902      	add	r1, sp, #8
 8020912:	f7ff fee7 	bl	80206e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020916:	b005      	add	sp, #20
 8020918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802091c:	f7fd fb00 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020920:	280b      	cmp	r0, #11
 8020922:	4620      	mov	r0, r4
 8020924:	d10d      	bne.n	8020942 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020926:	f7fd fa71 	bl	801de0c <_ZNK8touchgfx6Bitmap7getDataEv>
 802092a:	4606      	mov	r6, r0
 802092c:	4620      	mov	r0, r4
 802092e:	f7fd fa9f 	bl	801de70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020932:	9500      	str	r5, [sp, #0]
 8020934:	4601      	mov	r1, r0
 8020936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020938:	aa02      	add	r2, sp, #8
 802093a:	4630      	mov	r0, r6
 802093c:	f7ff fda0 	bl	8020480 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020940:	e7e9      	b.n	8020916 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8020942:	f7fd faed 	bl	801df20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020946:	b940      	cbnz	r0, 802095a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 8020948:	4620      	mov	r0, r4
 802094a:	f7fd fa5f 	bl	801de0c <_ZNK8touchgfx6Bitmap7getDataEv>
 802094e:	462b      	mov	r3, r5
 8020950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020952:	a902      	add	r1, sp, #8
 8020954:	f7ff fdb4 	bl	80204c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020958:	e7dd      	b.n	8020916 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 802095a:	6833      	ldr	r3, [r6, #0]
 802095c:	4620      	mov	r0, r4
 802095e:	68df      	ldr	r7, [r3, #12]
 8020960:	f7fd fa54 	bl	801de0c <_ZNK8touchgfx6Bitmap7getDataEv>
 8020964:	2300      	movs	r3, #0
 8020966:	4601      	mov	r1, r0
 8020968:	aa02      	add	r2, sp, #8
 802096a:	4630      	mov	r0, r6
 802096c:	e9cd 5300 	strd	r5, r3, [sp]
 8020970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020972:	47b8      	blx	r7
 8020974:	e7cf      	b.n	8020916 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8020976:	bf00      	nop
 8020978:	0802c831 	.word	0x0802c831
 802097c:	0802cf4f 	.word	0x0802cf4f
 8020980:	0802c99b 	.word	0x0802c99b

08020984 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020984:	b570      	push	{r4, r5, r6, lr}
 8020986:	9d04      	ldr	r5, [sp, #16]
 8020988:	460c      	mov	r4, r1
 802098a:	4619      	mov	r1, r3
 802098c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020990:	2a0d      	cmp	r2, #13
 8020992:	d826      	bhi.n	80209e2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8020994:	e8df f002 	tbb	[pc, r2]
 8020998:	200e1407 	.word	0x200e1407
 802099c:	20202020 	.word	0x20202020
 80209a0:	20202020 	.word	0x20202020
 80209a4:	2020      	.short	0x2020
 80209a6:	4b0f      	ldr	r3, [pc, #60]	; (80209e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80209a8:	f240 11cd 	movw	r1, #461	; 0x1cd
 80209ac:	4a0e      	ldr	r2, [pc, #56]	; (80209e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80209ae:	480f      	ldr	r0, [pc, #60]	; (80209ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80209b0:	f007 fac6 	bl	8027f40 <__assert_func>
 80209b4:	462a      	mov	r2, r5
 80209b6:	4620      	mov	r0, r4
 80209b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80209bc:	f7ff be92 	b.w	80206e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80209c0:	6802      	ldr	r2, [r0, #0]
 80209c2:	2600      	movs	r6, #0
 80209c4:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80209c8:	68d6      	ldr	r6, [r2, #12]
 80209ca:	462b      	mov	r3, r5
 80209cc:	460a      	mov	r2, r1
 80209ce:	4621      	mov	r1, r4
 80209d0:	46b4      	mov	ip, r6
 80209d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80209d6:	4760      	bx	ip
 80209d8:	4b05      	ldr	r3, [pc, #20]	; (80209f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80209da:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80209de:	4a02      	ldr	r2, [pc, #8]	; (80209e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80209e0:	e7e5      	b.n	80209ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 80209e2:	bd70      	pop	{r4, r5, r6, pc}
 80209e4:	0802cb72 	.word	0x0802cb72
 80209e8:	0802d237 	.word	0x0802d237
 80209ec:	0802c99b 	.word	0x0802c99b
 80209f0:	0802cbb3 	.word	0x0802cbb3

080209f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80209f4:	b158      	cbz	r0, 8020a0e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80209f6:	2902      	cmp	r1, #2
 80209f8:	d00f      	beq.n	8020a1a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80209fa:	2903      	cmp	r1, #3
 80209fc:	d010      	beq.n	8020a20 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80209fe:	2901      	cmp	r1, #1
 8020a00:	d101      	bne.n	8020a06 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020a02:	2001      	movs	r0, #1
 8020a04:	4770      	bx	lr
 8020a06:	4b08      	ldr	r3, [pc, #32]	; (8020a28 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8020a08:	8819      	ldrh	r1, [r3, #0]
 8020a0a:	4248      	negs	r0, r1
 8020a0c:	4770      	bx	lr
 8020a0e:	2902      	cmp	r1, #2
 8020a10:	d006      	beq.n	8020a20 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8020a12:	2903      	cmp	r1, #3
 8020a14:	d0f7      	beq.n	8020a06 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020a16:	2901      	cmp	r1, #1
 8020a18:	d1f3      	bne.n	8020a02 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8020a1a:	4b03      	ldr	r3, [pc, #12]	; (8020a28 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8020a1c:	8818      	ldrh	r0, [r3, #0]
 8020a1e:	4770      	bx	lr
 8020a20:	f04f 30ff 	mov.w	r0, #4294967295
 8020a24:	4770      	bx	lr
 8020a26:	bf00      	nop
 8020a28:	200060f0 	.word	0x200060f0

08020a2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8020a2c:	b170      	cbz	r0, 8020a4c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8020a2e:	2902      	cmp	r1, #2
 8020a30:	d012      	beq.n	8020a58 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8020a32:	2903      	cmp	r1, #3
 8020a34:	d006      	beq.n	8020a44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8020a36:	2901      	cmp	r1, #1
 8020a38:	d001      	beq.n	8020a3e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8020a3a:	2001      	movs	r0, #1
 8020a3c:	4770      	bx	lr
 8020a3e:	4b08      	ldr	r3, [pc, #32]	; (8020a60 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8020a40:	8818      	ldrh	r0, [r3, #0]
 8020a42:	4770      	bx	lr
 8020a44:	4b06      	ldr	r3, [pc, #24]	; (8020a60 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8020a46:	8818      	ldrh	r0, [r3, #0]
 8020a48:	4240      	negs	r0, r0
 8020a4a:	4770      	bx	lr
 8020a4c:	2902      	cmp	r1, #2
 8020a4e:	d0f9      	beq.n	8020a44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8020a50:	2903      	cmp	r1, #3
 8020a52:	d0f2      	beq.n	8020a3a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8020a54:	2901      	cmp	r1, #1
 8020a56:	d1f2      	bne.n	8020a3e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8020a58:	f04f 30ff 	mov.w	r0, #4294967295
 8020a5c:	4770      	bx	lr
 8020a5e:	bf00      	nop
 8020a60:	200060f0 	.word	0x200060f0

08020a64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a68:	b097      	sub	sp, #92	; 0x5c
 8020a6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8020a6c:	a912      	add	r1, sp, #72	; 0x48
 8020a6e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8020a72:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8020a76:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8020a7a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8020a7e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8020a82:	e881 000c 	stmia.w	r1, {r2, r3}
 8020a86:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8020a8a:	9308      	str	r3, [sp, #32]
 8020a8c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8020a90:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8020a94:	9310      	str	r3, [sp, #64]	; 0x40
 8020a96:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8020a9a:	798d      	ldrb	r5, [r1, #6]
 8020a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8020a9e:	7b4b      	ldrb	r3, [r1, #13]
 8020aa0:	0158      	lsls	r0, r3, #5
 8020aa2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8020aa6:	4328      	orrs	r0, r5
 8020aa8:	9007      	str	r0, [sp, #28]
 8020aaa:	f000 8183 	beq.w	8020db4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8020aae:	011b      	lsls	r3, r3, #4
 8020ab0:	79c8      	ldrb	r0, [r1, #7]
 8020ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020ab6:	4303      	orrs	r3, r0
 8020ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8020aba:	f000 817b 	beq.w	8020db4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8020abe:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020ac2:	b29b      	uxth	r3, r3
 8020ac4:	2f00      	cmp	r7, #0
 8020ac6:	f000 8121 	beq.w	8020d0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8020aca:	1aff      	subs	r7, r7, r3
 8020acc:	b2bf      	uxth	r7, r7
 8020ace:	043b      	lsls	r3, r7, #16
 8020ad0:	d502      	bpl.n	8020ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8020ad2:	1bf6      	subs	r6, r6, r7
 8020ad4:	2700      	movs	r7, #0
 8020ad6:	b236      	sxth	r6, r6
 8020ad8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020adc:	a812      	add	r0, sp, #72	; 0x48
 8020ade:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8020ae2:	428e      	cmp	r6, r1
 8020ae4:	b28b      	uxth	r3, r1
 8020ae6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8020aea:	bfbf      	itttt	lt
 8020aec:	18ff      	addlt	r7, r7, r3
 8020aee:	1bbe      	sublt	r6, r7, r6
 8020af0:	b2b7      	uxthlt	r7, r6
 8020af2:	460e      	movlt	r6, r1
 8020af4:	8891      	ldrh	r1, [r2, #4]
 8020af6:	440b      	add	r3, r1
 8020af8:	4631      	mov	r1, r6
 8020afa:	b21b      	sxth	r3, r3
 8020afc:	930f      	str	r3, [sp, #60]	; 0x3c
 8020afe:	88d3      	ldrh	r3, [r2, #6]
 8020b00:	9a08      	ldr	r2, [sp, #32]
 8020b02:	449a      	add	sl, r3
 8020b04:	fa0f f38a 	sxth.w	r3, sl
 8020b08:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 8020b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8020b0e:	4bb2      	ldr	r3, [pc, #712]	; (8020dd8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8020b10:	f893 b000 	ldrb.w	fp, [r3]
 8020b14:	f10b 3cff 	add.w	ip, fp, #4294967295
 8020b18:	f1dc 0300 	rsbs	r3, ip, #0
 8020b1c:	eb43 030c 	adc.w	r3, r3, ip
 8020b20:	930d      	str	r3, [sp, #52]	; 0x34
 8020b22:	464b      	mov	r3, r9
 8020b24:	f7f9 fa9b 	bl	801a05e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020b28:	4631      	mov	r1, r6
 8020b2a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8020b2e:	464b      	mov	r3, r9
 8020b30:	9a08      	ldr	r2, [sp, #32]
 8020b32:	a812      	add	r0, sp, #72	; 0x48
 8020b34:	f7f9 faab 	bl	801a08e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020b38:	a916      	add	r1, sp, #88	; 0x58
 8020b3a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020b3e:	a815      	add	r0, sp, #84	; 0x54
 8020b40:	f7f9 fc06 	bl	801a350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020b44:	f1b9 0f00 	cmp.w	r9, #0
 8020b48:	f040 80e3 	bne.w	8020d12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ae>
 8020b4c:	f1bb 0f01 	cmp.w	fp, #1
 8020b50:	f040 80e7 	bne.w	8020d22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8020b54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	f040 8131 	bne.w	8020dbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 8020b5c:	4b9f      	ldr	r3, [pc, #636]	; (8020ddc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8020b5e:	6818      	ldr	r0, [r3, #0]
 8020b60:	6803      	ldr	r3, [r0, #0]
 8020b62:	6a1b      	ldr	r3, [r3, #32]
 8020b64:	4798      	blx	r3
 8020b66:	4a9e      	ldr	r2, [pc, #632]	; (8020de0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8020b68:	f1b8 0f01 	cmp.w	r8, #1
 8020b6c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8020b70:	8811      	ldrh	r1, [r2, #0]
 8020b72:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8020b76:	fb01 2303 	mla	r3, r1, r3, r2
 8020b7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b7e:	4403      	add	r3, r0
 8020b80:	9309      	str	r3, [sp, #36]	; 0x24
 8020b82:	f04f 0301 	mov.w	r3, #1
 8020b86:	fa03 f308 	lsl.w	r3, r3, r8
 8020b8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8020b8e:	b2db      	uxtb	r3, r3
 8020b90:	9311      	str	r3, [sp, #68]	; 0x44
 8020b92:	f000 8116 	beq.w	8020dc2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8020b96:	f1b8 0f02 	cmp.w	r8, #2
 8020b9a:	f000 8114 	beq.w	8020dc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x362>
 8020b9e:	f1b8 0f04 	cmp.w	r8, #4
 8020ba2:	bf14      	ite	ne
 8020ba4:	2301      	movne	r3, #1
 8020ba6:	2311      	moveq	r3, #17
 8020ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8020baa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020bac:	b153      	cbz	r3, 8020bc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 8020bae:	2508      	movs	r5, #8
 8020bb0:	9a07      	ldr	r2, [sp, #28]
 8020bb2:	fb95 f3f8 	sdiv	r3, r5, r8
 8020bb6:	1e5d      	subs	r5, r3, #1
 8020bb8:	4415      	add	r5, r2
 8020bba:	fb95 f5f3 	sdiv	r5, r5, r3
 8020bbe:	fb15 f503 	smulbb	r5, r5, r3
 8020bc2:	b2ad      	uxth	r5, r5
 8020bc4:	b907      	cbnz	r7, 8020bc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 8020bc6:	b16c      	cbz	r4, 8020be4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x180>
 8020bc8:	fb04 7305 	mla	r3, r4, r5, r7
 8020bcc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020bce:	ebaa 0a04 	sub.w	sl, sl, r4
 8020bd2:	fb08 f303 	mul.w	r3, r8, r3
 8020bd6:	fa1f fa8a 	uxth.w	sl, sl
 8020bda:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8020bde:	f003 0407 	and.w	r4, r3, #7
 8020be2:	9226      	str	r2, [sp, #152]	; 0x98
 8020be4:	4649      	mov	r1, r9
 8020be6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020be8:	f7ff ff04 	bl	80209f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8020bec:	4649      	mov	r1, r9
 8020bee:	4683      	mov	fp, r0
 8020bf0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020bf2:	f7ff ff1b 	bl	8020a2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8020bf6:	9a08      	ldr	r2, [sp, #32]
 8020bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020bfa:	1bf6      	subs	r6, r6, r7
 8020bfc:	1a9b      	subs	r3, r3, r2
 8020bfe:	459a      	cmp	sl, r3
 8020c00:	bfa8      	it	ge
 8020c02:	469a      	movge	sl, r3
 8020c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c06:	1b9e      	subs	r6, r3, r6
 8020c08:	9b07      	ldr	r3, [sp, #28]
 8020c0a:	429e      	cmp	r6, r3
 8020c0c:	bfd4      	ite	le
 8020c0e:	ebc7 0706 	rsble	r7, r7, r6
 8020c12:	ebc7 0703 	rsbgt	r7, r7, r3
 8020c16:	1bed      	subs	r5, r5, r7
 8020c18:	fb0b 0017 	mls	r0, fp, r7, r0
 8020c1c:	fb08 f305 	mul.w	r3, r8, r5
 8020c20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020c24:	9308      	str	r3, [sp, #32]
 8020c26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020c2c:	930d      	str	r3, [sp, #52]	; 0x34
 8020c2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020c34:	930e      	str	r3, [sp, #56]	; 0x38
 8020c36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c38:	b2de      	uxtb	r6, r3
 8020c3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020c3c:	781a      	ldrb	r2, [r3, #0]
 8020c3e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020c42:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 8020c46:	4122      	asrs	r2, r4
 8020c48:	9307      	str	r3, [sp, #28]
 8020c4a:	fb03 0b0b 	mla	fp, r3, fp, r0
 8020c4e:	b2d2      	uxtb	r2, r2
 8020c50:	f1ba 0f00 	cmp.w	sl, #0
 8020c54:	f340 80d9 	ble.w	8020e0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 8020c58:	46be      	mov	lr, r7
 8020c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020c5c:	f1be 0f00 	cmp.w	lr, #0
 8020c60:	f340 80c0 	ble.w	8020de4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8020c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020c66:	4013      	ands	r3, r2
 8020c68:	d03e      	beq.n	8020ce8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 8020c6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020c6c:	fb13 f300 	smulbb	r3, r3, r0
 8020c70:	2bfe      	cmp	r3, #254	; 0xfe
 8020c72:	dd03      	ble.n	8020c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x218>
 8020c74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020c76:	28ff      	cmp	r0, #255	; 0xff
 8020c78:	f000 80a7 	beq.w	8020dca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 8020c7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020c7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020c80:	fb10 f303 	smulbb	r3, r0, r3
 8020c84:	b29b      	uxth	r3, r3
 8020c86:	1c58      	adds	r0, r3, #1
 8020c88:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020c8c:	7808      	ldrb	r0, [r1, #0]
 8020c8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020c92:	fa1f fc83 	uxth.w	ip, r3
 8020c96:	43db      	mvns	r3, r3
 8020c98:	fb16 f90c 	smulbb	r9, r6, ip
 8020c9c:	b2db      	uxtb	r3, r3
 8020c9e:	fb00 9003 	mla	r0, r0, r3, r9
 8020ca2:	b280      	uxth	r0, r0
 8020ca4:	f100 0901 	add.w	r9, r0, #1
 8020ca8:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020cac:	fb15 f90c 	smulbb	r9, r5, ip
 8020cb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020cb2:	1200      	asrs	r0, r0, #8
 8020cb4:	fb15 fc0c 	smulbb	ip, r5, ip
 8020cb8:	7008      	strb	r0, [r1, #0]
 8020cba:	7848      	ldrb	r0, [r1, #1]
 8020cbc:	fb00 9003 	mla	r0, r0, r3, r9
 8020cc0:	b280      	uxth	r0, r0
 8020cc2:	f100 0901 	add.w	r9, r0, #1
 8020cc6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020cca:	1200      	asrs	r0, r0, #8
 8020ccc:	7048      	strb	r0, [r1, #1]
 8020cce:	7888      	ldrb	r0, [r1, #2]
 8020cd0:	fb00 cc03 	mla	ip, r0, r3, ip
 8020cd4:	fa1f fc8c 	uxth.w	ip, ip
 8020cd8:	f10c 0301 	add.w	r3, ip, #1
 8020cdc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020ce0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020ce4:	f881 c002 	strb.w	ip, [r1, #2]
 8020ce8:	4444      	add	r4, r8
 8020cea:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020cee:	b2a4      	uxth	r4, r4
 8020cf0:	2c07      	cmp	r4, #7
 8020cf2:	bf89      	itett	hi
 8020cf4:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8020cf6:	fa42 f208 	asrls.w	r2, r2, r8
 8020cfa:	2400      	movhi	r4, #0
 8020cfc:	785a      	ldrbhi	r2, [r3, #1]
 8020cfe:	bf8a      	itet	hi
 8020d00:	3301      	addhi	r3, #1
 8020d02:	b2d2      	uxtbls	r2, r2
 8020d04:	9326      	strhi	r3, [sp, #152]	; 0x98
 8020d06:	9b07      	ldr	r3, [sp, #28]
 8020d08:	4419      	add	r1, r3
 8020d0a:	e7a7      	b.n	8020c5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8020d0c:	441e      	add	r6, r3
 8020d0e:	b236      	sxth	r6, r6
 8020d10:	e6e2      	b.n	8020ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8020d12:	f1b9 0f01 	cmp.w	r9, #1
 8020d16:	f47f af1d 	bne.w	8020b54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020d1a:	f1bb 0f01 	cmp.w	fp, #1
 8020d1e:	f47f af19 	bne.w	8020b54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020d22:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8020ddc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8020d26:	f8db 0000 	ldr.w	r0, [fp]
 8020d2a:	6803      	ldr	r3, [r0, #0]
 8020d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d2e:	4798      	blx	r3
 8020d30:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8020d34:	465a      	mov	r2, fp
 8020d36:	d006      	beq.n	8020d46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8020d38:	f1b8 0f04 	cmp.w	r8, #4
 8020d3c:	d13d      	bne.n	8020dba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x356>
 8020d3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d40:	3300      	adds	r3, #0
 8020d42:	bf18      	it	ne
 8020d44:	2301      	movne	r3, #1
 8020d46:	05c0      	lsls	r0, r0, #23
 8020d48:	d568      	bpl.n	8020e1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 8020d4a:	f1b8 0f08 	cmp.w	r8, #8
 8020d4e:	d165      	bne.n	8020e1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	bf0c      	ite	eq
 8020d54:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8020d58:	2180      	movne	r1, #128	; 0x80
 8020d5a:	2f00      	cmp	r7, #0
 8020d5c:	f47f aefa 	bne.w	8020b54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020d60:	2c00      	cmp	r4, #0
 8020d62:	f47f aef7 	bne.w	8020b54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020d66:	9b07      	ldr	r3, [sp, #28]
 8020d68:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020d6a:	18f3      	adds	r3, r6, r3
 8020d6c:	4283      	cmp	r3, r0
 8020d6e:	f73f aef1 	bgt.w	8020b54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020d72:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 8020d76:	4403      	add	r3, r0
 8020d78:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020d7a:	4283      	cmp	r3, r0
 8020d7c:	f73f aeea 	bgt.w	8020b54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020d80:	f1b8 0f08 	cmp.w	r8, #8
 8020d84:	6810      	ldr	r0, [r2, #0]
 8020d86:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8020d8a:	bf18      	it	ne
 8020d8c:	3501      	addne	r5, #1
 8020d8e:	6804      	ldr	r4, [r0, #0]
 8020d90:	9105      	str	r1, [sp, #20]
 8020d92:	bf18      	it	ne
 8020d94:	f025 0501 	bicne.w	r5, r5, #1
 8020d98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020d9a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8020d9e:	bf18      	it	ne
 8020da0:	b2ad      	uxthne	r5, r5
 8020da2:	9104      	str	r1, [sp, #16]
 8020da4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020da6:	e9cd 5a00 	strd	r5, sl, [sp]
 8020daa:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8020dae:	9926      	ldr	r1, [sp, #152]	; 0x98
 8020db0:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8020db2:	47a0      	blx	r4
 8020db4:	b017      	add	sp, #92	; 0x5c
 8020db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dba:	2300      	movs	r3, #0
 8020dbc:	e7c3      	b.n	8020d46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8020dbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020dc0:	e6d1      	b.n	8020b66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8020dc2:	23ff      	movs	r3, #255	; 0xff
 8020dc4:	e6f0      	b.n	8020ba8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 8020dc6:	2355      	movs	r3, #85	; 0x55
 8020dc8:	e6ee      	b.n	8020ba8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 8020dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020dcc:	700e      	strb	r6, [r1, #0]
 8020dce:	704b      	strb	r3, [r1, #1]
 8020dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020dd2:	708b      	strb	r3, [r1, #2]
 8020dd4:	e788      	b.n	8020ce8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 8020dd6:	bf00      	nop
 8020dd8:	200060ee 	.word	0x200060ee
 8020ddc:	200060f8 	.word	0x200060f8
 8020de0:	200060f0 	.word	0x200060f0
 8020de4:	9b08      	ldr	r3, [sp, #32]
 8020de6:	b153      	cbz	r3, 8020dfe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020de8:	441c      	add	r4, r3
 8020dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020dec:	b2a4      	uxth	r4, r4
 8020dee:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8020df2:	f004 0407 	and.w	r4, r4, #7
 8020df6:	781a      	ldrb	r2, [r3, #0]
 8020df8:	9326      	str	r3, [sp, #152]	; 0x98
 8020dfa:	4122      	asrs	r2, r4
 8020dfc:	b2d2      	uxtb	r2, r2
 8020dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020e04:	445b      	add	r3, fp
 8020e06:	9309      	str	r3, [sp, #36]	; 0x24
 8020e08:	e722      	b.n	8020c50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ec>
 8020e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d1d1      	bne.n	8020db4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8020e10:	4b05      	ldr	r3, [pc, #20]	; (8020e28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 8020e12:	6818      	ldr	r0, [r3, #0]
 8020e14:	6803      	ldr	r3, [r0, #0]
 8020e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e18:	4798      	blx	r3
 8020e1a:	e7cb      	b.n	8020db4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	f43f ae99 	beq.w	8020b54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020e22:	2180      	movs	r1, #128	; 0x80
 8020e24:	e799      	b.n	8020d5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 8020e26:	bf00      	nop
 8020e28:	200060f8 	.word	0x200060f8

08020e2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020e2c:	b538      	push	{r3, r4, r5, lr}
 8020e2e:	4c15      	ldr	r4, [pc, #84]	; (8020e84 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020e30:	4605      	mov	r5, r0
 8020e32:	7823      	ldrb	r3, [r4, #0]
 8020e34:	f3bf 8f5b 	dmb	ish
 8020e38:	07da      	lsls	r2, r3, #31
 8020e3a:	d40b      	bmi.n	8020e54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020e3c:	4620      	mov	r0, r4
 8020e3e:	f006 feae 	bl	8027b9e <__cxa_guard_acquire>
 8020e42:	b138      	cbz	r0, 8020e54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020e44:	4620      	mov	r0, r4
 8020e46:	f006 feb6 	bl	8027bb6 <__cxa_guard_release>
 8020e4a:	4a0f      	ldr	r2, [pc, #60]	; (8020e88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020e4c:	490f      	ldr	r1, [pc, #60]	; (8020e8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020e4e:	4810      	ldr	r0, [pc, #64]	; (8020e90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020e50:	f006 fe9e 	bl	8027b90 <__aeabi_atexit>
 8020e54:	4c0f      	ldr	r4, [pc, #60]	; (8020e94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8020e56:	7823      	ldrb	r3, [r4, #0]
 8020e58:	f3bf 8f5b 	dmb	ish
 8020e5c:	07db      	lsls	r3, r3, #31
 8020e5e:	d40b      	bmi.n	8020e78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020e60:	4620      	mov	r0, r4
 8020e62:	f006 fe9c 	bl	8027b9e <__cxa_guard_acquire>
 8020e66:	b138      	cbz	r0, 8020e78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020e68:	4620      	mov	r0, r4
 8020e6a:	f006 fea4 	bl	8027bb6 <__cxa_guard_release>
 8020e6e:	4a06      	ldr	r2, [pc, #24]	; (8020e88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020e70:	4909      	ldr	r1, [pc, #36]	; (8020e98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8020e72:	480a      	ldr	r0, [pc, #40]	; (8020e9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020e74:	f006 fe8c 	bl	8027b90 <__aeabi_atexit>
 8020e78:	4b05      	ldr	r3, [pc, #20]	; (8020e90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020e7a:	612b      	str	r3, [r5, #16]
 8020e7c:	4b07      	ldr	r3, [pc, #28]	; (8020e9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020e7e:	616b      	str	r3, [r5, #20]
 8020e80:	bd38      	pop	{r3, r4, r5, pc}
 8020e82:	bf00      	nop
 8020e84:	200061c4 	.word	0x200061c4
 8020e88:	20000000 	.word	0x20000000
 8020e8c:	0801f80b 	.word	0x0801f80b
 8020e90:	20000064 	.word	0x20000064
 8020e94:	200061c8 	.word	0x200061c8
 8020e98:	0801f809 	.word	0x0801f809
 8020e9c:	20000068 	.word	0x20000068

08020ea0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020ea0:	b538      	push	{r3, r4, r5, lr}
 8020ea2:	4c15      	ldr	r4, [pc, #84]	; (8020ef8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020ea4:	4605      	mov	r5, r0
 8020ea6:	7823      	ldrb	r3, [r4, #0]
 8020ea8:	f3bf 8f5b 	dmb	ish
 8020eac:	07da      	lsls	r2, r3, #31
 8020eae:	d40b      	bmi.n	8020ec8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020eb0:	4620      	mov	r0, r4
 8020eb2:	f006 fe74 	bl	8027b9e <__cxa_guard_acquire>
 8020eb6:	b138      	cbz	r0, 8020ec8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020eb8:	4620      	mov	r0, r4
 8020eba:	f006 fe7c 	bl	8027bb6 <__cxa_guard_release>
 8020ebe:	4a0f      	ldr	r2, [pc, #60]	; (8020efc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020ec0:	490f      	ldr	r1, [pc, #60]	; (8020f00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8020ec2:	4810      	ldr	r0, [pc, #64]	; (8020f04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020ec4:	f006 fe64 	bl	8027b90 <__aeabi_atexit>
 8020ec8:	4c0f      	ldr	r4, [pc, #60]	; (8020f08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020eca:	7823      	ldrb	r3, [r4, #0]
 8020ecc:	f3bf 8f5b 	dmb	ish
 8020ed0:	07db      	lsls	r3, r3, #31
 8020ed2:	d40b      	bmi.n	8020eec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020ed4:	4620      	mov	r0, r4
 8020ed6:	f006 fe62 	bl	8027b9e <__cxa_guard_acquire>
 8020eda:	b138      	cbz	r0, 8020eec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020edc:	4620      	mov	r0, r4
 8020ede:	f006 fe6a 	bl	8027bb6 <__cxa_guard_release>
 8020ee2:	4a06      	ldr	r2, [pc, #24]	; (8020efc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020ee4:	4909      	ldr	r1, [pc, #36]	; (8020f0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8020ee6:	480a      	ldr	r0, [pc, #40]	; (8020f10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020ee8:	f006 fe52 	bl	8027b90 <__aeabi_atexit>
 8020eec:	4b05      	ldr	r3, [pc, #20]	; (8020f04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020eee:	60ab      	str	r3, [r5, #8]
 8020ef0:	4b07      	ldr	r3, [pc, #28]	; (8020f10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020ef2:	60eb      	str	r3, [r5, #12]
 8020ef4:	bd38      	pop	{r3, r4, r5, pc}
 8020ef6:	bf00      	nop
 8020ef8:	200061a4 	.word	0x200061a4
 8020efc:	20000000 	.word	0x20000000
 8020f00:	0801f80f 	.word	0x0801f80f
 8020f04:	20000044 	.word	0x20000044
 8020f08:	200061a8 	.word	0x200061a8
 8020f0c:	0801f80d 	.word	0x0801f80d
 8020f10:	20000048 	.word	0x20000048

08020f14 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8020f14:	b510      	push	{r4, lr}
 8020f16:	4604      	mov	r4, r0
 8020f18:	f7ff ff88 	bl	8020e2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020f1c:	4620      	mov	r0, r4
 8020f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f22:	f7ff bfbd 	b.w	8020ea0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08020f28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8020f28:	b538      	push	{r3, r4, r5, lr}
 8020f2a:	4c15      	ldr	r4, [pc, #84]	; (8020f80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8020f2c:	4605      	mov	r5, r0
 8020f2e:	7823      	ldrb	r3, [r4, #0]
 8020f30:	f3bf 8f5b 	dmb	ish
 8020f34:	07da      	lsls	r2, r3, #31
 8020f36:	d40b      	bmi.n	8020f50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020f38:	4620      	mov	r0, r4
 8020f3a:	f006 fe30 	bl	8027b9e <__cxa_guard_acquire>
 8020f3e:	b138      	cbz	r0, 8020f50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020f40:	4620      	mov	r0, r4
 8020f42:	f006 fe38 	bl	8027bb6 <__cxa_guard_release>
 8020f46:	4a0f      	ldr	r2, [pc, #60]	; (8020f84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020f48:	490f      	ldr	r1, [pc, #60]	; (8020f88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8020f4a:	4810      	ldr	r0, [pc, #64]	; (8020f8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020f4c:	f006 fe20 	bl	8027b90 <__aeabi_atexit>
 8020f50:	4c0f      	ldr	r4, [pc, #60]	; (8020f90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8020f52:	7823      	ldrb	r3, [r4, #0]
 8020f54:	f3bf 8f5b 	dmb	ish
 8020f58:	07db      	lsls	r3, r3, #31
 8020f5a:	d40b      	bmi.n	8020f74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020f5c:	4620      	mov	r0, r4
 8020f5e:	f006 fe1e 	bl	8027b9e <__cxa_guard_acquire>
 8020f62:	b138      	cbz	r0, 8020f74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020f64:	4620      	mov	r0, r4
 8020f66:	f006 fe26 	bl	8027bb6 <__cxa_guard_release>
 8020f6a:	4a06      	ldr	r2, [pc, #24]	; (8020f84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020f6c:	4909      	ldr	r1, [pc, #36]	; (8020f94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8020f6e:	480a      	ldr	r0, [pc, #40]	; (8020f98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020f70:	f006 fe0e 	bl	8027b90 <__aeabi_atexit>
 8020f74:	4b05      	ldr	r3, [pc, #20]	; (8020f8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020f76:	622b      	str	r3, [r5, #32]
 8020f78:	4b07      	ldr	r3, [pc, #28]	; (8020f98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020f7a:	626b      	str	r3, [r5, #36]	; 0x24
 8020f7c:	bd38      	pop	{r3, r4, r5, pc}
 8020f7e:	bf00      	nop
 8020f80:	200061cc 	.word	0x200061cc
 8020f84:	20000000 	.word	0x20000000
 8020f88:	0801f803 	.word	0x0801f803
 8020f8c:	2000006c 	.word	0x2000006c
 8020f90:	200061d0 	.word	0x200061d0
 8020f94:	0801f801 	.word	0x0801f801
 8020f98:	20000070 	.word	0x20000070

08020f9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020f9c:	b538      	push	{r3, r4, r5, lr}
 8020f9e:	4c15      	ldr	r4, [pc, #84]	; (8020ff4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020fa0:	4605      	mov	r5, r0
 8020fa2:	7823      	ldrb	r3, [r4, #0]
 8020fa4:	f3bf 8f5b 	dmb	ish
 8020fa8:	07da      	lsls	r2, r3, #31
 8020faa:	d40b      	bmi.n	8020fc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020fac:	4620      	mov	r0, r4
 8020fae:	f006 fdf6 	bl	8027b9e <__cxa_guard_acquire>
 8020fb2:	b138      	cbz	r0, 8020fc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020fb4:	4620      	mov	r0, r4
 8020fb6:	f006 fdfe 	bl	8027bb6 <__cxa_guard_release>
 8020fba:	4a0f      	ldr	r2, [pc, #60]	; (8020ff8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020fbc:	490f      	ldr	r1, [pc, #60]	; (8020ffc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8020fbe:	4810      	ldr	r0, [pc, #64]	; (8021000 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020fc0:	f006 fde6 	bl	8027b90 <__aeabi_atexit>
 8020fc4:	4c0f      	ldr	r4, [pc, #60]	; (8021004 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8020fc6:	7823      	ldrb	r3, [r4, #0]
 8020fc8:	f3bf 8f5b 	dmb	ish
 8020fcc:	07db      	lsls	r3, r3, #31
 8020fce:	d40b      	bmi.n	8020fe8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020fd0:	4620      	mov	r0, r4
 8020fd2:	f006 fde4 	bl	8027b9e <__cxa_guard_acquire>
 8020fd6:	b138      	cbz	r0, 8020fe8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020fd8:	4620      	mov	r0, r4
 8020fda:	f006 fdec 	bl	8027bb6 <__cxa_guard_release>
 8020fde:	4a06      	ldr	r2, [pc, #24]	; (8020ff8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020fe0:	4909      	ldr	r1, [pc, #36]	; (8021008 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8020fe2:	480a      	ldr	r0, [pc, #40]	; (802100c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020fe4:	f006 fdd4 	bl	8027b90 <__aeabi_atexit>
 8020fe8:	4b05      	ldr	r3, [pc, #20]	; (8021000 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020fea:	61ab      	str	r3, [r5, #24]
 8020fec:	4b07      	ldr	r3, [pc, #28]	; (802100c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020fee:	61eb      	str	r3, [r5, #28]
 8020ff0:	bd38      	pop	{r3, r4, r5, pc}
 8020ff2:	bf00      	nop
 8020ff4:	200061ac 	.word	0x200061ac
 8020ff8:	20000000 	.word	0x20000000
 8020ffc:	0801f807 	.word	0x0801f807
 8021000:	2000004c 	.word	0x2000004c
 8021004:	200061b0 	.word	0x200061b0
 8021008:	0801f805 	.word	0x0801f805
 802100c:	20000050 	.word	0x20000050

08021010 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021010:	b510      	push	{r4, lr}
 8021012:	4604      	mov	r4, r0
 8021014:	f7ff ff88 	bl	8020f28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021018:	4620      	mov	r0, r4
 802101a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802101e:	f7ff bfbd 	b.w	8020f9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021024 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8021024:	b538      	push	{r3, r4, r5, lr}
 8021026:	4c15      	ldr	r4, [pc, #84]	; (802107c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8021028:	4605      	mov	r5, r0
 802102a:	7823      	ldrb	r3, [r4, #0]
 802102c:	f3bf 8f5b 	dmb	ish
 8021030:	07da      	lsls	r2, r3, #31
 8021032:	d40b      	bmi.n	802104c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021034:	4620      	mov	r0, r4
 8021036:	f006 fdb2 	bl	8027b9e <__cxa_guard_acquire>
 802103a:	b138      	cbz	r0, 802104c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 802103c:	4620      	mov	r0, r4
 802103e:	f006 fdba 	bl	8027bb6 <__cxa_guard_release>
 8021042:	4a0f      	ldr	r2, [pc, #60]	; (8021080 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021044:	490f      	ldr	r1, [pc, #60]	; (8021084 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8021046:	4810      	ldr	r0, [pc, #64]	; (8021088 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021048:	f006 fda2 	bl	8027b90 <__aeabi_atexit>
 802104c:	4c0f      	ldr	r4, [pc, #60]	; (802108c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 802104e:	7823      	ldrb	r3, [r4, #0]
 8021050:	f3bf 8f5b 	dmb	ish
 8021054:	07db      	lsls	r3, r3, #31
 8021056:	d40b      	bmi.n	8021070 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021058:	4620      	mov	r0, r4
 802105a:	f006 fda0 	bl	8027b9e <__cxa_guard_acquire>
 802105e:	b138      	cbz	r0, 8021070 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021060:	4620      	mov	r0, r4
 8021062:	f006 fda8 	bl	8027bb6 <__cxa_guard_release>
 8021066:	4a06      	ldr	r2, [pc, #24]	; (8021080 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021068:	4909      	ldr	r1, [pc, #36]	; (8021090 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802106a:	480a      	ldr	r0, [pc, #40]	; (8021094 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802106c:	f006 fd90 	bl	8027b90 <__aeabi_atexit>
 8021070:	4b05      	ldr	r3, [pc, #20]	; (8021088 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021072:	632b      	str	r3, [r5, #48]	; 0x30
 8021074:	4b07      	ldr	r3, [pc, #28]	; (8021094 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021076:	636b      	str	r3, [r5, #52]	; 0x34
 8021078:	bd38      	pop	{r3, r4, r5, pc}
 802107a:	bf00      	nop
 802107c:	200061b4 	.word	0x200061b4
 8021080:	20000000 	.word	0x20000000
 8021084:	0801f7fb 	.word	0x0801f7fb
 8021088:	20000054 	.word	0x20000054
 802108c:	200061b8 	.word	0x200061b8
 8021090:	0801f7f9 	.word	0x0801f7f9
 8021094:	20000058 	.word	0x20000058

08021098 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021098:	b538      	push	{r3, r4, r5, lr}
 802109a:	4c15      	ldr	r4, [pc, #84]	; (80210f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 802109c:	4605      	mov	r5, r0
 802109e:	7823      	ldrb	r3, [r4, #0]
 80210a0:	f3bf 8f5b 	dmb	ish
 80210a4:	07da      	lsls	r2, r3, #31
 80210a6:	d40b      	bmi.n	80210c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80210a8:	4620      	mov	r0, r4
 80210aa:	f006 fd78 	bl	8027b9e <__cxa_guard_acquire>
 80210ae:	b138      	cbz	r0, 80210c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80210b0:	4620      	mov	r0, r4
 80210b2:	f006 fd80 	bl	8027bb6 <__cxa_guard_release>
 80210b6:	4a0f      	ldr	r2, [pc, #60]	; (80210f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80210b8:	490f      	ldr	r1, [pc, #60]	; (80210f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80210ba:	4810      	ldr	r0, [pc, #64]	; (80210fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80210bc:	f006 fd68 	bl	8027b90 <__aeabi_atexit>
 80210c0:	4c0f      	ldr	r4, [pc, #60]	; (8021100 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80210c2:	7823      	ldrb	r3, [r4, #0]
 80210c4:	f3bf 8f5b 	dmb	ish
 80210c8:	07db      	lsls	r3, r3, #31
 80210ca:	d40b      	bmi.n	80210e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80210cc:	4620      	mov	r0, r4
 80210ce:	f006 fd66 	bl	8027b9e <__cxa_guard_acquire>
 80210d2:	b138      	cbz	r0, 80210e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80210d4:	4620      	mov	r0, r4
 80210d6:	f006 fd6e 	bl	8027bb6 <__cxa_guard_release>
 80210da:	4a06      	ldr	r2, [pc, #24]	; (80210f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80210dc:	4909      	ldr	r1, [pc, #36]	; (8021104 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80210de:	480a      	ldr	r0, [pc, #40]	; (8021108 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80210e0:	f006 fd56 	bl	8027b90 <__aeabi_atexit>
 80210e4:	4b05      	ldr	r3, [pc, #20]	; (80210fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80210e6:	62ab      	str	r3, [r5, #40]	; 0x28
 80210e8:	4b07      	ldr	r3, [pc, #28]	; (8021108 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80210ea:	62eb      	str	r3, [r5, #44]	; 0x2c
 80210ec:	bd38      	pop	{r3, r4, r5, pc}
 80210ee:	bf00      	nop
 80210f0:	2000618c 	.word	0x2000618c
 80210f4:	20000000 	.word	0x20000000
 80210f8:	0801f7ff 	.word	0x0801f7ff
 80210fc:	2000002c 	.word	0x2000002c
 8021100:	20006190 	.word	0x20006190
 8021104:	0801f7fd 	.word	0x0801f7fd
 8021108:	20000030 	.word	0x20000030

0802110c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 802110c:	b510      	push	{r4, lr}
 802110e:	4604      	mov	r4, r0
 8021110:	f7ff ff88 	bl	8021024 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8021114:	4620      	mov	r0, r4
 8021116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802111a:	f7ff bfbd 	b.w	8021098 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08021120 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021120:	b538      	push	{r3, r4, r5, lr}
 8021122:	4c15      	ldr	r4, [pc, #84]	; (8021178 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021124:	4605      	mov	r5, r0
 8021126:	7823      	ldrb	r3, [r4, #0]
 8021128:	f3bf 8f5b 	dmb	ish
 802112c:	07da      	lsls	r2, r3, #31
 802112e:	d40b      	bmi.n	8021148 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021130:	4620      	mov	r0, r4
 8021132:	f006 fd34 	bl	8027b9e <__cxa_guard_acquire>
 8021136:	b138      	cbz	r0, 8021148 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021138:	4620      	mov	r0, r4
 802113a:	f006 fd3c 	bl	8027bb6 <__cxa_guard_release>
 802113e:	4a0f      	ldr	r2, [pc, #60]	; (802117c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021140:	490f      	ldr	r1, [pc, #60]	; (8021180 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021142:	4810      	ldr	r0, [pc, #64]	; (8021184 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021144:	f006 fd24 	bl	8027b90 <__aeabi_atexit>
 8021148:	4c0f      	ldr	r4, [pc, #60]	; (8021188 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802114a:	7823      	ldrb	r3, [r4, #0]
 802114c:	f3bf 8f5b 	dmb	ish
 8021150:	07db      	lsls	r3, r3, #31
 8021152:	d40b      	bmi.n	802116c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021154:	4620      	mov	r0, r4
 8021156:	f006 fd22 	bl	8027b9e <__cxa_guard_acquire>
 802115a:	b138      	cbz	r0, 802116c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802115c:	4620      	mov	r0, r4
 802115e:	f006 fd2a 	bl	8027bb6 <__cxa_guard_release>
 8021162:	4a06      	ldr	r2, [pc, #24]	; (802117c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021164:	4909      	ldr	r1, [pc, #36]	; (802118c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021166:	480a      	ldr	r0, [pc, #40]	; (8021190 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021168:	f006 fd12 	bl	8027b90 <__aeabi_atexit>
 802116c:	4b05      	ldr	r3, [pc, #20]	; (8021184 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802116e:	642b      	str	r3, [r5, #64]	; 0x40
 8021170:	4b07      	ldr	r3, [pc, #28]	; (8021190 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021172:	646b      	str	r3, [r5, #68]	; 0x44
 8021174:	bd38      	pop	{r3, r4, r5, pc}
 8021176:	bf00      	nop
 8021178:	200061bc 	.word	0x200061bc
 802117c:	20000000 	.word	0x20000000
 8021180:	0801f7f3 	.word	0x0801f7f3
 8021184:	2000005c 	.word	0x2000005c
 8021188:	200061c0 	.word	0x200061c0
 802118c:	0801f7f1 	.word	0x0801f7f1
 8021190:	20000060 	.word	0x20000060

08021194 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021194:	b538      	push	{r3, r4, r5, lr}
 8021196:	4c15      	ldr	r4, [pc, #84]	; (80211ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021198:	4605      	mov	r5, r0
 802119a:	7823      	ldrb	r3, [r4, #0]
 802119c:	f3bf 8f5b 	dmb	ish
 80211a0:	07da      	lsls	r2, r3, #31
 80211a2:	d40b      	bmi.n	80211bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80211a4:	4620      	mov	r0, r4
 80211a6:	f006 fcfa 	bl	8027b9e <__cxa_guard_acquire>
 80211aa:	b138      	cbz	r0, 80211bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80211ac:	4620      	mov	r0, r4
 80211ae:	f006 fd02 	bl	8027bb6 <__cxa_guard_release>
 80211b2:	4a0f      	ldr	r2, [pc, #60]	; (80211f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80211b4:	490f      	ldr	r1, [pc, #60]	; (80211f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80211b6:	4810      	ldr	r0, [pc, #64]	; (80211f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80211b8:	f006 fcea 	bl	8027b90 <__aeabi_atexit>
 80211bc:	4c0f      	ldr	r4, [pc, #60]	; (80211fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80211be:	7823      	ldrb	r3, [r4, #0]
 80211c0:	f3bf 8f5b 	dmb	ish
 80211c4:	07db      	lsls	r3, r3, #31
 80211c6:	d40b      	bmi.n	80211e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80211c8:	4620      	mov	r0, r4
 80211ca:	f006 fce8 	bl	8027b9e <__cxa_guard_acquire>
 80211ce:	b138      	cbz	r0, 80211e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80211d0:	4620      	mov	r0, r4
 80211d2:	f006 fcf0 	bl	8027bb6 <__cxa_guard_release>
 80211d6:	4a06      	ldr	r2, [pc, #24]	; (80211f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80211d8:	4909      	ldr	r1, [pc, #36]	; (8021200 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80211da:	480a      	ldr	r0, [pc, #40]	; (8021204 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80211dc:	f006 fcd8 	bl	8027b90 <__aeabi_atexit>
 80211e0:	4b05      	ldr	r3, [pc, #20]	; (80211f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80211e2:	63ab      	str	r3, [r5, #56]	; 0x38
 80211e4:	4b07      	ldr	r3, [pc, #28]	; (8021204 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80211e6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80211e8:	bd38      	pop	{r3, r4, r5, pc}
 80211ea:	bf00      	nop
 80211ec:	2000619c 	.word	0x2000619c
 80211f0:	20000000 	.word	0x20000000
 80211f4:	0801f7f7 	.word	0x0801f7f7
 80211f8:	2000003c 	.word	0x2000003c
 80211fc:	200061a0 	.word	0x200061a0
 8021200:	0801f7f5 	.word	0x0801f7f5
 8021204:	20000040 	.word	0x20000040

08021208 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8021208:	b510      	push	{r4, lr}
 802120a:	4604      	mov	r4, r0
 802120c:	f7ff ff88 	bl	8021120 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021210:	4620      	mov	r0, r4
 8021212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021216:	f7ff bfbd 	b.w	8021194 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802121c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802121c:	b538      	push	{r3, r4, r5, lr}
 802121e:	4c15      	ldr	r4, [pc, #84]	; (8021274 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021220:	4605      	mov	r5, r0
 8021222:	7823      	ldrb	r3, [r4, #0]
 8021224:	f3bf 8f5b 	dmb	ish
 8021228:	07da      	lsls	r2, r3, #31
 802122a:	d40b      	bmi.n	8021244 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802122c:	4620      	mov	r0, r4
 802122e:	f006 fcb6 	bl	8027b9e <__cxa_guard_acquire>
 8021232:	b138      	cbz	r0, 8021244 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021234:	4620      	mov	r0, r4
 8021236:	f006 fcbe 	bl	8027bb6 <__cxa_guard_release>
 802123a:	4a0f      	ldr	r2, [pc, #60]	; (8021278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802123c:	490f      	ldr	r1, [pc, #60]	; (802127c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802123e:	4810      	ldr	r0, [pc, #64]	; (8021280 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021240:	f006 fca6 	bl	8027b90 <__aeabi_atexit>
 8021244:	4c0f      	ldr	r4, [pc, #60]	; (8021284 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021246:	7823      	ldrb	r3, [r4, #0]
 8021248:	f3bf 8f5b 	dmb	ish
 802124c:	07db      	lsls	r3, r3, #31
 802124e:	d40b      	bmi.n	8021268 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021250:	4620      	mov	r0, r4
 8021252:	f006 fca4 	bl	8027b9e <__cxa_guard_acquire>
 8021256:	b138      	cbz	r0, 8021268 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021258:	4620      	mov	r0, r4
 802125a:	f006 fcac 	bl	8027bb6 <__cxa_guard_release>
 802125e:	4a06      	ldr	r2, [pc, #24]	; (8021278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021260:	4909      	ldr	r1, [pc, #36]	; (8021288 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021262:	480a      	ldr	r0, [pc, #40]	; (802128c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021264:	f006 fc94 	bl	8027b90 <__aeabi_atexit>
 8021268:	4b05      	ldr	r3, [pc, #20]	; (8021280 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802126a:	652b      	str	r3, [r5, #80]	; 0x50
 802126c:	4b07      	ldr	r3, [pc, #28]	; (802128c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802126e:	656b      	str	r3, [r5, #84]	; 0x54
 8021270:	bd38      	pop	{r3, r4, r5, pc}
 8021272:	bf00      	nop
 8021274:	20006194 	.word	0x20006194
 8021278:	20000000 	.word	0x20000000
 802127c:	0801f7eb 	.word	0x0801f7eb
 8021280:	20000034 	.word	0x20000034
 8021284:	20006198 	.word	0x20006198
 8021288:	0801f7e9 	.word	0x0801f7e9
 802128c:	20000038 	.word	0x20000038

08021290 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021290:	b538      	push	{r3, r4, r5, lr}
 8021292:	4c15      	ldr	r4, [pc, #84]	; (80212e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021294:	4605      	mov	r5, r0
 8021296:	7823      	ldrb	r3, [r4, #0]
 8021298:	f3bf 8f5b 	dmb	ish
 802129c:	07da      	lsls	r2, r3, #31
 802129e:	d40b      	bmi.n	80212b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80212a0:	4620      	mov	r0, r4
 80212a2:	f006 fc7c 	bl	8027b9e <__cxa_guard_acquire>
 80212a6:	b138      	cbz	r0, 80212b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80212a8:	4620      	mov	r0, r4
 80212aa:	f006 fc84 	bl	8027bb6 <__cxa_guard_release>
 80212ae:	4a0f      	ldr	r2, [pc, #60]	; (80212ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80212b0:	490f      	ldr	r1, [pc, #60]	; (80212f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80212b2:	4810      	ldr	r0, [pc, #64]	; (80212f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80212b4:	f006 fc6c 	bl	8027b90 <__aeabi_atexit>
 80212b8:	4c0f      	ldr	r4, [pc, #60]	; (80212f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80212ba:	7823      	ldrb	r3, [r4, #0]
 80212bc:	f3bf 8f5b 	dmb	ish
 80212c0:	07db      	lsls	r3, r3, #31
 80212c2:	d40b      	bmi.n	80212dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80212c4:	4620      	mov	r0, r4
 80212c6:	f006 fc6a 	bl	8027b9e <__cxa_guard_acquire>
 80212ca:	b138      	cbz	r0, 80212dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80212cc:	4620      	mov	r0, r4
 80212ce:	f006 fc72 	bl	8027bb6 <__cxa_guard_release>
 80212d2:	4a06      	ldr	r2, [pc, #24]	; (80212ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80212d4:	4909      	ldr	r1, [pc, #36]	; (80212fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80212d6:	480a      	ldr	r0, [pc, #40]	; (8021300 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80212d8:	f006 fc5a 	bl	8027b90 <__aeabi_atexit>
 80212dc:	4b05      	ldr	r3, [pc, #20]	; (80212f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80212de:	64ab      	str	r3, [r5, #72]	; 0x48
 80212e0:	4b07      	ldr	r3, [pc, #28]	; (8021300 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80212e2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80212e4:	bd38      	pop	{r3, r4, r5, pc}
 80212e6:	bf00      	nop
 80212e8:	20006184 	.word	0x20006184
 80212ec:	20000000 	.word	0x20000000
 80212f0:	0801f7ef 	.word	0x0801f7ef
 80212f4:	20000024 	.word	0x20000024
 80212f8:	20006188 	.word	0x20006188
 80212fc:	0801f7ed 	.word	0x0801f7ed
 8021300:	20000028 	.word	0x20000028

08021304 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8021304:	b510      	push	{r4, lr}
 8021306:	4604      	mov	r4, r0
 8021308:	f7ff ff88 	bl	802121c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802130c:	4620      	mov	r0, r4
 802130e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021312:	f7ff bfbd 	b.w	8021290 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08021316 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8021316:	b510      	push	{r4, lr}
 8021318:	4604      	mov	r4, r0
 802131a:	f7ff fff3 	bl	8021304 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 802131e:	4620      	mov	r0, r4
 8021320:	f7ff ff72 	bl	8021208 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8021324:	4620      	mov	r0, r4
 8021326:	f7ff fe73 	bl	8021010 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 802132a:	4620      	mov	r0, r4
 802132c:	f7ff fdf2 	bl	8020f14 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8021330:	4620      	mov	r0, r4
 8021332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021336:	f7ff bee9 	b.w	802110c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0802133c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 802133c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021340:	b087      	sub	sp, #28
 8021342:	7888      	ldrb	r0, [r1, #2]
 8021344:	4616      	mov	r6, r2
 8021346:	9001      	str	r0, [sp, #4]
 8021348:	7848      	ldrb	r0, [r1, #1]
 802134a:	9100      	str	r1, [sp, #0]
 802134c:	9002      	str	r0, [sp, #8]
 802134e:	7808      	ldrb	r0, [r1, #0]
 8021350:	9901      	ldr	r1, [sp, #4]
 8021352:	9003      	str	r0, [sp, #12]
 8021354:	9802      	ldr	r0, [sp, #8]
 8021356:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 802135a:	0200      	lsls	r0, r0, #8
 802135c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8021360:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8021364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8021368:	9903      	ldr	r1, [sp, #12]
 802136a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802136e:	4308      	orrs	r0, r1
 8021370:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8021374:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8021378:	9005      	str	r0, [sp, #20]
 802137a:	fb05 ca0e 	mla	sl, r5, lr, ip
 802137e:	2d00      	cmp	r5, #0
 8021380:	eb06 080a 	add.w	r8, r6, sl
 8021384:	db4a      	blt.n	802141c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8021386:	45a9      	cmp	r9, r5
 8021388:	dd48      	ble.n	802141c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 802138a:	f1bc 0f00 	cmp.w	ip, #0
 802138e:	db43      	blt.n	8021418 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8021390:	45e6      	cmp	lr, ip
 8021392:	dd41      	ble.n	8021418 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8021394:	f816 600a 	ldrb.w	r6, [r6, sl]
 8021398:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802139c:	441e      	add	r6, r3
 802139e:	f11c 0001 	adds.w	r0, ip, #1
 80213a2:	d43e      	bmi.n	8021422 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80213a4:	4586      	cmp	lr, r0
 80213a6:	dd3c      	ble.n	8021422 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80213a8:	2a00      	cmp	r2, #0
 80213aa:	d03a      	beq.n	8021422 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80213ac:	f898 0001 	ldrb.w	r0, [r8, #1]
 80213b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80213b4:	4418      	add	r0, r3
 80213b6:	3501      	adds	r5, #1
 80213b8:	d437      	bmi.n	802142a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80213ba:	45a9      	cmp	r9, r5
 80213bc:	dd35      	ble.n	802142a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80213be:	b3a4      	cbz	r4, 802142a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80213c0:	f1bc 0f00 	cmp.w	ip, #0
 80213c4:	db2f      	blt.n	8021426 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 80213c6:	45e6      	cmp	lr, ip
 80213c8:	dd2d      	ble.n	8021426 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 80213ca:	f818 500e 	ldrb.w	r5, [r8, lr]
 80213ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80213d2:	441d      	add	r5, r3
 80213d4:	f11c 0c01 	adds.w	ip, ip, #1
 80213d8:	d42a      	bmi.n	8021430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80213da:	45e6      	cmp	lr, ip
 80213dc:	dd28      	ble.n	8021430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80213de:	b33a      	cbz	r2, 8021430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80213e0:	44c6      	add	lr, r8
 80213e2:	f89e c001 	ldrb.w	ip, [lr, #1]
 80213e6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80213ea:	4463      	add	r3, ip
 80213ec:	ea6f 0c07 	mvn.w	ip, r7
 80213f0:	2a0f      	cmp	r2, #15
 80213f2:	f896 a000 	ldrb.w	sl, [r6]
 80213f6:	fa5f fc8c 	uxtb.w	ip, ip
 80213fa:	f890 b000 	ldrb.w	fp, [r0]
 80213fe:	f895 9000 	ldrb.w	r9, [r5]
 8021402:	7819      	ldrb	r1, [r3, #0]
 8021404:	d801      	bhi.n	802140a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8021406:	2c0f      	cmp	r4, #15
 8021408:	d914      	bls.n	8021434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 802140a:	4b40      	ldr	r3, [pc, #256]	; (802150c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 802140c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8021410:	4a3f      	ldr	r2, [pc, #252]	; (8021510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8021412:	4840      	ldr	r0, [pc, #256]	; (8021514 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8021414:	f006 fd94 	bl	8027f40 <__assert_func>
 8021418:	ae05      	add	r6, sp, #20
 802141a:	e7c0      	b.n	802139e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 802141c:	a805      	add	r0, sp, #20
 802141e:	4606      	mov	r6, r0
 8021420:	e7c9      	b.n	80213b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8021422:	a805      	add	r0, sp, #20
 8021424:	e7c7      	b.n	80213b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8021426:	ad05      	add	r5, sp, #20
 8021428:	e7d4      	b.n	80213d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 802142a:	ab05      	add	r3, sp, #20
 802142c:	461d      	mov	r5, r3
 802142e:	e7dd      	b.n	80213ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8021430:	ab05      	add	r3, sp, #20
 8021432:	e7db      	b.n	80213ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8021434:	b292      	uxth	r2, r2
 8021436:	b2a4      	uxth	r4, r4
 8021438:	fa1f fc8c 	uxth.w	ip, ip
 802143c:	fb02 f804 	mul.w	r8, r2, r4
 8021440:	0112      	lsls	r2, r2, #4
 8021442:	b2bf      	uxth	r7, r7
 8021444:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8021448:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 802144c:	eba2 0208 	sub.w	r2, r2, r8
 8021450:	b2a4      	uxth	r4, r4
 8021452:	b292      	uxth	r2, r2
 8021454:	ebae 0e04 	sub.w	lr, lr, r4
 8021458:	fb02 fb0b 	mul.w	fp, r2, fp
 802145c:	fa1f fe8e 	uxth.w	lr, lr
 8021460:	fb0e ba0a 	mla	sl, lr, sl, fp
 8021464:	fb04 aa09 	mla	sl, r4, r9, sl
 8021468:	fb08 aa01 	mla	sl, r8, r1, sl
 802146c:	9903      	ldr	r1, [sp, #12]
 802146e:	fb11 f90c 	smulbb	r9, r1, ip
 8021472:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8021476:	9900      	ldr	r1, [sp, #0]
 8021478:	fb0a 9a07 	mla	sl, sl, r7, r9
 802147c:	fa1f fa8a 	uxth.w	sl, sl
 8021480:	f10a 0901 	add.w	r9, sl, #1
 8021484:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8021488:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802148c:	f881 a000 	strb.w	sl, [r1]
 8021490:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021494:	f896 9001 	ldrb.w	r9, [r6, #1]
 8021498:	fb02 fa0a 	mul.w	sl, r2, sl
 802149c:	9902      	ldr	r1, [sp, #8]
 802149e:	fb0e aa09 	mla	sl, lr, r9, sl
 80214a2:	f895 9001 	ldrb.w	r9, [r5, #1]
 80214a6:	fb04 aa09 	mla	sl, r4, r9, sl
 80214aa:	f893 9001 	ldrb.w	r9, [r3, #1]
 80214ae:	fb08 a909 	mla	r9, r8, r9, sl
 80214b2:	fb11 fa0c 	smulbb	sl, r1, ip
 80214b6:	9900      	ldr	r1, [sp, #0]
 80214b8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80214bc:	fb09 a907 	mla	r9, r9, r7, sl
 80214c0:	fa1f f989 	uxth.w	r9, r9
 80214c4:	f109 0a01 	add.w	sl, r9, #1
 80214c8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80214cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80214d0:	f881 9001 	strb.w	r9, [r1, #1]
 80214d4:	7880      	ldrb	r0, [r0, #2]
 80214d6:	78b6      	ldrb	r6, [r6, #2]
 80214d8:	4342      	muls	r2, r0
 80214da:	78a8      	ldrb	r0, [r5, #2]
 80214dc:	789b      	ldrb	r3, [r3, #2]
 80214de:	fb0e 2206 	mla	r2, lr, r6, r2
 80214e2:	fb04 2400 	mla	r4, r4, r0, r2
 80214e6:	fb08 4803 	mla	r8, r8, r3, r4
 80214ea:	9b01      	ldr	r3, [sp, #4]
 80214ec:	fb13 fc0c 	smulbb	ip, r3, ip
 80214f0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80214f4:	fb08 c707 	mla	r7, r8, r7, ip
 80214f8:	b2bf      	uxth	r7, r7
 80214fa:	f107 0c01 	add.w	ip, r7, #1
 80214fe:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8021502:	123f      	asrs	r7, r7, #8
 8021504:	708f      	strb	r7, [r1, #2]
 8021506:	b007      	add	sp, #28
 8021508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802150c:	0802cb61 	.word	0x0802cb61
 8021510:	0802d05e 	.word	0x0802d05e
 8021514:	0802cc2a 	.word	0x0802cc2a

08021518 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802151c:	ed2d 8b08 	vpush	{d8-d11}
 8021520:	b093      	sub	sp, #76	; 0x4c
 8021522:	eeb0 aa40 	vmov.f32	s20, s0
 8021526:	eef0 9a60 	vmov.f32	s19, s1
 802152a:	9210      	str	r2, [sp, #64]	; 0x40
 802152c:	eeb0 9a41 	vmov.f32	s18, s2
 8021530:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021532:	eeb0 8a62 	vmov.f32	s16, s5
 8021536:	9309      	str	r3, [sp, #36]	; 0x24
 8021538:	eef0 8a43 	vmov.f32	s17, s6
 802153c:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8021540:	eef0 ba44 	vmov.f32	s23, s8
 8021544:	9011      	str	r0, [sp, #68]	; 0x44
 8021546:	eeb0 ba64 	vmov.f32	s22, s9
 802154a:	930e      	str	r3, [sp, #56]	; 0x38
 802154c:	eef0 aa45 	vmov.f32	s21, s10
 8021550:	6850      	ldr	r0, [r2, #4]
 8021552:	910d      	str	r1, [sp, #52]	; 0x34
 8021554:	6812      	ldr	r2, [r2, #0]
 8021556:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802155a:	fb00 1303 	mla	r3, r0, r3, r1
 802155e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021562:	18d3      	adds	r3, r2, r3
 8021564:	930a      	str	r3, [sp, #40]	; 0x28
 8021566:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	930c      	str	r3, [sp, #48]	; 0x30
 802156c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802156e:	685c      	ldr	r4, [r3, #4]
 8021570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021572:	3404      	adds	r4, #4
 8021574:	43db      	mvns	r3, r3
 8021576:	b2db      	uxtb	r3, r3
 8021578:	930b      	str	r3, [sp, #44]	; 0x2c
 802157a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802157c:	2b00      	cmp	r3, #0
 802157e:	dc03      	bgt.n	8021588 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021582:	2b00      	cmp	r3, #0
 8021584:	f340 8250 	ble.w	8021a28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8021588:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802158a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802158e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021592:	1e48      	subs	r0, r1, #1
 8021594:	1e55      	subs	r5, r2, #1
 8021596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021598:	2b00      	cmp	r3, #0
 802159a:	f340 80ee 	ble.w	802177a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802159e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80215a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80215a2:	1436      	asrs	r6, r6, #16
 80215a4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80215a8:	d406      	bmi.n	80215b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80215aa:	4286      	cmp	r6, r0
 80215ac:	da04      	bge.n	80215b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	db02      	blt.n	80215b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80215b2:	42ab      	cmp	r3, r5
 80215b4:	f2c0 80e2 	blt.w	802177c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80215b8:	3601      	adds	r6, #1
 80215ba:	f100 80cf 	bmi.w	802175c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80215be:	42b1      	cmp	r1, r6
 80215c0:	f2c0 80cc 	blt.w	802175c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80215c4:	3301      	adds	r3, #1
 80215c6:	f100 80c9 	bmi.w	802175c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80215ca:	429a      	cmp	r2, r3
 80215cc:	f2c0 80c6 	blt.w	802175c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80215d0:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80215d4:	f1bb 0f00 	cmp.w	fp, #0
 80215d8:	f340 80f1 	ble.w	80217be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80215dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80215de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80215e0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80215e2:	141d      	asrs	r5, r3, #16
 80215e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80215e6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80215ea:	68c7      	ldr	r7, [r0, #12]
 80215ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80215ee:	1418      	asrs	r0, r3, #16
 80215f0:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80215f4:	6892      	ldr	r2, [r2, #8]
 80215f6:	f100 8137 	bmi.w	8021868 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80215fa:	f102 3cff 	add.w	ip, r2, #4294967295
 80215fe:	4560      	cmp	r0, ip
 8021600:	f280 8132 	bge.w	8021868 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021604:	2d00      	cmp	r5, #0
 8021606:	f2c0 812f 	blt.w	8021868 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802160a:	f107 3cff 	add.w	ip, r7, #4294967295
 802160e:	4565      	cmp	r5, ip
 8021610:	f280 812a 	bge.w	8021868 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021614:	b212      	sxth	r2, r2
 8021616:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021618:	fb05 0002 	mla	r0, r5, r2, r0
 802161c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802161e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021622:	4405      	add	r5, r0
 8021624:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021628:	eb04 0e0c 	add.w	lr, r4, ip
 802162c:	f1b8 0f00 	cmp.w	r8, #0
 8021630:	f000 810c 	beq.w	802184c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8021634:	786f      	ldrb	r7, [r5, #1]
 8021636:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802163a:	4427      	add	r7, r4
 802163c:	2900      	cmp	r1, #0
 802163e:	f000 810d 	beq.w	802185c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021642:	18a8      	adds	r0, r5, r2
 8021644:	5caa      	ldrb	r2, [r5, r2]
 8021646:	7840      	ldrb	r0, [r0, #1]
 8021648:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802164c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021650:	4422      	add	r2, r4
 8021652:	4420      	add	r0, r4
 8021654:	fa1f f388 	uxth.w	r3, r8
 8021658:	f814 a00c 	ldrb.w	sl, [r4, ip]
 802165c:	b289      	uxth	r1, r1
 802165e:	f897 c000 	ldrb.w	ip, [r7]
 8021662:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8021666:	fb03 f901 	mul.w	r9, r3, r1
 802166a:	011b      	lsls	r3, r3, #4
 802166c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021670:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8021674:	eba3 0309 	sub.w	r3, r3, r9
 8021678:	b289      	uxth	r1, r1
 802167a:	b29b      	uxth	r3, r3
 802167c:	eba8 0801 	sub.w	r8, r8, r1
 8021680:	fb03 fc0c 	mul.w	ip, r3, ip
 8021684:	fa1f f888 	uxth.w	r8, r8
 8021688:	930f      	str	r3, [sp, #60]	; 0x3c
 802168a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802168c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8021690:	f892 a000 	ldrb.w	sl, [r2]
 8021694:	fb01 cc0a 	mla	ip, r1, sl, ip
 8021698:	f890 a000 	ldrb.w	sl, [r0]
 802169c:	fb09 cc0a 	mla	ip, r9, sl, ip
 80216a0:	f896 a000 	ldrb.w	sl, [r6]
 80216a4:	fb1a fa03 	smulbb	sl, sl, r3
 80216a8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80216ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80216ae:	fb0c ac05 	mla	ip, ip, r5, sl
 80216b2:	fa1f fc8c 	uxth.w	ip, ip
 80216b6:	f10c 0a01 	add.w	sl, ip, #1
 80216ba:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80216be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80216c2:	f886 a000 	strb.w	sl, [r6]
 80216c6:	f897 c001 	ldrb.w	ip, [r7, #1]
 80216ca:	f89e a001 	ldrb.w	sl, [lr, #1]
 80216ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80216d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80216d4:	fb08 cc0a 	mla	ip, r8, sl, ip
 80216d8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80216dc:	fb01 cc0a 	mla	ip, r1, sl, ip
 80216e0:	f890 a001 	ldrb.w	sl, [r0, #1]
 80216e4:	fb09 cc0a 	mla	ip, r9, sl, ip
 80216e8:	f896 a001 	ldrb.w	sl, [r6, #1]
 80216ec:	fb1a fa03 	smulbb	sl, sl, r3
 80216f0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80216f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80216f6:	fb0c ac05 	mla	ip, ip, r5, sl
 80216fa:	fa1f fc8c 	uxth.w	ip, ip
 80216fe:	f10c 0a01 	add.w	sl, ip, #1
 8021702:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8021706:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802170a:	f886 c001 	strb.w	ip, [r6, #1]
 802170e:	78bf      	ldrb	r7, [r7, #2]
 8021710:	f89e c002 	ldrb.w	ip, [lr, #2]
 8021714:	437b      	muls	r3, r7
 8021716:	fb08 330c 	mla	r3, r8, ip, r3
 802171a:	f892 c002 	ldrb.w	ip, [r2, #2]
 802171e:	7882      	ldrb	r2, [r0, #2]
 8021720:	fb01 310c 	mla	r1, r1, ip, r3
 8021724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021726:	fb09 1902 	mla	r9, r9, r2, r1
 802172a:	78b1      	ldrb	r1, [r6, #2]
 802172c:	fb11 f103 	smulbb	r1, r1, r3
 8021730:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021734:	fb09 1505 	mla	r5, r9, r5, r1
 8021738:	b2ad      	uxth	r5, r5
 802173a:	1c6b      	adds	r3, r5, #1
 802173c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021740:	122d      	asrs	r5, r5, #8
 8021742:	70b5      	strb	r5, [r6, #2]
 8021744:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021746:	3603      	adds	r6, #3
 8021748:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802174a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802174e:	4413      	add	r3, r2
 8021750:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021752:	9325      	str	r3, [sp, #148]	; 0x94
 8021754:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021756:	4413      	add	r3, r2
 8021758:	9326      	str	r3, [sp, #152]	; 0x98
 802175a:	e73b      	b.n	80215d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802175c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802175e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8021760:	4433      	add	r3, r6
 8021762:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8021764:	9325      	str	r3, [sp, #148]	; 0x94
 8021766:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021768:	4433      	add	r3, r6
 802176a:	9326      	str	r3, [sp, #152]	; 0x98
 802176c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802176e:	3b01      	subs	r3, #1
 8021770:	9309      	str	r3, [sp, #36]	; 0x24
 8021772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021774:	3303      	adds	r3, #3
 8021776:	930a      	str	r3, [sp, #40]	; 0x28
 8021778:	e70d      	b.n	8021596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802177a:	d028      	beq.n	80217ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802177c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802177e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021780:	3b01      	subs	r3, #1
 8021782:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8021784:	fb00 5003 	mla	r0, r0, r3, r5
 8021788:	1400      	asrs	r0, r0, #16
 802178a:	f53f af21 	bmi.w	80215d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802178e:	3901      	subs	r1, #1
 8021790:	4288      	cmp	r0, r1
 8021792:	f6bf af1d 	bge.w	80215d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021796:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021798:	9826      	ldr	r0, [sp, #152]	; 0x98
 802179a:	fb01 0303 	mla	r3, r1, r3, r0
 802179e:	141b      	asrs	r3, r3, #16
 80217a0:	f53f af16 	bmi.w	80215d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80217a4:	3a01      	subs	r2, #1
 80217a6:	4293      	cmp	r3, r2
 80217a8:	f6bf af12 	bge.w	80215d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80217ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80217b2:	1cdf      	adds	r7, r3, #3
 80217b4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80217b8:	f1b9 0f00 	cmp.w	r9, #0
 80217bc:	dc73      	bgt.n	80218a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80217be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80217c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80217c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217ca:	441a      	add	r2, r3
 80217cc:	920a      	str	r2, [sp, #40]	; 0x28
 80217ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	f340 8129 	ble.w	8021a28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80217d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80217da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80217dc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80217e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80217e4:	eef0 6a48 	vmov.f32	s13, s16
 80217e8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80217ec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80217f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217f4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80217f8:	eef0 6a68 	vmov.f32	s13, s17
 80217fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021800:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8021804:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021808:	ee69 7a27 	vmul.f32	s15, s18, s15
 802180c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021810:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021814:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021818:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802181c:	ee18 2a10 	vmov	r2, s16
 8021820:	eeb0 8a47 	vmov.f32	s16, s14
 8021824:	fb92 f3f3 	sdiv	r3, r2, r3
 8021828:	ee18 2a90 	vmov	r2, s17
 802182c:	9327      	str	r3, [sp, #156]	; 0x9c
 802182e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021830:	eef0 8a67 	vmov.f32	s17, s15
 8021834:	fb92 f3f3 	sdiv	r3, r2, r3
 8021838:	9328      	str	r3, [sp, #160]	; 0xa0
 802183a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802183c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802183e:	3b01      	subs	r3, #1
 8021840:	930d      	str	r3, [sp, #52]	; 0x34
 8021842:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021844:	bf08      	it	eq
 8021846:	4613      	moveq	r3, r2
 8021848:	9309      	str	r3, [sp, #36]	; 0x24
 802184a:	e696      	b.n	802157a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802184c:	b149      	cbz	r1, 8021862 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802184e:	5caa      	ldrb	r2, [r5, r2]
 8021850:	4670      	mov	r0, lr
 8021852:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021856:	4422      	add	r2, r4
 8021858:	4677      	mov	r7, lr
 802185a:	e6fb      	b.n	8021654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802185c:	4670      	mov	r0, lr
 802185e:	4672      	mov	r2, lr
 8021860:	e6f8      	b.n	8021654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8021862:	4670      	mov	r0, lr
 8021864:	4672      	mov	r2, lr
 8021866:	e7f7      	b.n	8021858 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8021868:	f110 0c01 	adds.w	ip, r0, #1
 802186c:	f53f af6a 	bmi.w	8021744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8021870:	4562      	cmp	r2, ip
 8021872:	f6ff af67 	blt.w	8021744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8021876:	f115 0c01 	adds.w	ip, r5, #1
 802187a:	f53f af63 	bmi.w	8021744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802187e:	4567      	cmp	r7, ip
 8021880:	f6ff af60 	blt.w	8021744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8021884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021886:	b23f      	sxth	r7, r7
 8021888:	b212      	sxth	r2, r2
 802188a:	9002      	str	r0, [sp, #8]
 802188c:	9701      	str	r7, [sp, #4]
 802188e:	9200      	str	r2, [sp, #0]
 8021890:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021894:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8021898:	e9cd 5803 	strd	r5, r8, [sp, #12]
 802189c:	4623      	mov	r3, r4
 802189e:	4631      	mov	r1, r6
 80218a0:	f7ff fd4c 	bl	802133c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80218a4:	e74e      	b.n	8021744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80218a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80218a8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80218aa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80218ae:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80218b0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80218b2:	1400      	asrs	r0, r0, #16
 80218b4:	142d      	asrs	r5, r5, #16
 80218b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80218b8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80218bc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80218c0:	fb02 5000 	mla	r0, r2, r0, r5
 80218c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80218c6:	f815 e000 	ldrb.w	lr, [r5, r0]
 80218ca:	eb05 0c00 	add.w	ip, r5, r0
 80218ce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80218d2:	eb04 060e 	add.w	r6, r4, lr
 80218d6:	2b00      	cmp	r3, #0
 80218d8:	f000 8097 	beq.w	8021a0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80218dc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80218e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80218e4:	4425      	add	r5, r4
 80218e6:	2900      	cmp	r1, #0
 80218e8:	f000 8098 	beq.w	8021a1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80218ec:	eb0c 0002 	add.w	r0, ip, r2
 80218f0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80218f4:	7840      	ldrb	r0, [r0, #1]
 80218f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80218fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80218fe:	4422      	add	r2, r4
 8021900:	4420      	add	r0, r4
 8021902:	b29b      	uxth	r3, r3
 8021904:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8021908:	b289      	uxth	r1, r1
 802190a:	f895 e000 	ldrb.w	lr, [r5]
 802190e:	3703      	adds	r7, #3
 8021910:	f109 39ff 	add.w	r9, r9, #4294967295
 8021914:	fb03 f801 	mul.w	r8, r3, r1
 8021918:	011b      	lsls	r3, r3, #4
 802191a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 802191e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8021922:	eba3 0308 	sub.w	r3, r3, r8
 8021926:	b289      	uxth	r1, r1
 8021928:	b29b      	uxth	r3, r3
 802192a:	ebac 0c01 	sub.w	ip, ip, r1
 802192e:	fb03 fe0e 	mul.w	lr, r3, lr
 8021932:	fa1f fc8c 	uxth.w	ip, ip
 8021936:	930f      	str	r3, [sp, #60]	; 0x3c
 8021938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802193a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802193e:	f892 b000 	ldrb.w	fp, [r2]
 8021942:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021946:	f890 b000 	ldrb.w	fp, [r0]
 802194a:	fb08 ee0b 	mla	lr, r8, fp, lr
 802194e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8021952:	fb1b fb03 	smulbb	fp, fp, r3
 8021956:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802195a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802195c:	fb0e be0a 	mla	lr, lr, sl, fp
 8021960:	fa1f fe8e 	uxth.w	lr, lr
 8021964:	f10e 0b01 	add.w	fp, lr, #1
 8021968:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802196c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021970:	f807 ec06 	strb.w	lr, [r7, #-6]
 8021974:	f895 e001 	ldrb.w	lr, [r5, #1]
 8021978:	f896 b001 	ldrb.w	fp, [r6, #1]
 802197c:	fb03 fe0e 	mul.w	lr, r3, lr
 8021980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021982:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021986:	f892 b001 	ldrb.w	fp, [r2, #1]
 802198a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802198e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021992:	fb08 ee0b 	mla	lr, r8, fp, lr
 8021996:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802199a:	fb1b fb03 	smulbb	fp, fp, r3
 802199e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80219a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80219a4:	fb0e be0a 	mla	lr, lr, sl, fp
 80219a8:	fa1f fe8e 	uxth.w	lr, lr
 80219ac:	f10e 0b01 	add.w	fp, lr, #1
 80219b0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80219b4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80219b8:	f807 ec05 	strb.w	lr, [r7, #-5]
 80219bc:	78ad      	ldrb	r5, [r5, #2]
 80219be:	78b6      	ldrb	r6, [r6, #2]
 80219c0:	436b      	muls	r3, r5
 80219c2:	7895      	ldrb	r5, [r2, #2]
 80219c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80219c6:	fb0c 3306 	mla	r3, ip, r6, r3
 80219ca:	fb01 3305 	mla	r3, r1, r5, r3
 80219ce:	7885      	ldrb	r5, [r0, #2]
 80219d0:	fb08 3805 	mla	r8, r8, r5, r3
 80219d4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80219d8:	fb13 f302 	smulbb	r3, r3, r2
 80219dc:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80219e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80219e2:	fb08 380a 	mla	r8, r8, sl, r3
 80219e6:	fa1f f888 	uxth.w	r8, r8
 80219ea:	f108 0301 	add.w	r3, r8, #1
 80219ee:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80219f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80219f4:	4413      	add	r3, r2
 80219f6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80219f8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80219fc:	9325      	str	r3, [sp, #148]	; 0x94
 80219fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021a00:	f807 8c04 	strb.w	r8, [r7, #-4]
 8021a04:	4413      	add	r3, r2
 8021a06:	9326      	str	r3, [sp, #152]	; 0x98
 8021a08:	e6d6      	b.n	80217b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021a0a:	b151      	cbz	r1, 8021a22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8021a0c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021a10:	4630      	mov	r0, r6
 8021a12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021a16:	4422      	add	r2, r4
 8021a18:	4635      	mov	r5, r6
 8021a1a:	e772      	b.n	8021902 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021a1c:	4630      	mov	r0, r6
 8021a1e:	4632      	mov	r2, r6
 8021a20:	e76f      	b.n	8021902 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021a22:	4630      	mov	r0, r6
 8021a24:	4632      	mov	r2, r6
 8021a26:	e7f7      	b.n	8021a18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8021a28:	b013      	add	sp, #76	; 0x4c
 8021a2a:	ecbd 8b08 	vpop	{d8-d11}
 8021a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021a34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8021a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a38:	784d      	ldrb	r5, [r1, #1]
 8021a3a:	f891 9002 	ldrb.w	r9, [r1, #2]
 8021a3e:	022d      	lsls	r5, r5, #8
 8021a40:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021a44:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8021a48:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8021a4c:	f891 9000 	ldrb.w	r9, [r1]
 8021a50:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8021a54:	ea45 0509 	orr.w	r5, r5, r9
 8021a58:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021a5c:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8021a60:	9501      	str	r5, [sp, #4]
 8021a62:	fb06 470c 	mla	r7, r6, ip, r4
 8021a66:	2e00      	cmp	r6, #0
 8021a68:	eb02 0e07 	add.w	lr, r2, r7
 8021a6c:	db46      	blt.n	8021afc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8021a6e:	45b0      	cmp	r8, r6
 8021a70:	dd44      	ble.n	8021afc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8021a72:	2c00      	cmp	r4, #0
 8021a74:	db40      	blt.n	8021af8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8021a76:	45a4      	cmp	ip, r4
 8021a78:	dd3e      	ble.n	8021af8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8021a7a:	5dd7      	ldrb	r7, [r2, r7]
 8021a7c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021a80:	441f      	add	r7, r3
 8021a82:	1c62      	adds	r2, r4, #1
 8021a84:	d43d      	bmi.n	8021b02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8021a86:	4594      	cmp	ip, r2
 8021a88:	dd3b      	ble.n	8021b02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8021a8a:	f1ba 0f00 	cmp.w	sl, #0
 8021a8e:	d038      	beq.n	8021b02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8021a90:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8021a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021a98:	441d      	add	r5, r3
 8021a9a:	3601      	adds	r6, #1
 8021a9c:	d435      	bmi.n	8021b0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8021a9e:	45b0      	cmp	r8, r6
 8021aa0:	dd33      	ble.n	8021b0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8021aa2:	b390      	cbz	r0, 8021b0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8021aa4:	2c00      	cmp	r4, #0
 8021aa6:	db2e      	blt.n	8021b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8021aa8:	45a4      	cmp	ip, r4
 8021aaa:	dd2c      	ble.n	8021b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8021aac:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8021ab0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021ab4:	441e      	add	r6, r3
 8021ab6:	1c62      	adds	r2, r4, #1
 8021ab8:	d42a      	bmi.n	8021b10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8021aba:	4594      	cmp	ip, r2
 8021abc:	dd28      	ble.n	8021b10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8021abe:	f1ba 0f00 	cmp.w	sl, #0
 8021ac2:	d025      	beq.n	8021b10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8021ac4:	44f4      	add	ip, lr
 8021ac6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8021aca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021ace:	4413      	add	r3, r2
 8021ad0:	f1ba 0f0f 	cmp.w	sl, #15
 8021ad4:	f897 8000 	ldrb.w	r8, [r7]
 8021ad8:	f895 9000 	ldrb.w	r9, [r5]
 8021adc:	f896 e000 	ldrb.w	lr, [r6]
 8021ae0:	f893 c000 	ldrb.w	ip, [r3]
 8021ae4:	d801      	bhi.n	8021aea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 8021ae6:	280f      	cmp	r0, #15
 8021ae8:	d914      	bls.n	8021b14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8021aea:	4b29      	ldr	r3, [pc, #164]	; (8021b90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8021aec:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8021af0:	4a28      	ldr	r2, [pc, #160]	; (8021b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8021af2:	4829      	ldr	r0, [pc, #164]	; (8021b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8021af4:	f006 fa24 	bl	8027f40 <__assert_func>
 8021af8:	af01      	add	r7, sp, #4
 8021afa:	e7c2      	b.n	8021a82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8021afc:	ad01      	add	r5, sp, #4
 8021afe:	462f      	mov	r7, r5
 8021b00:	e7cb      	b.n	8021a9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8021b02:	ad01      	add	r5, sp, #4
 8021b04:	e7c9      	b.n	8021a9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8021b06:	ae01      	add	r6, sp, #4
 8021b08:	e7d5      	b.n	8021ab6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 8021b0a:	ab01      	add	r3, sp, #4
 8021b0c:	461e      	mov	r6, r3
 8021b0e:	e7df      	b.n	8021ad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8021b10:	ab01      	add	r3, sp, #4
 8021b12:	e7dd      	b.n	8021ad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8021b14:	fa1f f48a 	uxth.w	r4, sl
 8021b18:	b280      	uxth	r0, r0
 8021b1a:	fb04 fa00 	mul.w	sl, r4, r0
 8021b1e:	0124      	lsls	r4, r4, #4
 8021b20:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021b24:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8021b28:	b282      	uxth	r2, r0
 8021b2a:	eba4 000a 	sub.w	r0, r4, sl
 8021b2e:	ebab 0b02 	sub.w	fp, fp, r2
 8021b32:	b280      	uxth	r0, r0
 8021b34:	fa1f fb8b 	uxth.w	fp, fp
 8021b38:	fb00 f909 	mul.w	r9, r0, r9
 8021b3c:	fb0b 9808 	mla	r8, fp, r8, r9
 8021b40:	fb02 8e0e 	mla	lr, r2, lr, r8
 8021b44:	fb0a ec0c 	mla	ip, sl, ip, lr
 8021b48:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021b4c:	f881 c000 	strb.w	ip, [r1]
 8021b50:	786c      	ldrb	r4, [r5, #1]
 8021b52:	f897 c001 	ldrb.w	ip, [r7, #1]
 8021b56:	4344      	muls	r4, r0
 8021b58:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8021b5c:	7874      	ldrb	r4, [r6, #1]
 8021b5e:	fb02 cc04 	mla	ip, r2, r4, ip
 8021b62:	785c      	ldrb	r4, [r3, #1]
 8021b64:	fb0a c404 	mla	r4, sl, r4, ip
 8021b68:	1224      	asrs	r4, r4, #8
 8021b6a:	704c      	strb	r4, [r1, #1]
 8021b6c:	78ad      	ldrb	r5, [r5, #2]
 8021b6e:	78bc      	ldrb	r4, [r7, #2]
 8021b70:	4368      	muls	r0, r5
 8021b72:	fb0b 0b04 	mla	fp, fp, r4, r0
 8021b76:	78b0      	ldrb	r0, [r6, #2]
 8021b78:	fb02 b000 	mla	r0, r2, r0, fp
 8021b7c:	789a      	ldrb	r2, [r3, #2]
 8021b7e:	fb0a 0a02 	mla	sl, sl, r2, r0
 8021b82:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021b86:	f881 a002 	strb.w	sl, [r1, #2]
 8021b8a:	b003      	add	sp, #12
 8021b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b90:	0802cb61 	.word	0x0802cb61
 8021b94:	0802d05e 	.word	0x0802d05e
 8021b98:	0802cc2a 	.word	0x0802cc2a

08021b9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ba0:	ed2d 8b0a 	vpush	{d8-d12}
 8021ba4:	b08d      	sub	sp, #52	; 0x34
 8021ba6:	eeb0 aa40 	vmov.f32	s20, s0
 8021baa:	eef0 9a60 	vmov.f32	s19, s1
 8021bae:	900b      	str	r0, [sp, #44]	; 0x2c
 8021bb0:	eeb0 9a41 	vmov.f32	s18, s2
 8021bb4:	9306      	str	r3, [sp, #24]
 8021bb6:	eeb0 8a62 	vmov.f32	s16, s5
 8021bba:	eef0 8a43 	vmov.f32	s17, s6
 8021bbe:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8021bc0:	eeb0 ca44 	vmov.f32	s24, s8
 8021bc4:	eef0 ba64 	vmov.f32	s23, s9
 8021bc8:	eeb0 ba45 	vmov.f32	s22, s10
 8021bcc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8021bd0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8021bd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021bd6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021bda:	6850      	ldr	r0, [r2, #4]
 8021bdc:	6812      	ldr	r2, [r2, #0]
 8021bde:	fb00 1303 	mla	r3, r0, r3, r1
 8021be2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021be6:	18d3      	adds	r3, r2, r3
 8021be8:	9307      	str	r3, [sp, #28]
 8021bea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021bec:	681b      	ldr	r3, [r3, #0]
 8021bee:	9308      	str	r3, [sp, #32]
 8021bf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021bf2:	685d      	ldr	r5, [r3, #4]
 8021bf4:	3504      	adds	r5, #4
 8021bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bf8:	2b00      	cmp	r3, #0
 8021bfa:	dc03      	bgt.n	8021c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	f340 81e6 	ble.w	8021fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8021c04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c0e:	1e48      	subs	r0, r1, #1
 8021c10:	1e56      	subs	r6, r2, #1
 8021c12:	9b06      	ldr	r3, [sp, #24]
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	f340 80bd 	ble.w	8021d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8021c1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c1c:	1427      	asrs	r7, r4, #16
 8021c1e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021c22:	d406      	bmi.n	8021c32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c24:	4287      	cmp	r7, r0
 8021c26:	da04      	bge.n	8021c32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	db02      	blt.n	8021c32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c2c:	42b3      	cmp	r3, r6
 8021c2e:	f2c0 80b2 	blt.w	8021d96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021c32:	3701      	adds	r7, #1
 8021c34:	f100 80a1 	bmi.w	8021d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8021c38:	42b9      	cmp	r1, r7
 8021c3a:	f2c0 809e 	blt.w	8021d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8021c3e:	3301      	adds	r3, #1
 8021c40:	f100 809b 	bmi.w	8021d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8021c44:	429a      	cmp	r2, r3
 8021c46:	f2c0 8098 	blt.w	8021d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8021c4a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8021c4e:	f1bb 0f00 	cmp.w	fp, #0
 8021c52:	f340 80bf 	ble.w	8021dd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8021c56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021c58:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8021c5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c5c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021c60:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8021c64:	1420      	asrs	r0, r4, #16
 8021c66:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021c68:	ea4f 4723 	mov.w	r7, r3, asr #16
 8021c6c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021c70:	6892      	ldr	r2, [r2, #8]
 8021c72:	f100 8103 	bmi.w	8021e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8021c76:	f102 3eff 	add.w	lr, r2, #4294967295
 8021c7a:	4570      	cmp	r0, lr
 8021c7c:	f280 80fe 	bge.w	8021e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8021c80:	2f00      	cmp	r7, #0
 8021c82:	f2c0 80fb 	blt.w	8021e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8021c86:	f10c 3eff 	add.w	lr, ip, #4294967295
 8021c8a:	4577      	cmp	r7, lr
 8021c8c:	f280 80f6 	bge.w	8021e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8021c90:	b212      	sxth	r2, r2
 8021c92:	fb07 0002 	mla	r0, r7, r2, r0
 8021c96:	9f08      	ldr	r7, [sp, #32]
 8021c98:	f817 8000 	ldrb.w	r8, [r7, r0]
 8021c9c:	eb07 0e00 	add.w	lr, r7, r0
 8021ca0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021ca4:	eb05 0c08 	add.w	ip, r5, r8
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	f000 80d8 	beq.w	8021e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8021cae:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8021cb2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021cb6:	442f      	add	r7, r5
 8021cb8:	2900      	cmp	r1, #0
 8021cba:	f000 80d9 	beq.w	8021e70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8021cbe:	eb0e 0002 	add.w	r0, lr, r2
 8021cc2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8021cc6:	7840      	ldrb	r0, [r0, #1]
 8021cc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021ccc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021cd0:	442a      	add	r2, r5
 8021cd2:	4428      	add	r0, r5
 8021cd4:	b29b      	uxth	r3, r3
 8021cd6:	f815 a008 	ldrb.w	sl, [r5, r8]
 8021cda:	b289      	uxth	r1, r1
 8021cdc:	f897 8000 	ldrb.w	r8, [r7]
 8021ce0:	fb03 f901 	mul.w	r9, r3, r1
 8021ce4:	011b      	lsls	r3, r3, #4
 8021ce6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021cea:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021cee:	eba3 0309 	sub.w	r3, r3, r9
 8021cf2:	b289      	uxth	r1, r1
 8021cf4:	b29b      	uxth	r3, r3
 8021cf6:	ebae 0e01 	sub.w	lr, lr, r1
 8021cfa:	fb03 f808 	mul.w	r8, r3, r8
 8021cfe:	fa1f fe8e 	uxth.w	lr, lr
 8021d02:	fb0e 880a 	mla	r8, lr, sl, r8
 8021d06:	f892 a000 	ldrb.w	sl, [r2]
 8021d0a:	fb01 880a 	mla	r8, r1, sl, r8
 8021d0e:	f890 a000 	ldrb.w	sl, [r0]
 8021d12:	fb09 880a 	mla	r8, r9, sl, r8
 8021d16:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021d1a:	f886 8000 	strb.w	r8, [r6]
 8021d1e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021d22:	f89c a001 	ldrb.w	sl, [ip, #1]
 8021d26:	fb03 f808 	mul.w	r8, r3, r8
 8021d2a:	fb0e 880a 	mla	r8, lr, sl, r8
 8021d2e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8021d32:	fb01 880a 	mla	r8, r1, sl, r8
 8021d36:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021d3a:	fb09 880a 	mla	r8, r9, sl, r8
 8021d3e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021d42:	f886 8001 	strb.w	r8, [r6, #1]
 8021d46:	78bf      	ldrb	r7, [r7, #2]
 8021d48:	f89c c002 	ldrb.w	ip, [ip, #2]
 8021d4c:	437b      	muls	r3, r7
 8021d4e:	7892      	ldrb	r2, [r2, #2]
 8021d50:	fb0e 330c 	mla	r3, lr, ip, r3
 8021d54:	fb01 3102 	mla	r1, r1, r2, r3
 8021d58:	7882      	ldrb	r2, [r0, #2]
 8021d5a:	fb09 1902 	mla	r9, r9, r2, r1
 8021d5e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021d62:	f886 9002 	strb.w	r9, [r6, #2]
 8021d66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021d68:	3603      	adds	r6, #3
 8021d6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021d6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021d70:	441c      	add	r4, r3
 8021d72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021d74:	4413      	add	r3, r2
 8021d76:	9322      	str	r3, [sp, #136]	; 0x88
 8021d78:	e769      	b.n	8021c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021d7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021d7c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8021d7e:	441c      	add	r4, r3
 8021d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021d82:	443b      	add	r3, r7
 8021d84:	9322      	str	r3, [sp, #136]	; 0x88
 8021d86:	9b06      	ldr	r3, [sp, #24]
 8021d88:	3b01      	subs	r3, #1
 8021d8a:	9306      	str	r3, [sp, #24]
 8021d8c:	9b07      	ldr	r3, [sp, #28]
 8021d8e:	3303      	adds	r3, #3
 8021d90:	9307      	str	r3, [sp, #28]
 8021d92:	e73e      	b.n	8021c12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021d94:	d026      	beq.n	8021de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8021d96:	9b06      	ldr	r3, [sp, #24]
 8021d98:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021d9a:	3b01      	subs	r3, #1
 8021d9c:	fb00 4003 	mla	r0, r0, r3, r4
 8021da0:	1400      	asrs	r0, r0, #16
 8021da2:	f53f af52 	bmi.w	8021c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8021da6:	3901      	subs	r1, #1
 8021da8:	4288      	cmp	r0, r1
 8021daa:	f6bf af4e 	bge.w	8021c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8021dae:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021db0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021db2:	fb01 0303 	mla	r3, r1, r3, r0
 8021db6:	141b      	asrs	r3, r3, #16
 8021db8:	f53f af47 	bmi.w	8021c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8021dbc:	3a01      	subs	r2, #1
 8021dbe:	4293      	cmp	r3, r2
 8021dc0:	f6bf af43 	bge.w	8021c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8021dc4:	9b07      	ldr	r3, [sp, #28]
 8021dc6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8021dca:	f103 0803 	add.w	r8, r3, #3
 8021dce:	f1ba 0f00 	cmp.w	sl, #0
 8021dd2:	dc71      	bgt.n	8021eb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021dd4:	9b06      	ldr	r3, [sp, #24]
 8021dd6:	9a07      	ldr	r2, [sp, #28]
 8021dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021ddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021de0:	441a      	add	r2, r3
 8021de2:	9207      	str	r2, [sp, #28]
 8021de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	f340 80f2 	ble.w	8021fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8021dec:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021df0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021df2:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021df6:	eef0 6a48 	vmov.f32	s13, s16
 8021dfa:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021dfe:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021e02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e06:	ee16 4a90 	vmov	r4, s13
 8021e0a:	eef0 6a68 	vmov.f32	s13, s17
 8021e0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e12:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8021e16:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021e1a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021e1e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021e22:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021e26:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021e2a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021e2e:	ee18 2a10 	vmov	r2, s16
 8021e32:	eeb0 8a47 	vmov.f32	s16, s14
 8021e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e3a:	ee18 2a90 	vmov	r2, s17
 8021e3e:	9323      	str	r3, [sp, #140]	; 0x8c
 8021e40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021e42:	eef0 8a67 	vmov.f32	s17, s15
 8021e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e4a:	9324      	str	r3, [sp, #144]	; 0x90
 8021e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e50:	3b01      	subs	r3, #1
 8021e52:	9309      	str	r3, [sp, #36]	; 0x24
 8021e54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021e56:	bf08      	it	eq
 8021e58:	4613      	moveq	r3, r2
 8021e5a:	9306      	str	r3, [sp, #24]
 8021e5c:	e6cb      	b.n	8021bf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021e5e:	b151      	cbz	r1, 8021e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021e60:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8021e64:	4660      	mov	r0, ip
 8021e66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021e6a:	442a      	add	r2, r5
 8021e6c:	4667      	mov	r7, ip
 8021e6e:	e731      	b.n	8021cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021e70:	4660      	mov	r0, ip
 8021e72:	4662      	mov	r2, ip
 8021e74:	e72e      	b.n	8021cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021e76:	4660      	mov	r0, ip
 8021e78:	4662      	mov	r2, ip
 8021e7a:	e7f7      	b.n	8021e6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8021e7c:	f110 0e01 	adds.w	lr, r0, #1
 8021e80:	f53f af71 	bmi.w	8021d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8021e84:	4572      	cmp	r2, lr
 8021e86:	f6ff af6e 	blt.w	8021d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8021e8a:	f117 0e01 	adds.w	lr, r7, #1
 8021e8e:	f53f af6a 	bmi.w	8021d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8021e92:	45f4      	cmp	ip, lr
 8021e94:	f6ff af67 	blt.w	8021d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8021e98:	b212      	sxth	r2, r2
 8021e9a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8021e9e:	fa0f f38c 	sxth.w	r3, ip
 8021ea2:	9200      	str	r2, [sp, #0]
 8021ea4:	4631      	mov	r1, r6
 8021ea6:	9a08      	ldr	r2, [sp, #32]
 8021ea8:	9301      	str	r3, [sp, #4]
 8021eaa:	462b      	mov	r3, r5
 8021eac:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8021eb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021eb2:	f7ff fdbf 	bl	8021a34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8021eb6:	e756      	b.n	8021d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8021eb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021eba:	1426      	asrs	r6, r4, #16
 8021ebc:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021ebe:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021ec2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021ec6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021ec8:	1400      	asrs	r0, r0, #16
 8021eca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021ece:	fb02 6000 	mla	r0, r2, r0, r6
 8021ed2:	9e08      	ldr	r6, [sp, #32]
 8021ed4:	f816 e000 	ldrb.w	lr, [r6, r0]
 8021ed8:	eb06 0c00 	add.w	ip, r6, r0
 8021edc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021ee0:	eb05 070e 	add.w	r7, r5, lr
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	d064      	beq.n	8021fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8021ee8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8021eec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021ef0:	442e      	add	r6, r5
 8021ef2:	2900      	cmp	r1, #0
 8021ef4:	d066      	beq.n	8021fc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021ef6:	eb0c 0002 	add.w	r0, ip, r2
 8021efa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021efe:	7840      	ldrb	r0, [r0, #1]
 8021f00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021f04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021f08:	442a      	add	r2, r5
 8021f0a:	4428      	add	r0, r5
 8021f0c:	b29b      	uxth	r3, r3
 8021f0e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8021f12:	b289      	uxth	r1, r1
 8021f14:	f896 e000 	ldrb.w	lr, [r6]
 8021f18:	f108 0803 	add.w	r8, r8, #3
 8021f1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021f20:	fb03 f901 	mul.w	r9, r3, r1
 8021f24:	011b      	lsls	r3, r3, #4
 8021f26:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021f2a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8021f2e:	eba3 0309 	sub.w	r3, r3, r9
 8021f32:	b289      	uxth	r1, r1
 8021f34:	b29b      	uxth	r3, r3
 8021f36:	ebac 0c01 	sub.w	ip, ip, r1
 8021f3a:	fb03 fe0e 	mul.w	lr, r3, lr
 8021f3e:	fa1f fc8c 	uxth.w	ip, ip
 8021f42:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021f46:	f892 b000 	ldrb.w	fp, [r2]
 8021f4a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021f4e:	f890 b000 	ldrb.w	fp, [r0]
 8021f52:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021f56:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021f5a:	f808 ec06 	strb.w	lr, [r8, #-6]
 8021f5e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8021f62:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021f66:	fb03 fe0e 	mul.w	lr, r3, lr
 8021f6a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021f6e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021f72:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021f76:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021f7a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021f7e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021f82:	f808 ec05 	strb.w	lr, [r8, #-5]
 8021f86:	78b6      	ldrb	r6, [r6, #2]
 8021f88:	78bf      	ldrb	r7, [r7, #2]
 8021f8a:	4373      	muls	r3, r6
 8021f8c:	7896      	ldrb	r6, [r2, #2]
 8021f8e:	7882      	ldrb	r2, [r0, #2]
 8021f90:	fb0c 3307 	mla	r3, ip, r7, r3
 8021f94:	fb01 3306 	mla	r3, r1, r6, r3
 8021f98:	fb09 3902 	mla	r9, r9, r2, r3
 8021f9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021f9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021fa0:	441c      	add	r4, r3
 8021fa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021fa4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021fa8:	4413      	add	r3, r2
 8021faa:	f808 9c04 	strb.w	r9, [r8, #-4]
 8021fae:	9322      	str	r3, [sp, #136]	; 0x88
 8021fb0:	e70d      	b.n	8021dce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8021fb2:	b151      	cbz	r1, 8021fca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8021fb4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021fb8:	4638      	mov	r0, r7
 8021fba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021fbe:	442a      	add	r2, r5
 8021fc0:	463e      	mov	r6, r7
 8021fc2:	e7a3      	b.n	8021f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021fc4:	4638      	mov	r0, r7
 8021fc6:	463a      	mov	r2, r7
 8021fc8:	e7a0      	b.n	8021f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021fca:	4638      	mov	r0, r7
 8021fcc:	463a      	mov	r2, r7
 8021fce:	e7f7      	b.n	8021fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8021fd0:	b00d      	add	sp, #52	; 0x34
 8021fd2:	ecbd 8b0a 	vpop	{d8-d12}
 8021fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021fdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8021fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fe0:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8021fe4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021fe8:	2d00      	cmp	r5, #0
 8021fea:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8021fee:	fb05 040e 	mla	r4, r5, lr, r0
 8021ff2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8021ff6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8021ffa:	eb02 0804 	add.w	r8, r2, r4
 8021ffe:	db40      	blt.n	8022082 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8022000:	45a9      	cmp	r9, r5
 8022002:	dd3e      	ble.n	8022082 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8022004:	2800      	cmp	r0, #0
 8022006:	db3a      	blt.n	802207e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8022008:	4586      	cmp	lr, r0
 802200a:	dd38      	ble.n	802207e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 802200c:	5d12      	ldrb	r2, [r2, r4]
 802200e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022012:	1c42      	adds	r2, r0, #1
 8022014:	d438      	bmi.n	8022088 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8022016:	4596      	cmp	lr, r2
 8022018:	dd36      	ble.n	8022088 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 802201a:	b3bf      	cbz	r7, 802208c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 802201c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022020:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022024:	3501      	adds	r5, #1
 8022026:	d435      	bmi.n	8022094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8022028:	45a9      	cmp	r9, r5
 802202a:	dd33      	ble.n	8022094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 802202c:	f1bc 0f00 	cmp.w	ip, #0
 8022030:	d033      	beq.n	802209a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8022032:	2800      	cmp	r0, #0
 8022034:	db2c      	blt.n	8022090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8022036:	4586      	cmp	lr, r0
 8022038:	dd2a      	ble.n	8022090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 802203a:	f818 200e 	ldrb.w	r2, [r8, lr]
 802203e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022042:	3001      	adds	r0, #1
 8022044:	d42c      	bmi.n	80220a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8022046:	4586      	cmp	lr, r0
 8022048:	dd2a      	ble.n	80220a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 802204a:	b35f      	cbz	r7, 80220a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 802204c:	44c6      	add	lr, r8
 802204e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022056:	2f0f      	cmp	r7, #15
 8022058:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802205c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8022060:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022064:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022068:	d802      	bhi.n	8022070 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 802206a:	f1bc 0f0f 	cmp.w	ip, #15
 802206e:	d91b      	bls.n	80220a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8022070:	4b77      	ldr	r3, [pc, #476]	; (8022250 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8022072:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8022076:	4a77      	ldr	r2, [pc, #476]	; (8022254 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8022078:	4877      	ldr	r0, [pc, #476]	; (8022258 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 802207a:	f005 ff61 	bl	8027f40 <__assert_func>
 802207e:	2600      	movs	r6, #0
 8022080:	e7c7      	b.n	8022012 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8022082:	2400      	movs	r4, #0
 8022084:	4626      	mov	r6, r4
 8022086:	e7cd      	b.n	8022024 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8022088:	2400      	movs	r4, #0
 802208a:	e7cb      	b.n	8022024 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 802208c:	463c      	mov	r4, r7
 802208e:	e7c9      	b.n	8022024 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8022090:	2500      	movs	r5, #0
 8022092:	e7d6      	b.n	8022042 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8022094:	2200      	movs	r2, #0
 8022096:	4615      	mov	r5, r2
 8022098:	e7dd      	b.n	8022056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 802209a:	4662      	mov	r2, ip
 802209c:	4665      	mov	r5, ip
 802209e:	e7da      	b.n	8022056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80220a0:	2200      	movs	r2, #0
 80220a2:	e7d8      	b.n	8022056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80220a4:	463a      	mov	r2, r7
 80220a6:	e7d6      	b.n	8022056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80220a8:	b2bf      	uxth	r7, r7
 80220aa:	fa1f f08c 	uxth.w	r0, ip
 80220ae:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 80220b2:	fb00 fe07 	mul.w	lr, r0, r7
 80220b6:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80220ba:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80220be:	ebac 070e 	sub.w	r7, ip, lr
 80220c2:	b280      	uxth	r0, r0
 80220c4:	b2bf      	uxth	r7, r7
 80220c6:	1a1b      	subs	r3, r3, r0
 80220c8:	fb07 fc0a 	mul.w	ip, r7, sl
 80220cc:	b29b      	uxth	r3, r3
 80220ce:	fb03 cc0b 	mla	ip, r3, fp, ip
 80220d2:	9300      	str	r3, [sp, #0]
 80220d4:	fb00 cc09 	mla	ip, r0, r9, ip
 80220d8:	fb0e cc08 	mla	ip, lr, r8, ip
 80220dc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80220e0:	9301      	str	r3, [sp, #4]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	f000 80b0 	beq.w	8022248 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 80220e8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80220ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80220f0:	fb0b fc0c 	mul.w	ip, fp, ip
 80220f4:	fb0b f606 	mul.w	r6, fp, r6
 80220f8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80220fc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022100:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022104:	44dc      	add	ip, fp
 8022106:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802210a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802210e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022112:	fb0a fb0b 	mul.w	fp, sl, fp
 8022116:	fb0a fa04 	mul.w	sl, sl, r4
 802211a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 802211e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022122:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8022126:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802212a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802212e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022132:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8022136:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802213a:	0a36      	lsrs	r6, r6, #8
 802213c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022140:	44dc      	add	ip, fp
 8022142:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022146:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802214a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802214e:	fb09 fb0b 	mul.w	fp, r9, fp
 8022152:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022156:	fb09 f905 	mul.w	r9, r9, r5
 802215a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802215e:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8022162:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022166:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802216a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802216e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022172:	fb0c fc07 	mul.w	ip, ip, r7
 8022176:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802217a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802217e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022182:	445c      	add	r4, fp
 8022184:	fb08 f505 	mul.w	r5, r8, r5
 8022188:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802218c:	fb08 f802 	mul.w	r8, r8, r2
 8022190:	0a24      	lsrs	r4, r4, #8
 8022192:	0a2a      	lsrs	r2, r5, #8
 8022194:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8022198:	fb07 f70a 	mul.w	r7, r7, sl
 802219c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80221a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80221a4:	4415      	add	r5, r2
 80221a6:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80221aa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80221ae:	9a00      	ldr	r2, [sp, #0]
 80221b0:	0a2d      	lsrs	r5, r5, #8
 80221b2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80221b6:	fb03 cc02 	mla	ip, r3, r2, ip
 80221ba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80221be:	fb02 7306 	mla	r3, r2, r6, r7
 80221c2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80221c6:	9a01      	ldr	r2, [sp, #4]
 80221c8:	fb05 c50e 	mla	r5, r5, lr, ip
 80221cc:	fb0e 3e08 	mla	lr, lr, r8, r3
 80221d0:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 80221d4:	fb04 5400 	mla	r4, r4, r0, r5
 80221d8:	fb00 e303 	mla	r3, r0, r3, lr
 80221dc:	0a24      	lsrs	r4, r4, #8
 80221de:	0a1b      	lsrs	r3, r3, #8
 80221e0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80221e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221e8:	431c      	orrs	r4, r3
 80221ea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80221ee:	b29b      	uxth	r3, r3
 80221f0:	b2e0      	uxtb	r0, r4
 80221f2:	435a      	muls	r2, r3
 80221f4:	fb10 f003 	smulbb	r0, r0, r3
 80221f8:	1c55      	adds	r5, r2, #1
 80221fa:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 80221fe:	780a      	ldrb	r2, [r1, #0]
 8022200:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8022204:	b2ed      	uxtb	r5, r5
 8022206:	fb02 0205 	mla	r2, r2, r5, r0
 802220a:	b292      	uxth	r2, r2
 802220c:	1c50      	adds	r0, r2, #1
 802220e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022212:	7848      	ldrb	r0, [r1, #1]
 8022214:	fb10 f005 	smulbb	r0, r0, r5
 8022218:	1212      	asrs	r2, r2, #8
 802221a:	700a      	strb	r2, [r1, #0]
 802221c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022220:	0c24      	lsrs	r4, r4, #16
 8022222:	fb02 0203 	mla	r2, r2, r3, r0
 8022226:	b292      	uxth	r2, r2
 8022228:	1c50      	adds	r0, r2, #1
 802222a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802222e:	1212      	asrs	r2, r2, #8
 8022230:	704a      	strb	r2, [r1, #1]
 8022232:	788a      	ldrb	r2, [r1, #2]
 8022234:	fb12 f505 	smulbb	r5, r2, r5
 8022238:	fb04 5303 	mla	r3, r4, r3, r5
 802223c:	b29b      	uxth	r3, r3
 802223e:	1c5a      	adds	r2, r3, #1
 8022240:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022244:	121b      	asrs	r3, r3, #8
 8022246:	708b      	strb	r3, [r1, #2]
 8022248:	b003      	add	sp, #12
 802224a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802224e:	bf00      	nop
 8022250:	0802cb61 	.word	0x0802cb61
 8022254:	0802d05e 	.word	0x0802d05e
 8022258:	0802cc2a 	.word	0x0802cc2a

0802225c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022260:	ed2d 8b08 	vpush	{d8-d11}
 8022264:	b09f      	sub	sp, #124	; 0x7c
 8022266:	eeb0 aa40 	vmov.f32	s20, s0
 802226a:	eef0 9a60 	vmov.f32	s19, s1
 802226e:	921b      	str	r2, [sp, #108]	; 0x6c
 8022270:	eeb0 9a41 	vmov.f32	s18, s2
 8022274:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8022276:	eeb0 8a62 	vmov.f32	s16, s5
 802227a:	9309      	str	r3, [sp, #36]	; 0x24
 802227c:	eef0 8a43 	vmov.f32	s17, s6
 8022280:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8022284:	eef0 ba44 	vmov.f32	s23, s8
 8022288:	901d      	str	r0, [sp, #116]	; 0x74
 802228a:	eeb0 ba64 	vmov.f32	s22, s9
 802228e:	931c      	str	r3, [sp, #112]	; 0x70
 8022290:	eef0 aa45 	vmov.f32	s21, s10
 8022294:	6850      	ldr	r0, [r2, #4]
 8022296:	9119      	str	r1, [sp, #100]	; 0x64
 8022298:	6812      	ldr	r2, [r2, #0]
 802229a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 802229c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80222a0:	fb00 1303 	mla	r3, r0, r3, r1
 80222a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222a8:	18d3      	adds	r3, r2, r3
 80222aa:	930c      	str	r3, [sp, #48]	; 0x30
 80222ac:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80222ae:	681b      	ldr	r3, [r3, #0]
 80222b0:	9312      	str	r3, [sp, #72]	; 0x48
 80222b2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80222b4:	685e      	ldr	r6, [r3, #4]
 80222b6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80222ba:	3604      	adds	r6, #4
 80222bc:	930d      	str	r3, [sp, #52]	; 0x34
 80222be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	dc03      	bgt.n	80222cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80222c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	f340 8378 	ble.w	80229bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80222cc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80222ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80222d6:	1e48      	subs	r0, r1, #1
 80222d8:	1e57      	subs	r7, r2, #1
 80222da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222dc:	2b00      	cmp	r3, #0
 80222de:	f340 818c 	ble.w	80225fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80222e2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80222e4:	142b      	asrs	r3, r5, #16
 80222e6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80222ea:	d406      	bmi.n	80222fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80222ec:	4584      	cmp	ip, r0
 80222ee:	da04      	bge.n	80222fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	db02      	blt.n	80222fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80222f4:	42bb      	cmp	r3, r7
 80222f6:	f2c0 8181 	blt.w	80225fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 80222fa:	f11c 0c01 	adds.w	ip, ip, #1
 80222fe:	f100 816f 	bmi.w	80225e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022302:	4561      	cmp	r1, ip
 8022304:	f2c0 816c 	blt.w	80225e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022308:	3301      	adds	r3, #1
 802230a:	f100 8169 	bmi.w	80225e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802230e:	429a      	cmp	r2, r3
 8022310:	f2c0 8166 	blt.w	80225e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022316:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022318:	931a      	str	r3, [sp, #104]	; 0x68
 802231a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802231c:	2b00      	cmp	r3, #0
 802231e:	f340 818c 	ble.w	802263a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8022322:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022324:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022328:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802232c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022330:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022332:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8022336:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022338:	141b      	asrs	r3, r3, #16
 802233a:	f100 81d0 	bmi.w	80226de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802233e:	f100 38ff 	add.w	r8, r0, #4294967295
 8022342:	4543      	cmp	r3, r8
 8022344:	f280 81cb 	bge.w	80226de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8022348:	f1bc 0f00 	cmp.w	ip, #0
 802234c:	f2c0 81c7 	blt.w	80226de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8022350:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022354:	45c4      	cmp	ip, r8
 8022356:	f280 81c2 	bge.w	80226de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802235a:	b200      	sxth	r0, r0
 802235c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802235e:	fb0c 3300 	mla	r3, ip, r0, r3
 8022362:	eb04 0803 	add.w	r8, r4, r3
 8022366:	5ce3      	ldrb	r3, [r4, r3]
 8022368:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802236c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022370:	2a00      	cmp	r2, #0
 8022372:	f000 81a9 	beq.w	80226c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8022376:	f898 c001 	ldrb.w	ip, [r8, #1]
 802237a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802237e:	940e      	str	r4, [sp, #56]	; 0x38
 8022380:	0e24      	lsrs	r4, r4, #24
 8022382:	9415      	str	r4, [sp, #84]	; 0x54
 8022384:	b179      	cbz	r1, 80223a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8022386:	eb08 0c00 	add.w	ip, r8, r0
 802238a:	f818 0000 	ldrb.w	r0, [r8, r0]
 802238e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8022392:	900a      	str	r0, [sp, #40]	; 0x28
 8022394:	0e00      	lsrs	r0, r0, #24
 8022396:	9013      	str	r0, [sp, #76]	; 0x4c
 8022398:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802239c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80223a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80223a2:	0e00      	lsrs	r0, r0, #24
 80223a4:	9016      	str	r0, [sp, #88]	; 0x58
 80223a6:	b292      	uxth	r2, r2
 80223a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80223aa:	b289      	uxth	r1, r1
 80223ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80223ae:	fb02 f901 	mul.w	r9, r2, r1
 80223b2:	0112      	lsls	r2, r2, #4
 80223b4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80223b8:	eba2 0809 	sub.w	r8, r2, r9
 80223bc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80223c0:	b289      	uxth	r1, r1
 80223c2:	fa1f f888 	uxth.w	r8, r8
 80223c6:	1a52      	subs	r2, r2, r1
 80223c8:	fb08 f000 	mul.w	r0, r8, r0
 80223cc:	b292      	uxth	r2, r2
 80223ce:	fb02 000e 	mla	r0, r2, lr, r0
 80223d2:	fb01 0004 	mla	r0, r1, r4, r0
 80223d6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80223d8:	fb09 0004 	mla	r0, r9, r4, r0
 80223dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80223e0:	2800      	cmp	r0, #0
 80223e2:	f000 80f2 	beq.w	80225ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80223e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80223ea:	d01b      	beq.n	8022424 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80223ec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80223f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223f4:	fb0e fa0a 	mul.w	sl, lr, sl
 80223f8:	fb0e fe03 	mul.w	lr, lr, r3
 80223fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022400:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022404:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022408:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802240c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022410:	4453      	add	r3, sl
 8022412:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022416:	0a1b      	lsrs	r3, r3, #8
 8022418:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802241c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022420:	ea43 030c 	orr.w	r3, r3, ip
 8022424:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022426:	2cff      	cmp	r4, #255	; 0xff
 8022428:	d021      	beq.n	802246e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802242a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802242c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022430:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022432:	fb04 fb0b 	mul.w	fp, r4, fp
 8022436:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022438:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802243c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802243e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022442:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022446:	fb04 fa0a 	mul.w	sl, r4, sl
 802244a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802244e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022452:	44de      	add	lr, fp
 8022454:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022458:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802245c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022460:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022464:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022468:	ea4e 040a 	orr.w	r4, lr, sl
 802246c:	940e      	str	r4, [sp, #56]	; 0x38
 802246e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022470:	2cff      	cmp	r4, #255	; 0xff
 8022472:	d021      	beq.n	80224b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8022474:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022476:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802247a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802247c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022480:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022482:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022486:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022488:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802248c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022490:	fb04 fa0a 	mul.w	sl, r4, sl
 8022494:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022498:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802249c:	44de      	add	lr, fp
 802249e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80224a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80224aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80224b2:	ea4e 040a 	orr.w	r4, lr, sl
 80224b6:	940a      	str	r4, [sp, #40]	; 0x28
 80224b8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80224ba:	2cff      	cmp	r4, #255	; 0xff
 80224bc:	d021      	beq.n	8022502 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80224be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80224c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80224c4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80224c6:	fb04 fb0b 	mul.w	fp, r4, fp
 80224ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80224cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80224d0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80224d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80224d6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80224da:	fb04 fa0a 	mul.w	sl, r4, sl
 80224de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80224e6:	44de      	add	lr, fp
 80224e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80224ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80224f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80224fc:	ea4e 040a 	orr.w	r4, lr, sl
 8022500:	940f      	str	r4, [sp, #60]	; 0x3c
 8022502:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022504:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022508:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802250c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022510:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022512:	fb08 fc0c 	mul.w	ip, r8, ip
 8022516:	fb02 cc0e 	mla	ip, r2, lr, ip
 802251a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802251e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022520:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022524:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022528:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802252a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802252e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022532:	fb08 f80e 	mul.w	r8, r8, lr
 8022536:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802253a:	fb02 8303 	mla	r3, r2, r3, r8
 802253e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022540:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022544:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802254a:	fb01 330a 	mla	r3, r1, sl, r3
 802254e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022552:	fb09 3901 	mla	r9, r9, r1, r3
 8022556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022558:	990d      	ldr	r1, [sp, #52]	; 0x34
 802255a:	4343      	muls	r3, r0
 802255c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022560:	1c58      	adds	r0, r3, #1
 8022562:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022566:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802256a:	ea4c 0c09 	orr.w	ip, ip, r9
 802256e:	783b      	ldrb	r3, [r7, #0]
 8022570:	fa5f f28c 	uxtb.w	r2, ip
 8022574:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022578:	fb12 f201 	smulbb	r2, r2, r1
 802257c:	b2c0      	uxtb	r0, r0
 802257e:	fb03 2300 	mla	r3, r3, r0, r2
 8022582:	b29b      	uxth	r3, r3
 8022584:	1c5a      	adds	r2, r3, #1
 8022586:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802258a:	787a      	ldrb	r2, [r7, #1]
 802258c:	fb12 f200 	smulbb	r2, r2, r0
 8022590:	121b      	asrs	r3, r3, #8
 8022592:	703b      	strb	r3, [r7, #0]
 8022594:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022598:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802259c:	fb03 2301 	mla	r3, r3, r1, r2
 80225a0:	b29b      	uxth	r3, r3
 80225a2:	1c5a      	adds	r2, r3, #1
 80225a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80225a8:	121b      	asrs	r3, r3, #8
 80225aa:	707b      	strb	r3, [r7, #1]
 80225ac:	78bb      	ldrb	r3, [r7, #2]
 80225ae:	fb13 f000 	smulbb	r0, r3, r0
 80225b2:	fb0c 0c01 	mla	ip, ip, r1, r0
 80225b6:	fa1f fc8c 	uxth.w	ip, ip
 80225ba:	f10c 0301 	add.w	r3, ip, #1
 80225be:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80225c2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80225c6:	f887 c002 	strb.w	ip, [r7, #2]
 80225ca:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80225cc:	3703      	adds	r7, #3
 80225ce:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80225d0:	441a      	add	r2, r3
 80225d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80225d4:	441d      	add	r5, r3
 80225d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80225d8:	9231      	str	r2, [sp, #196]	; 0xc4
 80225da:	3b01      	subs	r3, #1
 80225dc:	931a      	str	r3, [sp, #104]	; 0x68
 80225de:	e69c      	b.n	802231a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80225e0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80225e2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80225e4:	441c      	add	r4, r3
 80225e6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80225e8:	441d      	add	r5, r3
 80225ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225ec:	9431      	str	r4, [sp, #196]	; 0xc4
 80225ee:	3b01      	subs	r3, #1
 80225f0:	9309      	str	r3, [sp, #36]	; 0x24
 80225f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225f4:	3303      	adds	r3, #3
 80225f6:	930c      	str	r3, [sp, #48]	; 0x30
 80225f8:	e66f      	b.n	80222da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80225fa:	d026      	beq.n	802264a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80225fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225fe:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8022600:	3b01      	subs	r3, #1
 8022602:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8022604:	fb00 4003 	mla	r0, r0, r3, r4
 8022608:	1400      	asrs	r0, r0, #16
 802260a:	f53f ae83 	bmi.w	8022314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802260e:	3901      	subs	r1, #1
 8022610:	4288      	cmp	r0, r1
 8022612:	f6bf ae7f 	bge.w	8022314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022616:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8022618:	fb01 5303 	mla	r3, r1, r3, r5
 802261c:	141b      	asrs	r3, r3, #16
 802261e:	f53f ae79 	bmi.w	8022314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022622:	3a01      	subs	r2, #1
 8022624:	4293      	cmp	r3, r2
 8022626:	f6bf ae75 	bge.w	8022314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802262a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802262c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022630:	f103 0e03 	add.w	lr, r3, #3
 8022634:	f1bb 0f00 	cmp.w	fp, #0
 8022638:	dc71      	bgt.n	802271e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802263a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802263c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022642:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022646:	4423      	add	r3, r4
 8022648:	930c      	str	r3, [sp, #48]	; 0x30
 802264a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802264c:	2b00      	cmp	r3, #0
 802264e:	f340 81b5 	ble.w	80229bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8022652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022656:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022658:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802265c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022660:	eef0 6a48 	vmov.f32	s13, s16
 8022664:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022668:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802266c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022670:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8022674:	eef0 6a68 	vmov.f32	s13, s17
 8022678:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802267c:	ee16 5a90 	vmov	r5, s13
 8022680:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022684:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022688:	ee37 8a48 	vsub.f32	s16, s14, s16
 802268c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022690:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022694:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022698:	ee18 2a10 	vmov	r2, s16
 802269c:	eeb0 8a47 	vmov.f32	s16, s14
 80226a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80226a4:	ee18 2a90 	vmov	r2, s17
 80226a8:	9333      	str	r3, [sp, #204]	; 0xcc
 80226aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80226ac:	eef0 8a67 	vmov.f32	s17, s15
 80226b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80226b4:	9334      	str	r3, [sp, #208]	; 0xd0
 80226b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80226b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80226ba:	3b01      	subs	r3, #1
 80226bc:	9319      	str	r3, [sp, #100]	; 0x64
 80226be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80226c0:	bf08      	it	eq
 80226c2:	4613      	moveq	r3, r2
 80226c4:	9309      	str	r3, [sp, #36]	; 0x24
 80226c6:	e5fa      	b.n	80222be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80226c8:	2900      	cmp	r1, #0
 80226ca:	f43f ae6c 	beq.w	80223a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80226ce:	f818 0000 	ldrb.w	r0, [r8, r0]
 80226d2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80226d6:	900a      	str	r0, [sp, #40]	; 0x28
 80226d8:	0e00      	lsrs	r0, r0, #24
 80226da:	9013      	str	r0, [sp, #76]	; 0x4c
 80226dc:	e663      	b.n	80223a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80226de:	f113 0801 	adds.w	r8, r3, #1
 80226e2:	f53f af72 	bmi.w	80225ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80226e6:	4540      	cmp	r0, r8
 80226e8:	f6ff af6f 	blt.w	80225ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80226ec:	f11c 0801 	adds.w	r8, ip, #1
 80226f0:	f53f af6b 	bmi.w	80225ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80226f4:	45c6      	cmp	lr, r8
 80226f6:	f6ff af68 	blt.w	80225ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80226fa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80226fc:	b200      	sxth	r0, r0
 80226fe:	9302      	str	r3, [sp, #8]
 8022700:	fa0f f38e 	sxth.w	r3, lr
 8022704:	9000      	str	r0, [sp, #0]
 8022706:	9301      	str	r3, [sp, #4]
 8022708:	4633      	mov	r3, r6
 802270a:	981d      	ldr	r0, [sp, #116]	; 0x74
 802270c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022710:	e9cd c203 	strd	ip, r2, [sp, #12]
 8022714:	4639      	mov	r1, r7
 8022716:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022718:	f7ff fc60 	bl	8021fdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802271c:	e755      	b.n	80225ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802271e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022720:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022724:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8022726:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802272a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802272c:	1427      	asrs	r7, r4, #16
 802272e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022730:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022734:	142b      	asrs	r3, r5, #16
 8022736:	fb01 7303 	mla	r3, r1, r3, r7
 802273a:	18e7      	adds	r7, r4, r3
 802273c:	5ce3      	ldrb	r3, [r4, r3]
 802273e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022742:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022746:	2a00      	cmp	r2, #0
 8022748:	f000 812e 	beq.w	80229a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 802274c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022750:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8022754:	9410      	str	r4, [sp, #64]	; 0x40
 8022756:	0e24      	lsrs	r4, r4, #24
 8022758:	9417      	str	r4, [sp, #92]	; 0x5c
 802275a:	b170      	cbz	r0, 802277a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802275c:	eb07 0801 	add.w	r8, r7, r1
 8022760:	5c79      	ldrb	r1, [r7, r1]
 8022762:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022766:	910b      	str	r1, [sp, #44]	; 0x2c
 8022768:	0e09      	lsrs	r1, r1, #24
 802276a:	9114      	str	r1, [sp, #80]	; 0x50
 802276c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022770:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022774:	9111      	str	r1, [sp, #68]	; 0x44
 8022776:	0e09      	lsrs	r1, r1, #24
 8022778:	9118      	str	r1, [sp, #96]	; 0x60
 802277a:	b292      	uxth	r2, r2
 802277c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802277e:	b280      	uxth	r0, r0
 8022780:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022782:	fb02 f900 	mul.w	r9, r2, r0
 8022786:	0112      	lsls	r2, r2, #4
 8022788:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802278c:	eba2 0809 	sub.w	r8, r2, r9
 8022790:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022794:	b280      	uxth	r0, r0
 8022796:	fa1f f888 	uxth.w	r8, r8
 802279a:	1a12      	subs	r2, r2, r0
 802279c:	fb08 f101 	mul.w	r1, r8, r1
 80227a0:	b292      	uxth	r2, r2
 80227a2:	fb02 110c 	mla	r1, r2, ip, r1
 80227a6:	fb00 1104 	mla	r1, r0, r4, r1
 80227aa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80227ac:	fb09 1104 	mla	r1, r9, r4, r1
 80227b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80227b4:	2900      	cmp	r1, #0
 80227b6:	f000 80ec 	beq.w	8022992 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 80227ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80227be:	d019      	beq.n	80227f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 80227c0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80227c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227c8:	fb0c fa0a 	mul.w	sl, ip, sl
 80227cc:	fb0c fc03 	mul.w	ip, ip, r3
 80227d0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80227d4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80227d8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80227dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227e0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80227e4:	4453      	add	r3, sl
 80227e6:	0a3f      	lsrs	r7, r7, #8
 80227e8:	0a1b      	lsrs	r3, r3, #8
 80227ea:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80227ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227f2:	433b      	orrs	r3, r7
 80227f4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80227f6:	2cff      	cmp	r4, #255	; 0xff
 80227f8:	d020      	beq.n	802283c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80227fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80227fc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022800:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022802:	4367      	muls	r7, r4
 8022804:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022806:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802280a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802280e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022810:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022814:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022818:	fb04 fa0a 	mul.w	sl, r4, sl
 802281c:	44bc      	add	ip, r7
 802281e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022822:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022826:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802282a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802282e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022832:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022836:	ea4c 040a 	orr.w	r4, ip, sl
 802283a:	9410      	str	r4, [sp, #64]	; 0x40
 802283c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802283e:	2cff      	cmp	r4, #255	; 0xff
 8022840:	d020      	beq.n	8022884 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 8022842:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022844:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022848:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802284a:	4367      	muls	r7, r4
 802284c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802284e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022852:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022856:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022858:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802285c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022860:	fb04 fa0a 	mul.w	sl, r4, sl
 8022864:	44bc      	add	ip, r7
 8022866:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802286a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802286e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022872:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022876:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802287a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802287e:	ea4c 040a 	orr.w	r4, ip, sl
 8022882:	940b      	str	r4, [sp, #44]	; 0x2c
 8022884:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022886:	2cff      	cmp	r4, #255	; 0xff
 8022888:	d020      	beq.n	80228cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802288a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802288c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022890:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022892:	4367      	muls	r7, r4
 8022894:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022896:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802289a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802289e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80228a0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80228a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80228a8:	fb04 fa0a 	mul.w	sl, r4, sl
 80228ac:	44bc      	add	ip, r7
 80228ae:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80228b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228b6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80228ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80228be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80228c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80228c6:	ea4c 040a 	orr.w	r4, ip, sl
 80228ca:	9411      	str	r4, [sp, #68]	; 0x44
 80228cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80228ce:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80228d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228d6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80228da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80228dc:	fb08 f707 	mul.w	r7, r8, r7
 80228e0:	fb02 770c 	mla	r7, r2, ip, r7
 80228e4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80228e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80228ea:	fb00 770c 	mla	r7, r0, ip, r7
 80228ee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80228f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80228f4:	fb09 770c 	mla	r7, r9, ip, r7
 80228f8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80228fc:	fb08 f80c 	mul.w	r8, r8, ip
 8022900:	0a3f      	lsrs	r7, r7, #8
 8022902:	fb02 8303 	mla	r3, r2, r3, r8
 8022906:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022908:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802290c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022910:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022912:	fb00 330a 	mla	r3, r0, sl, r3
 8022916:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802291a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802291c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022922:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022926:	434b      	muls	r3, r1
 8022928:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802292c:	1c59      	adds	r1, r3, #1
 802292e:	ea47 070c 	orr.w	r7, r7, ip
 8022932:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022936:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802293a:	b2fa      	uxtb	r2, r7
 802293c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022940:	fb12 f200 	smulbb	r2, r2, r0
 8022944:	b2c9      	uxtb	r1, r1
 8022946:	fb03 2301 	mla	r3, r3, r1, r2
 802294a:	b29b      	uxth	r3, r3
 802294c:	1c5a      	adds	r2, r3, #1
 802294e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022952:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022956:	fb12 f201 	smulbb	r2, r2, r1
 802295a:	121b      	asrs	r3, r3, #8
 802295c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022960:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8022964:	0c3f      	lsrs	r7, r7, #16
 8022966:	fb03 2300 	mla	r3, r3, r0, r2
 802296a:	b29b      	uxth	r3, r3
 802296c:	1c5a      	adds	r2, r3, #1
 802296e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022972:	121b      	asrs	r3, r3, #8
 8022974:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022978:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802297c:	fb13 f101 	smulbb	r1, r3, r1
 8022980:	fb07 1700 	mla	r7, r7, r0, r1
 8022984:	b2bf      	uxth	r7, r7
 8022986:	1c7b      	adds	r3, r7, #1
 8022988:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802298c:	123f      	asrs	r7, r7, #8
 802298e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022992:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022994:	f10e 0e03 	add.w	lr, lr, #3
 8022998:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802299a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802299e:	441a      	add	r2, r3
 80229a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80229a2:	9231      	str	r2, [sp, #196]	; 0xc4
 80229a4:	441d      	add	r5, r3
 80229a6:	e645      	b.n	8022634 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80229a8:	2800      	cmp	r0, #0
 80229aa:	f43f aee6 	beq.w	802277a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80229ae:	5c79      	ldrb	r1, [r7, r1]
 80229b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80229b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80229b6:	0e09      	lsrs	r1, r1, #24
 80229b8:	9114      	str	r1, [sp, #80]	; 0x50
 80229ba:	e6de      	b.n	802277a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80229bc:	b01f      	add	sp, #124	; 0x7c
 80229be:	ecbd 8b08 	vpop	{d8-d11}
 80229c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080229c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80229c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229cc:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 80229d0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80229d4:	2c00      	cmp	r4, #0
 80229d6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80229da:	fb04 060c 	mla	r6, r4, ip, r0
 80229de:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80229e2:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80229e6:	eb02 0e06 	add.w	lr, r2, r6
 80229ea:	db3d      	blt.n	8022a68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80229ec:	45a0      	cmp	r8, r4
 80229ee:	dd3b      	ble.n	8022a68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80229f0:	2800      	cmp	r0, #0
 80229f2:	db37      	blt.n	8022a64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80229f4:	4584      	cmp	ip, r0
 80229f6:	dd35      	ble.n	8022a64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80229f8:	5d92      	ldrb	r2, [r2, r6]
 80229fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80229fe:	1c46      	adds	r6, r0, #1
 8022a00:	d435      	bmi.n	8022a6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8022a02:	45b4      	cmp	ip, r6
 8022a04:	dd33      	ble.n	8022a6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8022a06:	b3a5      	cbz	r5, 8022a72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8022a08:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022a0c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8022a10:	3401      	adds	r4, #1
 8022a12:	d432      	bmi.n	8022a7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8022a14:	45a0      	cmp	r8, r4
 8022a16:	dd30      	ble.n	8022a7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8022a18:	b397      	cbz	r7, 8022a80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8022a1a:	2800      	cmp	r0, #0
 8022a1c:	db2b      	blt.n	8022a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8022a1e:	4584      	cmp	ip, r0
 8022a20:	dd29      	ble.n	8022a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8022a22:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8022a26:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8022a2a:	3001      	adds	r0, #1
 8022a2c:	d42b      	bmi.n	8022a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8022a2e:	4584      	cmp	ip, r0
 8022a30:	dd29      	ble.n	8022a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8022a32:	b355      	cbz	r5, 8022a8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8022a34:	44f4      	add	ip, lr
 8022a36:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022a3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8022a3e:	2d0f      	cmp	r5, #15
 8022a40:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022a44:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022a48:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022a4c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022a50:	d801      	bhi.n	8022a56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8022a52:	2f0f      	cmp	r7, #15
 8022a54:	d91b      	bls.n	8022a8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8022a56:	4b7f      	ldr	r3, [pc, #508]	; (8022c54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8022a58:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8022a5c:	4a7e      	ldr	r2, [pc, #504]	; (8022c58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8022a5e:	487f      	ldr	r0, [pc, #508]	; (8022c5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8022a60:	f005 fa6e 	bl	8027f40 <__assert_func>
 8022a64:	2200      	movs	r2, #0
 8022a66:	e7ca      	b.n	80229fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8022a68:	2600      	movs	r6, #0
 8022a6a:	4632      	mov	r2, r6
 8022a6c:	e7d0      	b.n	8022a10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8022a6e:	2600      	movs	r6, #0
 8022a70:	e7ce      	b.n	8022a10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8022a72:	462e      	mov	r6, r5
 8022a74:	e7cc      	b.n	8022a10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8022a76:	2400      	movs	r4, #0
 8022a78:	e7d7      	b.n	8022a2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8022a7a:	2300      	movs	r3, #0
 8022a7c:	461c      	mov	r4, r3
 8022a7e:	e7de      	b.n	8022a3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8022a80:	463b      	mov	r3, r7
 8022a82:	463c      	mov	r4, r7
 8022a84:	e7db      	b.n	8022a3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8022a86:	2300      	movs	r3, #0
 8022a88:	e7d9      	b.n	8022a3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8022a8a:	462b      	mov	r3, r5
 8022a8c:	e7d7      	b.n	8022a3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8022a8e:	b2a8      	uxth	r0, r5
 8022a90:	b2bf      	uxth	r7, r7
 8022a92:	fb07 fe00 	mul.w	lr, r7, r0
 8022a96:	0100      	lsls	r0, r0, #4
 8022a98:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022a9c:	eba0 0c0e 	sub.w	ip, r0, lr
 8022aa0:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022aa4:	b2bf      	uxth	r7, r7
 8022aa6:	fa1f fc8c 	uxth.w	ip, ip
 8022aaa:	1bc5      	subs	r5, r0, r7
 8022aac:	fb0c f00a 	mul.w	r0, ip, sl
 8022ab0:	b2ad      	uxth	r5, r5
 8022ab2:	fb05 000b 	mla	r0, r5, fp, r0
 8022ab6:	fb07 0009 	mla	r0, r7, r9, r0
 8022aba:	fb0e 0008 	mla	r0, lr, r8, r0
 8022abe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022ac2:	9001      	str	r0, [sp, #4]
 8022ac4:	2800      	cmp	r0, #0
 8022ac6:	f000 80c2 	beq.w	8022c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8022aca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022ace:	d018      	beq.n	8022b02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8022ad0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022ad4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ad8:	fb0b f000 	mul.w	r0, fp, r0
 8022adc:	fb0b fb02 	mul.w	fp, fp, r2
 8022ae0:	0a02      	lsrs	r2, r0, #8
 8022ae2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022ae6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022aea:	4402      	add	r2, r0
 8022aec:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022af0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022af4:	0a12      	lsrs	r2, r2, #8
 8022af6:	0a00      	lsrs	r0, r0, #8
 8022af8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022afc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b00:	4302      	orrs	r2, r0
 8022b02:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022b06:	d01a      	beq.n	8022b3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8022b08:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022b0c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b10:	fb0a f000 	mul.w	r0, sl, r0
 8022b14:	fb0a fa06 	mul.w	sl, sl, r6
 8022b18:	0a06      	lsrs	r6, r0, #8
 8022b1a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022b1e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b22:	4406      	add	r6, r0
 8022b24:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022b28:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022b2c:	0a36      	lsrs	r6, r6, #8
 8022b2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b32:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b3a:	ea46 060a 	orr.w	r6, r6, sl
 8022b3e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b42:	d01b      	beq.n	8022b7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8022b44:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022b48:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022b4c:	fb09 fa0a 	mul.w	sl, r9, sl
 8022b50:	fb09 f004 	mul.w	r0, r9, r4
 8022b54:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022b58:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022b5c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022b60:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b64:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022b68:	4454      	add	r4, sl
 8022b6a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022b6e:	0a24      	lsrs	r4, r4, #8
 8022b70:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022b74:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b78:	ea44 0409 	orr.w	r4, r4, r9
 8022b7c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022b80:	d01b      	beq.n	8022bba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8022b82:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022b86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b8a:	fb08 f909 	mul.w	r9, r8, r9
 8022b8e:	fb08 f003 	mul.w	r0, r8, r3
 8022b92:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022b96:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022b9a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8022b9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022ba2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022ba6:	444b      	add	r3, r9
 8022ba8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022bac:	0a1b      	lsrs	r3, r3, #8
 8022bae:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022bb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022bb6:	ea43 0308 	orr.w	r3, r3, r8
 8022bba:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022bbe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022bc2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8022bc6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022bca:	fb0c f000 	mul.w	r0, ip, r0
 8022bce:	fb0c f606 	mul.w	r6, ip, r6
 8022bd2:	fb05 0808 	mla	r8, r5, r8, r0
 8022bd6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022bda:	fb05 6502 	mla	r5, r5, r2, r6
 8022bde:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022be2:	fb07 8800 	mla	r8, r7, r0, r8
 8022be6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022bea:	fb07 5704 	mla	r7, r7, r4, r5
 8022bee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022bf2:	fb0e 8000 	mla	r0, lr, r0, r8
 8022bf6:	780a      	ldrb	r2, [r1, #0]
 8022bf8:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022bfc:	9b01      	ldr	r3, [sp, #4]
 8022bfe:	0a00      	lsrs	r0, r0, #8
 8022c00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c04:	43db      	mvns	r3, r3
 8022c06:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022c0a:	b2db      	uxtb	r3, r3
 8022c0c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022c10:	ea40 0e0e 	orr.w	lr, r0, lr
 8022c14:	fb02 f003 	mul.w	r0, r2, r3
 8022c18:	1c42      	adds	r2, r0, #1
 8022c1a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022c1e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022c22:	700a      	strb	r2, [r1, #0]
 8022c24:	784a      	ldrb	r2, [r1, #1]
 8022c26:	435a      	muls	r2, r3
 8022c28:	1c50      	adds	r0, r2, #1
 8022c2a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022c2e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022c32:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022c36:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022c3a:	704a      	strb	r2, [r1, #1]
 8022c3c:	788a      	ldrb	r2, [r1, #2]
 8022c3e:	4353      	muls	r3, r2
 8022c40:	1c5a      	adds	r2, r3, #1
 8022c42:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022c46:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022c4a:	f881 e002 	strb.w	lr, [r1, #2]
 8022c4e:	b003      	add	sp, #12
 8022c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c54:	0802cb61 	.word	0x0802cb61
 8022c58:	0802d05e 	.word	0x0802d05e
 8022c5c:	0802cc2a 	.word	0x0802cc2a

08022c60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c64:	ed2d 8b0a 	vpush	{d8-d12}
 8022c68:	b09b      	sub	sp, #108	; 0x6c
 8022c6a:	eeb0 aa40 	vmov.f32	s20, s0
 8022c6e:	eef0 9a60 	vmov.f32	s19, s1
 8022c72:	9218      	str	r2, [sp, #96]	; 0x60
 8022c74:	eeb0 9a41 	vmov.f32	s18, s2
 8022c78:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022c7a:	eeb0 8a62 	vmov.f32	s16, s5
 8022c7e:	9019      	str	r0, [sp, #100]	; 0x64
 8022c80:	eef0 8a43 	vmov.f32	s17, s6
 8022c84:	6850      	ldr	r0, [r2, #4]
 8022c86:	eeb0 ca44 	vmov.f32	s24, s8
 8022c8a:	9116      	str	r1, [sp, #88]	; 0x58
 8022c8c:	eef0 ba64 	vmov.f32	s23, s9
 8022c90:	9307      	str	r3, [sp, #28]
 8022c92:	eeb0 ba45 	vmov.f32	s22, s10
 8022c96:	6812      	ldr	r2, [r2, #0]
 8022c98:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022c9c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8022c9e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8022ca2:	fb00 1303 	mla	r3, r0, r3, r1
 8022ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022caa:	18d3      	adds	r3, r2, r3
 8022cac:	930a      	str	r3, [sp, #40]	; 0x28
 8022cae:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022cb0:	681b      	ldr	r3, [r3, #0]
 8022cb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8022cb4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022cb6:	685e      	ldr	r6, [r3, #4]
 8022cb8:	3604      	adds	r6, #4
 8022cba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	dc03      	bgt.n	8022cc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022cc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022cc2:	2b00      	cmp	r3, #0
 8022cc4:	f340 834f 	ble.w	8023366 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022cc8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022cca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022cce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022cd2:	1e48      	subs	r0, r1, #1
 8022cd4:	1e57      	subs	r7, r2, #1
 8022cd6:	9b07      	ldr	r3, [sp, #28]
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	f340 8178 	ble.w	8022fce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022cde:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8022ce0:	142b      	asrs	r3, r5, #16
 8022ce2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022ce6:	d406      	bmi.n	8022cf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022ce8:	4584      	cmp	ip, r0
 8022cea:	da04      	bge.n	8022cf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022cec:	2b00      	cmp	r3, #0
 8022cee:	db02      	blt.n	8022cf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022cf0:	42bb      	cmp	r3, r7
 8022cf2:	f2c0 816d 	blt.w	8022fd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022cf6:	f11c 0c01 	adds.w	ip, ip, #1
 8022cfa:	f100 815b 	bmi.w	8022fb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022cfe:	4561      	cmp	r1, ip
 8022d00:	f2c0 8158 	blt.w	8022fb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022d04:	3301      	adds	r3, #1
 8022d06:	f100 8155 	bmi.w	8022fb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022d0a:	429a      	cmp	r2, r3
 8022d0c:	f2c0 8152 	blt.w	8022fb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022d10:	9b07      	ldr	r3, [sp, #28]
 8022d12:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022d14:	9317      	str	r3, [sp, #92]	; 0x5c
 8022d16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	f340 8178 	ble.w	802300e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8022d1e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022d20:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022d24:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022d28:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022d2c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022d2e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8022d32:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022d34:	141b      	asrs	r3, r3, #16
 8022d36:	f100 81ba 	bmi.w	80230ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022d3a:	f101 38ff 	add.w	r8, r1, #4294967295
 8022d3e:	4543      	cmp	r3, r8
 8022d40:	f280 81b5 	bge.w	80230ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022d44:	f1bc 0f00 	cmp.w	ip, #0
 8022d48:	f2c0 81b1 	blt.w	80230ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022d4c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022d50:	45c4      	cmp	ip, r8
 8022d52:	f280 81ac 	bge.w	80230ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022d56:	b209      	sxth	r1, r1
 8022d58:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022d5a:	fb0c 3301 	mla	r3, ip, r1, r3
 8022d5e:	eb04 0803 	add.w	r8, r4, r3
 8022d62:	5ce3      	ldrb	r3, [r4, r3]
 8022d64:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022d68:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022d6c:	2a00      	cmp	r2, #0
 8022d6e:	f000 8193 	beq.w	8023098 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8022d72:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022d76:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8022d7a:	940b      	str	r4, [sp, #44]	; 0x2c
 8022d7c:	0e24      	lsrs	r4, r4, #24
 8022d7e:	9412      	str	r4, [sp, #72]	; 0x48
 8022d80:	b178      	cbz	r0, 8022da2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022d82:	eb08 0c01 	add.w	ip, r8, r1
 8022d86:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022d8a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022d8e:	9108      	str	r1, [sp, #32]
 8022d90:	0e09      	lsrs	r1, r1, #24
 8022d92:	9110      	str	r1, [sp, #64]	; 0x40
 8022d94:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022d98:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022d9c:	910c      	str	r1, [sp, #48]	; 0x30
 8022d9e:	0e09      	lsrs	r1, r1, #24
 8022da0:	9113      	str	r1, [sp, #76]	; 0x4c
 8022da2:	b292      	uxth	r2, r2
 8022da4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022da6:	b280      	uxth	r0, r0
 8022da8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022daa:	fb02 f900 	mul.w	r9, r2, r0
 8022dae:	0112      	lsls	r2, r2, #4
 8022db0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022db4:	eba2 0809 	sub.w	r8, r2, r9
 8022db8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022dbc:	b280      	uxth	r0, r0
 8022dbe:	fa1f f888 	uxth.w	r8, r8
 8022dc2:	1a12      	subs	r2, r2, r0
 8022dc4:	fb08 f101 	mul.w	r1, r8, r1
 8022dc8:	b292      	uxth	r2, r2
 8022dca:	fb02 110e 	mla	r1, r2, lr, r1
 8022dce:	fb00 1104 	mla	r1, r0, r4, r1
 8022dd2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022dd4:	fb09 1104 	mla	r1, r9, r4, r1
 8022dd8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022ddc:	2900      	cmp	r1, #0
 8022dde:	f000 80de 	beq.w	8022f9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022de2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022de6:	d01b      	beq.n	8022e20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8022de8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022dec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022df0:	fb0e fa0a 	mul.w	sl, lr, sl
 8022df4:	fb0e fe03 	mul.w	lr, lr, r3
 8022df8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022dfc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022e00:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022e04:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e08:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022e0c:	4453      	add	r3, sl
 8022e0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e12:	0a1b      	lsrs	r3, r3, #8
 8022e14:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022e18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e1c:	ea43 030c 	orr.w	r3, r3, ip
 8022e20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e22:	2cff      	cmp	r4, #255	; 0xff
 8022e24:	d021      	beq.n	8022e6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022e26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e28:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022e2c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e2e:	fb04 fb0b 	mul.w	fp, r4, fp
 8022e32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e34:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022e38:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022e3e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022e42:	fb04 fa0a 	mul.w	sl, r4, sl
 8022e46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e4a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022e4e:	44de      	add	lr, fp
 8022e50:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022e54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022e64:	ea4e 040a 	orr.w	r4, lr, sl
 8022e68:	940b      	str	r4, [sp, #44]	; 0x2c
 8022e6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022e6c:	2cff      	cmp	r4, #255	; 0xff
 8022e6e:	d021      	beq.n	8022eb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022e70:	9c08      	ldr	r4, [sp, #32]
 8022e72:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022e76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022e78:	fb04 fb0b 	mul.w	fp, r4, fp
 8022e7c:	9c08      	ldr	r4, [sp, #32]
 8022e7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022e82:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022e84:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022e88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022e8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022e90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e94:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022e98:	44de      	add	lr, fp
 8022e9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022e9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ea2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ea6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022eaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022eae:	ea4e 040a 	orr.w	r4, lr, sl
 8022eb2:	9408      	str	r4, [sp, #32]
 8022eb4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022eb6:	2cff      	cmp	r4, #255	; 0xff
 8022eb8:	d021      	beq.n	8022efe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022eba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022ebc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022ec0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022ec2:	fb04 fb0b 	mul.w	fp, r4, fp
 8022ec6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022ec8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022ecc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022ece:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022ed2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ed6:	fb04 fa0a 	mul.w	sl, r4, sl
 8022eda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ede:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022ee2:	44de      	add	lr, fp
 8022ee4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022ee8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022eec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ef0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ef4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ef8:	ea4e 040a 	orr.w	r4, lr, sl
 8022efc:	940c      	str	r4, [sp, #48]	; 0x30
 8022efe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022f00:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022f04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f08:	43c9      	mvns	r1, r1
 8022f0a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022f0e:	9c08      	ldr	r4, [sp, #32]
 8022f10:	b2c9      	uxtb	r1, r1
 8022f12:	fb08 fc0c 	mul.w	ip, r8, ip
 8022f16:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022f1a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022f1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022f20:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022f24:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022f28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022f2a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022f2e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022f32:	fb08 f80e 	mul.w	r8, r8, lr
 8022f36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f3a:	fb02 8303 	mla	r3, r2, r3, r8
 8022f3e:	9a08      	ldr	r2, [sp, #32]
 8022f40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f44:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f4a:	fb00 330a 	mla	r3, r0, sl, r3
 8022f4e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8022f52:	fb09 3900 	mla	r9, r9, r0, r3
 8022f56:	783b      	ldrb	r3, [r7, #0]
 8022f58:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022f5c:	fb03 f201 	mul.w	r2, r3, r1
 8022f60:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022f64:	1c53      	adds	r3, r2, #1
 8022f66:	ea4c 0c09 	orr.w	ip, ip, r9
 8022f6a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f6e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8022f72:	703b      	strb	r3, [r7, #0]
 8022f74:	787b      	ldrb	r3, [r7, #1]
 8022f76:	434b      	muls	r3, r1
 8022f78:	1c5a      	adds	r2, r3, #1
 8022f7a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022f7e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022f82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022f86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f8a:	707b      	strb	r3, [r7, #1]
 8022f8c:	78bb      	ldrb	r3, [r7, #2]
 8022f8e:	4359      	muls	r1, r3
 8022f90:	1c4b      	adds	r3, r1, #1
 8022f92:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022f96:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022f9a:	f887 c002 	strb.w	ip, [r7, #2]
 8022f9e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022fa0:	3703      	adds	r7, #3
 8022fa2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022fa4:	441a      	add	r2, r3
 8022fa6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022fa8:	441d      	add	r5, r3
 8022faa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022fac:	922f      	str	r2, [sp, #188]	; 0xbc
 8022fae:	3b01      	subs	r3, #1
 8022fb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8022fb2:	e6b0      	b.n	8022d16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022fb4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022fb6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8022fb8:	441c      	add	r4, r3
 8022fba:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022fbc:	441d      	add	r5, r3
 8022fbe:	9b07      	ldr	r3, [sp, #28]
 8022fc0:	942f      	str	r4, [sp, #188]	; 0xbc
 8022fc2:	3b01      	subs	r3, #1
 8022fc4:	9307      	str	r3, [sp, #28]
 8022fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fc8:	3303      	adds	r3, #3
 8022fca:	930a      	str	r3, [sp, #40]	; 0x28
 8022fcc:	e683      	b.n	8022cd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022fce:	d026      	beq.n	802301e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8022fd0:	9b07      	ldr	r3, [sp, #28]
 8022fd2:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8022fd4:	3b01      	subs	r3, #1
 8022fd6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8022fd8:	fb00 4003 	mla	r0, r0, r3, r4
 8022fdc:	1400      	asrs	r0, r0, #16
 8022fde:	f53f ae97 	bmi.w	8022d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022fe2:	3901      	subs	r1, #1
 8022fe4:	4288      	cmp	r0, r1
 8022fe6:	f6bf ae93 	bge.w	8022d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022fea:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8022fec:	fb01 5303 	mla	r3, r1, r3, r5
 8022ff0:	141b      	asrs	r3, r3, #16
 8022ff2:	f53f ae8d 	bmi.w	8022d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022ff6:	3a01      	subs	r2, #1
 8022ff8:	4293      	cmp	r3, r2
 8022ffa:	f6bf ae89 	bge.w	8022d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023000:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023004:	f103 0e03 	add.w	lr, r3, #3
 8023008:	f1bb 0f00 	cmp.w	fp, #0
 802300c:	dc6d      	bgt.n	80230ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 802300e:	9b07      	ldr	r3, [sp, #28]
 8023010:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023016:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802301a:	4423      	add	r3, r4
 802301c:	930a      	str	r3, [sp, #40]	; 0x28
 802301e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023020:	2b00      	cmp	r3, #0
 8023022:	f340 81a0 	ble.w	8023366 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8023026:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802302a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802302c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023030:	eef0 6a48 	vmov.f32	s13, s16
 8023034:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023038:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802303c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023040:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8023044:	eef0 6a68 	vmov.f32	s13, s17
 8023048:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802304c:	ee16 5a90 	vmov	r5, s13
 8023050:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023054:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023058:	ee37 8a48 	vsub.f32	s16, s14, s16
 802305c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023060:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023064:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023068:	ee18 2a10 	vmov	r2, s16
 802306c:	eeb0 8a47 	vmov.f32	s16, s14
 8023070:	fb92 f3f3 	sdiv	r3, r2, r3
 8023074:	ee18 2a90 	vmov	r2, s17
 8023078:	9331      	str	r3, [sp, #196]	; 0xc4
 802307a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802307c:	eef0 8a67 	vmov.f32	s17, s15
 8023080:	fb92 f3f3 	sdiv	r3, r2, r3
 8023084:	9332      	str	r3, [sp, #200]	; 0xc8
 8023086:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023088:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802308a:	3b01      	subs	r3, #1
 802308c:	9316      	str	r3, [sp, #88]	; 0x58
 802308e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023090:	bf08      	it	eq
 8023092:	4613      	moveq	r3, r2
 8023094:	9307      	str	r3, [sp, #28]
 8023096:	e610      	b.n	8022cba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023098:	2800      	cmp	r0, #0
 802309a:	f43f ae82 	beq.w	8022da2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802309e:	f818 1001 	ldrb.w	r1, [r8, r1]
 80230a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80230a6:	9108      	str	r1, [sp, #32]
 80230a8:	0e09      	lsrs	r1, r1, #24
 80230aa:	9110      	str	r1, [sp, #64]	; 0x40
 80230ac:	e679      	b.n	8022da2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80230ae:	f113 0801 	adds.w	r8, r3, #1
 80230b2:	f53f af74 	bmi.w	8022f9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80230b6:	4541      	cmp	r1, r8
 80230b8:	f6ff af71 	blt.w	8022f9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80230bc:	f11c 0801 	adds.w	r8, ip, #1
 80230c0:	f53f af6d 	bmi.w	8022f9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80230c4:	45c6      	cmp	lr, r8
 80230c6:	f6ff af6a 	blt.w	8022f9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80230ca:	b209      	sxth	r1, r1
 80230cc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80230d0:	fa0f f38e 	sxth.w	r3, lr
 80230d4:	9100      	str	r1, [sp, #0]
 80230d6:	4639      	mov	r1, r7
 80230d8:	9301      	str	r3, [sp, #4]
 80230da:	4633      	mov	r3, r6
 80230dc:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80230e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80230e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80230e4:	f7ff fc70 	bl	80229c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80230e8:	e759      	b.n	8022f9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80230ea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80230ec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80230f0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80230f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80230f6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80230f8:	1427      	asrs	r7, r4, #16
 80230fa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80230fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023100:	142b      	asrs	r3, r5, #16
 8023102:	fb01 7303 	mla	r3, r1, r3, r7
 8023106:	18e7      	adds	r7, r4, r3
 8023108:	5ce3      	ldrb	r3, [r4, r3]
 802310a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802310e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023112:	2a00      	cmp	r2, #0
 8023114:	f000 811d 	beq.w	8023352 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8023118:	f897 8001 	ldrb.w	r8, [r7, #1]
 802311c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8023120:	940d      	str	r4, [sp, #52]	; 0x34
 8023122:	0e24      	lsrs	r4, r4, #24
 8023124:	9414      	str	r4, [sp, #80]	; 0x50
 8023126:	b170      	cbz	r0, 8023146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8023128:	eb07 0801 	add.w	r8, r7, r1
 802312c:	5c79      	ldrb	r1, [r7, r1]
 802312e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023132:	9109      	str	r1, [sp, #36]	; 0x24
 8023134:	0e09      	lsrs	r1, r1, #24
 8023136:	9111      	str	r1, [sp, #68]	; 0x44
 8023138:	f898 1001 	ldrb.w	r1, [r8, #1]
 802313c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023140:	910e      	str	r1, [sp, #56]	; 0x38
 8023142:	0e09      	lsrs	r1, r1, #24
 8023144:	9115      	str	r1, [sp, #84]	; 0x54
 8023146:	b292      	uxth	r2, r2
 8023148:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802314a:	b280      	uxth	r0, r0
 802314c:	fb02 f900 	mul.w	r9, r2, r0
 8023150:	0112      	lsls	r2, r2, #4
 8023152:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023156:	eba2 0809 	sub.w	r8, r2, r9
 802315a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802315e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023160:	b280      	uxth	r0, r0
 8023162:	fa1f f888 	uxth.w	r8, r8
 8023166:	1a09      	subs	r1, r1, r0
 8023168:	fb08 f202 	mul.w	r2, r8, r2
 802316c:	b289      	uxth	r1, r1
 802316e:	fb01 220c 	mla	r2, r1, ip, r2
 8023172:	fb00 2204 	mla	r2, r0, r4, r2
 8023176:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023178:	fb09 2204 	mla	r2, r9, r4, r2
 802317c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023180:	2a00      	cmp	r2, #0
 8023182:	f000 80db 	beq.w	802333c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8023186:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802318a:	d019      	beq.n	80231c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 802318c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023194:	fb0c fa0a 	mul.w	sl, ip, sl
 8023198:	fb0c fc03 	mul.w	ip, ip, r3
 802319c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80231a0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80231a4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80231a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80231ac:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80231b0:	4453      	add	r3, sl
 80231b2:	0a3f      	lsrs	r7, r7, #8
 80231b4:	0a1b      	lsrs	r3, r3, #8
 80231b6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80231ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80231be:	433b      	orrs	r3, r7
 80231c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80231c2:	2cff      	cmp	r4, #255	; 0xff
 80231c4:	d020      	beq.n	8023208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 80231c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80231c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80231cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80231ce:	4367      	muls	r7, r4
 80231d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80231d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80231d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80231da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80231dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80231e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80231e8:	44bc      	add	ip, r7
 80231ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80231ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80231f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023202:	ea4c 040a 	orr.w	r4, ip, sl
 8023206:	940d      	str	r4, [sp, #52]	; 0x34
 8023208:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802320a:	2cff      	cmp	r4, #255	; 0xff
 802320c:	d020      	beq.n	8023250 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 802320e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023210:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023214:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023216:	4367      	muls	r7, r4
 8023218:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802321a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802321e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023222:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023224:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023228:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802322c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023230:	44bc      	add	ip, r7
 8023232:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023236:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802323a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802323e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023242:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023246:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802324a:	ea4c 040a 	orr.w	r4, ip, sl
 802324e:	9409      	str	r4, [sp, #36]	; 0x24
 8023250:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023252:	2cff      	cmp	r4, #255	; 0xff
 8023254:	d020      	beq.n	8023298 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8023256:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023258:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802325c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802325e:	4367      	muls	r7, r4
 8023260:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023262:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023266:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802326a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802326c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023270:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023274:	fb04 fa0a 	mul.w	sl, r4, sl
 8023278:	44bc      	add	ip, r7
 802327a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802327e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023282:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023286:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802328a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802328e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023292:	ea4c 040a 	orr.w	r4, ip, sl
 8023296:	940e      	str	r4, [sp, #56]	; 0x38
 8023298:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802329a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802329e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80232a2:	43d2      	mvns	r2, r2
 80232a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80232a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80232aa:	b2d2      	uxtb	r2, r2
 80232ac:	fb08 f707 	mul.w	r7, r8, r7
 80232b0:	fb01 770c 	mla	r7, r1, ip, r7
 80232b4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80232b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80232ba:	fb00 770c 	mla	r7, r0, ip, r7
 80232be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80232c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80232c4:	fb09 770c 	mla	r7, r9, ip, r7
 80232c8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80232cc:	fb08 f80c 	mul.w	r8, r8, ip
 80232d0:	0a3f      	lsrs	r7, r7, #8
 80232d2:	fb01 8303 	mla	r3, r1, r3, r8
 80232d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80232d8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80232dc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80232e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80232e2:	fb00 330a 	mla	r3, r0, sl, r3
 80232e6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80232ea:	fb09 3c0c 	mla	ip, r9, ip, r3
 80232ee:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80232f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232f6:	fb03 f102 	mul.w	r1, r3, r2
 80232fa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80232fe:	1c4b      	adds	r3, r1, #1
 8023300:	ea47 070c 	orr.w	r7, r7, ip
 8023304:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023308:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802330c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023310:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8023314:	4353      	muls	r3, r2
 8023316:	1c59      	adds	r1, r3, #1
 8023318:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802331c:	0a3b      	lsrs	r3, r7, #8
 802331e:	0c3f      	lsrs	r7, r7, #16
 8023320:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023324:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023328:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802332c:	435a      	muls	r2, r3
 802332e:	1c53      	adds	r3, r2, #1
 8023330:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023334:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023338:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802333c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802333e:	f10e 0e03 	add.w	lr, lr, #3
 8023342:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023344:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023348:	441a      	add	r2, r3
 802334a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802334c:	922f      	str	r2, [sp, #188]	; 0xbc
 802334e:	441d      	add	r5, r3
 8023350:	e65a      	b.n	8023008 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8023352:	2800      	cmp	r0, #0
 8023354:	f43f aef7 	beq.w	8023146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8023358:	5c79      	ldrb	r1, [r7, r1]
 802335a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802335e:	9109      	str	r1, [sp, #36]	; 0x24
 8023360:	0e09      	lsrs	r1, r1, #24
 8023362:	9111      	str	r1, [sp, #68]	; 0x44
 8023364:	e6ef      	b.n	8023146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8023366:	b01b      	add	sp, #108	; 0x6c
 8023368:	ecbd 8b0a 	vpop	{d8-d12}
 802336c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023370 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8023370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023374:	b08d      	sub	sp, #52	; 0x34
 8023376:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802337a:	9103      	str	r1, [sp, #12]
 802337c:	fb07 5803 	mla	r8, r7, r3, r5
 8023380:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8023384:	9803      	ldr	r0, [sp, #12]
 8023386:	2f00      	cmp	r7, #0
 8023388:	910b      	str	r1, [sp, #44]	; 0x2c
 802338a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802338e:	9903      	ldr	r1, [sp, #12]
 8023390:	9c03      	ldr	r4, [sp, #12]
 8023392:	eb02 0608 	add.w	r6, r2, r8
 8023396:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802339a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802339e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80233a2:	7809      	ldrb	r1, [r1, #0]
 80233a4:	7840      	ldrb	r0, [r0, #1]
 80233a6:	78a4      	ldrb	r4, [r4, #2]
 80233a8:	db51      	blt.n	802344e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80233aa:	45be      	cmp	lr, r7
 80233ac:	dd4f      	ble.n	802344e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80233ae:	2d00      	cmp	r5, #0
 80233b0:	db49      	blt.n	8023446 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80233b2:	42ab      	cmp	r3, r5
 80233b4:	dd47      	ble.n	8023446 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80233b6:	f812 2008 	ldrb.w	r2, [r2, r8]
 80233ba:	9204      	str	r2, [sp, #16]
 80233bc:	7872      	ldrb	r2, [r6, #1]
 80233be:	9205      	str	r2, [sp, #20]
 80233c0:	78b2      	ldrb	r2, [r6, #2]
 80233c2:	9206      	str	r2, [sp, #24]
 80233c4:	1c6a      	adds	r2, r5, #1
 80233c6:	d449      	bmi.n	802345c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80233c8:	4293      	cmp	r3, r2
 80233ca:	dd47      	ble.n	802345c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80233cc:	f1bc 0f00 	cmp.w	ip, #0
 80233d0:	d044      	beq.n	802345c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80233d2:	7972      	ldrb	r2, [r6, #5]
 80233d4:	f896 b003 	ldrb.w	fp, [r6, #3]
 80233d8:	f896 a004 	ldrb.w	sl, [r6, #4]
 80233dc:	9201      	str	r2, [sp, #4]
 80233de:	3701      	adds	r7, #1
 80233e0:	d444      	bmi.n	802346c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80233e2:	45be      	cmp	lr, r7
 80233e4:	dd42      	ble.n	802346c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80233e6:	f1b9 0f00 	cmp.w	r9, #0
 80233ea:	f000 80c1 	beq.w	8023570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80233ee:	2d00      	cmp	r5, #0
 80233f0:	db38      	blt.n	8023464 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80233f2:	42ab      	cmp	r3, r5
 80233f4:	dd36      	ble.n	8023464 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80233f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80233fa:	f816 8002 	ldrb.w	r8, [r6, r2]
 80233fe:	2203      	movs	r2, #3
 8023400:	fb03 6702 	mla	r7, r3, r2, r6
 8023404:	fb03 6202 	mla	r2, r3, r2, r6
 8023408:	787f      	ldrb	r7, [r7, #1]
 802340a:	f892 e002 	ldrb.w	lr, [r2, #2]
 802340e:	9702      	str	r7, [sp, #8]
 8023410:	3501      	adds	r5, #1
 8023412:	d432      	bmi.n	802347a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023414:	42ab      	cmp	r3, r5
 8023416:	dd30      	ble.n	802347a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023418:	f1bc 0f00 	cmp.w	ip, #0
 802341c:	d031      	beq.n	8023482 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 802341e:	2703      	movs	r7, #3
 8023420:	fb13 7207 	smlabb	r2, r3, r7, r7
 8023424:	5cb5      	ldrb	r5, [r6, r2]
 8023426:	fb03 6207 	mla	r2, r3, r7, r6
 802342a:	fb03 6307 	mla	r3, r3, r7, r6
 802342e:	7912      	ldrb	r2, [r2, #4]
 8023430:	795e      	ldrb	r6, [r3, #5]
 8023432:	f1bc 0f0f 	cmp.w	ip, #15
 8023436:	d927      	bls.n	8023488 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8023438:	4b53      	ldr	r3, [pc, #332]	; (8023588 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802343a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 802343e:	4a53      	ldr	r2, [pc, #332]	; (802358c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8023440:	4853      	ldr	r0, [pc, #332]	; (8023590 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8023442:	f004 fd7d 	bl	8027f40 <__assert_func>
 8023446:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802344a:	9104      	str	r1, [sp, #16]
 802344c:	e7ba      	b.n	80233c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802344e:	9401      	str	r4, [sp, #4]
 8023450:	4682      	mov	sl, r0
 8023452:	468b      	mov	fp, r1
 8023454:	9104      	str	r1, [sp, #16]
 8023456:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802345a:	e7c0      	b.n	80233de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802345c:	9401      	str	r4, [sp, #4]
 802345e:	4682      	mov	sl, r0
 8023460:	468b      	mov	fp, r1
 8023462:	e7bc      	b.n	80233de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023464:	46a6      	mov	lr, r4
 8023466:	9002      	str	r0, [sp, #8]
 8023468:	4688      	mov	r8, r1
 802346a:	e7d1      	b.n	8023410 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802346c:	4626      	mov	r6, r4
 802346e:	4602      	mov	r2, r0
 8023470:	460d      	mov	r5, r1
 8023472:	46a6      	mov	lr, r4
 8023474:	9002      	str	r0, [sp, #8]
 8023476:	4688      	mov	r8, r1
 8023478:	e7db      	b.n	8023432 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802347a:	4626      	mov	r6, r4
 802347c:	4602      	mov	r2, r0
 802347e:	460d      	mov	r5, r1
 8023480:	e7d7      	b.n	8023432 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8023482:	4626      	mov	r6, r4
 8023484:	4602      	mov	r2, r0
 8023486:	460d      	mov	r5, r1
 8023488:	f1b9 0f0f 	cmp.w	r9, #15
 802348c:	d8d4      	bhi.n	8023438 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802348e:	fa1f f38c 	uxth.w	r3, ip
 8023492:	fa1f fc89 	uxth.w	ip, r9
 8023496:	fb03 f70c 	mul.w	r7, r3, ip
 802349a:	011b      	lsls	r3, r3, #4
 802349c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80234a0:	9707      	str	r7, [sp, #28]
 80234a2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80234a6:	fa1f fc8c 	uxth.w	ip, ip
 80234aa:	eba7 070c 	sub.w	r7, r7, ip
 80234ae:	b2bf      	uxth	r7, r7
 80234b0:	9709      	str	r7, [sp, #36]	; 0x24
 80234b2:	9f07      	ldr	r7, [sp, #28]
 80234b4:	1bdb      	subs	r3, r3, r7
 80234b6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80234ba:	b29b      	uxth	r3, r3
 80234bc:	9708      	str	r7, [sp, #32]
 80234be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80234c0:	930a      	str	r3, [sp, #40]	; 0x28
 80234c2:	ea6f 0907 	mvn.w	r9, r7
 80234c6:	fb03 fb0b 	mul.w	fp, r3, fp
 80234ca:	9f04      	ldr	r7, [sp, #16]
 80234cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80234ce:	fa5f f989 	uxtb.w	r9, r9
 80234d2:	fb03 bb07 	mla	fp, r3, r7, fp
 80234d6:	9f07      	ldr	r7, [sp, #28]
 80234d8:	fb11 f109 	smulbb	r1, r1, r9
 80234dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234de:	fb0c b808 	mla	r8, ip, r8, fp
 80234e2:	fb10 f009 	smulbb	r0, r0, r9
 80234e6:	fb14 f409 	smulbb	r4, r4, r9
 80234ea:	fb07 8805 	mla	r8, r7, r5, r8
 80234ee:	9d08      	ldr	r5, [sp, #32]
 80234f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80234f2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80234f6:	fb08 1805 	mla	r8, r8, r5, r1
 80234fa:	9d05      	ldr	r5, [sp, #20]
 80234fc:	fa1f f888 	uxth.w	r8, r8
 8023500:	f108 0101 	add.w	r1, r8, #1
 8023504:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023508:	9903      	ldr	r1, [sp, #12]
 802350a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802350e:	f881 8000 	strb.w	r8, [r1]
 8023512:	fb03 f10a 	mul.w	r1, r3, sl
 8023516:	fb07 1105 	mla	r1, r7, r5, r1
 802351a:	9d02      	ldr	r5, [sp, #8]
 802351c:	fb0c 1105 	mla	r1, ip, r5, r1
 8023520:	9d07      	ldr	r5, [sp, #28]
 8023522:	fb05 1102 	mla	r1, r5, r2, r1
 8023526:	9a08      	ldr	r2, [sp, #32]
 8023528:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802352c:	fb01 0102 	mla	r1, r1, r2, r0
 8023530:	9a03      	ldr	r2, [sp, #12]
 8023532:	b289      	uxth	r1, r1
 8023534:	1c48      	adds	r0, r1, #1
 8023536:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802353a:	1209      	asrs	r1, r1, #8
 802353c:	7051      	strb	r1, [r2, #1]
 802353e:	9a01      	ldr	r2, [sp, #4]
 8023540:	4353      	muls	r3, r2
 8023542:	9a06      	ldr	r2, [sp, #24]
 8023544:	fb07 3702 	mla	r7, r7, r2, r3
 8023548:	9b08      	ldr	r3, [sp, #32]
 802354a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802354e:	fb05 c606 	mla	r6, r5, r6, ip
 8023552:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023556:	fb06 4603 	mla	r6, r6, r3, r4
 802355a:	9b03      	ldr	r3, [sp, #12]
 802355c:	b2b6      	uxth	r6, r6
 802355e:	f106 0e01 	add.w	lr, r6, #1
 8023562:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023566:	1236      	asrs	r6, r6, #8
 8023568:	709e      	strb	r6, [r3, #2]
 802356a:	b00d      	add	sp, #52	; 0x34
 802356c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023570:	f1bc 0f0f 	cmp.w	ip, #15
 8023574:	f63f af60 	bhi.w	8023438 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8023578:	4626      	mov	r6, r4
 802357a:	4602      	mov	r2, r0
 802357c:	460d      	mov	r5, r1
 802357e:	46a6      	mov	lr, r4
 8023580:	9002      	str	r0, [sp, #8]
 8023582:	4688      	mov	r8, r1
 8023584:	e783      	b.n	802348e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8023586:	bf00      	nop
 8023588:	0802cb61 	.word	0x0802cb61
 802358c:	0802d05e 	.word	0x0802d05e
 8023590:	0802cc2a 	.word	0x0802cc2a

08023594 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023598:	ed2d 8b08 	vpush	{d8-d11}
 802359c:	b09f      	sub	sp, #124	; 0x7c
 802359e:	eeb0 aa40 	vmov.f32	s20, s0
 80235a2:	eef0 9a60 	vmov.f32	s19, s1
 80235a6:	920e      	str	r2, [sp, #56]	; 0x38
 80235a8:	eeb0 9a41 	vmov.f32	s18, s2
 80235ac:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80235ae:	eeb0 8a62 	vmov.f32	s16, s5
 80235b2:	9307      	str	r3, [sp, #28]
 80235b4:	eef0 8a43 	vmov.f32	s17, s6
 80235b8:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80235bc:	eef0 ba44 	vmov.f32	s23, s8
 80235c0:	901d      	str	r0, [sp, #116]	; 0x74
 80235c2:	eeb0 ba64 	vmov.f32	s22, s9
 80235c6:	930c      	str	r3, [sp, #48]	; 0x30
 80235c8:	eef0 aa45 	vmov.f32	s21, s10
 80235cc:	6850      	ldr	r0, [r2, #4]
 80235ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80235d0:	6812      	ldr	r2, [r2, #0]
 80235d2:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80235d6:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 80235da:	fb00 1303 	mla	r3, r0, r3, r1
 80235de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235e2:	18d3      	adds	r3, r2, r3
 80235e4:	9308      	str	r3, [sp, #32]
 80235e6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	930a      	str	r3, [sp, #40]	; 0x28
 80235ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80235ee:	43db      	mvns	r3, r3
 80235f0:	b2db      	uxtb	r3, r3
 80235f2:	9309      	str	r3, [sp, #36]	; 0x24
 80235f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	dc03      	bgt.n	8023602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80235fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80235fc:	2b00      	cmp	r3, #0
 80235fe:	f340 81f5 	ble.w	80239ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8023602:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8023604:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023608:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802360c:	1e48      	subs	r0, r1, #1
 802360e:	1e54      	subs	r4, r2, #1
 8023610:	9b07      	ldr	r3, [sp, #28]
 8023612:	2b00      	cmp	r3, #0
 8023614:	f340 80d5 	ble.w	80237c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023618:	ea5f 452a 	movs.w	r5, sl, asr #16
 802361c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8023620:	d406      	bmi.n	8023630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023622:	4285      	cmp	r5, r0
 8023624:	da04      	bge.n	8023630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023626:	2b00      	cmp	r3, #0
 8023628:	db02      	blt.n	8023630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802362a:	42a3      	cmp	r3, r4
 802362c:	f2c0 80ca 	blt.w	80237c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023630:	3501      	adds	r5, #1
 8023632:	f100 80bb 	bmi.w	80237ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023636:	42a9      	cmp	r1, r5
 8023638:	f2c0 80b8 	blt.w	80237ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802363c:	3301      	adds	r3, #1
 802363e:	f100 80b5 	bmi.w	80237ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023642:	429a      	cmp	r2, r3
 8023644:	f2c0 80b2 	blt.w	80237ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023648:	9b07      	ldr	r3, [sp, #28]
 802364a:	9d08      	ldr	r5, [sp, #32]
 802364c:	930d      	str	r3, [sp, #52]	; 0x34
 802364e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023650:	2b00      	cmp	r3, #0
 8023652:	f340 80d6 	ble.w	8023802 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8023656:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8023658:	ea4f 4428 	mov.w	r4, r8, asr #16
 802365c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802365e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8023662:	68c6      	ldr	r6, [r0, #12]
 8023664:	ea5f 402a 	movs.w	r0, sl, asr #16
 8023668:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802366c:	689b      	ldr	r3, [r3, #8]
 802366e:	f100 810f 	bmi.w	8023890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8023672:	1e5f      	subs	r7, r3, #1
 8023674:	42b8      	cmp	r0, r7
 8023676:	f280 810b 	bge.w	8023890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802367a:	2c00      	cmp	r4, #0
 802367c:	f2c0 8108 	blt.w	8023890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8023680:	1e77      	subs	r7, r6, #1
 8023682:	42bc      	cmp	r4, r7
 8023684:	f280 8104 	bge.w	8023890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8023688:	b21b      	sxth	r3, r3
 802368a:	fb04 0003 	mla	r0, r4, r3, r0
 802368e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023690:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023694:	1826      	adds	r6, r4, r0
 8023696:	5c24      	ldrb	r4, [r4, r0]
 8023698:	78b7      	ldrb	r7, [r6, #2]
 802369a:	7870      	ldrb	r0, [r6, #1]
 802369c:	970f      	str	r7, [sp, #60]	; 0x3c
 802369e:	7977      	ldrb	r7, [r6, #5]
 80236a0:	f896 e003 	ldrb.w	lr, [r6, #3]
 80236a4:	f896 c004 	ldrb.w	ip, [r6, #4]
 80236a8:	9710      	str	r7, [sp, #64]	; 0x40
 80236aa:	b1c9      	cbz	r1, 80236e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80236ac:	f04f 0b03 	mov.w	fp, #3
 80236b0:	f06f 0904 	mvn.w	r9, #4
 80236b4:	3605      	adds	r6, #5
 80236b6:	fb13 930b 	smlabb	r3, r3, fp, r9
 80236ba:	eb06 0b03 	add.w	fp, r6, r3
 80236be:	5cf3      	ldrb	r3, [r6, r3]
 80236c0:	9311      	str	r3, [sp, #68]	; 0x44
 80236c2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80236c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80236c8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80236cc:	9315      	str	r3, [sp, #84]	; 0x54
 80236ce:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80236d2:	9312      	str	r3, [sp, #72]	; 0x48
 80236d4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80236d8:	9314      	str	r3, [sp, #80]	; 0x50
 80236da:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80236de:	9316      	str	r3, [sp, #88]	; 0x58
 80236e0:	b292      	uxth	r2, r2
 80236e2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80236e4:	b289      	uxth	r1, r1
 80236e6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80236ea:	fb02 f601 	mul.w	r6, r2, r1
 80236ee:	0112      	lsls	r2, r2, #4
 80236f0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80236f4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80236f8:	1b92      	subs	r2, r2, r6
 80236fa:	b289      	uxth	r1, r1
 80236fc:	b292      	uxth	r2, r2
 80236fe:	eba9 0901 	sub.w	r9, r9, r1
 8023702:	fb02 fe0e 	mul.w	lr, r2, lr
 8023706:	fa1f f989 	uxth.w	r9, r9
 802370a:	fb02 fc0c 	mul.w	ip, r2, ip
 802370e:	fb09 e404 	mla	r4, r9, r4, lr
 8023712:	f895 e000 	ldrb.w	lr, [r5]
 8023716:	fb09 c000 	mla	r0, r9, r0, ip
 802371a:	fb01 4407 	mla	r4, r1, r7, r4
 802371e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8023720:	fb06 4407 	mla	r4, r6, r7, r4
 8023724:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023726:	fb1e fe07 	smulbb	lr, lr, r7
 802372a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802372e:	fb04 e403 	mla	r4, r4, r3, lr
 8023732:	b2a4      	uxth	r4, r4
 8023734:	f104 0e01 	add.w	lr, r4, #1
 8023738:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802373c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802373e:	fb01 0004 	mla	r0, r1, r4, r0
 8023742:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023744:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023748:	fb06 0004 	mla	r0, r6, r4, r0
 802374c:	786c      	ldrb	r4, [r5, #1]
 802374e:	f885 e000 	strb.w	lr, [r5]
 8023752:	fb14 f407 	smulbb	r4, r4, r7
 8023756:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802375a:	fb00 4003 	mla	r0, r0, r3, r4
 802375e:	b280      	uxth	r0, r0
 8023760:	1c44      	adds	r4, r0, #1
 8023762:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023766:	1200      	asrs	r0, r0, #8
 8023768:	7068      	strb	r0, [r5, #1]
 802376a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802376c:	4342      	muls	r2, r0
 802376e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023770:	fb09 2200 	mla	r2, r9, r0, r2
 8023774:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023776:	fb01 2100 	mla	r1, r1, r0, r2
 802377a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802377c:	fb06 1602 	mla	r6, r6, r2, r1
 8023780:	78a9      	ldrb	r1, [r5, #2]
 8023782:	fb11 f107 	smulbb	r1, r1, r7
 8023786:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802378a:	fb06 1303 	mla	r3, r6, r3, r1
 802378e:	b29b      	uxth	r3, r3
 8023790:	1c5e      	adds	r6, r3, #1
 8023792:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023796:	121b      	asrs	r3, r3, #8
 8023798:	70ab      	strb	r3, [r5, #2]
 802379a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802379c:	3503      	adds	r5, #3
 802379e:	449a      	add	sl, r3
 80237a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80237a2:	4498      	add	r8, r3
 80237a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80237a6:	3b01      	subs	r3, #1
 80237a8:	930d      	str	r3, [sp, #52]	; 0x34
 80237aa:	e750      	b.n	802364e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80237ac:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80237ae:	449a      	add	sl, r3
 80237b0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80237b2:	4498      	add	r8, r3
 80237b4:	9b07      	ldr	r3, [sp, #28]
 80237b6:	3b01      	subs	r3, #1
 80237b8:	9307      	str	r3, [sp, #28]
 80237ba:	9b08      	ldr	r3, [sp, #32]
 80237bc:	3303      	adds	r3, #3
 80237be:	9308      	str	r3, [sp, #32]
 80237c0:	e726      	b.n	8023610 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80237c2:	d026      	beq.n	8023812 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80237c4:	9b07      	ldr	r3, [sp, #28]
 80237c6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80237c8:	3b01      	subs	r3, #1
 80237ca:	fb00 a003 	mla	r0, r0, r3, sl
 80237ce:	1400      	asrs	r0, r0, #16
 80237d0:	f53f af3a 	bmi.w	8023648 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80237d4:	3901      	subs	r1, #1
 80237d6:	4288      	cmp	r0, r1
 80237d8:	f6bf af36 	bge.w	8023648 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80237dc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80237de:	fb01 8303 	mla	r3, r1, r3, r8
 80237e2:	141b      	asrs	r3, r3, #16
 80237e4:	f53f af30 	bmi.w	8023648 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80237e8:	3a01      	subs	r2, #1
 80237ea:	4293      	cmp	r3, r2
 80237ec:	f6bf af2c 	bge.w	8023648 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80237f0:	9b08      	ldr	r3, [sp, #32]
 80237f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80237f6:	1cdd      	adds	r5, r3, #3
 80237f8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80237fc:	f1bc 0f00 	cmp.w	ip, #0
 8023800:	dc5f      	bgt.n	80238c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8023802:	9b07      	ldr	r3, [sp, #28]
 8023804:	9a08      	ldr	r2, [sp, #32]
 8023806:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802380a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802380e:	441a      	add	r2, r3
 8023810:	9208      	str	r2, [sp, #32]
 8023812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023814:	2b00      	cmp	r3, #0
 8023816:	f340 80e9 	ble.w	80239ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 802381a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802381e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023820:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023824:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023828:	eef0 6a48 	vmov.f32	s13, s16
 802382c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023830:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023834:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023838:	ee16 aa90 	vmov	sl, s13
 802383c:	eef0 6a68 	vmov.f32	s13, s17
 8023840:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023844:	ee16 8a90 	vmov	r8, s13
 8023848:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802384c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023850:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023854:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023858:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802385c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023860:	ee18 2a10 	vmov	r2, s16
 8023864:	eeb0 8a47 	vmov.f32	s16, s14
 8023868:	fb92 f3f3 	sdiv	r3, r2, r3
 802386c:	ee18 2a90 	vmov	r2, s17
 8023870:	9333      	str	r3, [sp, #204]	; 0xcc
 8023872:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023874:	eef0 8a67 	vmov.f32	s17, s15
 8023878:	fb92 f3f3 	sdiv	r3, r2, r3
 802387c:	9334      	str	r3, [sp, #208]	; 0xd0
 802387e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023882:	3b01      	subs	r3, #1
 8023884:	930b      	str	r3, [sp, #44]	; 0x2c
 8023886:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023888:	bf08      	it	eq
 802388a:	4613      	moveq	r3, r2
 802388c:	9307      	str	r3, [sp, #28]
 802388e:	e6b1      	b.n	80235f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023890:	1c47      	adds	r7, r0, #1
 8023892:	d482      	bmi.n	802379a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023894:	42bb      	cmp	r3, r7
 8023896:	db80      	blt.n	802379a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023898:	1c67      	adds	r7, r4, #1
 802389a:	f53f af7e 	bmi.w	802379a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802389e:	42be      	cmp	r6, r7
 80238a0:	f6ff af7b 	blt.w	802379a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80238a4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80238a6:	b236      	sxth	r6, r6
 80238a8:	9001      	str	r0, [sp, #4]
 80238aa:	b21b      	sxth	r3, r3
 80238ac:	9600      	str	r6, [sp, #0]
 80238ae:	981d      	ldr	r0, [sp, #116]	; 0x74
 80238b0:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80238b4:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80238b8:	4629      	mov	r1, r5
 80238ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80238bc:	f7ff fd58 	bl	8023370 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80238c0:	e76b      	b.n	802379a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80238c2:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80238c4:	ea4f 402a 	mov.w	r0, sl, asr #16
 80238c8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80238cc:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80238d0:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80238d4:	ea4f 4128 	mov.w	r1, r8, asr #16
 80238d8:	fb07 0101 	mla	r1, r7, r1, r0
 80238dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80238de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80238e2:	1844      	adds	r4, r0, r1
 80238e4:	5c40      	ldrb	r0, [r0, r1]
 80238e6:	78a6      	ldrb	r6, [r4, #2]
 80238e8:	7861      	ldrb	r1, [r4, #1]
 80238ea:	960f      	str	r6, [sp, #60]	; 0x3c
 80238ec:	78e6      	ldrb	r6, [r4, #3]
 80238ee:	910d      	str	r1, [sp, #52]	; 0x34
 80238f0:	9610      	str	r6, [sp, #64]	; 0x40
 80238f2:	f894 9004 	ldrb.w	r9, [r4, #4]
 80238f6:	f894 b005 	ldrb.w	fp, [r4, #5]
 80238fa:	b192      	cbz	r2, 8023922 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80238fc:	f06f 0604 	mvn.w	r6, #4
 8023900:	2103      	movs	r1, #3
 8023902:	3405      	adds	r4, #5
 8023904:	fb17 6701 	smlabb	r7, r7, r1, r6
 8023908:	19e6      	adds	r6, r4, r7
 802390a:	5de4      	ldrb	r4, [r4, r7]
 802390c:	9417      	str	r4, [sp, #92]	; 0x5c
 802390e:	7874      	ldrb	r4, [r6, #1]
 8023910:	9419      	str	r4, [sp, #100]	; 0x64
 8023912:	78b4      	ldrb	r4, [r6, #2]
 8023914:	941b      	str	r4, [sp, #108]	; 0x6c
 8023916:	78f4      	ldrb	r4, [r6, #3]
 8023918:	9418      	str	r4, [sp, #96]	; 0x60
 802391a:	7934      	ldrb	r4, [r6, #4]
 802391c:	941a      	str	r4, [sp, #104]	; 0x68
 802391e:	7974      	ldrb	r4, [r6, #5]
 8023920:	941c      	str	r4, [sp, #112]	; 0x70
 8023922:	b29b      	uxth	r3, r3
 8023924:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023926:	b292      	uxth	r2, r2
 8023928:	9909      	ldr	r1, [sp, #36]	; 0x24
 802392a:	3503      	adds	r5, #3
 802392c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023930:	fb03 f402 	mul.w	r4, r3, r2
 8023934:	011b      	lsls	r3, r3, #4
 8023936:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802393a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 802393e:	1b1b      	subs	r3, r3, r4
 8023940:	b292      	uxth	r2, r2
 8023942:	b29b      	uxth	r3, r3
 8023944:	1ab6      	subs	r6, r6, r2
 8023946:	435f      	muls	r7, r3
 8023948:	b2b6      	uxth	r6, r6
 802394a:	fb03 f909 	mul.w	r9, r3, r9
 802394e:	fb03 fb0b 	mul.w	fp, r3, fp
 8023952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023954:	fb06 7000 	mla	r0, r6, r0, r7
 8023958:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802395a:	fb06 bb03 	mla	fp, r6, r3, fp
 802395e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023960:	fb02 0007 	mla	r0, r2, r7, r0
 8023964:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8023966:	fb02 bb03 	mla	fp, r2, r3, fp
 802396a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802396c:	fb04 0007 	mla	r0, r4, r7, r0
 8023970:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8023974:	fb17 f701 	smulbb	r7, r7, r1
 8023978:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802397c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802397e:	fb00 700e 	mla	r0, r0, lr, r7
 8023982:	fb06 9101 	mla	r1, r6, r1, r9
 8023986:	b280      	uxth	r0, r0
 8023988:	1c47      	adds	r7, r0, #1
 802398a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802398e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023990:	1200      	asrs	r0, r0, #8
 8023992:	f805 0c06 	strb.w	r0, [r5, #-6]
 8023996:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023998:	fb02 1100 	mla	r1, r2, r0, r1
 802399c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802399e:	fb04 1100 	mla	r1, r4, r0, r1
 80239a2:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80239a6:	fb04 b403 	mla	r4, r4, r3, fp
 80239aa:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80239ae:	fb10 f007 	smulbb	r0, r0, r7
 80239b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80239b6:	fb13 f307 	smulbb	r3, r3, r7
 80239ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80239be:	fb01 010e 	mla	r1, r1, lr, r0
 80239c2:	fb04 340e 	mla	r4, r4, lr, r3
 80239c6:	b289      	uxth	r1, r1
 80239c8:	b2a4      	uxth	r4, r4
 80239ca:	1c48      	adds	r0, r1, #1
 80239cc:	1c63      	adds	r3, r4, #1
 80239ce:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80239d2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80239d6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80239d8:	1209      	asrs	r1, r1, #8
 80239da:	1224      	asrs	r4, r4, #8
 80239dc:	449a      	add	sl, r3
 80239de:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80239e0:	f805 1c05 	strb.w	r1, [r5, #-5]
 80239e4:	f805 4c04 	strb.w	r4, [r5, #-4]
 80239e8:	4498      	add	r8, r3
 80239ea:	e707      	b.n	80237fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80239ec:	b01f      	add	sp, #124	; 0x7c
 80239ee:	ecbd 8b08 	vpop	{d8-d11}
 80239f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080239f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80239f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239fc:	b085      	sub	sp, #20
 80239fe:	784d      	ldrb	r5, [r1, #1]
 8023a00:	788e      	ldrb	r6, [r1, #2]
 8023a02:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8023a06:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8023a0a:	9403      	str	r4, [sp, #12]
 8023a0c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8023a10:	780c      	ldrb	r4, [r1, #0]
 8023a12:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8023a16:	fb07 ce03 	mla	lr, r7, r3, ip
 8023a1a:	2f00      	cmp	r7, #0
 8023a1c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023a20:	eb02 0b0e 	add.w	fp, r2, lr
 8023a24:	db56      	blt.n	8023ad4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8023a26:	45b9      	cmp	r9, r7
 8023a28:	dd54      	ble.n	8023ad4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8023a2a:	f1bc 0f00 	cmp.w	ip, #0
 8023a2e:	db4d      	blt.n	8023acc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8023a30:	4563      	cmp	r3, ip
 8023a32:	dd4b      	ble.n	8023acc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8023a34:	f812 200e 	ldrb.w	r2, [r2, lr]
 8023a38:	9200      	str	r2, [sp, #0]
 8023a3a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8023a3e:	9201      	str	r2, [sp, #4]
 8023a40:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8023a44:	9202      	str	r2, [sp, #8]
 8023a46:	f11c 0201 	adds.w	r2, ip, #1
 8023a4a:	d44a      	bmi.n	8023ae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8023a4c:	4293      	cmp	r3, r2
 8023a4e:	dd48      	ble.n	8023ae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8023a50:	2800      	cmp	r0, #0
 8023a52:	d046      	beq.n	8023ae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8023a54:	f89b e003 	ldrb.w	lr, [fp, #3]
 8023a58:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8023a5c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8023a60:	3701      	adds	r7, #1
 8023a62:	d446      	bmi.n	8023af2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8023a64:	45b9      	cmp	r9, r7
 8023a66:	dd44      	ble.n	8023af2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8023a68:	9a03      	ldr	r2, [sp, #12]
 8023a6a:	2a00      	cmp	r2, #0
 8023a6c:	d045      	beq.n	8023afa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8023a6e:	f1bc 0f00 	cmp.w	ip, #0
 8023a72:	db3a      	blt.n	8023aea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8023a74:	4563      	cmp	r3, ip
 8023a76:	dd38      	ble.n	8023aea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8023a78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023a7c:	f04f 0903 	mov.w	r9, #3
 8023a80:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8023a84:	fb03 b209 	mla	r2, r3, r9, fp
 8023a88:	fb03 b909 	mla	r9, r3, r9, fp
 8023a8c:	7852      	ldrb	r2, [r2, #1]
 8023a8e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8023a92:	f11c 0c01 	adds.w	ip, ip, #1
 8023a96:	d40d      	bmi.n	8023ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8023a98:	4563      	cmp	r3, ip
 8023a9a:	dd0b      	ble.n	8023ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8023a9c:	b160      	cbz	r0, 8023ab8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8023a9e:	2603      	movs	r6, #3
 8023aa0:	fb13 6406 	smlabb	r4, r3, r6, r6
 8023aa4:	fb03 b506 	mla	r5, r3, r6, fp
 8023aa8:	fb03 b306 	mla	r3, r3, r6, fp
 8023aac:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8023ab0:	792d      	ldrb	r5, [r5, #4]
 8023ab2:	795e      	ldrb	r6, [r3, #5]
 8023ab4:	280f      	cmp	r0, #15
 8023ab6:	d802      	bhi.n	8023abe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8023ab8:	9b03      	ldr	r3, [sp, #12]
 8023aba:	2b0f      	cmp	r3, #15
 8023abc:	d922      	bls.n	8023b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8023abe:	4b2f      	ldr	r3, [pc, #188]	; (8023b7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8023ac0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8023ac4:	4a2e      	ldr	r2, [pc, #184]	; (8023b80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8023ac6:	482f      	ldr	r0, [pc, #188]	; (8023b84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8023ac8:	f004 fa3a 	bl	8027f40 <__assert_func>
 8023acc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8023ad0:	9400      	str	r4, [sp, #0]
 8023ad2:	e7b8      	b.n	8023a46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8023ad4:	46b2      	mov	sl, r6
 8023ad6:	46a8      	mov	r8, r5
 8023ad8:	46a6      	mov	lr, r4
 8023ada:	9400      	str	r4, [sp, #0]
 8023adc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8023ae0:	e7be      	b.n	8023a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8023ae2:	46b2      	mov	sl, r6
 8023ae4:	46a8      	mov	r8, r5
 8023ae6:	46a6      	mov	lr, r4
 8023ae8:	e7ba      	b.n	8023a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8023aea:	46b1      	mov	r9, r6
 8023aec:	462a      	mov	r2, r5
 8023aee:	4627      	mov	r7, r4
 8023af0:	e7cf      	b.n	8023a92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8023af2:	46b1      	mov	r9, r6
 8023af4:	462a      	mov	r2, r5
 8023af6:	4627      	mov	r7, r4
 8023af8:	e7dc      	b.n	8023ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8023afa:	280f      	cmp	r0, #15
 8023afc:	d8df      	bhi.n	8023abe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8023afe:	46b1      	mov	r9, r6
 8023b00:	462a      	mov	r2, r5
 8023b02:	4627      	mov	r7, r4
 8023b04:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8023b08:	b280      	uxth	r0, r0
 8023b0a:	fb00 f30b 	mul.w	r3, r0, fp
 8023b0e:	0100      	lsls	r0, r0, #4
 8023b10:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8023b14:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8023b18:	1ac0      	subs	r0, r0, r3
 8023b1a:	fa1f fb8b 	uxth.w	fp, fp
 8023b1e:	b280      	uxth	r0, r0
 8023b20:	ebac 0c0b 	sub.w	ip, ip, fp
 8023b24:	9003      	str	r0, [sp, #12]
 8023b26:	fa1f fc8c 	uxth.w	ip, ip
 8023b2a:	fb00 fe0e 	mul.w	lr, r0, lr
 8023b2e:	9800      	ldr	r0, [sp, #0]
 8023b30:	fb0c ee00 	mla	lr, ip, r0, lr
 8023b34:	9803      	ldr	r0, [sp, #12]
 8023b36:	fb00 f808 	mul.w	r8, r0, r8
 8023b3a:	9801      	ldr	r0, [sp, #4]
 8023b3c:	fb0b ee07 	mla	lr, fp, r7, lr
 8023b40:	fb0c 8800 	mla	r8, ip, r0, r8
 8023b44:	fb03 ee04 	mla	lr, r3, r4, lr
 8023b48:	fb0b 8202 	mla	r2, fp, r2, r8
 8023b4c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023b50:	fb03 2505 	mla	r5, r3, r5, r2
 8023b54:	9a03      	ldr	r2, [sp, #12]
 8023b56:	f881 e000 	strb.w	lr, [r1]
 8023b5a:	fb02 f00a 	mul.w	r0, r2, sl
 8023b5e:	9a02      	ldr	r2, [sp, #8]
 8023b60:	122d      	asrs	r5, r5, #8
 8023b62:	fb0c 0c02 	mla	ip, ip, r2, r0
 8023b66:	704d      	strb	r5, [r1, #1]
 8023b68:	fb0b c909 	mla	r9, fp, r9, ip
 8023b6c:	fb03 9606 	mla	r6, r3, r6, r9
 8023b70:	1236      	asrs	r6, r6, #8
 8023b72:	708e      	strb	r6, [r1, #2]
 8023b74:	b005      	add	sp, #20
 8023b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b7a:	bf00      	nop
 8023b7c:	0802cb61 	.word	0x0802cb61
 8023b80:	0802d05e 	.word	0x0802d05e
 8023b84:	0802cc2a 	.word	0x0802cc2a

08023b88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b8c:	ed2d 8b08 	vpush	{d8-d11}
 8023b90:	b09b      	sub	sp, #108	; 0x6c
 8023b92:	eeb0 aa40 	vmov.f32	s20, s0
 8023b96:	eef0 9a60 	vmov.f32	s19, s1
 8023b9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8023b9c:	eeb0 9a41 	vmov.f32	s18, s2
 8023ba0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023ba2:	eeb0 8a62 	vmov.f32	s16, s5
 8023ba6:	9019      	str	r0, [sp, #100]	; 0x64
 8023ba8:	eef0 8a43 	vmov.f32	s17, s6
 8023bac:	6850      	ldr	r0, [r2, #4]
 8023bae:	eef0 ba44 	vmov.f32	s23, s8
 8023bb2:	9109      	str	r1, [sp, #36]	; 0x24
 8023bb4:	eeb0 ba64 	vmov.f32	s22, s9
 8023bb8:	9306      	str	r3, [sp, #24]
 8023bba:	eef0 aa45 	vmov.f32	s21, s10
 8023bbe:	6812      	ldr	r2, [r2, #0]
 8023bc0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8023bc4:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8023bc8:	fb00 1303 	mla	r3, r0, r3, r1
 8023bcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023bd0:	18d3      	adds	r3, r2, r3
 8023bd2:	9307      	str	r3, [sp, #28]
 8023bd4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023bd6:	681b      	ldr	r3, [r3, #0]
 8023bd8:	9308      	str	r3, [sp, #32]
 8023bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	dc03      	bgt.n	8023be8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023be2:	2b00      	cmp	r3, #0
 8023be4:	f340 81ab 	ble.w	8023f3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8023be8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023bea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023bee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023bf2:	1e48      	subs	r0, r1, #1
 8023bf4:	1e55      	subs	r5, r2, #1
 8023bf6:	9b06      	ldr	r3, [sp, #24]
 8023bf8:	2b00      	cmp	r3, #0
 8023bfa:	f340 80b1 	ble.w	8023d60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8023bfe:	ea5f 462b 	movs.w	r6, fp, asr #16
 8023c02:	ea4f 4324 	mov.w	r3, r4, asr #16
 8023c06:	d406      	bmi.n	8023c16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023c08:	4286      	cmp	r6, r0
 8023c0a:	da04      	bge.n	8023c16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023c0c:	2b00      	cmp	r3, #0
 8023c0e:	db02      	blt.n	8023c16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023c10:	42ab      	cmp	r3, r5
 8023c12:	f2c0 80a6 	blt.w	8023d62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8023c16:	3601      	adds	r6, #1
 8023c18:	f100 8097 	bmi.w	8023d4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023c1c:	42b1      	cmp	r1, r6
 8023c1e:	f2c0 8094 	blt.w	8023d4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023c22:	3301      	adds	r3, #1
 8023c24:	f100 8091 	bmi.w	8023d4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023c28:	429a      	cmp	r2, r3
 8023c2a:	f2c0 808e 	blt.w	8023d4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023c2e:	9b06      	ldr	r3, [sp, #24]
 8023c30:	9e07      	ldr	r6, [sp, #28]
 8023c32:	930a      	str	r3, [sp, #40]	; 0x28
 8023c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c36:	2b00      	cmp	r3, #0
 8023c38:	f340 80b0 	ble.w	8023d9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023c3c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8023c3e:	1425      	asrs	r5, r4, #16
 8023c40:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023c42:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8023c46:	68c7      	ldr	r7, [r0, #12]
 8023c48:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023c4c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023c50:	689b      	ldr	r3, [r3, #8]
 8023c52:	f100 80ea 	bmi.w	8023e2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023c56:	f103 3cff 	add.w	ip, r3, #4294967295
 8023c5a:	4560      	cmp	r0, ip
 8023c5c:	f280 80e5 	bge.w	8023e2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023c60:	2d00      	cmp	r5, #0
 8023c62:	f2c0 80e2 	blt.w	8023e2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023c66:	f107 3cff 	add.w	ip, r7, #4294967295
 8023c6a:	4565      	cmp	r5, ip
 8023c6c:	f280 80dd 	bge.w	8023e2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023c70:	b21b      	sxth	r3, r3
 8023c72:	fb05 0003 	mla	r0, r5, r3, r0
 8023c76:	9d08      	ldr	r5, [sp, #32]
 8023c78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023c7c:	182f      	adds	r7, r5, r0
 8023c7e:	5c2d      	ldrb	r5, [r5, r0]
 8023c80:	7878      	ldrb	r0, [r7, #1]
 8023c82:	f897 e002 	ldrb.w	lr, [r7, #2]
 8023c86:	900c      	str	r0, [sp, #48]	; 0x30
 8023c88:	f897 9003 	ldrb.w	r9, [r7, #3]
 8023c8c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8023c90:	f897 a005 	ldrb.w	sl, [r7, #5]
 8023c94:	b1c9      	cbz	r1, 8023cca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8023c96:	f04f 0c03 	mov.w	ip, #3
 8023c9a:	f06f 0004 	mvn.w	r0, #4
 8023c9e:	3705      	adds	r7, #5
 8023ca0:	fb13 030c 	smlabb	r3, r3, ip, r0
 8023ca4:	eb07 0c03 	add.w	ip, r7, r3
 8023ca8:	5cfb      	ldrb	r3, [r7, r3]
 8023caa:	930d      	str	r3, [sp, #52]	; 0x34
 8023cac:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cb2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8023cb6:	9311      	str	r3, [sp, #68]	; 0x44
 8023cb8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8023cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8023cbe:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8023cc2:	9310      	str	r3, [sp, #64]	; 0x40
 8023cc4:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8023cc8:	9312      	str	r3, [sp, #72]	; 0x48
 8023cca:	b292      	uxth	r2, r2
 8023ccc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023cce:	b289      	uxth	r1, r1
 8023cd0:	fb02 f301 	mul.w	r3, r2, r1
 8023cd4:	0112      	lsls	r2, r2, #4
 8023cd6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023cda:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8023cde:	1ad2      	subs	r2, r2, r3
 8023ce0:	b289      	uxth	r1, r1
 8023ce2:	b292      	uxth	r2, r2
 8023ce4:	1a7f      	subs	r7, r7, r1
 8023ce6:	fb02 f909 	mul.w	r9, r2, r9
 8023cea:	b2bf      	uxth	r7, r7
 8023cec:	fb02 f808 	mul.w	r8, r2, r8
 8023cf0:	fb02 fa0a 	mul.w	sl, r2, sl
 8023cf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023cf6:	fb07 9905 	mla	r9, r7, r5, r9
 8023cfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023cfc:	fb07 8800 	mla	r8, r7, r0, r8
 8023d00:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023d02:	fb07 aa0e 	mla	sl, r7, lr, sl
 8023d06:	fb01 9905 	mla	r9, r1, r5, r9
 8023d0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023d0c:	fb01 8800 	mla	r8, r1, r0, r8
 8023d10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023d12:	fb01 a102 	mla	r1, r1, r2, sl
 8023d16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023d18:	fb03 9905 	mla	r9, r3, r5, r9
 8023d1c:	fb03 8800 	mla	r8, r3, r0, r8
 8023d20:	fb03 1302 	mla	r3, r3, r2, r1
 8023d24:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023d28:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023d2c:	121b      	asrs	r3, r3, #8
 8023d2e:	f886 9000 	strb.w	r9, [r6]
 8023d32:	f886 8001 	strb.w	r8, [r6, #1]
 8023d36:	70b3      	strb	r3, [r6, #2]
 8023d38:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023d3a:	3603      	adds	r6, #3
 8023d3c:	449b      	add	fp, r3
 8023d3e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023d40:	441c      	add	r4, r3
 8023d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d44:	3b01      	subs	r3, #1
 8023d46:	930a      	str	r3, [sp, #40]	; 0x28
 8023d48:	e774      	b.n	8023c34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8023d4a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023d4c:	449b      	add	fp, r3
 8023d4e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023d50:	441c      	add	r4, r3
 8023d52:	9b06      	ldr	r3, [sp, #24]
 8023d54:	3b01      	subs	r3, #1
 8023d56:	9306      	str	r3, [sp, #24]
 8023d58:	9b07      	ldr	r3, [sp, #28]
 8023d5a:	3303      	adds	r3, #3
 8023d5c:	9307      	str	r3, [sp, #28]
 8023d5e:	e74a      	b.n	8023bf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023d60:	d024      	beq.n	8023dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023d62:	9b06      	ldr	r3, [sp, #24]
 8023d64:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8023d66:	3b01      	subs	r3, #1
 8023d68:	fb00 b003 	mla	r0, r0, r3, fp
 8023d6c:	1400      	asrs	r0, r0, #16
 8023d6e:	f53f af5e 	bmi.w	8023c2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023d72:	3901      	subs	r1, #1
 8023d74:	4288      	cmp	r0, r1
 8023d76:	f6bf af5a 	bge.w	8023c2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023d7a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8023d7c:	fb01 4303 	mla	r3, r1, r3, r4
 8023d80:	141b      	asrs	r3, r3, #16
 8023d82:	f53f af54 	bmi.w	8023c2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023d86:	3a01      	subs	r2, #1
 8023d88:	4293      	cmp	r3, r2
 8023d8a:	f6bf af50 	bge.w	8023c2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023d8e:	9b07      	ldr	r3, [sp, #28]
 8023d90:	f8dd e018 	ldr.w	lr, [sp, #24]
 8023d94:	1cde      	adds	r6, r3, #3
 8023d96:	f1be 0f00 	cmp.w	lr, #0
 8023d9a:	dc5f      	bgt.n	8023e5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8023d9c:	9b06      	ldr	r3, [sp, #24]
 8023d9e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023da2:	9b07      	ldr	r3, [sp, #28]
 8023da4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023da8:	4423      	add	r3, r4
 8023daa:	9307      	str	r3, [sp, #28]
 8023dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dae:	2b00      	cmp	r3, #0
 8023db0:	f340 80c5 	ble.w	8023f3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8023db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023db8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023dba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023dbe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023dc2:	eef0 6a48 	vmov.f32	s13, s16
 8023dc6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023dca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023dce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023dd2:	ee16 ba90 	vmov	fp, s13
 8023dd6:	eef0 6a68 	vmov.f32	s13, s17
 8023dda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023dde:	ee16 4a90 	vmov	r4, s13
 8023de2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023de6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023dea:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023dee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023df2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023df6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023dfa:	ee18 2a10 	vmov	r2, s16
 8023dfe:	eeb0 8a47 	vmov.f32	s16, s14
 8023e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e06:	ee18 2a90 	vmov	r2, s17
 8023e0a:	932f      	str	r3, [sp, #188]	; 0xbc
 8023e0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023e0e:	eef0 8a67 	vmov.f32	s17, s15
 8023e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e16:	9330      	str	r3, [sp, #192]	; 0xc0
 8023e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023e1c:	3b01      	subs	r3, #1
 8023e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8023e20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023e22:	bf08      	it	eq
 8023e24:	4613      	moveq	r3, r2
 8023e26:	9306      	str	r3, [sp, #24]
 8023e28:	e6d7      	b.n	8023bda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023e2a:	f110 0c01 	adds.w	ip, r0, #1
 8023e2e:	d483      	bmi.n	8023d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8023e30:	4563      	cmp	r3, ip
 8023e32:	db81      	blt.n	8023d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8023e34:	f115 0c01 	adds.w	ip, r5, #1
 8023e38:	f53f af7e 	bmi.w	8023d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8023e3c:	4567      	cmp	r7, ip
 8023e3e:	f6ff af7b 	blt.w	8023d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8023e42:	b23f      	sxth	r7, r7
 8023e44:	b21b      	sxth	r3, r3
 8023e46:	9700      	str	r7, [sp, #0]
 8023e48:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8023e4c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8023e50:	9a08      	ldr	r2, [sp, #32]
 8023e52:	4631      	mov	r1, r6
 8023e54:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023e56:	f7ff fdcf 	bl	80239f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8023e5a:	e76d      	b.n	8023d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8023e5c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8023e5e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8023e62:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023e66:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023e6a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8023e6e:	1421      	asrs	r1, r4, #16
 8023e70:	930a      	str	r3, [sp, #40]	; 0x28
 8023e72:	fb0c 0101 	mla	r1, ip, r1, r0
 8023e76:	9808      	ldr	r0, [sp, #32]
 8023e78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023e7c:	1845      	adds	r5, r0, r1
 8023e7e:	5c40      	ldrb	r0, [r0, r1]
 8023e80:	796f      	ldrb	r7, [r5, #5]
 8023e82:	7869      	ldrb	r1, [r5, #1]
 8023e84:	f895 8002 	ldrb.w	r8, [r5, #2]
 8023e88:	f895 a003 	ldrb.w	sl, [r5, #3]
 8023e8c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8023e90:	970c      	str	r7, [sp, #48]	; 0x30
 8023e92:	b1a2      	cbz	r2, 8023ebe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8023e94:	2703      	movs	r7, #3
 8023e96:	f06f 0304 	mvn.w	r3, #4
 8023e9a:	3505      	adds	r5, #5
 8023e9c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8023ea0:	eb05 070c 	add.w	r7, r5, ip
 8023ea4:	f815 500c 	ldrb.w	r5, [r5, ip]
 8023ea8:	9513      	str	r5, [sp, #76]	; 0x4c
 8023eaa:	787d      	ldrb	r5, [r7, #1]
 8023eac:	9515      	str	r5, [sp, #84]	; 0x54
 8023eae:	78bd      	ldrb	r5, [r7, #2]
 8023eb0:	9517      	str	r5, [sp, #92]	; 0x5c
 8023eb2:	78fd      	ldrb	r5, [r7, #3]
 8023eb4:	9514      	str	r5, [sp, #80]	; 0x50
 8023eb6:	793d      	ldrb	r5, [r7, #4]
 8023eb8:	9516      	str	r5, [sp, #88]	; 0x58
 8023eba:	797d      	ldrb	r5, [r7, #5]
 8023ebc:	9518      	str	r5, [sp, #96]	; 0x60
 8023ebe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8023ec2:	b292      	uxth	r2, r2
 8023ec4:	3603      	adds	r6, #3
 8023ec6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023eca:	fb03 f502 	mul.w	r5, r3, r2
 8023ece:	011b      	lsls	r3, r3, #4
 8023ed0:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8023ed4:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8023ed8:	1b5b      	subs	r3, r3, r5
 8023eda:	b292      	uxth	r2, r2
 8023edc:	b29b      	uxth	r3, r3
 8023ede:	1abf      	subs	r7, r7, r2
 8023ee0:	fb03 f909 	mul.w	r9, r3, r9
 8023ee4:	b2bf      	uxth	r7, r7
 8023ee6:	fb03 fa0a 	mul.w	sl, r3, sl
 8023eea:	fb07 9901 	mla	r9, r7, r1, r9
 8023eee:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023ef0:	fb07 aa00 	mla	sl, r7, r0, sl
 8023ef4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023ef6:	fb02 9901 	mla	r9, r2, r1, r9
 8023efa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8023efc:	fb02 aa00 	mla	sl, r2, r0, sl
 8023f00:	9814      	ldr	r0, [sp, #80]	; 0x50
 8023f02:	fb05 9901 	mla	r9, r5, r1, r9
 8023f06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023f08:	fb05 aa00 	mla	sl, r5, r0, sl
 8023f0c:	434b      	muls	r3, r1
 8023f0e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023f10:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023f14:	fb07 3308 	mla	r3, r7, r8, r3
 8023f18:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023f1c:	f806 ac06 	strb.w	sl, [r6, #-6]
 8023f20:	fb02 3201 	mla	r2, r2, r1, r3
 8023f24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023f26:	f806 9c05 	strb.w	r9, [r6, #-5]
 8023f2a:	fb05 2503 	mla	r5, r5, r3, r2
 8023f2e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023f30:	122d      	asrs	r5, r5, #8
 8023f32:	449b      	add	fp, r3
 8023f34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023f36:	f806 5c04 	strb.w	r5, [r6, #-4]
 8023f3a:	441c      	add	r4, r3
 8023f3c:	e72b      	b.n	8023d96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023f3e:	b01b      	add	sp, #108	; 0x6c
 8023f40:	ecbd 8b08 	vpop	{d8-d11}
 8023f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023f48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8023f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f4c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8023f50:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023f54:	fb04 5603 	mla	r6, r4, r3, r5
 8023f58:	2c00      	cmp	r4, #0
 8023f5a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8023f5e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8023f62:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8023f66:	db36      	blt.n	8023fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8023f68:	45a6      	cmp	lr, r4
 8023f6a:	dd34      	ble.n	8023fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8023f6c:	2d00      	cmp	r5, #0
 8023f6e:	db30      	blt.n	8023fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8023f70:	42ab      	cmp	r3, r5
 8023f72:	dd2e      	ble.n	8023fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8023f74:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8023f78:	1c6e      	adds	r6, r5, #1
 8023f7a:	d42f      	bmi.n	8023fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8023f7c:	42b3      	cmp	r3, r6
 8023f7e:	dd2d      	ble.n	8023fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8023f80:	b370      	cbz	r0, 8023fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8023f82:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8023f86:	3401      	adds	r4, #1
 8023f88:	d42e      	bmi.n	8023fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8023f8a:	45a6      	cmp	lr, r4
 8023f8c:	dd2c      	ble.n	8023fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8023f8e:	b377      	cbz	r7, 8023fee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8023f90:	2d00      	cmp	r5, #0
 8023f92:	db27      	blt.n	8023fe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8023f94:	42ab      	cmp	r3, r5
 8023f96:	dd25      	ble.n	8023fe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8023f98:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023f9c:	3501      	adds	r5, #1
 8023f9e:	d429      	bmi.n	8023ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8023fa0:	42ab      	cmp	r3, r5
 8023fa2:	dd27      	ble.n	8023ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8023fa4:	b340      	cbz	r0, 8023ff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8023fa6:	3301      	adds	r3, #1
 8023fa8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8023fac:	280f      	cmp	r0, #15
 8023fae:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023fb2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023fb6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023fba:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023fbe:	d801      	bhi.n	8023fc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8023fc0:	2f0f      	cmp	r7, #15
 8023fc2:	d91b      	bls.n	8023ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8023fc4:	4b89      	ldr	r3, [pc, #548]	; (80241ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8023fc6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8023fca:	4a89      	ldr	r2, [pc, #548]	; (80241f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8023fcc:	4889      	ldr	r0, [pc, #548]	; (80241f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8023fce:	f003 ffb7 	bl	8027f40 <__assert_func>
 8023fd2:	2200      	movs	r2, #0
 8023fd4:	e7d0      	b.n	8023f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8023fd6:	2600      	movs	r6, #0
 8023fd8:	4632      	mov	r2, r6
 8023fda:	e7d4      	b.n	8023f86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8023fdc:	2600      	movs	r6, #0
 8023fde:	e7d2      	b.n	8023f86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8023fe0:	4606      	mov	r6, r0
 8023fe2:	e7d0      	b.n	8023f86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8023fe4:	2400      	movs	r4, #0
 8023fe6:	e7d9      	b.n	8023f9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8023fe8:	2300      	movs	r3, #0
 8023fea:	461c      	mov	r4, r3
 8023fec:	e7de      	b.n	8023fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8023fee:	463b      	mov	r3, r7
 8023ff0:	463c      	mov	r4, r7
 8023ff2:	e7db      	b.n	8023fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8023ff4:	2300      	movs	r3, #0
 8023ff6:	e7d9      	b.n	8023fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8023ff8:	4603      	mov	r3, r0
 8023ffa:	e7d7      	b.n	8023fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8023ffc:	b280      	uxth	r0, r0
 8023ffe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024002:	b2bf      	uxth	r7, r7
 8024004:	fb00 fe07 	mul.w	lr, r0, r7
 8024008:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802400c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024010:	eba0 0c0e 	sub.w	ip, r0, lr
 8024014:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024018:	b2bf      	uxth	r7, r7
 802401a:	fa1f fc8c 	uxth.w	ip, ip
 802401e:	eba5 0507 	sub.w	r5, r5, r7
 8024022:	fb0c f00a 	mul.w	r0, ip, sl
 8024026:	b2ad      	uxth	r5, r5
 8024028:	fb05 000b 	mla	r0, r5, fp, r0
 802402c:	fb07 0009 	mla	r0, r7, r9, r0
 8024030:	fb0e 0008 	mla	r0, lr, r8, r0
 8024034:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024038:	9001      	str	r0, [sp, #4]
 802403a:	d018      	beq.n	802406e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 802403c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024040:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024044:	fb0b f000 	mul.w	r0, fp, r0
 8024048:	fb0b fb02 	mul.w	fp, fp, r2
 802404c:	0a02      	lsrs	r2, r0, #8
 802404e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024052:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024056:	4402      	add	r2, r0
 8024058:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802405c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024060:	0a12      	lsrs	r2, r2, #8
 8024062:	0a00      	lsrs	r0, r0, #8
 8024064:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024068:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802406c:	4302      	orrs	r2, r0
 802406e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024072:	d01a      	beq.n	80240aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8024074:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024078:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802407c:	fb0a f000 	mul.w	r0, sl, r0
 8024080:	fb0a fa06 	mul.w	sl, sl, r6
 8024084:	0a06      	lsrs	r6, r0, #8
 8024086:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802408a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802408e:	4406      	add	r6, r0
 8024090:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024094:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024098:	0a36      	lsrs	r6, r6, #8
 802409a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802409e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80240a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240a6:	ea46 060a 	orr.w	r6, r6, sl
 80240aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80240ae:	d01b      	beq.n	80240e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 80240b0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80240b4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80240b8:	fb09 fa0a 	mul.w	sl, r9, sl
 80240bc:	fb09 f004 	mul.w	r0, r9, r4
 80240c0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80240c4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80240c8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80240cc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80240d0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80240d4:	4454      	add	r4, sl
 80240d6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80240da:	0a24      	lsrs	r4, r4, #8
 80240dc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80240e0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80240e4:	ea44 0409 	orr.w	r4, r4, r9
 80240e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80240ec:	d01b      	beq.n	8024126 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 80240ee:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80240f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80240f6:	fb08 f909 	mul.w	r9, r8, r9
 80240fa:	fb08 f003 	mul.w	r0, r8, r3
 80240fe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024102:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024106:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802410a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802410e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8024112:	444b      	add	r3, r9
 8024114:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024118:	0a1b      	lsrs	r3, r3, #8
 802411a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802411e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024122:	ea43 0308 	orr.w	r3, r3, r8
 8024126:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802412a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802412e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8024132:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024136:	fb0c f000 	mul.w	r0, ip, r0
 802413a:	fb0c f606 	mul.w	r6, ip, r6
 802413e:	fb05 0808 	mla	r8, r5, r8, r0
 8024142:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024146:	fb05 6502 	mla	r5, r5, r2, r6
 802414a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802414e:	fb07 8800 	mla	r8, r7, r0, r8
 8024152:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8024156:	fb07 5704 	mla	r7, r7, r4, r5
 802415a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802415e:	fb0e 8000 	mla	r0, lr, r0, r8
 8024162:	fb0e 7e03 	mla	lr, lr, r3, r7
 8024166:	9b01      	ldr	r3, [sp, #4]
 8024168:	0a00      	lsrs	r0, r0, #8
 802416a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802416e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024172:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024176:	ea40 0e0e 	orr.w	lr, r0, lr
 802417a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802417e:	b280      	uxth	r0, r0
 8024180:	fa5f f48e 	uxtb.w	r4, lr
 8024184:	4343      	muls	r3, r0
 8024186:	fb14 f400 	smulbb	r4, r4, r0
 802418a:	1c5a      	adds	r2, r3, #1
 802418c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024190:	780b      	ldrb	r3, [r1, #0]
 8024192:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8024196:	b2d2      	uxtb	r2, r2
 8024198:	fb03 4302 	mla	r3, r3, r2, r4
 802419c:	b29b      	uxth	r3, r3
 802419e:	1c5c      	adds	r4, r3, #1
 80241a0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80241a4:	784c      	ldrb	r4, [r1, #1]
 80241a6:	fb14 f402 	smulbb	r4, r4, r2
 80241aa:	121b      	asrs	r3, r3, #8
 80241ac:	700b      	strb	r3, [r1, #0]
 80241ae:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80241b2:	fb03 4300 	mla	r3, r3, r0, r4
 80241b6:	b29b      	uxth	r3, r3
 80241b8:	1c5c      	adds	r4, r3, #1
 80241ba:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80241be:	121b      	asrs	r3, r3, #8
 80241c0:	704b      	strb	r3, [r1, #1]
 80241c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80241c6:	f891 e002 	ldrb.w	lr, [r1, #2]
 80241ca:	fb1e fe02 	smulbb	lr, lr, r2
 80241ce:	fb03 ee00 	mla	lr, r3, r0, lr
 80241d2:	fa1f fe8e 	uxth.w	lr, lr
 80241d6:	f10e 0301 	add.w	r3, lr, #1
 80241da:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80241de:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80241e2:	f881 e002 	strb.w	lr, [r1, #2]
 80241e6:	b003      	add	sp, #12
 80241e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241ec:	0802cb61 	.word	0x0802cb61
 80241f0:	0802d05e 	.word	0x0802d05e
 80241f4:	0802cc2a 	.word	0x0802cc2a

080241f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80241f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241fc:	ed2d 8b08 	vpush	{d8-d11}
 8024200:	b09d      	sub	sp, #116	; 0x74
 8024202:	eeb0 aa40 	vmov.f32	s20, s0
 8024206:	eef0 9a60 	vmov.f32	s19, s1
 802420a:	9219      	str	r2, [sp, #100]	; 0x64
 802420c:	eeb0 9a41 	vmov.f32	s18, s2
 8024210:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8024212:	eeb0 8a62 	vmov.f32	s16, s5
 8024216:	9307      	str	r3, [sp, #28]
 8024218:	eef0 8a43 	vmov.f32	s17, s6
 802421c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8024220:	eef0 ba44 	vmov.f32	s23, s8
 8024224:	901b      	str	r0, [sp, #108]	; 0x6c
 8024226:	eeb0 ba64 	vmov.f32	s22, s9
 802422a:	931a      	str	r3, [sp, #104]	; 0x68
 802422c:	eef0 aa45 	vmov.f32	s21, s10
 8024230:	6850      	ldr	r0, [r2, #4]
 8024232:	9117      	str	r1, [sp, #92]	; 0x5c
 8024234:	6812      	ldr	r2, [r2, #0]
 8024236:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 802423a:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 802423e:	fb00 1303 	mla	r3, r0, r3, r1
 8024242:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024246:	18d3      	adds	r3, r2, r3
 8024248:	930a      	str	r3, [sp, #40]	; 0x28
 802424a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802424c:	681b      	ldr	r3, [r3, #0]
 802424e:	9310      	str	r3, [sp, #64]	; 0x40
 8024250:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8024254:	930b      	str	r3, [sp, #44]	; 0x2c
 8024256:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024258:	2b00      	cmp	r3, #0
 802425a:	dc03      	bgt.n	8024264 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802425c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802425e:	2b00      	cmp	r3, #0
 8024260:	f340 8368 	ble.w	8024934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024264:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024266:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802426a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802426e:	1e48      	subs	r0, r1, #1
 8024270:	1e57      	subs	r7, r2, #1
 8024272:	9b07      	ldr	r3, [sp, #28]
 8024274:	2b00      	cmp	r3, #0
 8024276:	f340 8187 	ble.w	8024588 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802427a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802427e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024282:	d406      	bmi.n	8024292 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024284:	4584      	cmp	ip, r0
 8024286:	da04      	bge.n	8024292 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024288:	2b00      	cmp	r3, #0
 802428a:	db02      	blt.n	8024292 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802428c:	42bb      	cmp	r3, r7
 802428e:	f2c0 817c 	blt.w	802458a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024292:	f11c 0c01 	adds.w	ip, ip, #1
 8024296:	f100 816c 	bmi.w	8024572 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802429a:	4561      	cmp	r1, ip
 802429c:	f2c0 8169 	blt.w	8024572 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80242a0:	3301      	adds	r3, #1
 80242a2:	f100 8166 	bmi.w	8024572 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80242a6:	429a      	cmp	r2, r3
 80242a8:	f2c0 8163 	blt.w	8024572 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80242ac:	9b07      	ldr	r3, [sp, #28]
 80242ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80242b0:	9318      	str	r3, [sp, #96]	; 0x60
 80242b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80242b4:	2b00      	cmp	r3, #0
 80242b6:	f340 8186 	ble.w	80245c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80242ba:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80242bc:	142a      	asrs	r2, r5, #16
 80242be:	ea4f 4026 	mov.w	r0, r6, asr #16
 80242c2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80242c6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80242ca:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80242ce:	f100 81cb 	bmi.w	8024668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80242d2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80242d6:	4542      	cmp	r2, r8
 80242d8:	f280 81c6 	bge.w	8024668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80242dc:	2800      	cmp	r0, #0
 80242de:	f2c0 81c3 	blt.w	8024668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80242e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80242e6:	4540      	cmp	r0, r8
 80242e8:	f280 81be 	bge.w	8024668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80242ec:	fa0f f38e 	sxth.w	r3, lr
 80242f0:	fb00 2203 	mla	r2, r0, r3, r2
 80242f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80242f6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80242fa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80242fe:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024302:	2900      	cmp	r1, #0
 8024304:	f000 81a6 	beq.w	8024654 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8024308:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802430c:	900c      	str	r0, [sp, #48]	; 0x30
 802430e:	0e00      	lsrs	r0, r0, #24
 8024310:	9013      	str	r0, [sp, #76]	; 0x4c
 8024312:	f1bc 0f00 	cmp.w	ip, #0
 8024316:	d00f      	beq.n	8024338 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8024318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802431c:	3b01      	subs	r3, #1
 802431e:	009b      	lsls	r3, r3, #2
 8024320:	3304      	adds	r3, #4
 8024322:	eb08 0003 	add.w	r0, r8, r3
 8024326:	f858 3003 	ldr.w	r3, [r8, r3]
 802432a:	9308      	str	r3, [sp, #32]
 802432c:	0e1b      	lsrs	r3, r3, #24
 802432e:	9311      	str	r3, [sp, #68]	; 0x44
 8024330:	6843      	ldr	r3, [r0, #4]
 8024332:	930d      	str	r3, [sp, #52]	; 0x34
 8024334:	0e1b      	lsrs	r3, r3, #24
 8024336:	9314      	str	r3, [sp, #80]	; 0x50
 8024338:	b289      	uxth	r1, r1
 802433a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802433c:	fa1f fc8c 	uxth.w	ip, ip
 8024340:	0108      	lsls	r0, r1, #4
 8024342:	fb01 f90c 	mul.w	r9, r1, ip
 8024346:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802434a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 802434e:	eba0 0809 	sub.w	r8, r0, r9
 8024352:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024354:	fa1f f18c 	uxth.w	r1, ip
 8024358:	fa1f f888 	uxth.w	r8, r8
 802435c:	1a5b      	subs	r3, r3, r1
 802435e:	fb08 f000 	mul.w	r0, r8, r0
 8024362:	b29b      	uxth	r3, r3
 8024364:	fb03 000e 	mla	r0, r3, lr, r0
 8024368:	fb01 0004 	mla	r0, r1, r4, r0
 802436c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802436e:	fb09 0004 	mla	r0, r9, r4, r0
 8024372:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024376:	2800      	cmp	r0, #0
 8024378:	f000 80f2 	beq.w	8024560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802437c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024380:	d01b      	beq.n	80243ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024382:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8024386:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802438a:	fb0e fa0a 	mul.w	sl, lr, sl
 802438e:	fb0e fe02 	mul.w	lr, lr, r2
 8024392:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024396:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802439a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802439e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80243a2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80243a6:	4452      	add	r2, sl
 80243a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243ac:	0a12      	lsrs	r2, r2, #8
 80243ae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80243b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80243b6:	ea42 020c 	orr.w	r2, r2, ip
 80243ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80243bc:	2cff      	cmp	r4, #255	; 0xff
 80243be:	d021      	beq.n	8024404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80243c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80243c2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80243c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80243c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80243cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80243ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80243d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80243d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80243d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80243dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80243e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80243e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80243e8:	44de      	add	lr, fp
 80243ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80243ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80243f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80243fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80243fe:	ea4e 040a 	orr.w	r4, lr, sl
 8024402:	940c      	str	r4, [sp, #48]	; 0x30
 8024404:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024406:	2cff      	cmp	r4, #255	; 0xff
 8024408:	d021      	beq.n	802444e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 802440a:	9c08      	ldr	r4, [sp, #32]
 802440c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024410:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024412:	fb04 fb0b 	mul.w	fp, r4, fp
 8024416:	9c08      	ldr	r4, [sp, #32]
 8024418:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802441c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802441e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024422:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024426:	fb04 fa0a 	mul.w	sl, r4, sl
 802442a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802442e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024432:	44de      	add	lr, fp
 8024434:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024438:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802443c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024440:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024444:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024448:	ea4e 040a 	orr.w	r4, lr, sl
 802444c:	9408      	str	r4, [sp, #32]
 802444e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024450:	2cff      	cmp	r4, #255	; 0xff
 8024452:	d021      	beq.n	8024498 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024454:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024456:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802445a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802445c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024460:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024462:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024466:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024468:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802446c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024470:	fb04 fa0a 	mul.w	sl, r4, sl
 8024474:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024478:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802447c:	44de      	add	lr, fp
 802447e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024482:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024486:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802448a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802448e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024492:	ea4e 040a 	orr.w	r4, lr, sl
 8024496:	940d      	str	r4, [sp, #52]	; 0x34
 8024498:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802449a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802449e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80244a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80244a6:	9c08      	ldr	r4, [sp, #32]
 80244a8:	fb08 fc0c 	mul.w	ip, r8, ip
 80244ac:	fb03 cc0e 	mla	ip, r3, lr, ip
 80244b0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80244b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80244b6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80244ba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80244be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80244c0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80244c4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80244c8:	fb08 f80e 	mul.w	r8, r8, lr
 80244cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244d0:	fb03 8202 	mla	r2, r3, r2, r8
 80244d4:	9b08      	ldr	r3, [sp, #32]
 80244d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80244da:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80244de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80244e0:	fb01 220a 	mla	r2, r1, sl, r2
 80244e4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80244e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80244ea:	fb09 2901 	mla	r9, r9, r1, r2
 80244ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80244f0:	4343      	muls	r3, r0
 80244f2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80244f6:	1c58      	adds	r0, r3, #1
 80244f8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80244fc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024500:	783b      	ldrb	r3, [r7, #0]
 8024502:	ea4c 0c09 	orr.w	ip, ip, r9
 8024506:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802450a:	fa5f f28c 	uxtb.w	r2, ip
 802450e:	b2c0      	uxtb	r0, r0
 8024510:	fb12 f201 	smulbb	r2, r2, r1
 8024514:	fb03 2300 	mla	r3, r3, r0, r2
 8024518:	b29b      	uxth	r3, r3
 802451a:	1c5a      	adds	r2, r3, #1
 802451c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024520:	787a      	ldrb	r2, [r7, #1]
 8024522:	fb12 f200 	smulbb	r2, r2, r0
 8024526:	121b      	asrs	r3, r3, #8
 8024528:	703b      	strb	r3, [r7, #0]
 802452a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802452e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024532:	fb03 2301 	mla	r3, r3, r1, r2
 8024536:	b29b      	uxth	r3, r3
 8024538:	1c5a      	adds	r2, r3, #1
 802453a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802453e:	121b      	asrs	r3, r3, #8
 8024540:	707b      	strb	r3, [r7, #1]
 8024542:	78bb      	ldrb	r3, [r7, #2]
 8024544:	fb13 f000 	smulbb	r0, r3, r0
 8024548:	fb0c 0c01 	mla	ip, ip, r1, r0
 802454c:	fa1f fc8c 	uxth.w	ip, ip
 8024550:	f10c 0301 	add.w	r3, ip, #1
 8024554:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024558:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802455c:	f887 c002 	strb.w	ip, [r7, #2]
 8024560:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024562:	3703      	adds	r7, #3
 8024564:	441d      	add	r5, r3
 8024566:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024568:	441e      	add	r6, r3
 802456a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802456c:	3b01      	subs	r3, #1
 802456e:	9318      	str	r3, [sp, #96]	; 0x60
 8024570:	e69f      	b.n	80242b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024572:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024574:	441d      	add	r5, r3
 8024576:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024578:	441e      	add	r6, r3
 802457a:	9b07      	ldr	r3, [sp, #28]
 802457c:	3b01      	subs	r3, #1
 802457e:	9307      	str	r3, [sp, #28]
 8024580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024582:	3303      	adds	r3, #3
 8024584:	930a      	str	r3, [sp, #40]	; 0x28
 8024586:	e674      	b.n	8024272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024588:	d025      	beq.n	80245d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802458a:	9b07      	ldr	r3, [sp, #28]
 802458c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802458e:	3b01      	subs	r3, #1
 8024590:	fb00 5003 	mla	r0, r0, r3, r5
 8024594:	1400      	asrs	r0, r0, #16
 8024596:	f53f ae89 	bmi.w	80242ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802459a:	3901      	subs	r1, #1
 802459c:	4288      	cmp	r0, r1
 802459e:	f6bf ae85 	bge.w	80242ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80245a2:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80245a4:	fb01 6303 	mla	r3, r1, r3, r6
 80245a8:	141b      	asrs	r3, r3, #16
 80245aa:	f53f ae7f 	bmi.w	80242ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80245ae:	3a01      	subs	r2, #1
 80245b0:	4293      	cmp	r3, r2
 80245b2:	f6bf ae7b 	bge.w	80242ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80245b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245b8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80245bc:	f103 0e03 	add.w	lr, r3, #3
 80245c0:	f1bb 0f00 	cmp.w	fp, #0
 80245c4:	dc6e      	bgt.n	80246a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80245c6:	9b07      	ldr	r3, [sp, #28]
 80245c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80245cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80245d2:	4423      	add	r3, r4
 80245d4:	930a      	str	r3, [sp, #40]	; 0x28
 80245d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80245d8:	2b00      	cmp	r3, #0
 80245da:	f340 81ab 	ble.w	8024934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80245de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80245e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80245e4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80245e8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80245ec:	eef0 6a48 	vmov.f32	s13, s16
 80245f0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80245f4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80245f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245fc:	ee16 5a90 	vmov	r5, s13
 8024600:	eef0 6a68 	vmov.f32	s13, s17
 8024604:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024608:	ee16 6a90 	vmov	r6, s13
 802460c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024610:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024614:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024618:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802461c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024620:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024624:	ee18 2a10 	vmov	r2, s16
 8024628:	eeb0 8a47 	vmov.f32	s16, s14
 802462c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024630:	ee18 2a90 	vmov	r2, s17
 8024634:	9331      	str	r3, [sp, #196]	; 0xc4
 8024636:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024638:	eef0 8a67 	vmov.f32	s17, s15
 802463c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024640:	9332      	str	r3, [sp, #200]	; 0xc8
 8024642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024644:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024646:	3b01      	subs	r3, #1
 8024648:	9317      	str	r3, [sp, #92]	; 0x5c
 802464a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802464c:	bf08      	it	eq
 802464e:	4613      	moveq	r3, r2
 8024650:	9307      	str	r3, [sp, #28]
 8024652:	e600      	b.n	8024256 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024654:	f1bc 0f00 	cmp.w	ip, #0
 8024658:	f43f ae6e 	beq.w	8024338 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802465c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024660:	9308      	str	r3, [sp, #32]
 8024662:	0e1b      	lsrs	r3, r3, #24
 8024664:	9311      	str	r3, [sp, #68]	; 0x44
 8024666:	e667      	b.n	8024338 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8024668:	f112 0801 	adds.w	r8, r2, #1
 802466c:	f53f af78 	bmi.w	8024560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8024670:	45c6      	cmp	lr, r8
 8024672:	f6ff af75 	blt.w	8024560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8024676:	f110 0801 	adds.w	r8, r0, #1
 802467a:	f53f af71 	bmi.w	8024560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802467e:	4543      	cmp	r3, r8
 8024680:	f6ff af6e 	blt.w	8024560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8024684:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8024686:	b21b      	sxth	r3, r3
 8024688:	9201      	str	r2, [sp, #4]
 802468a:	9300      	str	r3, [sp, #0]
 802468c:	fa0f f38e 	sxth.w	r3, lr
 8024690:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024696:	e9cd c404 	strd	ip, r4, [sp, #16]
 802469a:	4639      	mov	r1, r7
 802469c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802469e:	f7ff fc53 	bl	8023f48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80246a2:	e75d      	b.n	8024560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80246a4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80246a6:	142f      	asrs	r7, r5, #16
 80246a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80246aa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80246ae:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80246b2:	1433      	asrs	r3, r6, #16
 80246b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80246b8:	fb02 7303 	mla	r3, r2, r3, r7
 80246bc:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80246c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80246c4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80246c8:	2900      	cmp	r1, #0
 80246ca:	f000 812a 	beq.w	8024922 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 80246ce:	687c      	ldr	r4, [r7, #4]
 80246d0:	940e      	str	r4, [sp, #56]	; 0x38
 80246d2:	0e24      	lsrs	r4, r4, #24
 80246d4:	9415      	str	r4, [sp, #84]	; 0x54
 80246d6:	b178      	cbz	r0, 80246f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80246d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80246dc:	3a01      	subs	r2, #1
 80246de:	0092      	lsls	r2, r2, #2
 80246e0:	3204      	adds	r2, #4
 80246e2:	eb07 0802 	add.w	r8, r7, r2
 80246e6:	58ba      	ldr	r2, [r7, r2]
 80246e8:	9209      	str	r2, [sp, #36]	; 0x24
 80246ea:	0e12      	lsrs	r2, r2, #24
 80246ec:	9212      	str	r2, [sp, #72]	; 0x48
 80246ee:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80246f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80246f4:	0e12      	lsrs	r2, r2, #24
 80246f6:	9216      	str	r2, [sp, #88]	; 0x58
 80246f8:	b289      	uxth	r1, r1
 80246fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80246fc:	b280      	uxth	r0, r0
 80246fe:	fb01 f900 	mul.w	r9, r1, r0
 8024702:	0109      	lsls	r1, r1, #4
 8024704:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024708:	eba1 0809 	sub.w	r8, r1, r9
 802470c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8024710:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024712:	b280      	uxth	r0, r0
 8024714:	fa1f f888 	uxth.w	r8, r8
 8024718:	1a12      	subs	r2, r2, r0
 802471a:	fb08 f101 	mul.w	r1, r8, r1
 802471e:	b292      	uxth	r2, r2
 8024720:	fb02 110c 	mla	r1, r2, ip, r1
 8024724:	fb00 1104 	mla	r1, r0, r4, r1
 8024728:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802472a:	fb09 1104 	mla	r1, r9, r4, r1
 802472e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024732:	2900      	cmp	r1, #0
 8024734:	f000 80ec 	beq.w	8024910 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8024738:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802473c:	d019      	beq.n	8024772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802473e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024746:	fb0c fa0a 	mul.w	sl, ip, sl
 802474a:	fb0c fc03 	mul.w	ip, ip, r3
 802474e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024752:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024756:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802475a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802475e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024762:	4453      	add	r3, sl
 8024764:	0a3f      	lsrs	r7, r7, #8
 8024766:	0a1b      	lsrs	r3, r3, #8
 8024768:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802476c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024770:	433b      	orrs	r3, r7
 8024772:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024774:	2cff      	cmp	r4, #255	; 0xff
 8024776:	d020      	beq.n	80247ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8024778:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802477a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802477e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024780:	4367      	muls	r7, r4
 8024782:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024784:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024788:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802478c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802478e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024792:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024796:	fb04 fa0a 	mul.w	sl, r4, sl
 802479a:	44bc      	add	ip, r7
 802479c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80247a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80247a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80247b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80247b4:	ea4c 040a 	orr.w	r4, ip, sl
 80247b8:	940e      	str	r4, [sp, #56]	; 0x38
 80247ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80247bc:	2cff      	cmp	r4, #255	; 0xff
 80247be:	d020      	beq.n	8024802 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 80247c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80247c2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80247c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80247c8:	4367      	muls	r7, r4
 80247ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80247cc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80247d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80247d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80247d6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80247da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247de:	fb04 fa0a 	mul.w	sl, r4, sl
 80247e2:	44bc      	add	ip, r7
 80247e4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80247e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80247f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80247f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80247fc:	ea4c 040a 	orr.w	r4, ip, sl
 8024800:	9409      	str	r4, [sp, #36]	; 0x24
 8024802:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024804:	2cff      	cmp	r4, #255	; 0xff
 8024806:	d020      	beq.n	802484a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8024808:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802480a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802480e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024810:	4367      	muls	r7, r4
 8024812:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024814:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024818:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802481c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802481e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024822:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024826:	fb04 fa0a 	mul.w	sl, r4, sl
 802482a:	44bc      	add	ip, r7
 802482c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024830:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024834:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024838:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802483c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024840:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024844:	ea4c 040a 	orr.w	r4, ip, sl
 8024848:	940f      	str	r4, [sp, #60]	; 0x3c
 802484a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802484c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024850:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024854:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024858:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802485a:	fb08 f707 	mul.w	r7, r8, r7
 802485e:	fb02 770c 	mla	r7, r2, ip, r7
 8024862:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024866:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024868:	fb00 770c 	mla	r7, r0, ip, r7
 802486c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024870:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024872:	fb09 770c 	mla	r7, r9, ip, r7
 8024876:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802487a:	fb08 f80c 	mul.w	r8, r8, ip
 802487e:	0a3f      	lsrs	r7, r7, #8
 8024880:	fb02 8303 	mla	r3, r2, r3, r8
 8024884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024886:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802488a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802488e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024890:	fb00 330a 	mla	r3, r0, sl, r3
 8024894:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024898:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802489a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802489e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80248a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248a4:	434b      	muls	r3, r1
 80248a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80248aa:	1c59      	adds	r1, r3, #1
 80248ac:	ea47 070c 	orr.w	r7, r7, ip
 80248b0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80248b4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80248b8:	b2fa      	uxtb	r2, r7
 80248ba:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80248be:	fb12 f200 	smulbb	r2, r2, r0
 80248c2:	b2c9      	uxtb	r1, r1
 80248c4:	fb03 2301 	mla	r3, r3, r1, r2
 80248c8:	b29b      	uxth	r3, r3
 80248ca:	1c5a      	adds	r2, r3, #1
 80248cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80248d0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80248d4:	fb12 f201 	smulbb	r2, r2, r1
 80248d8:	121b      	asrs	r3, r3, #8
 80248da:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80248de:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80248e2:	0c3f      	lsrs	r7, r7, #16
 80248e4:	fb03 2300 	mla	r3, r3, r0, r2
 80248e8:	b29b      	uxth	r3, r3
 80248ea:	1c5a      	adds	r2, r3, #1
 80248ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80248f0:	121b      	asrs	r3, r3, #8
 80248f2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80248f6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80248fa:	fb13 f101 	smulbb	r1, r3, r1
 80248fe:	fb07 1700 	mla	r7, r7, r0, r1
 8024902:	b2bf      	uxth	r7, r7
 8024904:	1c79      	adds	r1, r7, #1
 8024906:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802490a:	123f      	asrs	r7, r7, #8
 802490c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024910:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024912:	f10e 0e03 	add.w	lr, lr, #3
 8024916:	f10b 3bff 	add.w	fp, fp, #4294967295
 802491a:	441d      	add	r5, r3
 802491c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802491e:	441e      	add	r6, r3
 8024920:	e64e      	b.n	80245c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8024922:	2800      	cmp	r0, #0
 8024924:	f43f aee8 	beq.w	80246f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8024928:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802492c:	9209      	str	r2, [sp, #36]	; 0x24
 802492e:	0e12      	lsrs	r2, r2, #24
 8024930:	9212      	str	r2, [sp, #72]	; 0x48
 8024932:	e6e1      	b.n	80246f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8024934:	b01d      	add	sp, #116	; 0x74
 8024936:	ecbd 8b08 	vpop	{d8-d11}
 802493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8024940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024944:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8024948:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802494c:	fb04 5603 	mla	r6, r4, r3, r5
 8024950:	2c00      	cmp	r4, #0
 8024952:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8024956:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802495a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802495e:	db36      	blt.n	80249ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8024960:	45a6      	cmp	lr, r4
 8024962:	dd34      	ble.n	80249ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8024964:	2d00      	cmp	r5, #0
 8024966:	db30      	blt.n	80249ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8024968:	42ab      	cmp	r3, r5
 802496a:	dd2e      	ble.n	80249ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 802496c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8024970:	1c6e      	adds	r6, r5, #1
 8024972:	d42f      	bmi.n	80249d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8024974:	42b3      	cmp	r3, r6
 8024976:	dd2d      	ble.n	80249d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8024978:	b370      	cbz	r0, 80249d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 802497a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802497e:	3401      	adds	r4, #1
 8024980:	d42e      	bmi.n	80249e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8024982:	45a6      	cmp	lr, r4
 8024984:	dd2c      	ble.n	80249e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8024986:	b377      	cbz	r7, 80249e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8024988:	2d00      	cmp	r5, #0
 802498a:	db27      	blt.n	80249dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 802498c:	42ab      	cmp	r3, r5
 802498e:	dd25      	ble.n	80249dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8024990:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024994:	3501      	adds	r5, #1
 8024996:	d429      	bmi.n	80249ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8024998:	42ab      	cmp	r3, r5
 802499a:	dd27      	ble.n	80249ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 802499c:	b340      	cbz	r0, 80249f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 802499e:	3301      	adds	r3, #1
 80249a0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80249a4:	280f      	cmp	r0, #15
 80249a6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80249aa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80249ae:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80249b2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80249b6:	d801      	bhi.n	80249bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 80249b8:	2f0f      	cmp	r7, #15
 80249ba:	d91b      	bls.n	80249f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 80249bc:	4b7e      	ldr	r3, [pc, #504]	; (8024bb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 80249be:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80249c2:	4a7e      	ldr	r2, [pc, #504]	; (8024bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 80249c4:	487e      	ldr	r0, [pc, #504]	; (8024bc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 80249c6:	f003 fabb 	bl	8027f40 <__assert_func>
 80249ca:	2200      	movs	r2, #0
 80249cc:	e7d0      	b.n	8024970 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 80249ce:	2600      	movs	r6, #0
 80249d0:	4632      	mov	r2, r6
 80249d2:	e7d4      	b.n	802497e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80249d4:	2600      	movs	r6, #0
 80249d6:	e7d2      	b.n	802497e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80249d8:	4606      	mov	r6, r0
 80249da:	e7d0      	b.n	802497e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80249dc:	2400      	movs	r4, #0
 80249de:	e7d9      	b.n	8024994 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 80249e0:	2300      	movs	r3, #0
 80249e2:	461c      	mov	r4, r3
 80249e4:	e7de      	b.n	80249a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80249e6:	463b      	mov	r3, r7
 80249e8:	463c      	mov	r4, r7
 80249ea:	e7db      	b.n	80249a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80249ec:	2300      	movs	r3, #0
 80249ee:	e7d9      	b.n	80249a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80249f0:	4603      	mov	r3, r0
 80249f2:	e7d7      	b.n	80249a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80249f4:	b280      	uxth	r0, r0
 80249f6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80249fa:	b2bf      	uxth	r7, r7
 80249fc:	fb00 fe07 	mul.w	lr, r0, r7
 8024a00:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8024a04:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024a08:	eba0 0c0e 	sub.w	ip, r0, lr
 8024a0c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8024a10:	b2bf      	uxth	r7, r7
 8024a12:	fa1f fc8c 	uxth.w	ip, ip
 8024a16:	eba0 0507 	sub.w	r5, r0, r7
 8024a1a:	fb0c f00a 	mul.w	r0, ip, sl
 8024a1e:	b2ad      	uxth	r5, r5
 8024a20:	fb05 000b 	mla	r0, r5, fp, r0
 8024a24:	fb07 0009 	mla	r0, r7, r9, r0
 8024a28:	fb0e 0008 	mla	r0, lr, r8, r0
 8024a2c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024a30:	9001      	str	r0, [sp, #4]
 8024a32:	d018      	beq.n	8024a66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 8024a34:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024a38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024a3c:	fb0b f000 	mul.w	r0, fp, r0
 8024a40:	fb0b fb02 	mul.w	fp, fp, r2
 8024a44:	0a02      	lsrs	r2, r0, #8
 8024a46:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024a4a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024a4e:	4402      	add	r2, r0
 8024a50:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024a54:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024a58:	0a12      	lsrs	r2, r2, #8
 8024a5a:	0a00      	lsrs	r0, r0, #8
 8024a5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024a60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024a64:	4302      	orrs	r2, r0
 8024a66:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024a6a:	d01a      	beq.n	8024aa2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8024a6c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024a70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024a74:	fb0a f000 	mul.w	r0, sl, r0
 8024a78:	fb0a fa06 	mul.w	sl, sl, r6
 8024a7c:	0a06      	lsrs	r6, r0, #8
 8024a7e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024a82:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024a86:	4406      	add	r6, r0
 8024a88:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024a8c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024a90:	0a36      	lsrs	r6, r6, #8
 8024a92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a96:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024a9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a9e:	ea46 060a 	orr.w	r6, r6, sl
 8024aa2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024aa6:	d01b      	beq.n	8024ae0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8024aa8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024aac:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024ab0:	fb09 fa0a 	mul.w	sl, r9, sl
 8024ab4:	fb09 f004 	mul.w	r0, r9, r4
 8024ab8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024abc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024ac0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8024ac4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024ac8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8024acc:	4454      	add	r4, sl
 8024ace:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024ad2:	0a24      	lsrs	r4, r4, #8
 8024ad4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024ad8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024adc:	ea44 0409 	orr.w	r4, r4, r9
 8024ae0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024ae4:	d01b      	beq.n	8024b1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8024ae6:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024aea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024aee:	fb08 f909 	mul.w	r9, r8, r9
 8024af2:	fb08 f003 	mul.w	r0, r8, r3
 8024af6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024afa:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024afe:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8024b02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b06:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8024b0a:	444b      	add	r3, r9
 8024b0c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024b10:	0a1b      	lsrs	r3, r3, #8
 8024b12:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024b16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b1a:	ea43 0308 	orr.w	r3, r3, r8
 8024b1e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024b22:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024b26:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8024b2a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024b2e:	fb0c f000 	mul.w	r0, ip, r0
 8024b32:	fb0c f606 	mul.w	r6, ip, r6
 8024b36:	fb05 0808 	mla	r8, r5, r8, r0
 8024b3a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024b3e:	fb05 6502 	mla	r5, r5, r2, r6
 8024b42:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024b46:	fb07 8800 	mla	r8, r7, r0, r8
 8024b4a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8024b4e:	fb07 5704 	mla	r7, r7, r4, r5
 8024b52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b56:	fb0e 8000 	mla	r0, lr, r0, r8
 8024b5a:	780a      	ldrb	r2, [r1, #0]
 8024b5c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8024b60:	9b01      	ldr	r3, [sp, #4]
 8024b62:	0a00      	lsrs	r0, r0, #8
 8024b64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024b68:	43db      	mvns	r3, r3
 8024b6a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024b6e:	b2db      	uxtb	r3, r3
 8024b70:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024b74:	ea40 0e0e 	orr.w	lr, r0, lr
 8024b78:	fb02 f003 	mul.w	r0, r2, r3
 8024b7c:	1c42      	adds	r2, r0, #1
 8024b7e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024b82:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024b86:	700a      	strb	r2, [r1, #0]
 8024b88:	784a      	ldrb	r2, [r1, #1]
 8024b8a:	435a      	muls	r2, r3
 8024b8c:	1c50      	adds	r0, r2, #1
 8024b8e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024b92:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8024b96:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024b9a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024b9e:	704a      	strb	r2, [r1, #1]
 8024ba0:	788a      	ldrb	r2, [r1, #2]
 8024ba2:	4353      	muls	r3, r2
 8024ba4:	1c5a      	adds	r2, r3, #1
 8024ba6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024baa:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8024bae:	f881 e002 	strb.w	lr, [r1, #2]
 8024bb2:	b003      	add	sp, #12
 8024bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bb8:	0802cb61 	.word	0x0802cb61
 8024bbc:	0802d05e 	.word	0x0802d05e
 8024bc0:	0802cc2a 	.word	0x0802cc2a

08024bc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bc8:	ed2d 8b08 	vpush	{d8-d11}
 8024bcc:	b099      	sub	sp, #100	; 0x64
 8024bce:	eeb0 aa40 	vmov.f32	s20, s0
 8024bd2:	eef0 9a60 	vmov.f32	s19, s1
 8024bd6:	9017      	str	r0, [sp, #92]	; 0x5c
 8024bd8:	eeb0 9a41 	vmov.f32	s18, s2
 8024bdc:	9306      	str	r3, [sp, #24]
 8024bde:	eeb0 8a62 	vmov.f32	s16, s5
 8024be2:	eef0 8a43 	vmov.f32	s17, s6
 8024be6:	eef0 ba44 	vmov.f32	s23, s8
 8024bea:	eeb0 ba64 	vmov.f32	s22, s9
 8024bee:	eef0 aa45 	vmov.f32	s21, s10
 8024bf2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8024bf6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024bf8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024bfc:	6850      	ldr	r0, [r2, #4]
 8024bfe:	6812      	ldr	r2, [r2, #0]
 8024c00:	fb00 1303 	mla	r3, r0, r3, r1
 8024c04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024c08:	18d3      	adds	r3, r2, r3
 8024c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8024c0c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024c0e:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8024c12:	681b      	ldr	r3, [r3, #0]
 8024c14:	930e      	str	r3, [sp, #56]	; 0x38
 8024c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	dc03      	bgt.n	8024c24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024c1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	f340 8360 	ble.w	80252e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8024c24:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024c26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c2e:	1e48      	subs	r0, r1, #1
 8024c30:	1e57      	subs	r7, r2, #1
 8024c32:	9b06      	ldr	r3, [sp, #24]
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	f340 817b 	ble.w	8024f30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8024c3a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8024c3e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024c42:	d406      	bmi.n	8024c52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024c44:	4584      	cmp	ip, r0
 8024c46:	da04      	bge.n	8024c52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024c48:	2b00      	cmp	r3, #0
 8024c4a:	db02      	blt.n	8024c52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024c4c:	42bb      	cmp	r3, r7
 8024c4e:	f2c0 8170 	blt.w	8024f32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024c52:	f11c 0c01 	adds.w	ip, ip, #1
 8024c56:	f100 8160 	bmi.w	8024f1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024c5a:	4561      	cmp	r1, ip
 8024c5c:	f2c0 815d 	blt.w	8024f1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024c60:	3301      	adds	r3, #1
 8024c62:	f100 815a 	bmi.w	8024f1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024c66:	429a      	cmp	r2, r3
 8024c68:	f2c0 8157 	blt.w	8024f1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024c6c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024c70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024c72:	f1b8 0f00 	cmp.w	r8, #0
 8024c76:	f340 8179 	ble.w	8024f6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024c7a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8024c7c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024c80:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024c82:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024c86:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024c8a:	142a      	asrs	r2, r5, #16
 8024c8c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024c90:	689b      	ldr	r3, [r3, #8]
 8024c92:	f100 81be 	bmi.w	8025012 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8024c96:	f103 39ff 	add.w	r9, r3, #4294967295
 8024c9a:	454a      	cmp	r2, r9
 8024c9c:	f280 81b9 	bge.w	8025012 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8024ca0:	f1bc 0f00 	cmp.w	ip, #0
 8024ca4:	f2c0 81b5 	blt.w	8025012 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8024ca8:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024cac:	45cc      	cmp	ip, r9
 8024cae:	f280 81b0 	bge.w	8025012 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8024cb2:	b21b      	sxth	r3, r3
 8024cb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024cb6:	fb0c 2203 	mla	r2, ip, r3, r2
 8024cba:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8024cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024cc2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024cc6:	2900      	cmp	r1, #0
 8024cc8:	f000 8197 	beq.w	8024ffa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8024ccc:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8024cd0:	940a      	str	r4, [sp, #40]	; 0x28
 8024cd2:	0e24      	lsrs	r4, r4, #24
 8024cd4:	9411      	str	r4, [sp, #68]	; 0x44
 8024cd6:	b180      	cbz	r0, 8024cfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8024cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024cdc:	3b01      	subs	r3, #1
 8024cde:	009b      	lsls	r3, r3, #2
 8024ce0:	3304      	adds	r3, #4
 8024ce2:	eb09 0c03 	add.w	ip, r9, r3
 8024ce6:	f859 3003 	ldr.w	r3, [r9, r3]
 8024cea:	9307      	str	r3, [sp, #28]
 8024cec:	0e1b      	lsrs	r3, r3, #24
 8024cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8024cf0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024cf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8024cf6:	0e1b      	lsrs	r3, r3, #24
 8024cf8:	9312      	str	r3, [sp, #72]	; 0x48
 8024cfa:	b289      	uxth	r1, r1
 8024cfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024cfe:	b280      	uxth	r0, r0
 8024d00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024d02:	fb01 fa00 	mul.w	sl, r1, r0
 8024d06:	0109      	lsls	r1, r1, #4
 8024d08:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024d0c:	eba1 090a 	sub.w	r9, r1, sl
 8024d10:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024d14:	b280      	uxth	r0, r0
 8024d16:	fa1f f989 	uxth.w	r9, r9
 8024d1a:	1a09      	subs	r1, r1, r0
 8024d1c:	fb09 f303 	mul.w	r3, r9, r3
 8024d20:	b289      	uxth	r1, r1
 8024d22:	fb01 330e 	mla	r3, r1, lr, r3
 8024d26:	fb00 3304 	mla	r3, r0, r4, r3
 8024d2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024d2c:	fb0a 3304 	mla	r3, sl, r4, r3
 8024d30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024d34:	2b00      	cmp	r3, #0
 8024d36:	f000 80e8 	beq.w	8024f0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8024d3a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024d3e:	d01b      	beq.n	8024d78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8024d40:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8024d44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024d48:	fb0e fb0b 	mul.w	fp, lr, fp
 8024d4c:	fb0e fe02 	mul.w	lr, lr, r2
 8024d50:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8024d54:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024d58:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024d5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024d60:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024d64:	445a      	add	r2, fp
 8024d66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d6a:	0a12      	lsrs	r2, r2, #8
 8024d6c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024d70:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024d74:	ea42 020c 	orr.w	r2, r2, ip
 8024d78:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024d7a:	2cff      	cmp	r4, #255	; 0xff
 8024d7c:	d021      	beq.n	8024dc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8024d7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024d80:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024d84:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024d86:	fb04 fc0c 	mul.w	ip, r4, ip
 8024d8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024d8c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024d90:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024d94:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024d96:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024d9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024d9e:	fb04 fb0b 	mul.w	fp, r4, fp
 8024da2:	44e6      	add	lr, ip
 8024da4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8024da8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024dac:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024db0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024db4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024db8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024dbc:	ea4e 040b 	orr.w	r4, lr, fp
 8024dc0:	940a      	str	r4, [sp, #40]	; 0x28
 8024dc2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024dc4:	2cff      	cmp	r4, #255	; 0xff
 8024dc6:	d021      	beq.n	8024e0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8024dc8:	9c07      	ldr	r4, [sp, #28]
 8024dca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024dce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024dd0:	fb04 fc0c 	mul.w	ip, r4, ip
 8024dd4:	9c07      	ldr	r4, [sp, #28]
 8024dd6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024dda:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024dde:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024de0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024de4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024de8:	fb04 fb0b 	mul.w	fp, r4, fp
 8024dec:	44e6      	add	lr, ip
 8024dee:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8024df2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024df6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024dfa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024dfe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024e02:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024e06:	ea4e 040b 	orr.w	r4, lr, fp
 8024e0a:	9407      	str	r4, [sp, #28]
 8024e0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e0e:	2cff      	cmp	r4, #255	; 0xff
 8024e10:	d021      	beq.n	8024e56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8024e12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e14:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024e18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e1a:	fb04 fc0c 	mul.w	ip, r4, ip
 8024e1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e20:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024e24:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024e28:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e2a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024e2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e32:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e36:	44e6      	add	lr, ip
 8024e38:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8024e3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e40:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024e44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e48:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024e4c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024e50:	ea4e 040b 	orr.w	r4, lr, fp
 8024e54:	940b      	str	r4, [sp, #44]	; 0x2c
 8024e56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024e58:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8024e5c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024e60:	2bff      	cmp	r3, #255	; 0xff
 8024e62:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024e66:	9c07      	ldr	r4, [sp, #28]
 8024e68:	fb09 fc0c 	mul.w	ip, r9, ip
 8024e6c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024e70:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024e74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e76:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024e7a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024e7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024e80:	fb0a cc0e 	mla	ip, sl, lr, ip
 8024e84:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024e88:	fb09 f90e 	mul.w	r9, r9, lr
 8024e8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e90:	fb01 9202 	mla	r2, r1, r2, r9
 8024e94:	9907      	ldr	r1, [sp, #28]
 8024e96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e9a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8024e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024ea0:	fb00 220b 	mla	r2, r0, fp, r2
 8024ea4:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8024ea8:	fb0a 2a00 	mla	sl, sl, r0, r2
 8024eac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024eb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024eb4:	ea4c 0c0a 	orr.w	ip, ip, sl
 8024eb8:	fa5f f08c 	uxtb.w	r0, ip
 8024ebc:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8024ec0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024ec4:	f000 80a2 	beq.w	802500c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8024ec8:	43db      	mvns	r3, r3
 8024eca:	783a      	ldrb	r2, [r7, #0]
 8024ecc:	f897 a002 	ldrb.w	sl, [r7, #2]
 8024ed0:	b2db      	uxtb	r3, r3
 8024ed2:	fb02 fe03 	mul.w	lr, r2, r3
 8024ed6:	fb0a fa03 	mul.w	sl, sl, r3
 8024eda:	f10e 0201 	add.w	r2, lr, #1
 8024ede:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8024ee2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024ee6:	703a      	strb	r2, [r7, #0]
 8024ee8:	787a      	ldrb	r2, [r7, #1]
 8024eea:	fb02 f003 	mul.w	r0, r2, r3
 8024eee:	f10a 0301 	add.w	r3, sl, #1
 8024ef2:	1c42      	adds	r2, r0, #1
 8024ef4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024ef8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024efc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024f00:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024f04:	707a      	strb	r2, [r7, #1]
 8024f06:	f887 c002 	strb.w	ip, [r7, #2]
 8024f0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024f0c:	3703      	adds	r7, #3
 8024f0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8024f12:	441d      	add	r5, r3
 8024f14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f16:	441e      	add	r6, r3
 8024f18:	e6ab      	b.n	8024c72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024f1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024f1c:	441d      	add	r5, r3
 8024f1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f20:	441e      	add	r6, r3
 8024f22:	9b06      	ldr	r3, [sp, #24]
 8024f24:	3b01      	subs	r3, #1
 8024f26:	9306      	str	r3, [sp, #24]
 8024f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f2a:	3303      	adds	r3, #3
 8024f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8024f2e:	e680      	b.n	8024c32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024f30:	d024      	beq.n	8024f7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8024f32:	9b06      	ldr	r3, [sp, #24]
 8024f34:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8024f36:	3b01      	subs	r3, #1
 8024f38:	fb00 5003 	mla	r0, r0, r3, r5
 8024f3c:	1400      	asrs	r0, r0, #16
 8024f3e:	f53f ae95 	bmi.w	8024c6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8024f42:	3901      	subs	r1, #1
 8024f44:	4288      	cmp	r0, r1
 8024f46:	f6bf ae91 	bge.w	8024c6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8024f4a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024f4c:	fb01 6303 	mla	r3, r1, r3, r6
 8024f50:	141b      	asrs	r3, r3, #16
 8024f52:	f53f ae8b 	bmi.w	8024c6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8024f56:	3a01      	subs	r2, #1
 8024f58:	4293      	cmp	r3, r2
 8024f5a:	f6bf ae87 	bge.w	8024c6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8024f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f60:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024f64:	1cdf      	adds	r7, r3, #3
 8024f66:	f1bb 0f00 	cmp.w	fp, #0
 8024f6a:	dc6e      	bgt.n	802504a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8024f6c:	9b06      	ldr	r3, [sp, #24]
 8024f6e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024f78:	4423      	add	r3, r4
 8024f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8024f7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024f7e:	2b00      	cmp	r3, #0
 8024f80:	f340 81b0 	ble.w	80252e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8024f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024f88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024f8a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024f8e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024f92:	eef0 6a48 	vmov.f32	s13, s16
 8024f96:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024f9a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024f9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024fa2:	ee16 5a90 	vmov	r5, s13
 8024fa6:	eef0 6a68 	vmov.f32	s13, s17
 8024faa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024fae:	ee16 6a90 	vmov	r6, s13
 8024fb2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024fb6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024fba:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024fbe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024fc2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024fc6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024fca:	ee18 2a10 	vmov	r2, s16
 8024fce:	eeb0 8a47 	vmov.f32	s16, s14
 8024fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fd6:	ee18 2a90 	vmov	r2, s17
 8024fda:	932d      	str	r3, [sp, #180]	; 0xb4
 8024fdc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fde:	eef0 8a67 	vmov.f32	s17, s15
 8024fe2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fe6:	932e      	str	r3, [sp, #184]	; 0xb8
 8024fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024fea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024fec:	3b01      	subs	r3, #1
 8024fee:	9315      	str	r3, [sp, #84]	; 0x54
 8024ff0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024ff2:	bf08      	it	eq
 8024ff4:	4613      	moveq	r3, r2
 8024ff6:	9306      	str	r3, [sp, #24]
 8024ff8:	e60d      	b.n	8024c16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024ffa:	2800      	cmp	r0, #0
 8024ffc:	f43f ae7d 	beq.w	8024cfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8025000:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8025004:	9307      	str	r3, [sp, #28]
 8025006:	0e1b      	lsrs	r3, r3, #24
 8025008:	930f      	str	r3, [sp, #60]	; 0x3c
 802500a:	e676      	b.n	8024cfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802500c:	7038      	strb	r0, [r7, #0]
 802500e:	7079      	strb	r1, [r7, #1]
 8025010:	e779      	b.n	8024f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025012:	f112 0901 	adds.w	r9, r2, #1
 8025016:	f53f af78 	bmi.w	8024f0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802501a:	454b      	cmp	r3, r9
 802501c:	f6ff af75 	blt.w	8024f0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8025020:	f11c 0901 	adds.w	r9, ip, #1
 8025024:	f53f af71 	bmi.w	8024f0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8025028:	45ce      	cmp	lr, r9
 802502a:	f6ff af6e 	blt.w	8024f0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802502e:	b21b      	sxth	r3, r3
 8025030:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8025034:	fa0f f28e 	sxth.w	r2, lr
 8025038:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802503c:	9200      	str	r2, [sp, #0]
 802503e:	4639      	mov	r1, r7
 8025040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025042:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8025044:	f7ff fc7c 	bl	8024940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025048:	e75f      	b.n	8024f0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802504a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802504c:	1429      	asrs	r1, r5, #16
 802504e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025050:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025054:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8025058:	1433      	asrs	r3, r6, #16
 802505a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802505e:	fb0c 1303 	mla	r3, ip, r3, r1
 8025062:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025064:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025068:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802506c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025070:	2a00      	cmp	r2, #0
 8025072:	f000 8129 	beq.w	80252c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8025076:	684c      	ldr	r4, [r1, #4]
 8025078:	940c      	str	r4, [sp, #48]	; 0x30
 802507a:	0e24      	lsrs	r4, r4, #24
 802507c:	9413      	str	r4, [sp, #76]	; 0x4c
 802507e:	b198      	cbz	r0, 80250a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025080:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8025084:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025088:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802508c:	f10c 0c04 	add.w	ip, ip, #4
 8025090:	eb01 080c 	add.w	r8, r1, ip
 8025094:	f851 100c 	ldr.w	r1, [r1, ip]
 8025098:	9108      	str	r1, [sp, #32]
 802509a:	0e09      	lsrs	r1, r1, #24
 802509c:	9110      	str	r1, [sp, #64]	; 0x40
 802509e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80250a2:	910d      	str	r1, [sp, #52]	; 0x34
 80250a4:	0e09      	lsrs	r1, r1, #24
 80250a6:	9114      	str	r1, [sp, #80]	; 0x50
 80250a8:	b292      	uxth	r2, r2
 80250aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80250ac:	b280      	uxth	r0, r0
 80250ae:	fb02 f900 	mul.w	r9, r2, r0
 80250b2:	0112      	lsls	r2, r2, #4
 80250b4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80250b8:	eba2 0809 	sub.w	r8, r2, r9
 80250bc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80250c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80250c2:	b280      	uxth	r0, r0
 80250c4:	fa1f f888 	uxth.w	r8, r8
 80250c8:	1a09      	subs	r1, r1, r0
 80250ca:	fb08 f202 	mul.w	r2, r8, r2
 80250ce:	b289      	uxth	r1, r1
 80250d0:	fb01 220e 	mla	r2, r1, lr, r2
 80250d4:	fb00 2204 	mla	r2, r0, r4, r2
 80250d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80250da:	fb09 2204 	mla	r2, r9, r4, r2
 80250de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80250e2:	2a00      	cmp	r2, #0
 80250e4:	f000 80e8 	beq.w	80252b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80250e8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80250ec:	d01b      	beq.n	8025126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 80250ee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80250f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250f6:	fb0e fa0a 	mul.w	sl, lr, sl
 80250fa:	fb0e fe03 	mul.w	lr, lr, r3
 80250fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025102:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025106:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802510a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802510e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025112:	4453      	add	r3, sl
 8025114:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025118:	0a1b      	lsrs	r3, r3, #8
 802511a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802511e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025122:	ea43 030c 	orr.w	r3, r3, ip
 8025126:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025128:	2cff      	cmp	r4, #255	; 0xff
 802512a:	d021      	beq.n	8025170 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 802512c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802512e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025132:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025134:	fb04 fc0c 	mul.w	ip, r4, ip
 8025138:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802513a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802513e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025142:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025144:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025148:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802514c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025150:	44e6      	add	lr, ip
 8025152:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025156:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802515a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802515e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025162:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025166:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802516a:	ea4e 040a 	orr.w	r4, lr, sl
 802516e:	940c      	str	r4, [sp, #48]	; 0x30
 8025170:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025172:	2cff      	cmp	r4, #255	; 0xff
 8025174:	d021      	beq.n	80251ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8025176:	9c08      	ldr	r4, [sp, #32]
 8025178:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802517c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802517e:	fb04 fc0c 	mul.w	ip, r4, ip
 8025182:	9c08      	ldr	r4, [sp, #32]
 8025184:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025188:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802518a:	fb04 fa0e 	mul.w	sl, r4, lr
 802518e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025192:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025196:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802519a:	44e6      	add	lr, ip
 802519c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80251a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80251a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80251b4:	ea4e 040a 	orr.w	r4, lr, sl
 80251b8:	9408      	str	r4, [sp, #32]
 80251ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80251bc:	2cff      	cmp	r4, #255	; 0xff
 80251be:	d021      	beq.n	8025204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 80251c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80251c2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80251c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80251c8:	fb04 fc0c 	mul.w	ip, r4, ip
 80251cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80251ce:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80251d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80251d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80251d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80251dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80251e4:	44e6      	add	lr, ip
 80251e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80251ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80251f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80251fe:	ea4e 040a 	orr.w	r4, lr, sl
 8025202:	940d      	str	r4, [sp, #52]	; 0x34
 8025204:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025206:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802520a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802520e:	2aff      	cmp	r2, #255	; 0xff
 8025210:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025214:	9c08      	ldr	r4, [sp, #32]
 8025216:	fb08 fc0c 	mul.w	ip, r8, ip
 802521a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802521e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025222:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025224:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025228:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802522c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802522e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025232:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025236:	fb08 f80e 	mul.w	r8, r8, lr
 802523a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802523e:	fb01 8303 	mla	r3, r1, r3, r8
 8025242:	9908      	ldr	r1, [sp, #32]
 8025244:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025248:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802524c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802524e:	fb00 330a 	mla	r3, r0, sl, r3
 8025252:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8025256:	fb09 3e0e 	mla	lr, r9, lr, r3
 802525a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802525e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025262:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025266:	fa5f f08c 	uxtb.w	r0, ip
 802526a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802526e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025272:	d032      	beq.n	80252da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8025274:	43d2      	mvns	r2, r2
 8025276:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802527a:	b2d2      	uxtb	r2, r2
 802527c:	fb0e fe02 	mul.w	lr, lr, r2
 8025280:	f10e 0301 	add.w	r3, lr, #1
 8025284:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8025288:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802528c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8025290:	4350      	muls	r0, r2
 8025292:	f807 3c03 	strb.w	r3, [r7, #-3]
 8025296:	1c43      	adds	r3, r0, #1
 8025298:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802529c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80252a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80252a4:	4353      	muls	r3, r2
 80252a6:	f807 1c02 	strb.w	r1, [r7, #-2]
 80252aa:	1c5a      	adds	r2, r3, #1
 80252ac:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80252b0:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80252b4:	f807 cc01 	strb.w	ip, [r7, #-1]
 80252b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80252ba:	3703      	adds	r7, #3
 80252bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80252c0:	441d      	add	r5, r3
 80252c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80252c4:	441e      	add	r6, r3
 80252c6:	e64e      	b.n	8024f66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 80252c8:	2800      	cmp	r0, #0
 80252ca:	f43f aeed 	beq.w	80250a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80252ce:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80252d2:	9108      	str	r1, [sp, #32]
 80252d4:	0e09      	lsrs	r1, r1, #24
 80252d6:	9110      	str	r1, [sp, #64]	; 0x40
 80252d8:	e6e6      	b.n	80250a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80252da:	f807 0c03 	strb.w	r0, [r7, #-3]
 80252de:	f807 1c02 	strb.w	r1, [r7, #-2]
 80252e2:	e7e7      	b.n	80252b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 80252e4:	b019      	add	sp, #100	; 0x64
 80252e6:	ecbd 8b08 	vpop	{d8-d11}
 80252ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080252f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80252f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252f4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80252f8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80252fc:	2800      	cmp	r0, #0
 80252fe:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8025302:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8025306:	fb0c 0e03 	mla	lr, ip, r3, r0
 802530a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802530e:	db6b      	blt.n	80253e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025310:	4580      	cmp	r8, r0
 8025312:	dd69      	ble.n	80253e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025314:	f1bc 0f00 	cmp.w	ip, #0
 8025318:	db66      	blt.n	80253e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802531a:	45e1      	cmp	r9, ip
 802531c:	dd64      	ble.n	80253e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802531e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025322:	f01e 0f01 	tst.w	lr, #1
 8025326:	5d16      	ldrb	r6, [r2, r4]
 8025328:	bf0c      	ite	eq
 802532a:	f006 060f 	andeq.w	r6, r6, #15
 802532e:	1136      	asrne	r6, r6, #4
 8025330:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025334:	b2f6      	uxtb	r6, r6
 8025336:	f110 0a01 	adds.w	sl, r0, #1
 802533a:	d457      	bmi.n	80253ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802533c:	45d0      	cmp	r8, sl
 802533e:	dd55      	ble.n	80253ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025340:	f1bc 0f00 	cmp.w	ip, #0
 8025344:	db52      	blt.n	80253ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025346:	45e1      	cmp	r9, ip
 8025348:	dd50      	ble.n	80253ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802534a:	2f00      	cmp	r7, #0
 802534c:	f000 80ac 	beq.w	80254a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8025350:	f10e 0b01 	add.w	fp, lr, #1
 8025354:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025358:	f01b 0f01 	tst.w	fp, #1
 802535c:	5d14      	ldrb	r4, [r2, r4]
 802535e:	bf0c      	ite	eq
 8025360:	f004 040f 	andeq.w	r4, r4, #15
 8025364:	1124      	asrne	r4, r4, #4
 8025366:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802536a:	b2e4      	uxtb	r4, r4
 802536c:	2d00      	cmp	r5, #0
 802536e:	f000 8096 	beq.w	802549e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8025372:	2800      	cmp	r0, #0
 8025374:	f10c 0c01 	add.w	ip, ip, #1
 8025378:	db3c      	blt.n	80253f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802537a:	4580      	cmp	r8, r0
 802537c:	dd3a      	ble.n	80253f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802537e:	f1bc 0f00 	cmp.w	ip, #0
 8025382:	db37      	blt.n	80253f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025384:	45e1      	cmp	r9, ip
 8025386:	dd35      	ble.n	80253f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025388:	eb03 0b0e 	add.w	fp, r3, lr
 802538c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8025390:	f01b 0f01 	tst.w	fp, #1
 8025394:	5c10      	ldrb	r0, [r2, r0]
 8025396:	bf0c      	ite	eq
 8025398:	f000 000f 	andeq.w	r0, r0, #15
 802539c:	1100      	asrne	r0, r0, #4
 802539e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80253a2:	b2c0      	uxtb	r0, r0
 80253a4:	f1ba 0f00 	cmp.w	sl, #0
 80253a8:	db26      	blt.n	80253f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80253aa:	45d0      	cmp	r8, sl
 80253ac:	dd24      	ble.n	80253f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80253ae:	f1bc 0f00 	cmp.w	ip, #0
 80253b2:	db21      	blt.n	80253f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80253b4:	45e1      	cmp	r9, ip
 80253b6:	dd1f      	ble.n	80253f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80253b8:	b307      	cbz	r7, 80253fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80253ba:	3301      	adds	r3, #1
 80253bc:	449e      	add	lr, r3
 80253be:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80253c2:	f01e 0f01 	tst.w	lr, #1
 80253c6:	5cd3      	ldrb	r3, [r2, r3]
 80253c8:	bf0c      	ite	eq
 80253ca:	f003 030f 	andeq.w	r3, r3, #15
 80253ce:	111b      	asrne	r3, r3, #4
 80253d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80253d4:	b2db      	uxtb	r3, r3
 80253d6:	2f0f      	cmp	r7, #15
 80253d8:	d911      	bls.n	80253fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80253da:	4b35      	ldr	r3, [pc, #212]	; (80254b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80253dc:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80253e0:	4a34      	ldr	r2, [pc, #208]	; (80254b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80253e2:	4835      	ldr	r0, [pc, #212]	; (80254b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80253e4:	f002 fdac 	bl	8027f40 <__assert_func>
 80253e8:	2600      	movs	r6, #0
 80253ea:	e7a4      	b.n	8025336 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80253ec:	2400      	movs	r4, #0
 80253ee:	e7bd      	b.n	802536c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80253f0:	463c      	mov	r4, r7
 80253f2:	e7be      	b.n	8025372 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80253f4:	2000      	movs	r0, #0
 80253f6:	e7d5      	b.n	80253a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80253f8:	2300      	movs	r3, #0
 80253fa:	e7ec      	b.n	80253d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80253fc:	463b      	mov	r3, r7
 80253fe:	2d0f      	cmp	r5, #15
 8025400:	d8eb      	bhi.n	80253da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025402:	b2bf      	uxth	r7, r7
 8025404:	b2ad      	uxth	r5, r5
 8025406:	fb07 f205 	mul.w	r2, r7, r5
 802540a:	013f      	lsls	r7, r7, #4
 802540c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025410:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8025414:	1abf      	subs	r7, r7, r2
 8025416:	b2ad      	uxth	r5, r5
 8025418:	b2bf      	uxth	r7, r7
 802541a:	ebac 0c05 	sub.w	ip, ip, r5
 802541e:	437c      	muls	r4, r7
 8025420:	fa1f fc8c 	uxth.w	ip, ip
 8025424:	fb06 440c 	mla	r4, r6, ip, r4
 8025428:	fb05 4400 	mla	r4, r5, r0, r4
 802542c:	fb02 4203 	mla	r2, r2, r3, r4
 8025430:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025434:	b38a      	cbz	r2, 802549a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8025436:	4b21      	ldr	r3, [pc, #132]	; (80254bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8025438:	681c      	ldr	r4, [r3, #0]
 802543a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802543e:	b2e5      	uxtb	r5, r4
 8025440:	4353      	muls	r3, r2
 8025442:	1c5a      	adds	r2, r3, #1
 8025444:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025448:	1212      	asrs	r2, r2, #8
 802544a:	b290      	uxth	r0, r2
 802544c:	43d2      	mvns	r2, r2
 802544e:	fb15 f500 	smulbb	r5, r5, r0
 8025452:	b2d3      	uxtb	r3, r2
 8025454:	780a      	ldrb	r2, [r1, #0]
 8025456:	fb02 5203 	mla	r2, r2, r3, r5
 802545a:	b292      	uxth	r2, r2
 802545c:	1c55      	adds	r5, r2, #1
 802545e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025462:	784d      	ldrb	r5, [r1, #1]
 8025464:	fb15 f503 	smulbb	r5, r5, r3
 8025468:	1212      	asrs	r2, r2, #8
 802546a:	700a      	strb	r2, [r1, #0]
 802546c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8025470:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025474:	fb02 5200 	mla	r2, r2, r0, r5
 8025478:	b292      	uxth	r2, r2
 802547a:	1c55      	adds	r5, r2, #1
 802547c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025480:	1212      	asrs	r2, r2, #8
 8025482:	704a      	strb	r2, [r1, #1]
 8025484:	788a      	ldrb	r2, [r1, #2]
 8025486:	fb12 f303 	smulbb	r3, r2, r3
 802548a:	fb04 3300 	mla	r3, r4, r0, r3
 802548e:	b29b      	uxth	r3, r3
 8025490:	1c5a      	adds	r2, r3, #1
 8025492:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025496:	121b      	asrs	r3, r3, #8
 8025498:	708b      	strb	r3, [r1, #2]
 802549a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802549e:	2f0f      	cmp	r7, #15
 80254a0:	d89b      	bhi.n	80253da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80254a2:	462b      	mov	r3, r5
 80254a4:	4628      	mov	r0, r5
 80254a6:	e7ac      	b.n	8025402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80254a8:	2d00      	cmp	r5, #0
 80254aa:	d1a1      	bne.n	80253f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80254ac:	462c      	mov	r4, r5
 80254ae:	e7f8      	b.n	80254a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80254b0:	0802cb61 	.word	0x0802cb61
 80254b4:	0802d05e 	.word	0x0802d05e
 80254b8:	0802cc2a 	.word	0x0802cc2a
 80254bc:	20006100 	.word	0x20006100

080254c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80254c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254c4:	ed2d 8b08 	vpush	{d8-d11}
 80254c8:	b097      	sub	sp, #92	; 0x5c
 80254ca:	eeb0 aa40 	vmov.f32	s20, s0
 80254ce:	eef0 9a60 	vmov.f32	s19, s1
 80254d2:	9214      	str	r2, [sp, #80]	; 0x50
 80254d4:	eeb0 9a41 	vmov.f32	s18, s2
 80254d8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80254da:	eeb0 8a62 	vmov.f32	s16, s5
 80254de:	9309      	str	r3, [sp, #36]	; 0x24
 80254e0:	eef0 8a43 	vmov.f32	s17, s6
 80254e4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80254e8:	eef0 ba44 	vmov.f32	s23, s8
 80254ec:	9015      	str	r0, [sp, #84]	; 0x54
 80254ee:	eeb0 ba64 	vmov.f32	s22, s9
 80254f2:	6850      	ldr	r0, [r2, #4]
 80254f4:	eef0 aa45 	vmov.f32	s21, s10
 80254f8:	910c      	str	r1, [sp, #48]	; 0x30
 80254fa:	930e      	str	r3, [sp, #56]	; 0x38
 80254fc:	6812      	ldr	r2, [r2, #0]
 80254fe:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025502:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8025506:	fb00 1303 	mla	r3, r0, r3, r1
 802550a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802550e:	eb02 0a03 	add.w	sl, r2, r3
 8025512:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025514:	689b      	ldr	r3, [r3, #8]
 8025516:	3301      	adds	r3, #1
 8025518:	f023 0301 	bic.w	r3, r3, #1
 802551c:	930f      	str	r3, [sp, #60]	; 0x3c
 802551e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025520:	681f      	ldr	r7, [r3, #0]
 8025522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025524:	2b00      	cmp	r3, #0
 8025526:	dc03      	bgt.n	8025530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025528:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802552a:	2b00      	cmp	r3, #0
 802552c:	f340 8247 	ble.w	80259be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8025530:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025532:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025536:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802553a:	1e48      	subs	r0, r1, #1
 802553c:	f102 3cff 	add.w	ip, r2, #4294967295
 8025540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025542:	2b00      	cmp	r3, #0
 8025544:	f340 80e5 	ble.w	8025712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8025548:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802554c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025550:	d406      	bmi.n	8025560 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025552:	4586      	cmp	lr, r0
 8025554:	da04      	bge.n	8025560 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025556:	2b00      	cmp	r3, #0
 8025558:	db02      	blt.n	8025560 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802555a:	4563      	cmp	r3, ip
 802555c:	f2c0 80da 	blt.w	8025714 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8025560:	f11e 0e01 	adds.w	lr, lr, #1
 8025564:	f100 80cb 	bmi.w	80256fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8025568:	4571      	cmp	r1, lr
 802556a:	f2c0 80c8 	blt.w	80256fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802556e:	3301      	adds	r3, #1
 8025570:	f100 80c5 	bmi.w	80256fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8025574:	429a      	cmp	r2, r3
 8025576:	f2c0 80c2 	blt.w	80256fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802557a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802557c:	46d0      	mov	r8, sl
 802557e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8025582:	930d      	str	r3, [sp, #52]	; 0x34
 8025584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025586:	2b00      	cmp	r3, #0
 8025588:	f340 80e3 	ble.w	8025752 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802558c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802558e:	1430      	asrs	r0, r6, #16
 8025590:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025594:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025598:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802559c:	142b      	asrs	r3, r5, #16
 802559e:	f100 812e 	bmi.w	80257fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80255a2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80255a6:	455b      	cmp	r3, fp
 80255a8:	f280 8129 	bge.w	80257fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80255ac:	2800      	cmp	r0, #0
 80255ae:	f2c0 8126 	blt.w	80257fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80255b2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80255b6:	4558      	cmp	r0, fp
 80255b8:	f280 8121 	bge.w	80257fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80255bc:	fb00 3309 	mla	r3, r0, r9, r3
 80255c0:	0858      	lsrs	r0, r3, #1
 80255c2:	07dc      	lsls	r4, r3, #31
 80255c4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80255c8:	bf54      	ite	pl
 80255ca:	f00c 0c0f 	andpl.w	ip, ip, #15
 80255ce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80255d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80255d6:	fa5f fc8c 	uxtb.w	ip, ip
 80255da:	2a00      	cmp	r2, #0
 80255dc:	f000 80fe 	beq.w	80257dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80255e0:	1c58      	adds	r0, r3, #1
 80255e2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80255e6:	07c0      	lsls	r0, r0, #31
 80255e8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80255ec:	bf54      	ite	pl
 80255ee:	f00e 0e0f 	andpl.w	lr, lr, #15
 80255f2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80255f6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80255fa:	fa5f f08e 	uxtb.w	r0, lr
 80255fe:	9010      	str	r0, [sp, #64]	; 0x40
 8025600:	b1d9      	cbz	r1, 802563a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8025602:	444b      	add	r3, r9
 8025604:	0858      	lsrs	r0, r3, #1
 8025606:	07dc      	lsls	r4, r3, #31
 8025608:	f103 0301 	add.w	r3, r3, #1
 802560c:	5c38      	ldrb	r0, [r7, r0]
 802560e:	bf54      	ite	pl
 8025610:	f000 000f 	andpl.w	r0, r0, #15
 8025614:	1100      	asrmi	r0, r0, #4
 8025616:	07dc      	lsls	r4, r3, #31
 8025618:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802561c:	b2c0      	uxtb	r0, r0
 802561e:	900a      	str	r0, [sp, #40]	; 0x28
 8025620:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8025624:	f817 e000 	ldrb.w	lr, [r7, r0]
 8025628:	bf54      	ite	pl
 802562a:	f00e 030f 	andpl.w	r3, lr, #15
 802562e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8025632:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025636:	b2db      	uxtb	r3, r3
 8025638:	9311      	str	r3, [sp, #68]	; 0x44
 802563a:	b292      	uxth	r2, r2
 802563c:	b289      	uxth	r1, r1
 802563e:	0113      	lsls	r3, r2, #4
 8025640:	fb02 f001 	mul.w	r0, r2, r1
 8025644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025646:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802564a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802564e:	1a1b      	subs	r3, r3, r0
 8025650:	b289      	uxth	r1, r1
 8025652:	b29b      	uxth	r3, r3
 8025654:	ebae 0e01 	sub.w	lr, lr, r1
 8025658:	4353      	muls	r3, r2
 802565a:	fa1f fe8e 	uxth.w	lr, lr
 802565e:	fb0c 320e 	mla	r2, ip, lr, r3
 8025662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025664:	fb01 2203 	mla	r2, r1, r3, r2
 8025668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802566a:	fb00 2203 	mla	r2, r0, r3, r2
 802566e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025672:	2a00      	cmp	r2, #0
 8025674:	d039      	beq.n	80256ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8025676:	4bc7      	ldr	r3, [pc, #796]	; (8025994 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8025678:	6819      	ldr	r1, [r3, #0]
 802567a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802567c:	fa5f fc81 	uxtb.w	ip, r1
 8025680:	435a      	muls	r2, r3
 8025682:	1c53      	adds	r3, r2, #1
 8025684:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025688:	1212      	asrs	r2, r2, #8
 802568a:	b290      	uxth	r0, r2
 802568c:	43d2      	mvns	r2, r2
 802568e:	fb1c fc00 	smulbb	ip, ip, r0
 8025692:	b2d3      	uxtb	r3, r2
 8025694:	f898 2000 	ldrb.w	r2, [r8]
 8025698:	fb02 c203 	mla	r2, r2, r3, ip
 802569c:	b292      	uxth	r2, r2
 802569e:	f102 0c01 	add.w	ip, r2, #1
 80256a2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80256a6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80256aa:	fb1c fc03 	smulbb	ip, ip, r3
 80256ae:	1212      	asrs	r2, r2, #8
 80256b0:	f888 2000 	strb.w	r2, [r8]
 80256b4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80256b8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80256bc:	fb02 c200 	mla	r2, r2, r0, ip
 80256c0:	b292      	uxth	r2, r2
 80256c2:	f102 0c01 	add.w	ip, r2, #1
 80256c6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80256ca:	1212      	asrs	r2, r2, #8
 80256cc:	f888 2001 	strb.w	r2, [r8, #1]
 80256d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80256d4:	fb12 f303 	smulbb	r3, r2, r3
 80256d8:	fb01 3300 	mla	r3, r1, r0, r3
 80256dc:	b29b      	uxth	r3, r3
 80256de:	1c5a      	adds	r2, r3, #1
 80256e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80256e4:	121b      	asrs	r3, r3, #8
 80256e6:	f888 3002 	strb.w	r3, [r8, #2]
 80256ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80256ec:	f108 0803 	add.w	r8, r8, #3
 80256f0:	441d      	add	r5, r3
 80256f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80256f4:	441e      	add	r6, r3
 80256f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80256f8:	3b01      	subs	r3, #1
 80256fa:	930d      	str	r3, [sp, #52]	; 0x34
 80256fc:	e742      	b.n	8025584 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80256fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025700:	f10a 0a03 	add.w	sl, sl, #3
 8025704:	441d      	add	r5, r3
 8025706:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025708:	441e      	add	r6, r3
 802570a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802570c:	3b01      	subs	r3, #1
 802570e:	9309      	str	r3, [sp, #36]	; 0x24
 8025710:	e716      	b.n	8025540 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025712:	d024      	beq.n	802575e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8025714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025716:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025718:	3b01      	subs	r3, #1
 802571a:	fb00 5003 	mla	r0, r0, r3, r5
 802571e:	1400      	asrs	r0, r0, #16
 8025720:	f53f af2b 	bmi.w	802557a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025724:	3901      	subs	r1, #1
 8025726:	4288      	cmp	r0, r1
 8025728:	f6bf af27 	bge.w	802557a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802572c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802572e:	fb01 6303 	mla	r3, r1, r3, r6
 8025732:	141b      	asrs	r3, r3, #16
 8025734:	f53f af21 	bmi.w	802557a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025738:	3a01      	subs	r2, #1
 802573a:	4293      	cmp	r3, r2
 802573c:	f6bf af1d 	bge.w	802557a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025740:	f10a 0e03 	add.w	lr, sl, #3
 8025744:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8025748:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802574c:	f1b8 0f00 	cmp.w	r8, #0
 8025750:	dc76      	bgt.n	8025840 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8025752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025754:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025758:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802575c:	44a2      	add	sl, r4
 802575e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025760:	2b00      	cmp	r3, #0
 8025762:	f340 812c 	ble.w	80259be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8025766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802576a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802576c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025770:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025774:	eef0 6a48 	vmov.f32	s13, s16
 8025778:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802577c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025780:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025784:	ee16 5a90 	vmov	r5, s13
 8025788:	eef0 6a68 	vmov.f32	s13, s17
 802578c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025790:	ee16 6a90 	vmov	r6, s13
 8025794:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025798:	ee69 7a27 	vmul.f32	s15, s18, s15
 802579c:	ee37 8a48 	vsub.f32	s16, s14, s16
 80257a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80257a4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80257a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80257ac:	ee18 2a10 	vmov	r2, s16
 80257b0:	eeb0 8a47 	vmov.f32	s16, s14
 80257b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80257b8:	ee18 2a90 	vmov	r2, s17
 80257bc:	932b      	str	r3, [sp, #172]	; 0xac
 80257be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80257c0:	eef0 8a67 	vmov.f32	s17, s15
 80257c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80257c8:	932c      	str	r3, [sp, #176]	; 0xb0
 80257ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80257cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80257ce:	3b01      	subs	r3, #1
 80257d0:	930c      	str	r3, [sp, #48]	; 0x30
 80257d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80257d4:	bf08      	it	eq
 80257d6:	4613      	moveq	r3, r2
 80257d8:	9309      	str	r3, [sp, #36]	; 0x24
 80257da:	e6a2      	b.n	8025522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80257dc:	2900      	cmp	r1, #0
 80257de:	f43f af2c 	beq.w	802563a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80257e2:	eb09 0003 	add.w	r0, r9, r3
 80257e6:	0843      	lsrs	r3, r0, #1
 80257e8:	07c0      	lsls	r0, r0, #31
 80257ea:	5cfb      	ldrb	r3, [r7, r3]
 80257ec:	bf54      	ite	pl
 80257ee:	f003 030f 	andpl.w	r3, r3, #15
 80257f2:	111b      	asrmi	r3, r3, #4
 80257f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80257f8:	b2db      	uxtb	r3, r3
 80257fa:	930a      	str	r3, [sp, #40]	; 0x28
 80257fc:	e71d      	b.n	802563a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80257fe:	f113 0b01 	adds.w	fp, r3, #1
 8025802:	f53f af72 	bmi.w	80256ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8025806:	45dc      	cmp	ip, fp
 8025808:	f6ff af6f 	blt.w	80256ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802580c:	f110 0b01 	adds.w	fp, r0, #1
 8025810:	f53f af6b 	bmi.w	80256ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8025814:	45de      	cmp	lr, fp
 8025816:	f6ff af68 	blt.w	80256ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802581a:	9302      	str	r3, [sp, #8]
 802581c:	fa0f f38e 	sxth.w	r3, lr
 8025820:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025822:	9301      	str	r3, [sp, #4]
 8025824:	fa0f f38c 	sxth.w	r3, ip
 8025828:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802582c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025830:	9300      	str	r3, [sp, #0]
 8025832:	463a      	mov	r2, r7
 8025834:	464b      	mov	r3, r9
 8025836:	4641      	mov	r1, r8
 8025838:	9815      	ldr	r0, [sp, #84]	; 0x54
 802583a:	f7ff fd59 	bl	80252f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802583e:	e754      	b.n	80256ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8025840:	142a      	asrs	r2, r5, #16
 8025842:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025846:	1433      	asrs	r3, r6, #16
 8025848:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802584c:	fb09 2303 	mla	r3, r9, r3, r2
 8025850:	085a      	lsrs	r2, r3, #1
 8025852:	07dc      	lsls	r4, r3, #31
 8025854:	5cba      	ldrb	r2, [r7, r2]
 8025856:	bf54      	ite	pl
 8025858:	f002 020f 	andpl.w	r2, r2, #15
 802585c:	1112      	asrmi	r2, r2, #4
 802585e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025862:	b2d2      	uxtb	r2, r2
 8025864:	2900      	cmp	r1, #0
 8025866:	f000 8097 	beq.w	8025998 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802586a:	f103 0b01 	add.w	fp, r3, #1
 802586e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8025872:	f01b 0f01 	tst.w	fp, #1
 8025876:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802587a:	bf0c      	ite	eq
 802587c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025880:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025884:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025888:	fa5f f48c 	uxtb.w	r4, ip
 802588c:	9412      	str	r4, [sp, #72]	; 0x48
 802588e:	b300      	cbz	r0, 80258d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8025890:	444b      	add	r3, r9
 8025892:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025896:	07dc      	lsls	r4, r3, #31
 8025898:	f103 0301 	add.w	r3, r3, #1
 802589c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80258a0:	bf54      	ite	pl
 80258a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80258a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80258aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80258ae:	fa5f f48c 	uxtb.w	r4, ip
 80258b2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80258b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80258b8:	07dc      	lsls	r4, r3, #31
 80258ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80258be:	bf54      	ite	pl
 80258c0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80258c4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80258c8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80258cc:	fa5f f38c 	uxtb.w	r3, ip
 80258d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80258d2:	b289      	uxth	r1, r1
 80258d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80258d6:	b280      	uxth	r0, r0
 80258d8:	fb01 f300 	mul.w	r3, r1, r0
 80258dc:	0109      	lsls	r1, r1, #4
 80258de:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80258e2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80258e6:	1ac9      	subs	r1, r1, r3
 80258e8:	b280      	uxth	r0, r0
 80258ea:	b289      	uxth	r1, r1
 80258ec:	ebac 0c00 	sub.w	ip, ip, r0
 80258f0:	4361      	muls	r1, r4
 80258f2:	fa1f fc8c 	uxth.w	ip, ip
 80258f6:	fb02 120c 	mla	r2, r2, ip, r1
 80258fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80258fc:	fb00 2001 	mla	r0, r0, r1, r2
 8025900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025902:	fb03 0302 	mla	r3, r3, r2, r0
 8025906:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802590a:	2b00      	cmp	r3, #0
 802590c:	d039      	beq.n	8025982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802590e:	4a21      	ldr	r2, [pc, #132]	; (8025994 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8025910:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8025914:	6810      	ldr	r0, [r2, #0]
 8025916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025918:	fa5f fc80 	uxtb.w	ip, r0
 802591c:	4353      	muls	r3, r2
 802591e:	1c5a      	adds	r2, r3, #1
 8025920:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025924:	121b      	asrs	r3, r3, #8
 8025926:	b29a      	uxth	r2, r3
 8025928:	43db      	mvns	r3, r3
 802592a:	fb1c fc02 	smulbb	ip, ip, r2
 802592e:	b2db      	uxtb	r3, r3
 8025930:	fb01 c103 	mla	r1, r1, r3, ip
 8025934:	b289      	uxth	r1, r1
 8025936:	f101 0c01 	add.w	ip, r1, #1
 802593a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802593e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8025942:	fb1c fc03 	smulbb	ip, ip, r3
 8025946:	1209      	asrs	r1, r1, #8
 8025948:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802594c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8025950:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8025954:	fb01 c102 	mla	r1, r1, r2, ip
 8025958:	b289      	uxth	r1, r1
 802595a:	f101 0c01 	add.w	ip, r1, #1
 802595e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8025962:	1209      	asrs	r1, r1, #8
 8025964:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8025968:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802596c:	fb11 f303 	smulbb	r3, r1, r3
 8025970:	fb00 3002 	mla	r0, r0, r2, r3
 8025974:	b280      	uxth	r0, r0
 8025976:	1c42      	adds	r2, r0, #1
 8025978:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802597c:	1200      	asrs	r0, r0, #8
 802597e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8025982:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025984:	f10e 0e03 	add.w	lr, lr, #3
 8025988:	f108 38ff 	add.w	r8, r8, #4294967295
 802598c:	441d      	add	r5, r3
 802598e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025990:	441e      	add	r6, r3
 8025992:	e6db      	b.n	802574c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8025994:	20006100 	.word	0x20006100
 8025998:	2800      	cmp	r0, #0
 802599a:	d09a      	beq.n	80258d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802599c:	444b      	add	r3, r9
 802599e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80259a2:	07db      	lsls	r3, r3, #31
 80259a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80259a8:	bf54      	ite	pl
 80259aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80259ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80259b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80259b6:	fa5f f38c 	uxtb.w	r3, ip
 80259ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80259bc:	e789      	b.n	80258d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80259be:	b017      	add	sp, #92	; 0x5c
 80259c0:	ecbd 8b08 	vpop	{d8-d11}
 80259c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080259c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80259c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259cc:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80259d0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80259d4:	2800      	cmp	r0, #0
 80259d6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80259da:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80259de:	fb0c 0e03 	mla	lr, ip, r3, r0
 80259e2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80259e6:	db6b      	blt.n	8025ac0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80259e8:	4580      	cmp	r8, r0
 80259ea:	dd69      	ble.n	8025ac0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80259ec:	f1bc 0f00 	cmp.w	ip, #0
 80259f0:	db66      	blt.n	8025ac0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80259f2:	45e1      	cmp	r9, ip
 80259f4:	dd64      	ble.n	8025ac0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80259f6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80259fa:	f01e 0f01 	tst.w	lr, #1
 80259fe:	5d16      	ldrb	r6, [r2, r4]
 8025a00:	bf0c      	ite	eq
 8025a02:	f006 060f 	andeq.w	r6, r6, #15
 8025a06:	1136      	asrne	r6, r6, #4
 8025a08:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025a0c:	b2f6      	uxtb	r6, r6
 8025a0e:	f110 0a01 	adds.w	sl, r0, #1
 8025a12:	d457      	bmi.n	8025ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025a14:	45d0      	cmp	r8, sl
 8025a16:	dd55      	ble.n	8025ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025a18:	f1bc 0f00 	cmp.w	ip, #0
 8025a1c:	db52      	blt.n	8025ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025a1e:	45e1      	cmp	r9, ip
 8025a20:	dd50      	ble.n	8025ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025a22:	2f00      	cmp	r7, #0
 8025a24:	f000 80a5 	beq.w	8025b72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8025a28:	f10e 0b01 	add.w	fp, lr, #1
 8025a2c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025a30:	f01b 0f01 	tst.w	fp, #1
 8025a34:	5d14      	ldrb	r4, [r2, r4]
 8025a36:	bf0c      	ite	eq
 8025a38:	f004 040f 	andeq.w	r4, r4, #15
 8025a3c:	1124      	asrne	r4, r4, #4
 8025a3e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025a42:	b2e4      	uxtb	r4, r4
 8025a44:	2d00      	cmp	r5, #0
 8025a46:	f000 808f 	beq.w	8025b68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8025a4a:	2800      	cmp	r0, #0
 8025a4c:	f10c 0c01 	add.w	ip, ip, #1
 8025a50:	db3c      	blt.n	8025acc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025a52:	4580      	cmp	r8, r0
 8025a54:	dd3a      	ble.n	8025acc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025a56:	f1bc 0f00 	cmp.w	ip, #0
 8025a5a:	db37      	blt.n	8025acc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025a5c:	45e1      	cmp	r9, ip
 8025a5e:	dd35      	ble.n	8025acc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025a60:	eb03 0b0e 	add.w	fp, r3, lr
 8025a64:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8025a68:	f01b 0f01 	tst.w	fp, #1
 8025a6c:	5c10      	ldrb	r0, [r2, r0]
 8025a6e:	bf0c      	ite	eq
 8025a70:	f000 000f 	andeq.w	r0, r0, #15
 8025a74:	1100      	asrne	r0, r0, #4
 8025a76:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025a7a:	b2c0      	uxtb	r0, r0
 8025a7c:	f1ba 0f00 	cmp.w	sl, #0
 8025a80:	db26      	blt.n	8025ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025a82:	45d0      	cmp	r8, sl
 8025a84:	dd24      	ble.n	8025ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025a86:	f1bc 0f00 	cmp.w	ip, #0
 8025a8a:	db21      	blt.n	8025ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025a8c:	45e1      	cmp	r9, ip
 8025a8e:	dd1f      	ble.n	8025ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025a90:	b307      	cbz	r7, 8025ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8025a92:	3301      	adds	r3, #1
 8025a94:	449e      	add	lr, r3
 8025a96:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025a9a:	f01e 0f01 	tst.w	lr, #1
 8025a9e:	5cd3      	ldrb	r3, [r2, r3]
 8025aa0:	bf0c      	ite	eq
 8025aa2:	f003 030f 	andeq.w	r3, r3, #15
 8025aa6:	111b      	asrne	r3, r3, #4
 8025aa8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025aac:	b2db      	uxtb	r3, r3
 8025aae:	2f0f      	cmp	r7, #15
 8025ab0:	d911      	bls.n	8025ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8025ab2:	4b32      	ldr	r3, [pc, #200]	; (8025b7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8025ab4:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8025ab8:	4a31      	ldr	r2, [pc, #196]	; (8025b80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8025aba:	4832      	ldr	r0, [pc, #200]	; (8025b84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8025abc:	f002 fa40 	bl	8027f40 <__assert_func>
 8025ac0:	2600      	movs	r6, #0
 8025ac2:	e7a4      	b.n	8025a0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8025ac4:	2400      	movs	r4, #0
 8025ac6:	e7bd      	b.n	8025a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8025ac8:	463c      	mov	r4, r7
 8025aca:	e7be      	b.n	8025a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8025acc:	2000      	movs	r0, #0
 8025ace:	e7d5      	b.n	8025a7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8025ad0:	2300      	movs	r3, #0
 8025ad2:	e7ec      	b.n	8025aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8025ad4:	463b      	mov	r3, r7
 8025ad6:	2d0f      	cmp	r5, #15
 8025ad8:	d8eb      	bhi.n	8025ab2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8025ada:	b2bf      	uxth	r7, r7
 8025adc:	b2ad      	uxth	r5, r5
 8025ade:	fb07 f205 	mul.w	r2, r7, r5
 8025ae2:	013f      	lsls	r7, r7, #4
 8025ae4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025ae8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8025aec:	1abf      	subs	r7, r7, r2
 8025aee:	b2ad      	uxth	r5, r5
 8025af0:	b2bf      	uxth	r7, r7
 8025af2:	ebac 0c05 	sub.w	ip, ip, r5
 8025af6:	437c      	muls	r4, r7
 8025af8:	fa1f fc8c 	uxth.w	ip, ip
 8025afc:	fb06 440c 	mla	r4, r6, ip, r4
 8025b00:	fb05 4400 	mla	r4, r5, r0, r4
 8025b04:	fb02 4303 	mla	r3, r2, r3, r4
 8025b08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025b0c:	b353      	cbz	r3, 8025b64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8025b0e:	4a1e      	ldr	r2, [pc, #120]	; (8025b88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8025b10:	7808      	ldrb	r0, [r1, #0]
 8025b12:	6814      	ldr	r4, [r2, #0]
 8025b14:	b29a      	uxth	r2, r3
 8025b16:	43db      	mvns	r3, r3
 8025b18:	b2e5      	uxtb	r5, r4
 8025b1a:	b2db      	uxtb	r3, r3
 8025b1c:	fb15 f502 	smulbb	r5, r5, r2
 8025b20:	fb00 5003 	mla	r0, r0, r3, r5
 8025b24:	b280      	uxth	r0, r0
 8025b26:	1c45      	adds	r5, r0, #1
 8025b28:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025b2c:	784d      	ldrb	r5, [r1, #1]
 8025b2e:	fb15 f503 	smulbb	r5, r5, r3
 8025b32:	1200      	asrs	r0, r0, #8
 8025b34:	7008      	strb	r0, [r1, #0]
 8025b36:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025b3a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025b3e:	fb00 5002 	mla	r0, r0, r2, r5
 8025b42:	b280      	uxth	r0, r0
 8025b44:	1c45      	adds	r5, r0, #1
 8025b46:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025b4a:	1200      	asrs	r0, r0, #8
 8025b4c:	7048      	strb	r0, [r1, #1]
 8025b4e:	7888      	ldrb	r0, [r1, #2]
 8025b50:	fb10 f303 	smulbb	r3, r0, r3
 8025b54:	fb04 3202 	mla	r2, r4, r2, r3
 8025b58:	b292      	uxth	r2, r2
 8025b5a:	1c53      	adds	r3, r2, #1
 8025b5c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025b60:	1212      	asrs	r2, r2, #8
 8025b62:	708a      	strb	r2, [r1, #2]
 8025b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b68:	2f0f      	cmp	r7, #15
 8025b6a:	d8a2      	bhi.n	8025ab2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8025b6c:	462b      	mov	r3, r5
 8025b6e:	4628      	mov	r0, r5
 8025b70:	e7b3      	b.n	8025ada <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8025b72:	2d00      	cmp	r5, #0
 8025b74:	d1a8      	bne.n	8025ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8025b76:	462c      	mov	r4, r5
 8025b78:	e7f8      	b.n	8025b6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8025b7a:	bf00      	nop
 8025b7c:	0802cb61 	.word	0x0802cb61
 8025b80:	0802d05e 	.word	0x0802d05e
 8025b84:	0802cc2a 	.word	0x0802cc2a
 8025b88:	20006100 	.word	0x20006100

08025b8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b90:	ed2d 8b08 	vpush	{d8-d11}
 8025b94:	b093      	sub	sp, #76	; 0x4c
 8025b96:	461c      	mov	r4, r3
 8025b98:	eeb0 aa40 	vmov.f32	s20, s0
 8025b9c:	920c      	str	r2, [sp, #48]	; 0x30
 8025b9e:	eef0 9a60 	vmov.f32	s19, s1
 8025ba2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025ba4:	eeb0 9a41 	vmov.f32	s18, s2
 8025ba8:	9011      	str	r0, [sp, #68]	; 0x44
 8025baa:	eeb0 8a62 	vmov.f32	s16, s5
 8025bae:	6850      	ldr	r0, [r2, #4]
 8025bb0:	eef0 8a43 	vmov.f32	s17, s6
 8025bb4:	9107      	str	r1, [sp, #28]
 8025bb6:	eef0 ba44 	vmov.f32	s23, s8
 8025bba:	6812      	ldr	r2, [r2, #0]
 8025bbc:	eeb0 ba64 	vmov.f32	s22, s9
 8025bc0:	eef0 aa45 	vmov.f32	s21, s10
 8025bc4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025bc8:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8025bcc:	fb00 1303 	mla	r3, r0, r3, r1
 8025bd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025bd4:	eb02 0b03 	add.w	fp, r2, r3
 8025bd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025bda:	689b      	ldr	r3, [r3, #8]
 8025bdc:	3301      	adds	r3, #1
 8025bde:	f023 0301 	bic.w	r3, r3, #1
 8025be2:	9309      	str	r3, [sp, #36]	; 0x24
 8025be4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025be6:	f8d3 8000 	ldr.w	r8, [r3]
 8025bea:	9b07      	ldr	r3, [sp, #28]
 8025bec:	2b00      	cmp	r3, #0
 8025bee:	dc03      	bgt.n	8025bf8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025bf2:	2b00      	cmp	r3, #0
 8025bf4:	f340 822b 	ble.w	802604e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025bf8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025bfa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025bfe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025c02:	1e48      	subs	r0, r1, #1
 8025c04:	1e57      	subs	r7, r2, #1
 8025c06:	2c00      	cmp	r4, #0
 8025c08:	f340 80d7 	ble.w	8025dba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8025c0c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8025c10:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025c14:	d406      	bmi.n	8025c24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025c16:	4584      	cmp	ip, r0
 8025c18:	da04      	bge.n	8025c24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025c1a:	2b00      	cmp	r3, #0
 8025c1c:	db02      	blt.n	8025c24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025c1e:	42bb      	cmp	r3, r7
 8025c20:	f2c0 80cc 	blt.w	8025dbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8025c24:	f11c 0c01 	adds.w	ip, ip, #1
 8025c28:	f100 80bf 	bmi.w	8025daa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8025c2c:	4561      	cmp	r1, ip
 8025c2e:	f2c0 80bc 	blt.w	8025daa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8025c32:	3301      	adds	r3, #1
 8025c34:	f100 80b9 	bmi.w	8025daa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8025c38:	429a      	cmp	r2, r3
 8025c3a:	f2c0 80b6 	blt.w	8025daa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8025c3e:	46a2      	mov	sl, r4
 8025c40:	465f      	mov	r7, fp
 8025c42:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025c46:	f1ba 0f00 	cmp.w	sl, #0
 8025c4a:	f340 80d4 	ble.w	8025df6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8025c4e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8025c52:	1430      	asrs	r0, r6, #16
 8025c54:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025c58:	9308      	str	r3, [sp, #32]
 8025c5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025c5c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025c60:	142b      	asrs	r3, r5, #16
 8025c62:	f100 8124 	bmi.w	8025eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025c66:	f10c 32ff 	add.w	r2, ip, #4294967295
 8025c6a:	4293      	cmp	r3, r2
 8025c6c:	f280 811f 	bge.w	8025eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025c70:	2800      	cmp	r0, #0
 8025c72:	f2c0 811c 	blt.w	8025eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025c76:	f10e 32ff 	add.w	r2, lr, #4294967295
 8025c7a:	4290      	cmp	r0, r2
 8025c7c:	f280 8117 	bge.w	8025eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025c80:	fb00 3309 	mla	r3, r0, r9, r3
 8025c84:	0858      	lsrs	r0, r3, #1
 8025c86:	07da      	lsls	r2, r3, #31
 8025c88:	9a08      	ldr	r2, [sp, #32]
 8025c8a:	f818 c000 	ldrb.w	ip, [r8, r0]
 8025c8e:	bf54      	ite	pl
 8025c90:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025c94:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025c98:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025c9c:	fa5f fc8c 	uxtb.w	ip, ip
 8025ca0:	2a00      	cmp	r2, #0
 8025ca2:	f000 80ed 	beq.w	8025e80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025ca6:	1c58      	adds	r0, r3, #1
 8025ca8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025cac:	07c0      	lsls	r0, r0, #31
 8025cae:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8025cb2:	bf54      	ite	pl
 8025cb4:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025cb8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8025cbc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025cc0:	fa5f fe8e 	uxtb.w	lr, lr
 8025cc4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8025cc8:	b1c9      	cbz	r1, 8025cfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8025cca:	444b      	add	r3, r9
 8025ccc:	0858      	lsrs	r0, r3, #1
 8025cce:	07da      	lsls	r2, r3, #31
 8025cd0:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025cd4:	bf54      	ite	pl
 8025cd6:	f000 000f 	andpl.w	r0, r0, #15
 8025cda:	1100      	asrmi	r0, r0, #4
 8025cdc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025ce0:	b2c0      	uxtb	r0, r0
 8025ce2:	900a      	str	r0, [sp, #40]	; 0x28
 8025ce4:	1c58      	adds	r0, r3, #1
 8025ce6:	0843      	lsrs	r3, r0, #1
 8025ce8:	07c2      	lsls	r2, r0, #31
 8025cea:	f818 3003 	ldrb.w	r3, [r8, r3]
 8025cee:	bf54      	ite	pl
 8025cf0:	f003 030f 	andpl.w	r3, r3, #15
 8025cf4:	111b      	asrmi	r3, r3, #4
 8025cf6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025cfa:	b2db      	uxtb	r3, r3
 8025cfc:	930e      	str	r3, [sp, #56]	; 0x38
 8025cfe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8025d02:	b289      	uxth	r1, r1
 8025d04:	fb02 f301 	mul.w	r3, r2, r1
 8025d08:	0112      	lsls	r2, r2, #4
 8025d0a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025d0e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025d12:	1ad2      	subs	r2, r2, r3
 8025d14:	b289      	uxth	r1, r1
 8025d16:	b292      	uxth	r2, r2
 8025d18:	1a40      	subs	r0, r0, r1
 8025d1a:	fa1f fe80 	uxth.w	lr, r0
 8025d1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025d20:	4342      	muls	r2, r0
 8025d22:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8025d26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025d28:	fb01 c102 	mla	r1, r1, r2, ip
 8025d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025d2e:	fb03 1302 	mla	r3, r3, r2, r1
 8025d32:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025d36:	b383      	cbz	r3, 8025d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025d38:	4ac7      	ldr	r2, [pc, #796]	; (8026058 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8025d3a:	2bff      	cmp	r3, #255	; 0xff
 8025d3c:	6812      	ldr	r2, [r2, #0]
 8025d3e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8025d42:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8025d46:	b2d2      	uxtb	r2, r2
 8025d48:	f000 80ac 	beq.w	8025ea4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025d4c:	b299      	uxth	r1, r3
 8025d4e:	43db      	mvns	r3, r3
 8025d50:	f897 c000 	ldrb.w	ip, [r7]
 8025d54:	fb12 f201 	smulbb	r2, r2, r1
 8025d58:	b2db      	uxtb	r3, r3
 8025d5a:	fb10 f001 	smulbb	r0, r0, r1
 8025d5e:	fb0c 2203 	mla	r2, ip, r3, r2
 8025d62:	fb1e f101 	smulbb	r1, lr, r1
 8025d66:	b292      	uxth	r2, r2
 8025d68:	f102 0c01 	add.w	ip, r2, #1
 8025d6c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025d70:	1212      	asrs	r2, r2, #8
 8025d72:	703a      	strb	r2, [r7, #0]
 8025d74:	787a      	ldrb	r2, [r7, #1]
 8025d76:	fb02 0003 	mla	r0, r2, r3, r0
 8025d7a:	b280      	uxth	r0, r0
 8025d7c:	1c42      	adds	r2, r0, #1
 8025d7e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025d82:	78ba      	ldrb	r2, [r7, #2]
 8025d84:	fb02 1303 	mla	r3, r2, r3, r1
 8025d88:	1200      	asrs	r0, r0, #8
 8025d8a:	b29b      	uxth	r3, r3
 8025d8c:	7078      	strb	r0, [r7, #1]
 8025d8e:	f103 0e01 	add.w	lr, r3, #1
 8025d92:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8025d96:	121b      	asrs	r3, r3, #8
 8025d98:	70bb      	strb	r3, [r7, #2]
 8025d9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025d9c:	3703      	adds	r7, #3
 8025d9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025da2:	441d      	add	r5, r3
 8025da4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025da6:	441e      	add	r6, r3
 8025da8:	e74d      	b.n	8025c46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025daa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025dac:	3c01      	subs	r4, #1
 8025dae:	f10b 0b03 	add.w	fp, fp, #3
 8025db2:	441d      	add	r5, r3
 8025db4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025db6:	441e      	add	r6, r3
 8025db8:	e725      	b.n	8025c06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025dba:	d021      	beq.n	8025e00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8025dbc:	1e63      	subs	r3, r4, #1
 8025dbe:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025dc0:	fb00 5003 	mla	r0, r0, r3, r5
 8025dc4:	1400      	asrs	r0, r0, #16
 8025dc6:	f53f af3a 	bmi.w	8025c3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025dca:	3901      	subs	r1, #1
 8025dcc:	4288      	cmp	r0, r1
 8025dce:	f6bf af36 	bge.w	8025c3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025dd2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025dd4:	fb01 6303 	mla	r3, r1, r3, r6
 8025dd8:	141b      	asrs	r3, r3, #16
 8025dda:	f53f af30 	bmi.w	8025c3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025dde:	3a01      	subs	r2, #1
 8025de0:	4293      	cmp	r3, r2
 8025de2:	f6bf af2c 	bge.w	8025c3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025de6:	f10b 0c03 	add.w	ip, fp, #3
 8025dea:	46a6      	mov	lr, r4
 8025dec:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025df0:	f1be 0f00 	cmp.w	lr, #0
 8025df4:	dc79      	bgt.n	8025eea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8025df6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8025dfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025dfe:	44a3      	add	fp, r4
 8025e00:	9b07      	ldr	r3, [sp, #28]
 8025e02:	2b00      	cmp	r3, #0
 8025e04:	f340 8123 	ble.w	802604e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025e0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025e0e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025e12:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025e16:	eef0 6a48 	vmov.f32	s13, s16
 8025e1a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025e1e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025e22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025e26:	ee16 5a90 	vmov	r5, s13
 8025e2a:	eef0 6a68 	vmov.f32	s13, s17
 8025e2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025e32:	ee16 6a90 	vmov	r6, s13
 8025e36:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025e3a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025e3e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025e42:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025e46:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025e4a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025e4e:	ee18 2a10 	vmov	r2, s16
 8025e52:	eeb0 8a47 	vmov.f32	s16, s14
 8025e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e5a:	ee18 2a90 	vmov	r2, s17
 8025e5e:	9327      	str	r3, [sp, #156]	; 0x9c
 8025e60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025e62:	eef0 8a67 	vmov.f32	s17, s15
 8025e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e6a:	9328      	str	r3, [sp, #160]	; 0xa0
 8025e6c:	9b07      	ldr	r3, [sp, #28]
 8025e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025e70:	3b01      	subs	r3, #1
 8025e72:	9307      	str	r3, [sp, #28]
 8025e74:	bf08      	it	eq
 8025e76:	4614      	moveq	r4, r2
 8025e78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025e7a:	bf18      	it	ne
 8025e7c:	461c      	movne	r4, r3
 8025e7e:	e6b4      	b.n	8025bea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025e80:	2900      	cmp	r1, #0
 8025e82:	f43f af3c 	beq.w	8025cfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8025e86:	eb09 0003 	add.w	r0, r9, r3
 8025e8a:	0843      	lsrs	r3, r0, #1
 8025e8c:	07c0      	lsls	r0, r0, #31
 8025e8e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8025e92:	bf54      	ite	pl
 8025e94:	f003 030f 	andpl.w	r3, r3, #15
 8025e98:	111b      	asrmi	r3, r3, #4
 8025e9a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025e9e:	b2db      	uxtb	r3, r3
 8025ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8025ea2:	e72c      	b.n	8025cfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8025ea4:	703a      	strb	r2, [r7, #0]
 8025ea6:	7078      	strb	r0, [r7, #1]
 8025ea8:	f887 e002 	strb.w	lr, [r7, #2]
 8025eac:	e775      	b.n	8025d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025eae:	1c5a      	adds	r2, r3, #1
 8025eb0:	f53f af73 	bmi.w	8025d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025eb4:	4594      	cmp	ip, r2
 8025eb6:	f6ff af70 	blt.w	8025d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025eba:	1c42      	adds	r2, r0, #1
 8025ebc:	f53f af6d 	bmi.w	8025d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025ec0:	4596      	cmp	lr, r2
 8025ec2:	f6ff af6a 	blt.w	8025d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025ec6:	9302      	str	r3, [sp, #8]
 8025ec8:	fa0f f38e 	sxth.w	r3, lr
 8025ecc:	9a08      	ldr	r2, [sp, #32]
 8025ece:	9301      	str	r3, [sp, #4]
 8025ed0:	fa0f f38c 	sxth.w	r3, ip
 8025ed4:	9105      	str	r1, [sp, #20]
 8025ed6:	4639      	mov	r1, r7
 8025ed8:	9300      	str	r3, [sp, #0]
 8025eda:	464b      	mov	r3, r9
 8025edc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025ee0:	4642      	mov	r2, r8
 8025ee2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025ee4:	f7ff fd70 	bl	80259c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8025ee8:	e757      	b.n	8025d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025eea:	142a      	asrs	r2, r5, #16
 8025eec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025ef0:	1433      	asrs	r3, r6, #16
 8025ef2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8025ef6:	fb09 2303 	mla	r3, r9, r3, r2
 8025efa:	085a      	lsrs	r2, r3, #1
 8025efc:	07d9      	lsls	r1, r3, #31
 8025efe:	f818 2002 	ldrb.w	r2, [r8, r2]
 8025f02:	bf54      	ite	pl
 8025f04:	f002 020f 	andpl.w	r2, r2, #15
 8025f08:	1112      	asrmi	r2, r2, #4
 8025f0a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025f0e:	b2d2      	uxtb	r2, r2
 8025f10:	2800      	cmp	r0, #0
 8025f12:	f000 8085 	beq.w	8026020 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025f16:	f103 0a01 	add.w	sl, r3, #1
 8025f1a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8025f1e:	f01a 0f01 	tst.w	sl, #1
 8025f22:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025f26:	bf0c      	ite	eq
 8025f28:	f001 010f 	andeq.w	r1, r1, #15
 8025f2c:	1109      	asrne	r1, r1, #4
 8025f2e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025f32:	b2c9      	uxtb	r1, r1
 8025f34:	910f      	str	r1, [sp, #60]	; 0x3c
 8025f36:	b1df      	cbz	r7, 8025f70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025f38:	444b      	add	r3, r9
 8025f3a:	0859      	lsrs	r1, r3, #1
 8025f3c:	f013 0f01 	tst.w	r3, #1
 8025f40:	f103 0301 	add.w	r3, r3, #1
 8025f44:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025f48:	bf0c      	ite	eq
 8025f4a:	f001 010f 	andeq.w	r1, r1, #15
 8025f4e:	1109      	asrne	r1, r1, #4
 8025f50:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025f54:	b2c9      	uxtb	r1, r1
 8025f56:	910b      	str	r1, [sp, #44]	; 0x2c
 8025f58:	0859      	lsrs	r1, r3, #1
 8025f5a:	07db      	lsls	r3, r3, #31
 8025f5c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025f60:	bf54      	ite	pl
 8025f62:	f001 010f 	andpl.w	r1, r1, #15
 8025f66:	1109      	asrmi	r1, r1, #4
 8025f68:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025f6c:	b2c9      	uxtb	r1, r1
 8025f6e:	9110      	str	r1, [sp, #64]	; 0x40
 8025f70:	b280      	uxth	r0, r0
 8025f72:	b2bf      	uxth	r7, r7
 8025f74:	fb00 f307 	mul.w	r3, r0, r7
 8025f78:	0100      	lsls	r0, r0, #4
 8025f7a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8025f7e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025f82:	1ac0      	subs	r0, r0, r3
 8025f84:	b2bf      	uxth	r7, r7
 8025f86:	b280      	uxth	r0, r0
 8025f88:	1bc9      	subs	r1, r1, r7
 8025f8a:	fa1f fa81 	uxth.w	sl, r1
 8025f8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025f90:	4348      	muls	r0, r1
 8025f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025f94:	fb02 020a 	mla	r2, r2, sl, r0
 8025f98:	fb07 2701 	mla	r7, r7, r1, r2
 8025f9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025f9e:	fb03 7302 	mla	r3, r3, r2, r7
 8025fa2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025fa6:	b393      	cbz	r3, 802600e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025fa8:	4a2b      	ldr	r2, [pc, #172]	; (8026058 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8025faa:	2bff      	cmp	r3, #255	; 0xff
 8025fac:	6811      	ldr	r1, [r2, #0]
 8025fae:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8025fb2:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8025fb6:	b2c9      	uxtb	r1, r1
 8025fb8:	d042      	beq.n	8026040 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025fba:	b298      	uxth	r0, r3
 8025fbc:	43db      	mvns	r3, r3
 8025fbe:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8025fc2:	fb11 f100 	smulbb	r1, r1, r0
 8025fc6:	b2db      	uxtb	r3, r3
 8025fc8:	fb17 f700 	smulbb	r7, r7, r0
 8025fcc:	fb02 1103 	mla	r1, r2, r3, r1
 8025fd0:	fb1a f000 	smulbb	r0, sl, r0
 8025fd4:	b289      	uxth	r1, r1
 8025fd6:	1c4a      	adds	r2, r1, #1
 8025fd8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025fdc:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8025fe0:	fb02 7703 	mla	r7, r2, r3, r7
 8025fe4:	1209      	asrs	r1, r1, #8
 8025fe6:	b2bf      	uxth	r7, r7
 8025fe8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8025fec:	1c7a      	adds	r2, r7, #1
 8025fee:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8025ff2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8025ff6:	fb02 0303 	mla	r3, r2, r3, r0
 8025ffa:	123f      	asrs	r7, r7, #8
 8025ffc:	b29b      	uxth	r3, r3
 8025ffe:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8026002:	1c5a      	adds	r2, r3, #1
 8026004:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026008:	121b      	asrs	r3, r3, #8
 802600a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802600e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026010:	f10c 0c03 	add.w	ip, ip, #3
 8026014:	f10e 3eff 	add.w	lr, lr, #4294967295
 8026018:	441d      	add	r5, r3
 802601a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802601c:	441e      	add	r6, r3
 802601e:	e6e7      	b.n	8025df0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8026020:	2f00      	cmp	r7, #0
 8026022:	d0a5      	beq.n	8025f70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026024:	444b      	add	r3, r9
 8026026:	0859      	lsrs	r1, r3, #1
 8026028:	07db      	lsls	r3, r3, #31
 802602a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802602e:	bf54      	ite	pl
 8026030:	f001 010f 	andpl.w	r1, r1, #15
 8026034:	1109      	asrmi	r1, r1, #4
 8026036:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802603a:	b2c9      	uxtb	r1, r1
 802603c:	910b      	str	r1, [sp, #44]	; 0x2c
 802603e:	e797      	b.n	8025f70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026040:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026044:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8026048:	f80c ac01 	strb.w	sl, [ip, #-1]
 802604c:	e7df      	b.n	802600e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802604e:	b013      	add	sp, #76	; 0x4c
 8026050:	ecbd 8b08 	vpop	{d8-d11}
 8026054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026058:	20006100 	.word	0x20006100

0802605c <CRC_Lock>:
 802605c:	4a1d      	ldr	r2, [pc, #116]	; (80260d4 <CRC_Lock+0x78>)
 802605e:	b530      	push	{r4, r5, lr}
 8026060:	6813      	ldr	r3, [r2, #0]
 8026062:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8026066:	f24c 2540 	movw	r5, #49728	; 0xc240
 802606a:	f023 0301 	bic.w	r3, r3, #1
 802606e:	6013      	str	r3, [r2, #0]
 8026070:	4b19      	ldr	r3, [pc, #100]	; (80260d8 <CRC_Lock+0x7c>)
 8026072:	681a      	ldr	r2, [r3, #0]
 8026074:	4022      	ands	r2, r4
 8026076:	42aa      	cmp	r2, r5
 8026078:	d005      	beq.n	8026086 <CRC_Lock+0x2a>
 802607a:	681b      	ldr	r3, [r3, #0]
 802607c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026080:	4023      	ands	r3, r4
 8026082:	4293      	cmp	r3, r2
 8026084:	d11d      	bne.n	80260c2 <CRC_Lock+0x66>
 8026086:	4b15      	ldr	r3, [pc, #84]	; (80260dc <CRC_Lock+0x80>)
 8026088:	681b      	ldr	r3, [r3, #0]
 802608a:	b9d3      	cbnz	r3, 80260c2 <CRC_Lock+0x66>
 802608c:	4a14      	ldr	r2, [pc, #80]	; (80260e0 <CRC_Lock+0x84>)
 802608e:	6813      	ldr	r3, [r2, #0]
 8026090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026094:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8026098:	d006      	beq.n	80260a8 <CRC_Lock+0x4c>
 802609a:	6813      	ldr	r3, [r2, #0]
 802609c:	f240 4283 	movw	r2, #1155	; 0x483
 80260a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80260a4:	4293      	cmp	r3, r2
 80260a6:	d10c      	bne.n	80260c2 <CRC_Lock+0x66>
 80260a8:	4b0e      	ldr	r3, [pc, #56]	; (80260e4 <CRC_Lock+0x88>)
 80260aa:	2201      	movs	r2, #1
 80260ac:	601a      	str	r2, [r3, #0]
 80260ae:	681a      	ldr	r2, [r3, #0]
 80260b0:	2a00      	cmp	r2, #0
 80260b2:	d1fc      	bne.n	80260ae <CRC_Lock+0x52>
 80260b4:	4b0c      	ldr	r3, [pc, #48]	; (80260e8 <CRC_Lock+0x8c>)
 80260b6:	6018      	str	r0, [r3, #0]
 80260b8:	6818      	ldr	r0, [r3, #0]
 80260ba:	1a43      	subs	r3, r0, r1
 80260bc:	4258      	negs	r0, r3
 80260be:	4158      	adcs	r0, r3
 80260c0:	bd30      	pop	{r4, r5, pc}
 80260c2:	4b0a      	ldr	r3, [pc, #40]	; (80260ec <CRC_Lock+0x90>)
 80260c4:	2201      	movs	r2, #1
 80260c6:	601a      	str	r2, [r3, #0]
 80260c8:	681a      	ldr	r2, [r3, #0]
 80260ca:	2a00      	cmp	r2, #0
 80260cc:	d1fc      	bne.n	80260c8 <CRC_Lock+0x6c>
 80260ce:	4b08      	ldr	r3, [pc, #32]	; (80260f0 <CRC_Lock+0x94>)
 80260d0:	e7f1      	b.n	80260b6 <CRC_Lock+0x5a>
 80260d2:	bf00      	nop
 80260d4:	e0002000 	.word	0xe0002000
 80260d8:	e000ed00 	.word	0xe000ed00
 80260dc:	e0042000 	.word	0xe0042000
 80260e0:	5c001000 	.word	0x5c001000
 80260e4:	58024c08 	.word	0x58024c08
 80260e8:	58024c00 	.word	0x58024c00
 80260ec:	40023008 	.word	0x40023008
 80260f0:	40023000 	.word	0x40023000

080260f4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80260f4:	6101      	str	r1, [r0, #16]
 80260f6:	4770      	bx	lr

080260f8 <_ZN8touchgfx8Gestures4tickEv>:
 80260f8:	7b83      	ldrb	r3, [r0, #14]
 80260fa:	b14b      	cbz	r3, 8026110 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80260fc:	8903      	ldrh	r3, [r0, #8]
 80260fe:	3301      	adds	r3, #1
 8026100:	b29b      	uxth	r3, r3
 8026102:	2b07      	cmp	r3, #7
 8026104:	8103      	strh	r3, [r0, #8]
 8026106:	bf81      	itttt	hi
 8026108:	2300      	movhi	r3, #0
 802610a:	8143      	strhhi	r3, [r0, #10]
 802610c:	8183      	strhhi	r3, [r0, #12]
 802610e:	7383      	strbhi	r3, [r0, #14]
 8026110:	4770      	bx	lr
	...

08026114 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026114:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026118:	4604      	mov	r4, r0
 802611a:	4698      	mov	r8, r3
 802611c:	8880      	ldrh	r0, [r0, #4]
 802611e:	4617      	mov	r7, r2
 8026120:	4b1d      	ldr	r3, [pc, #116]	; (8026198 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8026122:	460e      	mov	r6, r1
 8026124:	f8ad 0006 	strh.w	r0, [sp, #6]
 8026128:	eba8 0000 	sub.w	r0, r8, r0
 802612c:	9300      	str	r3, [sp, #0]
 802612e:	2300      	movs	r3, #0
 8026130:	b280      	uxth	r0, r0
 8026132:	8aa2      	ldrh	r2, [r4, #20]
 8026134:	f88d 3004 	strb.w	r3, [sp, #4]
 8026138:	b203      	sxth	r3, r0
 802613a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802613e:	88e1      	ldrh	r1, [r4, #6]
 8026140:	2b00      	cmp	r3, #0
 8026142:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026146:	f8ad 1008 	strh.w	r1, [sp, #8]
 802614a:	bfb8      	it	lt
 802614c:	4240      	neglt	r0, r0
 802614e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026152:	bfb8      	it	lt
 8026154:	b203      	sxthlt	r3, r0
 8026156:	4293      	cmp	r3, r2
 8026158:	dc08      	bgt.n	802616c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802615a:	1a69      	subs	r1, r5, r1
 802615c:	b289      	uxth	r1, r1
 802615e:	b20b      	sxth	r3, r1
 8026160:	2b00      	cmp	r3, #0
 8026162:	bfbc      	itt	lt
 8026164:	4249      	neglt	r1, r1
 8026166:	b20b      	sxthlt	r3, r1
 8026168:	429a      	cmp	r2, r3
 802616a:	da13      	bge.n	8026194 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802616c:	6920      	ldr	r0, [r4, #16]
 802616e:	4669      	mov	r1, sp
 8026170:	eba8 0606 	sub.w	r6, r8, r6
 8026174:	1bef      	subs	r7, r5, r7
 8026176:	6803      	ldr	r3, [r0, #0]
 8026178:	685b      	ldr	r3, [r3, #4]
 802617a:	4798      	blx	r3
 802617c:	2300      	movs	r3, #0
 802617e:	2001      	movs	r0, #1
 8026180:	8166      	strh	r6, [r4, #10]
 8026182:	8123      	strh	r3, [r4, #8]
 8026184:	81a7      	strh	r7, [r4, #12]
 8026186:	f8a4 8004 	strh.w	r8, [r4, #4]
 802618a:	80e5      	strh	r5, [r4, #6]
 802618c:	73a0      	strb	r0, [r4, #14]
 802618e:	b004      	add	sp, #16
 8026190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026194:	2000      	movs	r0, #0
 8026196:	e7fa      	b.n	802618e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8026198:	0802bf3c 	.word	0x0802bf3c

0802619c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802619c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802619e:	461e      	mov	r6, r3
 80261a0:	1e4b      	subs	r3, r1, #1
 80261a2:	b085      	sub	sp, #20
 80261a4:	4604      	mov	r4, r0
 80261a6:	2b01      	cmp	r3, #1
 80261a8:	460d      	mov	r5, r1
 80261aa:	4617      	mov	r7, r2
 80261ac:	d84b      	bhi.n	8026246 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80261ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80261b2:	1cd3      	adds	r3, r2, #3
 80261b4:	b29b      	uxth	r3, r3
 80261b6:	2b06      	cmp	r3, #6
 80261b8:	d916      	bls.n	80261e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80261ba:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802625c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80261be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80261c2:	f8cd c004 	str.w	ip, [sp, #4]
 80261c6:	f04f 0c00 	mov.w	ip, #0
 80261ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80261ce:	6900      	ldr	r0, [r0, #16]
 80261d0:	f8ad 100c 	strh.w	r1, [sp, #12]
 80261d4:	a901      	add	r1, sp, #4
 80261d6:	f88d c008 	strb.w	ip, [sp, #8]
 80261da:	f8ad 200a 	strh.w	r2, [sp, #10]
 80261de:	f8ad 300e 	strh.w	r3, [sp, #14]
 80261e2:	6803      	ldr	r3, [r0, #0]
 80261e4:	689b      	ldr	r3, [r3, #8]
 80261e6:	4798      	blx	r3
 80261e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80261ec:	1cd3      	adds	r3, r2, #3
 80261ee:	b29b      	uxth	r3, r3
 80261f0:	2b06      	cmp	r3, #6
 80261f2:	d916      	bls.n	8026222 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80261f4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802625c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80261f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80261fc:	f8cd c004 	str.w	ip, [sp, #4]
 8026200:	f04f 0c01 	mov.w	ip, #1
 8026204:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026208:	6920      	ldr	r0, [r4, #16]
 802620a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802620e:	a901      	add	r1, sp, #4
 8026210:	f88d c008 	strb.w	ip, [sp, #8]
 8026214:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026218:	f8ad 300e 	strh.w	r3, [sp, #14]
 802621c:	6803      	ldr	r3, [r0, #0]
 802621e:	689b      	ldr	r3, [r3, #8]
 8026220:	4798      	blx	r3
 8026222:	4b0d      	ldr	r3, [pc, #52]	; (8026258 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8026224:	a901      	add	r1, sp, #4
 8026226:	6920      	ldr	r0, [r4, #16]
 8026228:	9301      	str	r3, [sp, #4]
 802622a:	2300      	movs	r3, #0
 802622c:	f88d 5008 	strb.w	r5, [sp, #8]
 8026230:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026234:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026238:	f8ad 300e 	strh.w	r3, [sp, #14]
 802623c:	6803      	ldr	r3, [r0, #0]
 802623e:	681b      	ldr	r3, [r3, #0]
 8026240:	4798      	blx	r3
 8026242:	b005      	add	sp, #20
 8026244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026246:	2900      	cmp	r1, #0
 8026248:	d1eb      	bne.n	8026222 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802624a:	80a2      	strh	r2, [r4, #4]
 802624c:	80c6      	strh	r6, [r0, #6]
 802624e:	60a1      	str	r1, [r4, #8]
 8026250:	81a1      	strh	r1, [r4, #12]
 8026252:	73a1      	strb	r1, [r4, #14]
 8026254:	e7e5      	b.n	8026222 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026256:	bf00      	nop
 8026258:	0802bf28 	.word	0x0802bf28
 802625c:	0802bf50 	.word	0x0802bf50

08026260 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8026260:	10c9      	asrs	r1, r1, #3
 8026262:	2900      	cmp	r1, #0
 8026264:	bfb8      	it	lt
 8026266:	4249      	neglt	r1, r1
 8026268:	2801      	cmp	r0, #1
 802626a:	d108      	bne.n	802627e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 802626c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8026270:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8026274:	4601      	mov	r1, r0
 8026276:	dd02      	ble.n	802627e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8026278:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802627c:	4770      	bx	lr
 802627e:	29ff      	cmp	r1, #255	; 0xff
 8026280:	bfa8      	it	ge
 8026282:	21ff      	movge	r1, #255	; 0xff
 8026284:	4608      	mov	r0, r1
 8026286:	4770      	bx	lr

08026288 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8026288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802628c:	688c      	ldr	r4, [r1, #8]
 802628e:	b087      	sub	sp, #28
 8026290:	4607      	mov	r7, r0
 8026292:	2c00      	cmp	r4, #0
 8026294:	db2b      	blt.n	80262ee <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026296:	6803      	ldr	r3, [r0, #0]
 8026298:	691a      	ldr	r2, [r3, #16]
 802629a:	42a2      	cmp	r2, r4
 802629c:	dd27      	ble.n	80262ee <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802629e:	685a      	ldr	r2, [r3, #4]
 80262a0:	695e      	ldr	r6, [r3, #20]
 80262a2:	68cd      	ldr	r5, [r1, #12]
 80262a4:	fb06 2604 	mla	r6, r6, r4, r2
 80262a8:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80262ac:	698a      	ldr	r2, [r1, #24]
 80262ae:	f893 a008 	ldrb.w	sl, [r3, #8]
 80262b2:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80262b6:	9205      	str	r2, [sp, #20]
 80262b8:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 80262bc:	9b05      	ldr	r3, [sp, #20]
 80262be:	6839      	ldr	r1, [r7, #0]
 80262c0:	eb03 0c02 	add.w	ip, r3, r2
 80262c4:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 80262c8:	68c9      	ldr	r1, [r1, #12]
 80262ca:	1898      	adds	r0, r3, r2
 80262cc:	4288      	cmp	r0, r1
 80262ce:	db02      	blt.n	80262d6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80262d0:	1a8b      	subs	r3, r1, r2
 80262d2:	2b00      	cmp	r3, #0
 80262d4:	dd09      	ble.n	80262ea <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80262d6:	6878      	ldr	r0, [r7, #4]
 80262d8:	6801      	ldr	r1, [r0, #0]
 80262da:	9400      	str	r4, [sp, #0]
 80262dc:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80262e0:	4653      	mov	r3, sl
 80262e2:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80262e6:	4631      	mov	r1, r6
 80262e8:	47d8      	blx	fp
 80262ea:	3d01      	subs	r5, #1
 80262ec:	d1e4      	bne.n	80262b8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80262ee:	b007      	add	sp, #28
 80262f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080262f4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80262f4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80262f8:	b90b      	cbnz	r3, 80262fe <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 80262fa:	f001 b972 	b.w	80275e2 <_ZN8touchgfx7Outline6lineToEii>
 80262fe:	4770      	bx	lr

08026300 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8026300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026304:	4604      	mov	r4, r0
 8026306:	2600      	movs	r6, #0
 8026308:	4b8e      	ldr	r3, [pc, #568]	; (8026544 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802630a:	f100 0518 	add.w	r5, r0, #24
 802630e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8026312:	b086      	sub	sp, #24
 8026314:	4690      	mov	r8, r2
 8026316:	e9c0 3100 	strd	r3, r1, [r0]
 802631a:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802631e:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8026322:	4628      	mov	r0, r5
 8026324:	f001 fc20 	bl	8027b68 <_ZN8touchgfx15RenderingBufferC1Ev>
 8026328:	4638      	mov	r0, r7
 802632a:	f000 fb43 	bl	80269b4 <_ZN8touchgfx7OutlineC1Ev>
 802632e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8026332:	f001 fbc5 	bl	8027ac0 <_ZN8touchgfx8ScanlineC1Ev>
 8026336:	2301      	movs	r3, #1
 8026338:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 802633c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8026340:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026344:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8026348:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802634c:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8026350:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8026354:	f001 fb64 	bl	8027a20 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8026358:	b928      	cbnz	r0, 8026366 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802635a:	4b7b      	ldr	r3, [pc, #492]	; (8026548 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802635c:	2118      	movs	r1, #24
 802635e:	4a7b      	ldr	r2, [pc, #492]	; (802654c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026360:	487b      	ldr	r0, [pc, #492]	; (8026550 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8026362:	f001 fded 	bl	8027f40 <__assert_func>
 8026366:	f9b8 2000 	ldrsh.w	r2, [r8]
 802636a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802636e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8026372:	4410      	add	r0, r2
 8026374:	9602      	str	r6, [sp, #8]
 8026376:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802637a:	b280      	uxth	r0, r0
 802637c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8026380:	fa0f fa80 	sxth.w	sl, r0
 8026384:	f1ba 0f00 	cmp.w	sl, #0
 8026388:	dd70      	ble.n	802646c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802638a:	4591      	cmp	r9, r2
 802638c:	dd6e      	ble.n	802646c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802638e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8026392:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8026396:	440b      	add	r3, r1
 8026398:	b29b      	uxth	r3, r3
 802639a:	b21e      	sxth	r6, r3
 802639c:	2e00      	cmp	r6, #0
 802639e:	dd65      	ble.n	802646c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80263a0:	458e      	cmp	lr, r1
 80263a2:	dd63      	ble.n	802646c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80263a4:	45d1      	cmp	r9, sl
 80263a6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80263aa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80263ae:	bfb8      	it	lt
 80263b0:	fa1f f089 	uxthlt.w	r0, r9
 80263b4:	45b6      	cmp	lr, r6
 80263b6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80263ba:	bfb8      	it	lt
 80263bc:	fa1f f38e 	uxthlt.w	r3, lr
 80263c0:	1a80      	subs	r0, r0, r2
 80263c2:	f8ad 100a 	strh.w	r1, [sp, #10]
 80263c6:	1a5b      	subs	r3, r3, r1
 80263c8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80263cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80263d0:	f10d 0808 	add.w	r8, sp, #8
 80263d4:	ae04      	add	r6, sp, #16
 80263d6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80263da:	e886 0003 	stmia.w	r6, {r0, r1}
 80263de:	f8dc 3000 	ldr.w	r3, [ip]
 80263e2:	4660      	mov	r0, ip
 80263e4:	4631      	mov	r1, r6
 80263e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80263e8:	4798      	blx	r3
 80263ea:	6861      	ldr	r1, [r4, #4]
 80263ec:	4640      	mov	r0, r8
 80263ee:	3104      	adds	r1, #4
 80263f0:	f7f3 ffe0 	bl	801a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80263f4:	4630      	mov	r0, r6
 80263f6:	f7f3 fff5 	bl	801a3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80263fa:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80263fe:	f001 fa9f 	bl	8027940 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8026402:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8026406:	4638      	mov	r0, r7
 8026408:	f000 fab0 	bl	802696c <_ZN8touchgfx7Outline5resetEv>
 802640c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8026410:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8026414:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8026418:	015b      	lsls	r3, r3, #5
 802641a:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802641e:	0152      	lsls	r2, r2, #5
 8026420:	60e3      	str	r3, [r4, #12]
 8026422:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8026426:	60a2      	str	r2, [r4, #8]
 8026428:	015b      	lsls	r3, r3, #5
 802642a:	6123      	str	r3, [r4, #16]
 802642c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8026430:	015b      	lsls	r3, r3, #5
 8026432:	6163      	str	r3, [r4, #20]
 8026434:	4b47      	ldr	r3, [pc, #284]	; (8026554 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8026436:	6818      	ldr	r0, [r3, #0]
 8026438:	6803      	ldr	r3, [r0, #0]
 802643a:	6a1b      	ldr	r3, [r3, #32]
 802643c:	4798      	blx	r3
 802643e:	4606      	mov	r6, r0
 8026440:	f7ea f872 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8026444:	6803      	ldr	r3, [r0, #0]
 8026446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026448:	4798      	blx	r3
 802644a:	4607      	mov	r7, r0
 802644c:	f7ea f86c 	bl	8010528 <_ZN8touchgfx3HAL3lcdEv>
 8026450:	6803      	ldr	r3, [r0, #0]
 8026452:	6a1b      	ldr	r3, [r3, #32]
 8026454:	4798      	blx	r3
 8026456:	280d      	cmp	r0, #13
 8026458:	d854      	bhi.n	8026504 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802645a:	e8df f000 	tbb	[pc, r0]
 802645e:	554b      	.short	0x554b
 8026460:	2b6e0a66 	.word	0x2b6e0a66
 8026464:	5f5f5f3b 	.word	0x5f5f5f3b
 8026468:	6e6e5f5f 	.word	0x6e6e5f5f
 802646c:	2300      	movs	r3, #0
 802646e:	9303      	str	r3, [sp, #12]
 8026470:	e7ae      	b.n	80263d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8026472:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026476:	2108      	movs	r1, #8
 8026478:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802647c:	fb92 f1f1 	sdiv	r1, r2, r1
 8026480:	fb07 1303 	mla	r3, r7, r3, r1
 8026484:	441e      	add	r6, r3
 8026486:	4253      	negs	r3, r2
 8026488:	f002 0207 	and.w	r2, r2, #7
 802648c:	f003 0307 	and.w	r3, r3, #7
 8026490:	bf58      	it	pl
 8026492:	425a      	negpl	r2, r3
 8026494:	b2d2      	uxtb	r2, r2
 8026496:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802649a:	4628      	mov	r0, r5
 802649c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80264a0:	6721      	str	r1, [r4, #112]	; 0x70
 80264a2:	e9cd 1700 	strd	r1, r7, [sp]
 80264a6:	4631      	mov	r1, r6
 80264a8:	f001 fb6a 	bl	8027b80 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80264ac:	4620      	mov	r0, r4
 80264ae:	b006      	add	sp, #24
 80264b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264b4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80264b8:	2104      	movs	r1, #4
 80264ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80264be:	fb92 f1f1 	sdiv	r1, r2, r1
 80264c2:	fb07 1303 	mla	r3, r7, r3, r1
 80264c6:	441e      	add	r6, r3
 80264c8:	4253      	negs	r3, r2
 80264ca:	f002 0203 	and.w	r2, r2, #3
 80264ce:	f003 0303 	and.w	r3, r3, #3
 80264d2:	e7dd      	b.n	8026490 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80264d4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80264d8:	2102      	movs	r1, #2
 80264da:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80264de:	2a00      	cmp	r2, #0
 80264e0:	fb92 f1f1 	sdiv	r1, r2, r1
 80264e4:	f002 0201 	and.w	r2, r2, #1
 80264e8:	fb07 1303 	mla	r3, r7, r3, r1
 80264ec:	bfb8      	it	lt
 80264ee:	4252      	neglt	r2, r2
 80264f0:	441e      	add	r6, r3
 80264f2:	e7cf      	b.n	8026494 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80264f4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80264f8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80264fc:	437b      	muls	r3, r7
 80264fe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8026502:	441e      	add	r6, r3
 8026504:	2200      	movs	r2, #0
 8026506:	e7c6      	b.n	8026496 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8026508:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802650c:	2103      	movs	r1, #3
 802650e:	fb07 f203 	mul.w	r2, r7, r3
 8026512:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8026516:	fb13 2301 	smlabb	r3, r3, r1, r2
 802651a:	e7f2      	b.n	8026502 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802651c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026520:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026524:	fb07 2303 	mla	r3, r7, r3, r2
 8026528:	e7eb      	b.n	8026502 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802652a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802652e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026532:	437b      	muls	r3, r7
 8026534:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026538:	e7e3      	b.n	8026502 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802653a:	4b07      	ldr	r3, [pc, #28]	; (8026558 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802653c:	2157      	movs	r1, #87	; 0x57
 802653e:	4a03      	ldr	r2, [pc, #12]	; (802654c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026540:	e70e      	b.n	8026360 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8026542:	bf00      	nop
 8026544:	0802d384 	.word	0x0802d384
 8026548:	0802d2ce 	.word	0x0802d2ce
 802654c:	0802d38c 	.word	0x0802d38c
 8026550:	0802d32a 	.word	0x0802d32a
 8026554:	200060f8 	.word	0x200060f8
 8026558:	0802d35e 	.word	0x0802d35e

0802655c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802655c:	6812      	ldr	r2, [r2, #0]
 802655e:	2a00      	cmp	r2, #0
 8026560:	db0b      	blt.n	802657a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8026562:	9800      	ldr	r0, [sp, #0]
 8026564:	6800      	ldr	r0, [r0, #0]
 8026566:	4290      	cmp	r0, r2
 8026568:	bfd4      	ite	le
 802656a:	2002      	movle	r0, #2
 802656c:	2000      	movgt	r0, #0
 802656e:	680a      	ldr	r2, [r1, #0]
 8026570:	2a00      	cmp	r2, #0
 8026572:	da04      	bge.n	802657e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8026574:	f040 0004 	orr.w	r0, r0, #4
 8026578:	4770      	bx	lr
 802657a:	2001      	movs	r0, #1
 802657c:	e7f7      	b.n	802656e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802657e:	681b      	ldr	r3, [r3, #0]
 8026580:	4293      	cmp	r3, r2
 8026582:	bfd8      	it	le
 8026584:	f040 0008 	orrle.w	r0, r0, #8
 8026588:	4770      	bx	lr
	...

0802658c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802658c:	4b07      	ldr	r3, [pc, #28]	; (80265ac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802658e:	b510      	push	{r4, lr}
 8026590:	781b      	ldrb	r3, [r3, #0]
 8026592:	2b01      	cmp	r3, #1
 8026594:	d108      	bne.n	80265a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8026596:	6843      	ldr	r3, [r0, #4]
 8026598:	6814      	ldr	r4, [r2, #0]
 802659a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802659e:	680b      	ldr	r3, [r1, #0]
 80265a0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80265a4:	6013      	str	r3, [r2, #0]
 80265a6:	600c      	str	r4, [r1, #0]
 80265a8:	bd10      	pop	{r4, pc}
 80265aa:	bf00      	nop
 80265ac:	200060ee 	.word	0x200060ee

080265b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80265b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80265b2:	b085      	sub	sp, #20
 80265b4:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80265b8:	4604      	mov	r4, r0
 80265ba:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80265be:	b33b      	cbz	r3, 8026610 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80265c0:	aa02      	add	r2, sp, #8
 80265c2:	a903      	add	r1, sp, #12
 80265c4:	f7ff ffe2 	bl	802658c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80265c8:	68a3      	ldr	r3, [r4, #8]
 80265ca:	9e03      	ldr	r6, [sp, #12]
 80265cc:	aa02      	add	r2, sp, #8
 80265ce:	9f02      	ldr	r7, [sp, #8]
 80265d0:	a903      	add	r1, sp, #12
 80265d2:	1af6      	subs	r6, r6, r3
 80265d4:	68e3      	ldr	r3, [r4, #12]
 80265d6:	4620      	mov	r0, r4
 80265d8:	1aff      	subs	r7, r7, r3
 80265da:	f104 0314 	add.w	r3, r4, #20
 80265de:	9603      	str	r6, [sp, #12]
 80265e0:	9300      	str	r3, [sp, #0]
 80265e2:	f104 0310 	add.w	r3, r4, #16
 80265e6:	9702      	str	r7, [sp, #8]
 80265e8:	f7ff ffb8 	bl	802655c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80265ec:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80265f0:	4605      	mov	r5, r0
 80265f2:	b97b      	cbnz	r3, 8026614 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80265f4:	463a      	mov	r2, r7
 80265f6:	4631      	mov	r1, r6
 80265f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80265fc:	f7ff fe7a 	bl	80262f4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026600:	9b03      	ldr	r3, [sp, #12]
 8026602:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8026606:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802660a:	9b02      	ldr	r3, [sp, #8]
 802660c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8026610:	b005      	add	sp, #20
 8026612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026614:	b110      	cbz	r0, 802661c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8026616:	ea13 0200 	ands.w	r2, r3, r0
 802661a:	d11c      	bne.n	8026656 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802661c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8026620:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8026624:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8026628:	b188      	cbz	r0, 802664e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802662a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802662e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8026632:	b913      	cbnz	r3, 802663a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8026634:	4630      	mov	r0, r6
 8026636:	f001 f804 	bl	8027642 <_ZN8touchgfx7Outline6moveToEii>
 802663a:	2300      	movs	r3, #0
 802663c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026640:	2301      	movs	r3, #1
 8026642:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8026646:	4630      	mov	r0, r6
 8026648:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802664c:	e7d6      	b.n	80265fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802664e:	4630      	mov	r0, r6
 8026650:	f7ff fe50 	bl	80262f4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026654:	e7f7      	b.n	8026646 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8026656:	4615      	mov	r5, r2
 8026658:	e7d2      	b.n	8026600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802665a <_ZN8touchgfx6Canvas5closeEv>:
 802665a:	b538      	push	{r3, r4, r5, lr}
 802665c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8026660:	4604      	mov	r4, r0
 8026662:	b993      	cbnz	r3, 802668a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026664:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8026668:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802666c:	4213      	tst	r3, r2
 802666e:	d10c      	bne.n	802668a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026670:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8026674:	b123      	cbz	r3, 8026680 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8026676:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802667a:	4628      	mov	r0, r5
 802667c:	f7ff fe3a 	bl	80262f4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026680:	4628      	mov	r0, r5
 8026682:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8026686:	f7ff fe35 	bl	80262f4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802668a:	2300      	movs	r3, #0
 802668c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026690:	bd38      	pop	{r3, r4, r5, pc}

08026692 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8026692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026694:	b085      	sub	sp, #20
 8026696:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802669a:	4604      	mov	r4, r0
 802669c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80266a0:	b353      	cbz	r3, 80266f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80266a2:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80266a6:	b90b      	cbnz	r3, 80266ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80266a8:	f7ff ffd7 	bl	802665a <_ZN8touchgfx6Canvas5closeEv>
 80266ac:	aa02      	add	r2, sp, #8
 80266ae:	a903      	add	r1, sp, #12
 80266b0:	4620      	mov	r0, r4
 80266b2:	f7ff ff6b 	bl	802658c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80266b6:	68a3      	ldr	r3, [r4, #8]
 80266b8:	9d03      	ldr	r5, [sp, #12]
 80266ba:	aa02      	add	r2, sp, #8
 80266bc:	9e02      	ldr	r6, [sp, #8]
 80266be:	a903      	add	r1, sp, #12
 80266c0:	1aed      	subs	r5, r5, r3
 80266c2:	68e3      	ldr	r3, [r4, #12]
 80266c4:	4620      	mov	r0, r4
 80266c6:	1af6      	subs	r6, r6, r3
 80266c8:	f104 0314 	add.w	r3, r4, #20
 80266cc:	9503      	str	r5, [sp, #12]
 80266ce:	9300      	str	r3, [sp, #0]
 80266d0:	f104 0310 	add.w	r3, r4, #16
 80266d4:	9602      	str	r6, [sp, #8]
 80266d6:	f7ff ff41 	bl	802655c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80266da:	4607      	mov	r7, r0
 80266dc:	b170      	cbz	r0, 80266fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80266de:	2301      	movs	r3, #1
 80266e0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80266e4:	9a03      	ldr	r2, [sp, #12]
 80266e6:	9b02      	ldr	r3, [sp, #8]
 80266e8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80266ec:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80266f0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80266f4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80266f8:	b005      	add	sp, #20
 80266fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80266fc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8026700:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8026704:	b92b      	cbnz	r3, 8026712 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8026706:	4632      	mov	r2, r6
 8026708:	4629      	mov	r1, r5
 802670a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802670e:	f000 ff98 	bl	8027642 <_ZN8touchgfx7Outline6moveToEii>
 8026712:	2300      	movs	r3, #0
 8026714:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026718:	2301      	movs	r3, #1
 802671a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802671e:	e7e1      	b.n	80266e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08026720 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8026720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026724:	4604      	mov	r4, r0
 8026726:	b087      	sub	sp, #28
 8026728:	9105      	str	r1, [sp, #20]
 802672a:	f001 f8ce 	bl	80278ca <_ZN8touchgfx7Outline8getCellsEv>
 802672e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8026732:	4605      	mov	r5, r0
 8026734:	f1b9 0f00 	cmp.w	r9, #0
 8026738:	d103      	bne.n	8026742 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802673a:	2001      	movs	r0, #1
 802673c:	b007      	add	sp, #28
 802673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026742:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8026746:	2e00      	cmp	r6, #0
 8026748:	d139      	bne.n	80267be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802674a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802674e:	f105 0708 	add.w	r7, r5, #8
 8026752:	4640      	mov	r0, r8
 8026754:	f001 f99e 	bl	8027a94 <_ZN8touchgfx8Scanline5resetEv>
 8026758:	f109 33ff 	add.w	r3, r9, #4294967295
 802675c:	9303      	str	r3, [sp, #12]
 802675e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8026762:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8026766:	46da      	mov	sl, fp
 8026768:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802676c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8026770:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8026774:	9b03      	ldr	r3, [sp, #12]
 8026776:	4416      	add	r6, r2
 8026778:	9504      	str	r5, [sp, #16]
 802677a:	463d      	mov	r5, r7
 802677c:	3b01      	subs	r3, #1
 802677e:	9303      	str	r3, [sp, #12]
 8026780:	3301      	adds	r3, #1
 8026782:	d01e      	beq.n	80267c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8026784:	3708      	adds	r7, #8
 8026786:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802678a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802678e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8026792:	4290      	cmp	r0, r2
 8026794:	d11e      	bne.n	80267d4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8026796:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802679a:	4411      	add	r1, r2
 802679c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80267a0:	e7e8      	b.n	8026774 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80267a2:	1c91      	adds	r1, r2, #2
 80267a4:	f04f 0301 	mov.w	r3, #1
 80267a8:	65e1      	str	r1, [r4, #92]	; 0x5c
 80267aa:	8053      	strh	r3, [r2, #2]
 80267ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80267ae:	1c91      	adds	r1, r2, #2
 80267b0:	65a1      	str	r1, [r4, #88]	; 0x58
 80267b2:	f8a2 b002 	strh.w	fp, [r2, #2]
 80267b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80267b8:	3201      	adds	r2, #1
 80267ba:	6562      	str	r2, [r4, #84]	; 0x54
 80267bc:	e03a      	b.n	8026834 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80267be:	2000      	movs	r0, #0
 80267c0:	e7bc      	b.n	802673c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80267c2:	b951      	cbnz	r1, 80267da <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80267c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80267c6:	2b00      	cmp	r3, #0
 80267c8:	d0b7      	beq.n	802673a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80267ca:	4641      	mov	r1, r8
 80267cc:	9805      	ldr	r0, [sp, #20]
 80267ce:	f7ff fd5b 	bl	8026288 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80267d2:	e7b2      	b.n	802673a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80267d4:	2900      	cmp	r1, #0
 80267d6:	d035      	beq.n	8026844 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80267d8:	9504      	str	r5, [sp, #16]
 80267da:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80267de:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80267e2:	f7ff fd3d 	bl	8026260 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 80267e6:	4605      	mov	r5, r0
 80267e8:	b330      	cbz	r0, 8026838 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80267ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80267ec:	b182      	cbz	r2, 8026810 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80267ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80267f0:	454a      	cmp	r2, r9
 80267f2:	d00d      	beq.n	8026810 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80267f4:	4641      	mov	r1, r8
 80267f6:	9805      	ldr	r0, [sp, #20]
 80267f8:	f7ff fd46 	bl	8026288 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80267fc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026800:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8026802:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8026806:	65e2      	str	r2, [r4, #92]	; 0x5c
 8026808:	2300      	movs	r3, #0
 802680a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802680c:	6563      	str	r3, [r4, #84]	; 0x54
 802680e:	65a2      	str	r2, [r4, #88]	; 0x58
 8026810:	f1bb 0f00 	cmp.w	fp, #0
 8026814:	db10      	blt.n	8026838 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8026816:	f001 f911 	bl	8027a3c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802681a:	4583      	cmp	fp, r0
 802681c:	d20c      	bcs.n	8026838 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802681e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8026820:	f802 500b 	strb.w	r5, [r2, fp]
 8026824:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8026826:	3201      	adds	r2, #1
 8026828:	455a      	cmp	r2, fp
 802682a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802682c:	d1b9      	bne.n	80267a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802682e:	8811      	ldrh	r1, [r2, #0]
 8026830:	3101      	adds	r1, #1
 8026832:	8011      	strh	r1, [r2, #0]
 8026834:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8026838:	9b03      	ldr	r3, [sp, #12]
 802683a:	3301      	adds	r3, #1
 802683c:	d0c2      	beq.n	80267c4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802683e:	f10b 0a01 	add.w	sl, fp, #1
 8026842:	9d04      	ldr	r5, [sp, #16]
 8026844:	f9b5 3000 	ldrsh.w	r3, [r5]
 8026848:	4553      	cmp	r3, sl
 802684a:	dd88      	ble.n	802675e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802684c:	01b1      	lsls	r1, r6, #6
 802684e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8026852:	f7ff fd05 	bl	8026260 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 8026856:	4683      	mov	fp, r0
 8026858:	2800      	cmp	r0, #0
 802685a:	d080      	beq.n	802675e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802685c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802685e:	b183      	cbz	r3, 8026882 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8026860:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8026862:	454b      	cmp	r3, r9
 8026864:	d00d      	beq.n	8026882 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8026866:	4641      	mov	r1, r8
 8026868:	9805      	ldr	r0, [sp, #20]
 802686a:	f7ff fd0d 	bl	8026288 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802686e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026872:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8026876:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8026878:	65e3      	str	r3, [r4, #92]	; 0x5c
 802687a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802687c:	65a3      	str	r3, [r4, #88]	; 0x58
 802687e:	2300      	movs	r3, #0
 8026880:	6563      	str	r3, [r4, #84]	; 0x54
 8026882:	f9b5 3000 	ldrsh.w	r3, [r5]
 8026886:	464a      	mov	r2, r9
 8026888:	f8cd b000 	str.w	fp, [sp]
 802688c:	4651      	mov	r1, sl
 802688e:	eba3 030a 	sub.w	r3, r3, sl
 8026892:	4640      	mov	r0, r8
 8026894:	f001 f926 	bl	8027ae4 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8026898:	e761      	b.n	802675e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802689a <_ZN8touchgfx6Canvas6renderEh>:
 802689a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802689c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80268a0:	4604      	mov	r4, r0
 80268a2:	460d      	mov	r5, r1
 80268a4:	b913      	cbnz	r3, 80268ac <_ZN8touchgfx6Canvas6renderEh+0x12>
 80268a6:	2001      	movs	r0, #1
 80268a8:	b003      	add	sp, #12
 80268aa:	bd30      	pop	{r4, r5, pc}
 80268ac:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	d12f      	bne.n	8026914 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 80268b4:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 80268b8:	2b00      	cmp	r3, #0
 80268ba:	d0f4      	beq.n	80268a6 <_ZN8touchgfx6Canvas6renderEh+0xc>
 80268bc:	6840      	ldr	r0, [r0, #4]
 80268be:	6803      	ldr	r3, [r0, #0]
 80268c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80268c2:	4798      	blx	r3
 80268c4:	fb10 f105 	smulbb	r1, r0, r5
 80268c8:	b288      	uxth	r0, r1
 80268ca:	1c41      	adds	r1, r0, #1
 80268cc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80268d0:	120d      	asrs	r5, r1, #8
 80268d2:	d0e8      	beq.n	80268a6 <_ZN8touchgfx6Canvas6renderEh+0xc>
 80268d4:	4620      	mov	r0, r4
 80268d6:	f7ff fec0 	bl	802665a <_ZN8touchgfx6Canvas5closeEv>
 80268da:	6860      	ldr	r0, [r4, #4]
 80268dc:	6803      	ldr	r3, [r0, #0]
 80268de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80268e0:	4798      	blx	r3
 80268e2:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 80268e6:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 80268ea:	8082      	strh	r2, [r0, #4]
 80268ec:	80c3      	strh	r3, [r0, #6]
 80268ee:	6860      	ldr	r0, [r4, #4]
 80268f0:	6803      	ldr	r3, [r0, #0]
 80268f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80268f4:	4798      	blx	r3
 80268f6:	7205      	strb	r5, [r0, #8]
 80268f8:	6860      	ldr	r0, [r4, #4]
 80268fa:	6803      	ldr	r3, [r0, #0]
 80268fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80268fe:	4798      	blx	r3
 8026900:	f104 0318 	add.w	r3, r4, #24
 8026904:	4669      	mov	r1, sp
 8026906:	e9cd 3000 	strd	r3, r0, [sp]
 802690a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802690e:	f7ff ff07 	bl	8026720 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8026912:	e7c9      	b.n	80268a8 <_ZN8touchgfx6Canvas6renderEh+0xe>
 8026914:	2000      	movs	r0, #0
 8026916:	e7c7      	b.n	80268a8 <_ZN8touchgfx6Canvas6renderEh+0xe>

08026918 <_ZN8touchgfx6CanvasD1Ev>:
 8026918:	b538      	push	{r3, r4, r5, lr}
 802691a:	4605      	mov	r5, r0
 802691c:	4b08      	ldr	r3, [pc, #32]	; (8026940 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802691e:	4604      	mov	r4, r0
 8026920:	f845 3b30 	str.w	r3, [r5], #48
 8026924:	4b07      	ldr	r3, [pc, #28]	; (8026944 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8026926:	6818      	ldr	r0, [r3, #0]
 8026928:	6803      	ldr	r3, [r0, #0]
 802692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802692c:	4798      	blx	r3
 802692e:	4628      	mov	r0, r5
 8026930:	f000 f814 	bl	802695c <_ZN8touchgfx7OutlineD1Ev>
 8026934:	f104 0018 	add.w	r0, r4, #24
 8026938:	f001 f90d 	bl	8027b56 <_ZN8touchgfx15RenderingBufferD1Ev>
 802693c:	4620      	mov	r0, r4
 802693e:	bd38      	pop	{r3, r4, r5, pc}
 8026940:	0802d384 	.word	0x0802d384
 8026944:	200060f8 	.word	0x200060f8

08026948 <_ZN8touchgfx6CanvasD0Ev>:
 8026948:	b510      	push	{r4, lr}
 802694a:	4604      	mov	r4, r0
 802694c:	f7ff ffe4 	bl	8026918 <_ZN8touchgfx6CanvasD1Ev>
 8026950:	21bc      	movs	r1, #188	; 0xbc
 8026952:	4620      	mov	r0, r4
 8026954:	f001 f921 	bl	8027b9a <_ZdlPvj>
 8026958:	4620      	mov	r0, r4
 802695a:	bd10      	pop	{r4, pc}

0802695c <_ZN8touchgfx7OutlineD1Ev>:
 802695c:	4770      	bx	lr

0802695e <_ZN8touchgfx7OutlineD0Ev>:
 802695e:	b510      	push	{r4, lr}
 8026960:	4604      	mov	r4, r0
 8026962:	2148      	movs	r1, #72	; 0x48
 8026964:	f001 f919 	bl	8027b9a <_ZdlPvj>
 8026968:	4620      	mov	r0, r4
 802696a:	bd10      	pop	{r4, pc}

0802696c <_ZN8touchgfx7Outline5resetEv>:
 802696c:	b510      	push	{r4, lr}
 802696e:	4604      	mov	r4, r0
 8026970:	f001 f87c 	bl	8027a6c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8026974:	60e0      	str	r0, [r4, #12]
 8026976:	f001 f87f 	bl	8027a78 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802697a:	68e3      	ldr	r3, [r4, #12]
 802697c:	2200      	movs	r2, #0
 802697e:	08c0      	lsrs	r0, r0, #3
 8026980:	6123      	str	r3, [r4, #16]
 8026982:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026986:	6060      	str	r0, [r4, #4]
 8026988:	82a3      	strh	r3, [r4, #20]
 802698a:	82e3      	strh	r3, [r4, #22]
 802698c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802698e:	60a2      	str	r2, [r4, #8]
 8026990:	f023 0301 	bic.w	r3, r3, #1
 8026994:	8322      	strh	r2, [r4, #24]
 8026996:	8362      	strh	r2, [r4, #26]
 8026998:	f043 0302 	orr.w	r3, r3, #2
 802699c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80269a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80269a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80269a6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80269aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80269ae:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80269b2:	bd10      	pop	{r4, pc}

080269b4 <_ZN8touchgfx7OutlineC1Ev>:
 80269b4:	4b0f      	ldr	r3, [pc, #60]	; (80269f4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80269b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80269ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80269be:	b510      	push	{r4, lr}
 80269c0:	6003      	str	r3, [r0, #0]
 80269c2:	2300      	movs	r3, #0
 80269c4:	4604      	mov	r4, r0
 80269c6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80269ca:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80269ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80269d2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80269d6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80269da:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80269de:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80269e2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80269e6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80269ea:	f7ff ffbf 	bl	802696c <_ZN8touchgfx7Outline5resetEv>
 80269ee:	4620      	mov	r0, r4
 80269f0:	bd10      	pop	{r4, pc}
 80269f2:	bf00      	nop
 80269f4:	0802d3e4 	.word	0x0802d3e4

080269f8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80269f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269fc:	b093      	sub	sp, #76	; 0x4c
 80269fe:	4604      	mov	r4, r0
 8026a00:	1156      	asrs	r6, r2, #5
 8026a02:	f002 0e1f 	and.w	lr, r2, #31
 8026a06:	981c      	ldr	r0, [sp, #112]	; 0x70
 8026a08:	9305      	str	r3, [sp, #20]
 8026a0a:	1143      	asrs	r3, r0, #5
 8026a0c:	1145      	asrs	r5, r0, #5
 8026a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8026a10:	f000 031f 	and.w	r3, r0, #31
 8026a14:	9303      	str	r3, [sp, #12]
 8026a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8026a18:	42b3      	cmp	r3, r6
 8026a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026a1c:	bfc8      	it	gt
 8026a1e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8026a20:	42b3      	cmp	r3, r6
 8026a22:	bfdc      	itt	le
 8026a24:	1c73      	addle	r3, r6, #1
 8026a26:	63a3      	strle	r3, [r4, #56]	; 0x38
 8026a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8026a2a:	42ab      	cmp	r3, r5
 8026a2c:	bfc8      	it	gt
 8026a2e:	462b      	movgt	r3, r5
 8026a30:	ea4f 1560 	mov.w	r5, r0, asr #5
 8026a34:	bfc8      	it	gt
 8026a36:	6323      	strgt	r3, [r4, #48]	; 0x30
 8026a38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026a3a:	42ab      	cmp	r3, r5
 8026a3c:	bfd8      	it	le
 8026a3e:	462b      	movle	r3, r5
 8026a40:	ea4f 1561 	mov.w	r5, r1, asr #5
 8026a44:	bfdc      	itt	le
 8026a46:	3301      	addle	r3, #1
 8026a48:	63a3      	strle	r3, [r4, #56]	; 0x38
 8026a4a:	9b05      	ldr	r3, [sp, #20]
 8026a4c:	eba3 0a01 	sub.w	sl, r3, r1
 8026a50:	1143      	asrs	r3, r0, #5
 8026a52:	429e      	cmp	r6, r3
 8026a54:	f040 8119 	bne.w	8026c8a <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8026a58:	9b05      	ldr	r3, [sp, #20]
 8026a5a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8026a5e:	9b03      	ldr	r3, [sp, #12]
 8026a60:	459e      	cmp	lr, r3
 8026a62:	d12c      	bne.n	8026abe <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8026a64:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026a68:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8026a6c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8026a70:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8026a74:	4291      	cmp	r1, r2
 8026a76:	d037      	beq.n	8026ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026a78:	8b61      	ldrh	r1, [r4, #26]
 8026a7a:	8b22      	ldrh	r2, [r4, #24]
 8026a7c:	430a      	orrs	r2, r1
 8026a7e:	d00b      	beq.n	8026a98 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026a80:	2b00      	cmp	r3, #0
 8026a82:	db09      	blt.n	8026a98 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026a84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026a86:	429a      	cmp	r2, r3
 8026a88:	dd06      	ble.n	8026a98 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026a8a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8026a8e:	429a      	cmp	r2, r3
 8026a90:	d308      	bcc.n	8026aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8026a92:	2301      	movs	r3, #1
 8026a94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026a98:	f8a4 c014 	strh.w	ip, [r4, #20]
 8026a9c:	82e6      	strh	r6, [r4, #22]
 8026a9e:	2300      	movs	r3, #0
 8026aa0:	8323      	strh	r3, [r4, #24]
 8026aa2:	e0c6      	b.n	8026c32 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8026aa4:	f104 0314 	add.w	r3, r4, #20
 8026aa8:	6922      	ldr	r2, [r4, #16]
 8026aaa:	cb03      	ldmia	r3!, {r0, r1}
 8026aac:	6010      	str	r0, [r2, #0]
 8026aae:	6051      	str	r1, [r2, #4]
 8026ab0:	6923      	ldr	r3, [r4, #16]
 8026ab2:	3308      	adds	r3, #8
 8026ab4:	6123      	str	r3, [r4, #16]
 8026ab6:	68a3      	ldr	r3, [r4, #8]
 8026ab8:	3301      	adds	r3, #1
 8026aba:	60a3      	str	r3, [r4, #8]
 8026abc:	e7ec      	b.n	8026a98 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026abe:	9b05      	ldr	r3, [sp, #20]
 8026ac0:	45ac      	cmp	ip, r5
 8026ac2:	f001 011f 	and.w	r1, r1, #31
 8026ac6:	8b20      	ldrh	r0, [r4, #24]
 8026ac8:	f003 031f 	and.w	r3, r3, #31
 8026acc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8026ad0:	9304      	str	r3, [sp, #16]
 8026ad2:	9b03      	ldr	r3, [sp, #12]
 8026ad4:	eba3 020e 	sub.w	r2, r3, lr
 8026ad8:	d109      	bne.n	8026aee <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8026ada:	9b04      	ldr	r3, [sp, #16]
 8026adc:	4410      	add	r0, r2
 8026ade:	4419      	add	r1, r3
 8026ae0:	8320      	strh	r0, [r4, #24]
 8026ae2:	fb02 8201 	mla	r2, r2, r1, r8
 8026ae6:	8362      	strh	r2, [r4, #26]
 8026ae8:	b013      	add	sp, #76	; 0x4c
 8026aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026aee:	f1ba 0f00 	cmp.w	sl, #0
 8026af2:	f2c0 80a0 	blt.w	8026c36 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8026af6:	f1c1 0320 	rsb	r3, r1, #32
 8026afa:	f04f 0b20 	mov.w	fp, #32
 8026afe:	435a      	muls	r2, r3
 8026b00:	2301      	movs	r3, #1
 8026b02:	9302      	str	r3, [sp, #8]
 8026b04:	4459      	add	r1, fp
 8026b06:	fb92 f7fa 	sdiv	r7, r2, sl
 8026b0a:	fb0a 2217 	mls	r2, sl, r7, r2
 8026b0e:	2a00      	cmp	r2, #0
 8026b10:	bfbc      	itt	lt
 8026b12:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8026b16:	4452      	addlt	r2, sl
 8026b18:	fb07 8101 	mla	r1, r7, r1, r8
 8026b1c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8026b20:	4438      	add	r0, r7
 8026b22:	b20b      	sxth	r3, r1
 8026b24:	9902      	ldr	r1, [sp, #8]
 8026b26:	b200      	sxth	r0, r0
 8026b28:	9301      	str	r3, [sp, #4]
 8026b2a:	8363      	strh	r3, [r4, #26]
 8026b2c:	186b      	adds	r3, r5, r1
 8026b2e:	0435      	lsls	r5, r6, #16
 8026b30:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026b34:	8320      	strh	r0, [r4, #24]
 8026b36:	eb03 0905 	add.w	r9, r3, r5
 8026b3a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8026b3e:	9300      	str	r3, [sp, #0]
 8026b40:	45c1      	cmp	r9, r8
 8026b42:	9505      	str	r5, [sp, #20]
 8026b44:	d014      	beq.n	8026b70 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8026b46:	9b01      	ldr	r3, [sp, #4]
 8026b48:	4303      	orrs	r3, r0
 8026b4a:	d00b      	beq.n	8026b64 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026b4c:	2900      	cmp	r1, #0
 8026b4e:	db09      	blt.n	8026b64 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026b52:	428b      	cmp	r3, r1
 8026b54:	dd06      	ble.n	8026b64 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026b56:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026b5a:	4299      	cmp	r1, r3
 8026b5c:	d374      	bcc.n	8026c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8026b5e:	2301      	movs	r3, #1
 8026b60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026b64:	9b00      	ldr	r3, [sp, #0]
 8026b66:	82e6      	strh	r6, [r4, #22]
 8026b68:	82a3      	strh	r3, [r4, #20]
 8026b6a:	2300      	movs	r3, #0
 8026b6c:	8323      	strh	r3, [r4, #24]
 8026b6e:	8363      	strh	r3, [r4, #26]
 8026b70:	9900      	ldr	r1, [sp, #0]
 8026b72:	eb0e 0307 	add.w	r3, lr, r7
 8026b76:	458c      	cmp	ip, r1
 8026b78:	d04e      	beq.n	8026c18 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8026b7a:	9903      	ldr	r1, [sp, #12]
 8026b7c:	eba2 020a 	sub.w	r2, r2, sl
 8026b80:	1ac9      	subs	r1, r1, r3
 8026b82:	9201      	str	r2, [sp, #4]
 8026b84:	440f      	add	r7, r1
 8026b86:	017f      	lsls	r7, r7, #5
 8026b88:	fb97 fefa 	sdiv	lr, r7, sl
 8026b8c:	fb0a 771e 	mls	r7, sl, lr, r7
 8026b90:	2f00      	cmp	r7, #0
 8026b92:	bfbc      	itt	lt
 8026b94:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8026b98:	4457      	addlt	r7, sl
 8026b9a:	f10e 0101 	add.w	r1, lr, #1
 8026b9e:	9106      	str	r1, [sp, #24]
 8026ba0:	9a01      	ldr	r2, [sp, #4]
 8026ba2:	8b20      	ldrh	r0, [r4, #24]
 8026ba4:	19d2      	adds	r2, r2, r7
 8026ba6:	8b61      	ldrh	r1, [r4, #26]
 8026ba8:	9d02      	ldr	r5, [sp, #8]
 8026baa:	9201      	str	r2, [sp, #4]
 8026bac:	bf5b      	ittet	pl
 8026bae:	eba2 020a 	subpl.w	r2, r2, sl
 8026bb2:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8026bb6:	46f0      	movmi	r8, lr
 8026bb8:	9201      	strpl	r2, [sp, #4]
 8026bba:	9a00      	ldr	r2, [sp, #0]
 8026bbc:	4440      	add	r0, r8
 8026bbe:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8026bc2:	4443      	add	r3, r8
 8026bc4:	442a      	add	r2, r5
 8026bc6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026bca:	9d05      	ldr	r5, [sp, #20]
 8026bcc:	b200      	sxth	r0, r0
 8026bce:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026bd2:	b209      	sxth	r1, r1
 8026bd4:	4415      	add	r5, r2
 8026bd6:	8320      	strh	r0, [r4, #24]
 8026bd8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026bdc:	8361      	strh	r1, [r4, #26]
 8026bde:	9200      	str	r2, [sp, #0]
 8026be0:	454d      	cmp	r5, r9
 8026be2:	d016      	beq.n	8026c12 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8026be4:	4301      	orrs	r1, r0
 8026be6:	d00d      	beq.n	8026c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8026be8:	f1b8 0f00 	cmp.w	r8, #0
 8026bec:	db0a      	blt.n	8026c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8026bee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026bf0:	4541      	cmp	r1, r8
 8026bf2:	dd07      	ble.n	8026c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8026bf4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026bf8:	4288      	cmp	r0, r1
 8026bfa:	d335      	bcc.n	8026c68 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8026bfc:	f04f 0101 	mov.w	r1, #1
 8026c00:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8026c04:	9900      	ldr	r1, [sp, #0]
 8026c06:	82e6      	strh	r6, [r4, #22]
 8026c08:	82a1      	strh	r1, [r4, #20]
 8026c0a:	f04f 0100 	mov.w	r1, #0
 8026c0e:	8321      	strh	r1, [r4, #24]
 8026c10:	8361      	strh	r1, [r4, #26]
 8026c12:	9a00      	ldr	r2, [sp, #0]
 8026c14:	4594      	cmp	ip, r2
 8026c16:	d1c3      	bne.n	8026ba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8026c18:	9a03      	ldr	r2, [sp, #12]
 8026c1a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8026c1e:	1ad3      	subs	r3, r2, r3
 8026c20:	8b22      	ldrh	r2, [r4, #24]
 8026c22:	441a      	add	r2, r3
 8026c24:	8322      	strh	r2, [r4, #24]
 8026c26:	9a04      	ldr	r2, [sp, #16]
 8026c28:	3220      	adds	r2, #32
 8026c2a:	eba2 020b 	sub.w	r2, r2, fp
 8026c2e:	fb03 c302 	mla	r3, r3, r2, ip
 8026c32:	8363      	strh	r3, [r4, #26]
 8026c34:	e758      	b.n	8026ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026c36:	f04f 33ff 	mov.w	r3, #4294967295
 8026c3a:	434a      	muls	r2, r1
 8026c3c:	f1ca 0a00 	rsb	sl, sl, #0
 8026c40:	f04f 0b00 	mov.w	fp, #0
 8026c44:	9302      	str	r3, [sp, #8]
 8026c46:	e75d      	b.n	8026b04 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8026c48:	f104 0314 	add.w	r3, r4, #20
 8026c4c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8026c50:	cb03      	ldmia	r3!, {r0, r1}
 8026c52:	f8c8 0000 	str.w	r0, [r8]
 8026c56:	f8c8 1004 	str.w	r1, [r8, #4]
 8026c5a:	6923      	ldr	r3, [r4, #16]
 8026c5c:	3308      	adds	r3, #8
 8026c5e:	6123      	str	r3, [r4, #16]
 8026c60:	68a3      	ldr	r3, [r4, #8]
 8026c62:	3301      	adds	r3, #1
 8026c64:	60a3      	str	r3, [r4, #8]
 8026c66:	e77d      	b.n	8026b64 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026c68:	f104 0814 	add.w	r8, r4, #20
 8026c6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026c70:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026c74:	f8c9 0000 	str.w	r0, [r9]
 8026c78:	f8c9 1004 	str.w	r1, [r9, #4]
 8026c7c:	6921      	ldr	r1, [r4, #16]
 8026c7e:	3108      	adds	r1, #8
 8026c80:	6121      	str	r1, [r4, #16]
 8026c82:	68a1      	ldr	r1, [r4, #8]
 8026c84:	3101      	adds	r1, #1
 8026c86:	60a1      	str	r1, [r4, #8]
 8026c88:	e7bc      	b.n	8026c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8026c8a:	1a83      	subs	r3, r0, r2
 8026c8c:	9301      	str	r3, [sp, #4]
 8026c8e:	f1ba 0f00 	cmp.w	sl, #0
 8026c92:	f040 8094 	bne.w	8026dbe <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8026c96:	9a01      	ldr	r2, [sp, #4]
 8026c98:	0049      	lsls	r1, r1, #1
 8026c9a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8026c9e:	2a00      	cmp	r2, #0
 8026ca0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8026ca4:	8b62      	ldrh	r2, [r4, #26]
 8026ca6:	bfaa      	itet	ge
 8026ca8:	f04f 0a20 	movge.w	sl, #32
 8026cac:	f04f 38ff 	movlt.w	r8, #4294967295
 8026cb0:	f04f 0801 	movge.w	r8, #1
 8026cb4:	8b21      	ldrh	r1, [r4, #24]
 8026cb6:	ebaa 0e0e 	sub.w	lr, sl, lr
 8026cba:	4471      	add	r1, lr
 8026cbc:	fb0e 2e03 	mla	lr, lr, r3, r2
 8026cc0:	eb08 0206 	add.w	r2, r8, r6
 8026cc4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8026cc8:	b209      	sxth	r1, r1
 8026cca:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8026cce:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8026cd2:	8321      	strh	r1, [r4, #24]
 8026cd4:	fa0f fe8e 	sxth.w	lr, lr
 8026cd8:	42b7      	cmp	r7, r6
 8026cda:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8026cde:	d013      	beq.n	8026d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8026ce0:	ea51 010e 	orrs.w	r1, r1, lr
 8026ce4:	d00b      	beq.n	8026cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026ce6:	2800      	cmp	r0, #0
 8026ce8:	db09      	blt.n	8026cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026cea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026cec:	4281      	cmp	r1, r0
 8026cee:	dd06      	ble.n	8026cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026cf0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026cf4:	4288      	cmp	r0, r1
 8026cf6:	d339      	bcc.n	8026d6c <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8026cf8:	2101      	movs	r1, #1
 8026cfa:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8026cfe:	2100      	movs	r1, #0
 8026d00:	82a5      	strh	r5, [r4, #20]
 8026d02:	82e2      	strh	r2, [r4, #22]
 8026d04:	8321      	strh	r1, [r4, #24]
 8026d06:	8361      	strh	r1, [r4, #26]
 8026d08:	f1aa 0610 	sub.w	r6, sl, #16
 8026d0c:	f04f 0e00 	mov.w	lr, #0
 8026d10:	f04f 0b01 	mov.w	fp, #1
 8026d14:	0076      	lsls	r6, r6, #1
 8026d16:	fb06 f703 	mul.w	r7, r6, r3
 8026d1a:	b236      	sxth	r6, r6
 8026d1c:	b23f      	sxth	r7, r7
 8026d1e:	ea46 0107 	orr.w	r1, r6, r7
 8026d22:	9100      	str	r1, [sp, #0]
 8026d24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026d26:	428a      	cmp	r2, r1
 8026d28:	d03e      	beq.n	8026da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8026d2a:	4442      	add	r2, r8
 8026d2c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026d30:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8026d34:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8026d38:	8326      	strh	r6, [r4, #24]
 8026d3a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8026d3e:	8367      	strh	r7, [r4, #26]
 8026d40:	4584      	cmp	ip, r0
 8026d42:	d0ef      	beq.n	8026d24 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8026d44:	9800      	ldr	r0, [sp, #0]
 8026d46:	b150      	cbz	r0, 8026d5e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8026d48:	2900      	cmp	r1, #0
 8026d4a:	db08      	blt.n	8026d5e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8026d4c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8026d4e:	4288      	cmp	r0, r1
 8026d50:	dd05      	ble.n	8026d5e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8026d52:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026d56:	4288      	cmp	r0, r1
 8026d58:	d315      	bcc.n	8026d86 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8026d5a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8026d5e:	82a5      	strh	r5, [r4, #20]
 8026d60:	82e2      	strh	r2, [r4, #22]
 8026d62:	f8a4 e018 	strh.w	lr, [r4, #24]
 8026d66:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8026d6a:	e7db      	b.n	8026d24 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8026d6c:	f104 0614 	add.w	r6, r4, #20
 8026d70:	6927      	ldr	r7, [r4, #16]
 8026d72:	ce03      	ldmia	r6!, {r0, r1}
 8026d74:	6038      	str	r0, [r7, #0]
 8026d76:	6079      	str	r1, [r7, #4]
 8026d78:	6921      	ldr	r1, [r4, #16]
 8026d7a:	3108      	adds	r1, #8
 8026d7c:	6121      	str	r1, [r4, #16]
 8026d7e:	68a1      	ldr	r1, [r4, #8]
 8026d80:	3101      	adds	r1, #1
 8026d82:	60a1      	str	r1, [r4, #8]
 8026d84:	e7bb      	b.n	8026cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026d86:	f104 0c14 	add.w	ip, r4, #20
 8026d8a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026d8e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8026d92:	f8c9 0000 	str.w	r0, [r9]
 8026d96:	f8c9 1004 	str.w	r1, [r9, #4]
 8026d9a:	6921      	ldr	r1, [r4, #16]
 8026d9c:	3108      	adds	r1, #8
 8026d9e:	6121      	str	r1, [r4, #16]
 8026da0:	68a1      	ldr	r1, [r4, #8]
 8026da2:	3101      	adds	r1, #1
 8026da4:	60a1      	str	r1, [r4, #8]
 8026da6:	e7da      	b.n	8026d5e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8026da8:	9a03      	ldr	r2, [sp, #12]
 8026daa:	8b61      	ldrh	r1, [r4, #26]
 8026dac:	f1a2 0c20 	sub.w	ip, r2, #32
 8026db0:	8b22      	ldrh	r2, [r4, #24]
 8026db2:	44d4      	add	ip, sl
 8026db4:	4462      	add	r2, ip
 8026db6:	fb0c 1303 	mla	r3, ip, r3, r1
 8026dba:	8322      	strh	r2, [r4, #24]
 8026dbc:	e739      	b.n	8026c32 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8026dbe:	9b01      	ldr	r3, [sp, #4]
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	db3f      	blt.n	8026e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8026dc4:	2201      	movs	r2, #1
 8026dc6:	f1ce 0320 	rsb	r3, lr, #32
 8026dca:	920b      	str	r2, [sp, #44]	; 0x2c
 8026dcc:	2220      	movs	r2, #32
 8026dce:	fb0a f303 	mul.w	r3, sl, r3
 8026dd2:	9202      	str	r2, [sp, #8]
 8026dd4:	9a01      	ldr	r2, [sp, #4]
 8026dd6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026dda:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026dde:	fb93 f7f2 	sdiv	r7, r3, r2
 8026de2:	fb02 3317 	mls	r3, r2, r7, r3
 8026de6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026dea:	2b00      	cmp	r3, #0
 8026dec:	9308      	str	r3, [sp, #32]
 8026dee:	bfbc      	itt	lt
 8026df0:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8026df4:	189b      	addlt	r3, r3, r2
 8026df6:	eb07 0b01 	add.w	fp, r7, r1
 8026dfa:	bfb8      	it	lt
 8026dfc:	9308      	strlt	r3, [sp, #32]
 8026dfe:	ea4f 136b 	mov.w	r3, fp, asr #5
 8026e02:	9304      	str	r3, [sp, #16]
 8026e04:	9b02      	ldr	r3, [sp, #8]
 8026e06:	4573      	cmp	r3, lr
 8026e08:	d133      	bne.n	8026e72 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8026e0a:	9b04      	ldr	r3, [sp, #16]
 8026e0c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8026e10:	454b      	cmp	r3, r9
 8026e12:	d045      	beq.n	8026ea0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8026e14:	8b62      	ldrh	r2, [r4, #26]
 8026e16:	8b23      	ldrh	r3, [r4, #24]
 8026e18:	4313      	orrs	r3, r2
 8026e1a:	d00c      	beq.n	8026e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026e1c:	f1b8 0f00 	cmp.w	r8, #0
 8026e20:	db09      	blt.n	8026e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026e24:	4543      	cmp	r3, r8
 8026e26:	dd06      	ble.n	8026e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026e28:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8026e2c:	429a      	cmp	r2, r3
 8026e2e:	d313      	bcc.n	8026e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8026e30:	2301      	movs	r3, #1
 8026e32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026e36:	9b04      	ldr	r3, [sp, #16]
 8026e38:	82e6      	strh	r6, [r4, #22]
 8026e3a:	82a3      	strh	r3, [r4, #20]
 8026e3c:	2300      	movs	r3, #0
 8026e3e:	8323      	strh	r3, [r4, #24]
 8026e40:	8363      	strh	r3, [r4, #26]
 8026e42:	e02d      	b.n	8026ea0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8026e44:	9a01      	ldr	r2, [sp, #4]
 8026e46:	fb0a f30e 	mul.w	r3, sl, lr
 8026e4a:	4252      	negs	r2, r2
 8026e4c:	9201      	str	r2, [sp, #4]
 8026e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8026e52:	920b      	str	r2, [sp, #44]	; 0x2c
 8026e54:	2200      	movs	r2, #0
 8026e56:	e7bc      	b.n	8026dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8026e58:	f104 0314 	add.w	r3, r4, #20
 8026e5c:	6922      	ldr	r2, [r4, #16]
 8026e5e:	cb03      	ldmia	r3!, {r0, r1}
 8026e60:	6010      	str	r0, [r2, #0]
 8026e62:	6051      	str	r1, [r2, #4]
 8026e64:	6923      	ldr	r3, [r4, #16]
 8026e66:	3308      	adds	r3, #8
 8026e68:	6123      	str	r3, [r4, #16]
 8026e6a:	68a3      	ldr	r3, [r4, #8]
 8026e6c:	3301      	adds	r3, #1
 8026e6e:	60a3      	str	r3, [r4, #8]
 8026e70:	e7e1      	b.n	8026e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026e72:	f00b 031f 	and.w	r3, fp, #31
 8026e76:	f001 011f 	and.w	r1, r1, #31
 8026e7a:	8b20      	ldrh	r0, [r4, #24]
 8026e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8026e7e:	9b02      	ldr	r3, [sp, #8]
 8026e80:	eba3 020e 	sub.w	r2, r3, lr
 8026e84:	8b63      	ldrh	r3, [r4, #26]
 8026e86:	9300      	str	r3, [sp, #0]
 8026e88:	9b04      	ldr	r3, [sp, #16]
 8026e8a:	42ab      	cmp	r3, r5
 8026e8c:	f040 80ef 	bne.w	802706e <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8026e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e92:	4410      	add	r0, r2
 8026e94:	4419      	add	r1, r3
 8026e96:	9b00      	ldr	r3, [sp, #0]
 8026e98:	8320      	strh	r0, [r4, #24]
 8026e9a:	fb02 3101 	mla	r1, r2, r1, r3
 8026e9e:	8361      	strh	r1, [r4, #26]
 8026ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026ea2:	9904      	ldr	r1, [sp, #16]
 8026ea4:	4433      	add	r3, r6
 8026ea6:	9300      	str	r3, [sp, #0]
 8026ea8:	9a00      	ldr	r2, [sp, #0]
 8026eaa:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026eae:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8026eb2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026eb6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026eba:	4288      	cmp	r0, r1
 8026ebc:	d018      	beq.n	8026ef0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8026ebe:	8b60      	ldrh	r0, [r4, #26]
 8026ec0:	8b21      	ldrh	r1, [r4, #24]
 8026ec2:	ea50 0201 	orrs.w	r2, r0, r1
 8026ec6:	d00c      	beq.n	8026ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026ec8:	2b00      	cmp	r3, #0
 8026eca:	db0a      	blt.n	8026ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026ecc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026ece:	4299      	cmp	r1, r3
 8026ed0:	dd07      	ble.n	8026ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026ed2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026ed6:	4299      	cmp	r1, r3
 8026ed8:	f0c0 818b 	bcc.w	80271f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8026edc:	2301      	movs	r3, #1
 8026ede:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026ee2:	9b04      	ldr	r3, [sp, #16]
 8026ee4:	82a3      	strh	r3, [r4, #20]
 8026ee6:	9b00      	ldr	r3, [sp, #0]
 8026ee8:	82e3      	strh	r3, [r4, #22]
 8026eea:	2300      	movs	r3, #0
 8026eec:	8323      	strh	r3, [r4, #24]
 8026eee:	8363      	strh	r3, [r4, #26]
 8026ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026ef2:	9a00      	ldr	r2, [sp, #0]
 8026ef4:	4293      	cmp	r3, r2
 8026ef6:	f000 808d 	beq.w	8027014 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8026efa:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8026efe:	9901      	ldr	r1, [sp, #4]
 8026f00:	9801      	ldr	r0, [sp, #4]
 8026f02:	fb93 f1f1 	sdiv	r1, r3, r1
 8026f06:	fb00 3311 	mls	r3, r0, r1, r3
 8026f0a:	9106      	str	r1, [sp, #24]
 8026f0c:	2b00      	cmp	r3, #0
 8026f0e:	9307      	str	r3, [sp, #28]
 8026f10:	da04      	bge.n	8026f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8026f12:	1e4b      	subs	r3, r1, #1
 8026f14:	9306      	str	r3, [sp, #24]
 8026f16:	9b07      	ldr	r3, [sp, #28]
 8026f18:	4403      	add	r3, r0
 8026f1a:	9307      	str	r3, [sp, #28]
 8026f1c:	9b08      	ldr	r3, [sp, #32]
 8026f1e:	f04f 0c00 	mov.w	ip, #0
 8026f22:	9901      	ldr	r1, [sp, #4]
 8026f24:	1a5b      	subs	r3, r3, r1
 8026f26:	4659      	mov	r1, fp
 8026f28:	9308      	str	r3, [sp, #32]
 8026f2a:	9b02      	ldr	r3, [sp, #8]
 8026f2c:	f1c3 0320 	rsb	r3, r3, #32
 8026f30:	930a      	str	r3, [sp, #40]	; 0x28
 8026f32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026f34:	9b02      	ldr	r3, [sp, #8]
 8026f36:	1a1b      	subs	r3, r3, r0
 8026f38:	9309      	str	r3, [sp, #36]	; 0x24
 8026f3a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8026f3e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8026f42:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8026f46:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8026f4a:	181b      	adds	r3, r3, r0
 8026f4c:	bf58      	it	pl
 8026f4e:	9801      	ldrpl	r0, [sp, #4]
 8026f50:	9308      	str	r3, [sp, #32]
 8026f52:	bf54      	ite	pl
 8026f54:	1a1b      	subpl	r3, r3, r0
 8026f56:	9d06      	ldrmi	r5, [sp, #24]
 8026f58:	9802      	ldr	r0, [sp, #8]
 8026f5a:	bf5e      	ittt	pl
 8026f5c:	9308      	strpl	r3, [sp, #32]
 8026f5e:	9b06      	ldrpl	r3, [sp, #24]
 8026f60:	1c5d      	addpl	r5, r3, #1
 8026f62:	44ab      	add	fp, r5
 8026f64:	ea4f 136b 	mov.w	r3, fp, asr #5
 8026f68:	9304      	str	r3, [sp, #16]
 8026f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f6c:	4283      	cmp	r3, r0
 8026f6e:	f040 815a 	bne.w	8027226 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8026f72:	9b04      	ldr	r3, [sp, #16]
 8026f74:	9a00      	ldr	r2, [sp, #0]
 8026f76:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8026f7a:	4543      	cmp	r3, r8
 8026f7c:	d01a      	beq.n	8026fb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8026f7e:	8b61      	ldrh	r1, [r4, #26]
 8026f80:	8b23      	ldrh	r3, [r4, #24]
 8026f82:	430b      	orrs	r3, r1
 8026f84:	d00e      	beq.n	8026fa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026f86:	f1be 0f00 	cmp.w	lr, #0
 8026f8a:	db0b      	blt.n	8026fa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026f8e:	4573      	cmp	r3, lr
 8026f90:	dd08      	ble.n	8026fa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026f92:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026f96:	4299      	cmp	r1, r3
 8026f98:	f0c0 8138 	bcc.w	802720c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8026f9c:	f04f 0301 	mov.w	r3, #1
 8026fa0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026fa4:	9b04      	ldr	r3, [sp, #16]
 8026fa6:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026faa:	82a3      	strh	r3, [r4, #20]
 8026fac:	9b00      	ldr	r3, [sp, #0]
 8026fae:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026fb2:	82e3      	strh	r3, [r4, #22]
 8026fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026fb6:	9a00      	ldr	r2, [sp, #0]
 8026fb8:	441a      	add	r2, r3
 8026fba:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026fbe:	9200      	str	r2, [sp, #0]
 8026fc0:	9900      	ldr	r1, [sp, #0]
 8026fc2:	9a04      	ldr	r2, [sp, #16]
 8026fc4:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8026fc8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026fcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026fd0:	4288      	cmp	r0, r1
 8026fd2:	d01a      	beq.n	802700a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8026fd4:	8b60      	ldrh	r0, [r4, #26]
 8026fd6:	8b21      	ldrh	r1, [r4, #24]
 8026fd8:	ea50 0201 	orrs.w	r2, r0, r1
 8026fdc:	d00d      	beq.n	8026ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026fde:	2b00      	cmp	r3, #0
 8026fe0:	db0b      	blt.n	8026ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026fe2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026fe4:	4299      	cmp	r1, r3
 8026fe6:	dd08      	ble.n	8026ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026fe8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026fec:	4299      	cmp	r1, r3
 8026fee:	f0c0 81f9 	bcc.w	80273e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8026ff2:	f04f 0301 	mov.w	r3, #1
 8026ff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026ffa:	9b04      	ldr	r3, [sp, #16]
 8026ffc:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027000:	82a3      	strh	r3, [r4, #20]
 8027002:	9b00      	ldr	r3, [sp, #0]
 8027004:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027008:	82e3      	strh	r3, [r4, #22]
 802700a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802700c:	4659      	mov	r1, fp
 802700e:	9a00      	ldr	r2, [sp, #0]
 8027010:	4293      	cmp	r3, r2
 8027012:	d192      	bne.n	8026f3a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8027014:	9b02      	ldr	r3, [sp, #8]
 8027016:	f1c3 0c20 	rsb	ip, r3, #32
 802701a:	9b05      	ldr	r3, [sp, #20]
 802701c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8027020:	9b03      	ldr	r3, [sp, #12]
 8027022:	459c      	cmp	ip, r3
 8027024:	f040 81f8 	bne.w	8027418 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8027028:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802702c:	9a00      	ldr	r2, [sp, #0]
 802702e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027032:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8027036:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802703a:	4288      	cmp	r0, r1
 802703c:	f43f ad54 	beq.w	8026ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027040:	8b60      	ldrh	r0, [r4, #26]
 8027042:	8b21      	ldrh	r1, [r4, #24]
 8027044:	ea50 0201 	orrs.w	r2, r0, r1
 8027048:	d00c      	beq.n	8027064 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802704a:	2b00      	cmp	r3, #0
 802704c:	db0a      	blt.n	8027064 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802704e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027050:	4299      	cmp	r1, r3
 8027052:	dd07      	ble.n	8027064 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027054:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027058:	4299      	cmp	r1, r3
 802705a:	f0c0 81d0 	bcc.w	80273fe <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 802705e:	2301      	movs	r3, #1
 8027060:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027064:	9b00      	ldr	r3, [sp, #0]
 8027066:	f8a4 e014 	strh.w	lr, [r4, #20]
 802706a:	82e3      	strh	r3, [r4, #22]
 802706c:	e517      	b.n	8026a9e <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 802706e:	2f00      	cmp	r7, #0
 8027070:	f2c0 8097 	blt.w	80271a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8027074:	2301      	movs	r3, #1
 8027076:	f1c1 0c20 	rsb	ip, r1, #32
 802707a:	9307      	str	r3, [sp, #28]
 802707c:	2320      	movs	r3, #32
 802707e:	fb02 f20c 	mul.w	r2, r2, ip
 8027082:	9306      	str	r3, [sp, #24]
 8027084:	9b06      	ldr	r3, [sp, #24]
 8027086:	fb92 fcf7 	sdiv	ip, r2, r7
 802708a:	fb07 221c 	mls	r2, r7, ip, r2
 802708e:	4419      	add	r1, r3
 8027090:	9b00      	ldr	r3, [sp, #0]
 8027092:	2a00      	cmp	r2, #0
 8027094:	bfbc      	itt	lt
 8027096:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802709a:	19d2      	addlt	r2, r2, r7
 802709c:	fb0c 3101 	mla	r1, ip, r1, r3
 80270a0:	9b07      	ldr	r3, [sp, #28]
 80270a2:	4460      	add	r0, ip
 80270a4:	441d      	add	r5, r3
 80270a6:	0433      	lsls	r3, r6, #16
 80270a8:	b200      	sxth	r0, r0
 80270aa:	930a      	str	r3, [sp, #40]	; 0x28
 80270ac:	18eb      	adds	r3, r5, r3
 80270ae:	b209      	sxth	r1, r1
 80270b0:	8320      	strh	r0, [r4, #24]
 80270b2:	454b      	cmp	r3, r9
 80270b4:	8361      	strh	r1, [r4, #26]
 80270b6:	d014      	beq.n	80270e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 80270b8:	ea50 0301 	orrs.w	r3, r0, r1
 80270bc:	d00c      	beq.n	80270d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80270be:	f1b8 0f00 	cmp.w	r8, #0
 80270c2:	db09      	blt.n	80270d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80270c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80270c6:	4543      	cmp	r3, r8
 80270c8:	dd06      	ble.n	80270d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80270ca:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80270ce:	4299      	cmp	r1, r3
 80270d0:	d36e      	bcc.n	80271b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80270d2:	2301      	movs	r3, #1
 80270d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80270d8:	2300      	movs	r3, #0
 80270da:	82a5      	strh	r5, [r4, #20]
 80270dc:	82e6      	strh	r6, [r4, #22]
 80270de:	8323      	strh	r3, [r4, #24]
 80270e0:	8363      	strh	r3, [r4, #26]
 80270e2:	9904      	ldr	r1, [sp, #16]
 80270e4:	eb0e 030c 	add.w	r3, lr, ip
 80270e8:	42a9      	cmp	r1, r5
 80270ea:	d04d      	beq.n	8027188 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 80270ec:	9902      	ldr	r1, [sp, #8]
 80270ee:	1bd2      	subs	r2, r2, r7
 80270f0:	1ac9      	subs	r1, r1, r3
 80270f2:	9200      	str	r2, [sp, #0]
 80270f4:	448c      	add	ip, r1
 80270f6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80270fa:	fb9c fef7 	sdiv	lr, ip, r7
 80270fe:	fb07 cc1e 	mls	ip, r7, lr, ip
 8027102:	f1bc 0f00 	cmp.w	ip, #0
 8027106:	bfbc      	itt	lt
 8027108:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802710c:	44bc      	addlt	ip, r7
 802710e:	f10e 0101 	add.w	r1, lr, #1
 8027112:	910d      	str	r1, [sp, #52]	; 0x34
 8027114:	9a00      	ldr	r2, [sp, #0]
 8027116:	8b20      	ldrh	r0, [r4, #24]
 8027118:	eb12 020c 	adds.w	r2, r2, ip
 802711c:	8b61      	ldrh	r1, [r4, #26]
 802711e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027122:	9200      	str	r2, [sp, #0]
 8027124:	bf5b      	ittet	pl
 8027126:	1bd2      	subpl	r2, r2, r7
 8027128:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 802712c:	46f0      	movmi	r8, lr
 802712e:	9200      	strpl	r2, [sp, #0]
 8027130:	9a07      	ldr	r2, [sp, #28]
 8027132:	4440      	add	r0, r8
 8027134:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8027138:	4443      	add	r3, r8
 802713a:	4415      	add	r5, r2
 802713c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027142:	b200      	sxth	r0, r0
 8027144:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027148:	442a      	add	r2, r5
 802714a:	b209      	sxth	r1, r1
 802714c:	8320      	strh	r0, [r4, #24]
 802714e:	454a      	cmp	r2, r9
 8027150:	8361      	strh	r1, [r4, #26]
 8027152:	d016      	beq.n	8027182 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8027154:	ea50 0201 	orrs.w	r2, r0, r1
 8027158:	d00d      	beq.n	8027176 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802715a:	f1b8 0f00 	cmp.w	r8, #0
 802715e:	db0a      	blt.n	8027176 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027160:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027162:	4541      	cmp	r1, r8
 8027164:	dd07      	ble.n	8027176 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027166:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802716a:	4288      	cmp	r0, r1
 802716c:	d330      	bcc.n	80271d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 802716e:	f04f 0201 	mov.w	r2, #1
 8027172:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027176:	f04f 0200 	mov.w	r2, #0
 802717a:	82a5      	strh	r5, [r4, #20]
 802717c:	82e6      	strh	r6, [r4, #22]
 802717e:	8322      	strh	r2, [r4, #24]
 8027180:	8362      	strh	r2, [r4, #26]
 8027182:	9904      	ldr	r1, [sp, #16]
 8027184:	42a9      	cmp	r1, r5
 8027186:	d1c5      	bne.n	8027114 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8027188:	9a02      	ldr	r2, [sp, #8]
 802718a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802718c:	1ad3      	subs	r3, r2, r3
 802718e:	8b22      	ldrh	r2, [r4, #24]
 8027190:	3120      	adds	r1, #32
 8027192:	441a      	add	r2, r3
 8027194:	8322      	strh	r2, [r4, #24]
 8027196:	9a06      	ldr	r2, [sp, #24]
 8027198:	1a89      	subs	r1, r1, r2
 802719a:	8b62      	ldrh	r2, [r4, #26]
 802719c:	fb03 2301 	mla	r3, r3, r1, r2
 80271a0:	e64e      	b.n	8026e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 80271a2:	f04f 33ff 	mov.w	r3, #4294967295
 80271a6:	434a      	muls	r2, r1
 80271a8:	427f      	negs	r7, r7
 80271aa:	9307      	str	r3, [sp, #28]
 80271ac:	2300      	movs	r3, #0
 80271ae:	e768      	b.n	8027082 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 80271b0:	f104 0314 	add.w	r3, r4, #20
 80271b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80271b8:	cb03      	ldmia	r3!, {r0, r1}
 80271ba:	f8c8 0000 	str.w	r0, [r8]
 80271be:	f8c8 1004 	str.w	r1, [r8, #4]
 80271c2:	6923      	ldr	r3, [r4, #16]
 80271c4:	3308      	adds	r3, #8
 80271c6:	6123      	str	r3, [r4, #16]
 80271c8:	68a3      	ldr	r3, [r4, #8]
 80271ca:	3301      	adds	r3, #1
 80271cc:	60a3      	str	r3, [r4, #8]
 80271ce:	e783      	b.n	80270d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80271d0:	f104 0814 	add.w	r8, r4, #20
 80271d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80271d8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80271dc:	f8c9 0000 	str.w	r0, [r9]
 80271e0:	f8c9 1004 	str.w	r1, [r9, #4]
 80271e4:	6921      	ldr	r1, [r4, #16]
 80271e6:	3108      	adds	r1, #8
 80271e8:	6121      	str	r1, [r4, #16]
 80271ea:	68a1      	ldr	r1, [r4, #8]
 80271ec:	3101      	adds	r1, #1
 80271ee:	60a1      	str	r1, [r4, #8]
 80271f0:	e7c1      	b.n	8027176 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80271f2:	f104 0314 	add.w	r3, r4, #20
 80271f6:	6925      	ldr	r5, [r4, #16]
 80271f8:	cb03      	ldmia	r3!, {r0, r1}
 80271fa:	6028      	str	r0, [r5, #0]
 80271fc:	6069      	str	r1, [r5, #4]
 80271fe:	6923      	ldr	r3, [r4, #16]
 8027200:	3308      	adds	r3, #8
 8027202:	6123      	str	r3, [r4, #16]
 8027204:	68a3      	ldr	r3, [r4, #8]
 8027206:	3301      	adds	r3, #1
 8027208:	60a3      	str	r3, [r4, #8]
 802720a:	e66a      	b.n	8026ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802720c:	f104 0314 	add.w	r3, r4, #20
 8027210:	6925      	ldr	r5, [r4, #16]
 8027212:	cb03      	ldmia	r3!, {r0, r1}
 8027214:	6028      	str	r0, [r5, #0]
 8027216:	6069      	str	r1, [r5, #4]
 8027218:	6923      	ldr	r3, [r4, #16]
 802721a:	3308      	adds	r3, #8
 802721c:	6123      	str	r3, [r4, #16]
 802721e:	68a3      	ldr	r3, [r4, #8]
 8027220:	3301      	adds	r3, #1
 8027222:	60a3      	str	r3, [r4, #8]
 8027224:	e6be      	b.n	8026fa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027226:	f00b 031f 	and.w	r3, fp, #31
 802722a:	114f      	asrs	r7, r1, #5
 802722c:	8b20      	ldrh	r0, [r4, #24]
 802722e:	f001 011f 	and.w	r1, r1, #31
 8027232:	930f      	str	r3, [sp, #60]	; 0x3c
 8027234:	9b04      	ldr	r3, [sp, #16]
 8027236:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802723a:	429f      	cmp	r7, r3
 802723c:	d10a      	bne.n	8027254 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802723e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027240:	4418      	add	r0, r3
 8027242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027244:	4419      	add	r1, r3
 8027246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027248:	8320      	strh	r0, [r4, #24]
 802724a:	fb03 9901 	mla	r9, r3, r1, r9
 802724e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8027252:	e6af      	b.n	8026fb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027254:	2d00      	cmp	r5, #0
 8027256:	f2c0 809b 	blt.w	8027390 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802725a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802725c:	f1c1 0320 	rsb	r3, r1, #32
 8027260:	4373      	muls	r3, r6
 8027262:	2601      	movs	r6, #1
 8027264:	960e      	str	r6, [sp, #56]	; 0x38
 8027266:	2620      	movs	r6, #32
 8027268:	960d      	str	r6, [sp, #52]	; 0x34
 802726a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802726c:	fb93 f6f5 	sdiv	r6, r3, r5
 8027270:	4411      	add	r1, r2
 8027272:	fb05 3316 	mls	r3, r5, r6, r3
 8027276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027278:	2b00      	cmp	r3, #0
 802727a:	4417      	add	r7, r2
 802727c:	9a00      	ldr	r2, [sp, #0]
 802727e:	bfbc      	itt	lt
 8027280:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027284:	195b      	addlt	r3, r3, r5
 8027286:	0412      	lsls	r2, r2, #16
 8027288:	fb06 9101 	mla	r1, r6, r1, r9
 802728c:	4430      	add	r0, r6
 802728e:	eb07 0902 	add.w	r9, r7, r2
 8027292:	9210      	str	r2, [sp, #64]	; 0x40
 8027294:	b200      	sxth	r0, r0
 8027296:	b209      	sxth	r1, r1
 8027298:	45c1      	cmp	r9, r8
 802729a:	8320      	strh	r0, [r4, #24]
 802729c:	8361      	strh	r1, [r4, #26]
 802729e:	d017      	beq.n	80272d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80272a0:	ea50 0201 	orrs.w	r2, r0, r1
 80272a4:	d00d      	beq.n	80272c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80272a6:	f1be 0f00 	cmp.w	lr, #0
 80272aa:	db0a      	blt.n	80272c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80272ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80272ae:	4571      	cmp	r1, lr
 80272b0:	dd07      	ble.n	80272c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80272b2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80272b6:	4288      	cmp	r0, r1
 80272b8:	d372      	bcc.n	80273a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 80272ba:	f04f 0201 	mov.w	r2, #1
 80272be:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80272c2:	9a00      	ldr	r2, [sp, #0]
 80272c4:	82a7      	strh	r7, [r4, #20]
 80272c6:	82e2      	strh	r2, [r4, #22]
 80272c8:	f8a4 c018 	strh.w	ip, [r4, #24]
 80272cc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80272d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80272d2:	eb02 0e06 	add.w	lr, r2, r6
 80272d6:	9a04      	ldr	r2, [sp, #16]
 80272d8:	42ba      	cmp	r2, r7
 80272da:	d049      	beq.n	8027370 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 80272dc:	9a02      	ldr	r2, [sp, #8]
 80272de:	1b5b      	subs	r3, r3, r5
 80272e0:	eba2 010e 	sub.w	r1, r2, lr
 80272e4:	440e      	add	r6, r1
 80272e6:	0176      	lsls	r6, r6, #5
 80272e8:	fb96 f8f5 	sdiv	r8, r6, r5
 80272ec:	fb05 6618 	mls	r6, r5, r8, r6
 80272f0:	2e00      	cmp	r6, #0
 80272f2:	bfbc      	itt	lt
 80272f4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80272f8:	1976      	addlt	r6, r6, r5
 80272fa:	f108 0201 	add.w	r2, r8, #1
 80272fe:	9211      	str	r2, [sp, #68]	; 0x44
 8027300:	199b      	adds	r3, r3, r6
 8027302:	8b20      	ldrh	r0, [r4, #24]
 8027304:	8b61      	ldrh	r1, [r4, #26]
 8027306:	bf54      	ite	pl
 8027308:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 802730c:	46c1      	movmi	r9, r8
 802730e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027310:	bf58      	it	pl
 8027312:	1b5b      	subpl	r3, r3, r5
 8027314:	4448      	add	r0, r9
 8027316:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802731a:	4417      	add	r7, r2
 802731c:	44ce      	add	lr, r9
 802731e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027320:	b200      	sxth	r0, r0
 8027322:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027326:	b209      	sxth	r1, r1
 8027328:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802732c:	443a      	add	r2, r7
 802732e:	8320      	strh	r0, [r4, #24]
 8027330:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027334:	8361      	strh	r1, [r4, #26]
 8027336:	4552      	cmp	r2, sl
 8027338:	d017      	beq.n	802736a <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802733a:	ea50 0201 	orrs.w	r2, r0, r1
 802733e:	d00d      	beq.n	802735c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027340:	f1b9 0f00 	cmp.w	r9, #0
 8027344:	db0a      	blt.n	802735c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027346:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027348:	4549      	cmp	r1, r9
 802734a:	dd07      	ble.n	802735c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802734c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027350:	4288      	cmp	r0, r1
 8027352:	d336      	bcc.n	80273c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8027354:	f04f 0201 	mov.w	r2, #1
 8027358:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802735c:	9a00      	ldr	r2, [sp, #0]
 802735e:	82a7      	strh	r7, [r4, #20]
 8027360:	82e2      	strh	r2, [r4, #22]
 8027362:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027366:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802736a:	9a04      	ldr	r2, [sp, #16]
 802736c:	42ba      	cmp	r2, r7
 802736e:	d1c7      	bne.n	8027300 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8027370:	9b02      	ldr	r3, [sp, #8]
 8027372:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027374:	eba3 0e0e 	sub.w	lr, r3, lr
 8027378:	8b23      	ldrh	r3, [r4, #24]
 802737a:	3120      	adds	r1, #32
 802737c:	4473      	add	r3, lr
 802737e:	8323      	strh	r3, [r4, #24]
 8027380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027382:	1ac9      	subs	r1, r1, r3
 8027384:	8b63      	ldrh	r3, [r4, #26]
 8027386:	fb0e 3e01 	mla	lr, lr, r1, r3
 802738a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802738e:	e611      	b.n	8026fb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027390:	f04f 36ff 	mov.w	r6, #4294967295
 8027394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027396:	426d      	negs	r5, r5
 8027398:	960e      	str	r6, [sp, #56]	; 0x38
 802739a:	2600      	movs	r6, #0
 802739c:	434b      	muls	r3, r1
 802739e:	e763      	b.n	8027268 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80273a0:	f104 0e14 	add.w	lr, r4, #20
 80273a4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80273a8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80273ac:	f8c8 0000 	str.w	r0, [r8]
 80273b0:	f8c8 1004 	str.w	r1, [r8, #4]
 80273b4:	6921      	ldr	r1, [r4, #16]
 80273b6:	3108      	adds	r1, #8
 80273b8:	6121      	str	r1, [r4, #16]
 80273ba:	68a1      	ldr	r1, [r4, #8]
 80273bc:	3101      	adds	r1, #1
 80273be:	60a1      	str	r1, [r4, #8]
 80273c0:	e77f      	b.n	80272c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80273c2:	f104 0914 	add.w	r9, r4, #20
 80273c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80273ca:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80273ce:	f8ca 0000 	str.w	r0, [sl]
 80273d2:	f8ca 1004 	str.w	r1, [sl, #4]
 80273d6:	6921      	ldr	r1, [r4, #16]
 80273d8:	3108      	adds	r1, #8
 80273da:	6121      	str	r1, [r4, #16]
 80273dc:	68a1      	ldr	r1, [r4, #8]
 80273de:	3101      	adds	r1, #1
 80273e0:	60a1      	str	r1, [r4, #8]
 80273e2:	e7bb      	b.n	802735c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80273e4:	f104 0314 	add.w	r3, r4, #20
 80273e8:	6925      	ldr	r5, [r4, #16]
 80273ea:	cb03      	ldmia	r3!, {r0, r1}
 80273ec:	6028      	str	r0, [r5, #0]
 80273ee:	6069      	str	r1, [r5, #4]
 80273f0:	6923      	ldr	r3, [r4, #16]
 80273f2:	3308      	adds	r3, #8
 80273f4:	6123      	str	r3, [r4, #16]
 80273f6:	68a3      	ldr	r3, [r4, #8]
 80273f8:	3301      	adds	r3, #1
 80273fa:	60a3      	str	r3, [r4, #8]
 80273fc:	e5fd      	b.n	8026ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80273fe:	f104 0314 	add.w	r3, r4, #20
 8027402:	6925      	ldr	r5, [r4, #16]
 8027404:	cb03      	ldmia	r3!, {r0, r1}
 8027406:	6028      	str	r0, [r5, #0]
 8027408:	6069      	str	r1, [r5, #4]
 802740a:	6923      	ldr	r3, [r4, #16]
 802740c:	3308      	adds	r3, #8
 802740e:	6123      	str	r3, [r4, #16]
 8027410:	68a3      	ldr	r3, [r4, #8]
 8027412:	3301      	adds	r3, #1
 8027414:	60a3      	str	r3, [r4, #8]
 8027416:	e625      	b.n	8027064 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027418:	9b05      	ldr	r3, [sp, #20]
 802741a:	ea4f 176b 	mov.w	r7, fp, asr #5
 802741e:	f00b 081f 	and.w	r8, fp, #31
 8027422:	8b20      	ldrh	r0, [r4, #24]
 8027424:	f003 031f 	and.w	r3, r3, #31
 8027428:	4577      	cmp	r7, lr
 802742a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802742e:	9302      	str	r3, [sp, #8]
 8027430:	9b03      	ldr	r3, [sp, #12]
 8027432:	eba3 050c 	sub.w	r5, r3, ip
 8027436:	d108      	bne.n	802744a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8027438:	9b02      	ldr	r3, [sp, #8]
 802743a:	4428      	add	r0, r5
 802743c:	4498      	add	r8, r3
 802743e:	8320      	strh	r0, [r4, #24]
 8027440:	fb05 9508 	mla	r5, r5, r8, r9
 8027444:	8365      	strh	r5, [r4, #26]
 8027446:	f7ff bb4f 	b.w	8026ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802744a:	9b05      	ldr	r3, [sp, #20]
 802744c:	ebb3 030b 	subs.w	r3, r3, fp
 8027450:	f100 809c 	bmi.w	802758c <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8027454:	f1c8 0120 	rsb	r1, r8, #32
 8027458:	2201      	movs	r2, #1
 802745a:	f04f 0b20 	mov.w	fp, #32
 802745e:	434d      	muls	r5, r1
 8027460:	9201      	str	r2, [sp, #4]
 8027462:	9a01      	ldr	r2, [sp, #4]
 8027464:	44d8      	add	r8, fp
 8027466:	fb95 f6f3 	sdiv	r6, r5, r3
 802746a:	fb03 5516 	mls	r5, r3, r6, r5
 802746e:	4417      	add	r7, r2
 8027470:	9a00      	ldr	r2, [sp, #0]
 8027472:	2d00      	cmp	r5, #0
 8027474:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8027478:	bfbc      	itt	lt
 802747a:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802747e:	18ed      	addlt	r5, r5, r3
 8027480:	eb07 0a02 	add.w	sl, r7, r2
 8027484:	9204      	str	r2, [sp, #16]
 8027486:	fb06 9808 	mla	r8, r6, r8, r9
 802748a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802748e:	4430      	add	r0, r6
 8027490:	fa0f f188 	sxth.w	r1, r8
 8027494:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027498:	b200      	sxth	r0, r0
 802749a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802749e:	8361      	strh	r1, [r4, #26]
 80274a0:	8320      	strh	r0, [r4, #24]
 80274a2:	45ca      	cmp	sl, r9
 80274a4:	d015      	beq.n	80274d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80274a6:	ea50 0201 	orrs.w	r2, r0, r1
 80274aa:	d00c      	beq.n	80274c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80274ac:	f1b8 0f00 	cmp.w	r8, #0
 80274b0:	db09      	blt.n	80274c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80274b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80274b4:	4541      	cmp	r1, r8
 80274b6:	dd06      	ble.n	80274c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80274b8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80274bc:	4288      	cmp	r0, r1
 80274be:	d36e      	bcc.n	802759e <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 80274c0:	2101      	movs	r1, #1
 80274c2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80274c6:	2100      	movs	r1, #0
 80274c8:	9a00      	ldr	r2, [sp, #0]
 80274ca:	82a7      	strh	r7, [r4, #20]
 80274cc:	82e2      	strh	r2, [r4, #22]
 80274ce:	8321      	strh	r1, [r4, #24]
 80274d0:	8361      	strh	r1, [r4, #26]
 80274d2:	45be      	cmp	lr, r7
 80274d4:	44b4      	add	ip, r6
 80274d6:	d048      	beq.n	802756a <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 80274d8:	9a03      	ldr	r2, [sp, #12]
 80274da:	1aed      	subs	r5, r5, r3
 80274dc:	eba2 010c 	sub.w	r1, r2, ip
 80274e0:	440e      	add	r6, r1
 80274e2:	0176      	lsls	r6, r6, #5
 80274e4:	fb96 f8f3 	sdiv	r8, r6, r3
 80274e8:	fb03 6618 	mls	r6, r3, r8, r6
 80274ec:	2e00      	cmp	r6, #0
 80274ee:	bfbc      	itt	lt
 80274f0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80274f4:	18f6      	addlt	r6, r6, r3
 80274f6:	f108 0201 	add.w	r2, r8, #1
 80274fa:	9205      	str	r2, [sp, #20]
 80274fc:	19ad      	adds	r5, r5, r6
 80274fe:	8b20      	ldrh	r0, [r4, #24]
 8027500:	8b61      	ldrh	r1, [r4, #26]
 8027502:	bf54      	ite	pl
 8027504:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8027508:	46c1      	movmi	r9, r8
 802750a:	9a01      	ldr	r2, [sp, #4]
 802750c:	bf58      	it	pl
 802750e:	1aed      	subpl	r5, r5, r3
 8027510:	4448      	add	r0, r9
 8027512:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8027516:	4417      	add	r7, r2
 8027518:	44cc      	add	ip, r9
 802751a:	9a04      	ldr	r2, [sp, #16]
 802751c:	b200      	sxth	r0, r0
 802751e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027522:	b209      	sxth	r1, r1
 8027524:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8027528:	443a      	add	r2, r7
 802752a:	8320      	strh	r0, [r4, #24]
 802752c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027530:	8361      	strh	r1, [r4, #26]
 8027532:	4552      	cmp	r2, sl
 8027534:	d017      	beq.n	8027566 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8027536:	ea50 0201 	orrs.w	r2, r0, r1
 802753a:	d00d      	beq.n	8027558 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802753c:	f1b9 0f00 	cmp.w	r9, #0
 8027540:	db0a      	blt.n	8027558 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027542:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027544:	4549      	cmp	r1, r9
 8027546:	dd07      	ble.n	8027558 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027548:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802754c:	4288      	cmp	r0, r1
 802754e:	d337      	bcc.n	80275c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8027550:	f04f 0201 	mov.w	r2, #1
 8027554:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027558:	9a00      	ldr	r2, [sp, #0]
 802755a:	82a7      	strh	r7, [r4, #20]
 802755c:	82e2      	strh	r2, [r4, #22]
 802755e:	f04f 0200 	mov.w	r2, #0
 8027562:	8322      	strh	r2, [r4, #24]
 8027564:	8362      	strh	r2, [r4, #26]
 8027566:	45be      	cmp	lr, r7
 8027568:	d1c8      	bne.n	80274fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802756a:	9b03      	ldr	r3, [sp, #12]
 802756c:	8b62      	ldrh	r2, [r4, #26]
 802756e:	eba3 0c0c 	sub.w	ip, r3, ip
 8027572:	8b23      	ldrh	r3, [r4, #24]
 8027574:	4463      	add	r3, ip
 8027576:	8323      	strh	r3, [r4, #24]
 8027578:	9b02      	ldr	r3, [sp, #8]
 802757a:	3320      	adds	r3, #32
 802757c:	eba3 030b 	sub.w	r3, r3, fp
 8027580:	fb0c 2c03 	mla	ip, ip, r3, r2
 8027584:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027588:	f7ff baae 	b.w	8026ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802758c:	f04f 32ff 	mov.w	r2, #4294967295
 8027590:	fb05 f508 	mul.w	r5, r5, r8
 8027594:	425b      	negs	r3, r3
 8027596:	f04f 0b00 	mov.w	fp, #0
 802759a:	9201      	str	r2, [sp, #4]
 802759c:	e761      	b.n	8027462 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802759e:	f104 0814 	add.w	r8, r4, #20
 80275a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80275a6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80275aa:	f8c9 0000 	str.w	r0, [r9]
 80275ae:	f8c9 1004 	str.w	r1, [r9, #4]
 80275b2:	6921      	ldr	r1, [r4, #16]
 80275b4:	3108      	adds	r1, #8
 80275b6:	6121      	str	r1, [r4, #16]
 80275b8:	68a1      	ldr	r1, [r4, #8]
 80275ba:	3101      	adds	r1, #1
 80275bc:	60a1      	str	r1, [r4, #8]
 80275be:	e782      	b.n	80274c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80275c0:	f104 0914 	add.w	r9, r4, #20
 80275c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80275c8:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80275cc:	f8ca 0000 	str.w	r0, [sl]
 80275d0:	f8ca 1004 	str.w	r1, [sl, #4]
 80275d4:	6921      	ldr	r1, [r4, #16]
 80275d6:	3108      	adds	r1, #8
 80275d8:	6121      	str	r1, [r4, #16]
 80275da:	68a1      	ldr	r1, [r4, #8]
 80275dc:	3101      	adds	r1, #1
 80275de:	60a1      	str	r1, [r4, #8]
 80275e0:	e7ba      	b.n	8027558 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080275e2 <_ZN8touchgfx7Outline6lineToEii>:
 80275e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80275e4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80275e6:	4604      	mov	r4, r0
 80275e8:	460d      	mov	r5, r1
 80275ea:	4616      	mov	r6, r2
 80275ec:	079b      	lsls	r3, r3, #30
 80275ee:	d526      	bpl.n	802763e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80275f0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80275f4:	ea85 0001 	eor.w	r0, r5, r1
 80275f8:	ea86 0302 	eor.w	r3, r6, r2
 80275fc:	4303      	orrs	r3, r0
 80275fe:	d01e      	beq.n	802763e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027600:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027602:	114b      	asrs	r3, r1, #5
 8027604:	9600      	str	r6, [sp, #0]
 8027606:	4283      	cmp	r3, r0
 8027608:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802760a:	bfb8      	it	lt
 802760c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802760e:	3301      	adds	r3, #1
 8027610:	4283      	cmp	r3, r0
 8027612:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027614:	bfc8      	it	gt
 8027616:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027618:	116b      	asrs	r3, r5, #5
 802761a:	4283      	cmp	r3, r0
 802761c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802761e:	bfb8      	it	lt
 8027620:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027622:	3301      	adds	r3, #1
 8027624:	4283      	cmp	r3, r0
 8027626:	4620      	mov	r0, r4
 8027628:	bfc8      	it	gt
 802762a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802762c:	462b      	mov	r3, r5
 802762e:	f7ff f9e3 	bl	80269f8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8027632:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027634:	f043 0301 	orr.w	r3, r3, #1
 8027638:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802763c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802763e:	b002      	add	sp, #8
 8027640:	bd70      	pop	{r4, r5, r6, pc}

08027642 <_ZN8touchgfx7Outline6moveToEii>:
 8027642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027644:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027646:	4615      	mov	r5, r2
 8027648:	4604      	mov	r4, r0
 802764a:	460e      	mov	r6, r1
 802764c:	079a      	lsls	r2, r3, #30
 802764e:	d401      	bmi.n	8027654 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8027650:	f7ff f98c 	bl	802696c <_ZN8touchgfx7Outline5resetEv>
 8027654:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027656:	07db      	lsls	r3, r3, #31
 8027658:	d504      	bpl.n	8027664 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802765a:	4620      	mov	r0, r4
 802765c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8027660:	f7ff ffbf 	bl	80275e2 <_ZN8touchgfx7Outline6lineToEii>
 8027664:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8027668:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802766c:	116f      	asrs	r7, r5, #5
 802766e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8027672:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8027676:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802767a:	4291      	cmp	r1, r2
 802767c:	d015      	beq.n	80276aa <_ZN8touchgfx7Outline6moveToEii+0x68>
 802767e:	8b61      	ldrh	r1, [r4, #26]
 8027680:	8b22      	ldrh	r2, [r4, #24]
 8027682:	430a      	orrs	r2, r1
 8027684:	d00b      	beq.n	802769e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027686:	2b00      	cmp	r3, #0
 8027688:	db09      	blt.n	802769e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802768a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802768c:	429a      	cmp	r2, r3
 802768e:	dd06      	ble.n	802769e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027690:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8027694:	429a      	cmp	r2, r3
 8027696:	d30d      	bcc.n	80276b4 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8027698:	2301      	movs	r3, #1
 802769a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802769e:	2300      	movs	r3, #0
 80276a0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80276a4:	82e7      	strh	r7, [r4, #22]
 80276a6:	8323      	strh	r3, [r4, #24]
 80276a8:	8363      	strh	r3, [r4, #26]
 80276aa:	61e6      	str	r6, [r4, #28]
 80276ac:	62a5      	str	r5, [r4, #40]	; 0x28
 80276ae:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80276b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80276b4:	f104 0314 	add.w	r3, r4, #20
 80276b8:	6922      	ldr	r2, [r4, #16]
 80276ba:	cb03      	ldmia	r3!, {r0, r1}
 80276bc:	6010      	str	r0, [r2, #0]
 80276be:	6051      	str	r1, [r2, #4]
 80276c0:	6923      	ldr	r3, [r4, #16]
 80276c2:	3308      	adds	r3, #8
 80276c4:	6123      	str	r3, [r4, #16]
 80276c6:	68a3      	ldr	r3, [r4, #8]
 80276c8:	3301      	adds	r3, #1
 80276ca:	60a3      	str	r3, [r4, #8]
 80276cc:	e7e7      	b.n	802769e <_ZN8touchgfx7Outline6moveToEii+0x5c>

080276ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80276ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276d2:	b0d1      	sub	sp, #324	; 0x144
 80276d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80276d8:	466c      	mov	r4, sp
 80276da:	1a0d      	subs	r5, r1, r0
 80276dc:	f100 0208 	add.w	r2, r0, #8
 80276e0:	2d48      	cmp	r5, #72	; 0x48
 80276e2:	f340 80ba 	ble.w	802785a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80276e6:	112d      	asrs	r5, r5, #4
 80276e8:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80276ec:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80276f0:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80276f4:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80276f8:	f9b0 8000 	ldrsh.w	r8, [r0]
 80276fc:	681e      	ldr	r6, [r3, #0]
 80276fe:	6006      	str	r6, [r0, #0]
 8027700:	685e      	ldr	r6, [r3, #4]
 8027702:	6046      	str	r6, [r0, #4]
 8027704:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8027708:	f8a3 c004 	strh.w	ip, [r3, #4]
 802770c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8027710:	80df      	strh	r7, [r3, #6]
 8027712:	f1a1 0308 	sub.w	r3, r1, #8
 8027716:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802771a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802771e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8027722:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8027726:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802772a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802772e:	45ac      	cmp	ip, r5
 8027730:	dd0f      	ble.n	8027752 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8027732:	681d      	ldr	r5, [r3, #0]
 8027734:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8027738:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802773c:	6015      	str	r5, [r2, #0]
 802773e:	685d      	ldr	r5, [r3, #4]
 8027740:	6055      	str	r5, [r2, #4]
 8027742:	f821 7c08 	strh.w	r7, [r1, #-8]
 8027746:	f821 6c06 	strh.w	r6, [r1, #-6]
 802774a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802774e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8027752:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8027756:	f9b0 7000 	ldrsh.w	r7, [r0]
 802775a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802775e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8027762:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8027766:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802776a:	4565      	cmp	r5, ip
 802776c:	dd0d      	ble.n	802778a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802776e:	6815      	ldr	r5, [r2, #0]
 8027770:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8027774:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8027778:	6005      	str	r5, [r0, #0]
 802777a:	6855      	ldr	r5, [r2, #4]
 802777c:	8107      	strh	r7, [r0, #8]
 802777e:	6045      	str	r5, [r0, #4]
 8027780:	8146      	strh	r6, [r0, #10]
 8027782:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8027786:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802778a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802778e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8027792:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8027796:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802779a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802779e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80277a2:	45ac      	cmp	ip, r5
 80277a4:	dd0f      	ble.n	80277c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80277a6:	681d      	ldr	r5, [r3, #0]
 80277a8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80277ac:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80277b0:	6005      	str	r5, [r0, #0]
 80277b2:	685d      	ldr	r5, [r3, #4]
 80277b4:	6045      	str	r5, [r0, #4]
 80277b6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80277ba:	f821 6c06 	strh.w	r6, [r1, #-6]
 80277be:	f821 ec04 	strh.w	lr, [r1, #-4]
 80277c2:	f821 cc02 	strh.w	ip, [r1, #-2]
 80277c6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80277ca:	f102 0508 	add.w	r5, r2, #8
 80277ce:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80277d2:	f9b0 e000 	ldrsh.w	lr, [r0]
 80277d6:	462f      	mov	r7, r5
 80277d8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80277dc:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80277e0:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80277e4:	45b2      	cmp	sl, r6
 80277e6:	dc18      	bgt.n	802781a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80277e8:	3b08      	subs	r3, #8
 80277ea:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80277ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80277f2:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80277f6:	45b2      	cmp	sl, r6
 80277f8:	dbf6      	blt.n	80277e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80277fa:	42ab      	cmp	r3, r5
 80277fc:	681e      	ldr	r6, [r3, #0]
 80277fe:	d30e      	bcc.n	802781e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8027800:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8027804:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8027808:	602e      	str	r6, [r5, #0]
 802780a:	685e      	ldr	r6, [r3, #4]
 802780c:	606e      	str	r6, [r5, #4]
 802780e:	f8a3 9000 	strh.w	r9, [r3]
 8027812:	f8a3 8002 	strh.w	r8, [r3, #2]
 8027816:	809f      	strh	r7, [r3, #4]
 8027818:	80da      	strh	r2, [r3, #6]
 802781a:	462a      	mov	r2, r5
 802781c:	e7d3      	b.n	80277c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802781e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8027822:	6006      	str	r6, [r0, #0]
 8027824:	685e      	ldr	r6, [r3, #4]
 8027826:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802782a:	6046      	str	r6, [r0, #4]
 802782c:	1a1e      	subs	r6, r3, r0
 802782e:	80da      	strh	r2, [r3, #6]
 8027830:	1b4a      	subs	r2, r1, r5
 8027832:	f8a3 e000 	strh.w	lr, [r3]
 8027836:	10d2      	asrs	r2, r2, #3
 8027838:	f8a3 c002 	strh.w	ip, [r3, #2]
 802783c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8027840:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8027844:	bfb5      	itete	lt
 8027846:	e9c4 0300 	strdlt	r0, r3, [r4]
 802784a:	4607      	movge	r7, r0
 802784c:	460b      	movlt	r3, r1
 802784e:	e9c4 5100 	strdge	r5, r1, [r4]
 8027852:	4638      	mov	r0, r7
 8027854:	3408      	adds	r4, #8
 8027856:	4619      	mov	r1, r3
 8027858:	e73f      	b.n	80276da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802785a:	4291      	cmp	r1, r2
 802785c:	d925      	bls.n	80278aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802785e:	f1a2 0310 	sub.w	r3, r2, #16
 8027862:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8027866:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802786a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802786e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8027872:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8027876:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802787a:	42b5      	cmp	r5, r6
 802787c:	dd13      	ble.n	80278a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802787e:	461d      	mov	r5, r3
 8027880:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8027884:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8027888:	3b08      	subs	r3, #8
 802788a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802788e:	619e      	str	r6, [r3, #24]
 8027890:	42a8      	cmp	r0, r5
 8027892:	686e      	ldr	r6, [r5, #4]
 8027894:	f8a3 c010 	strh.w	ip, [r3, #16]
 8027898:	61de      	str	r6, [r3, #28]
 802789a:	825f      	strh	r7, [r3, #18]
 802789c:	f8a3 8014 	strh.w	r8, [r3, #20]
 80278a0:	f8a3 e016 	strh.w	lr, [r3, #22]
 80278a4:	d1dd      	bne.n	8027862 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80278a6:	3208      	adds	r2, #8
 80278a8:	e7d7      	b.n	802785a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80278aa:	466b      	mov	r3, sp
 80278ac:	429c      	cmp	r4, r3
 80278ae:	d903      	bls.n	80278b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80278b0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80278b4:	3c08      	subs	r4, #8
 80278b6:	e710      	b.n	80276da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80278b8:	b051      	add	sp, #324	; 0x144
 80278ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080278be <_ZN8touchgfx7Outline9sortCellsEv>:
 80278be:	6881      	ldr	r1, [r0, #8]
 80278c0:	b111      	cbz	r1, 80278c8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80278c2:	68c0      	ldr	r0, [r0, #12]
 80278c4:	f7ff bf03 	b.w	80276ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80278c8:	4770      	bx	lr

080278ca <_ZN8touchgfx7Outline8getCellsEv>:
 80278ca:	b510      	push	{r4, lr}
 80278cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80278ce:	4604      	mov	r4, r0
 80278d0:	07da      	lsls	r2, r3, #31
 80278d2:	d507      	bpl.n	80278e4 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80278d4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80278d8:	f7ff fe83 	bl	80275e2 <_ZN8touchgfx7Outline6lineToEii>
 80278dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80278de:	f023 0301 	bic.w	r3, r3, #1
 80278e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80278e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80278e6:	079b      	lsls	r3, r3, #30
 80278e8:	d51a      	bpl.n	8027920 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80278ea:	8b62      	ldrh	r2, [r4, #26]
 80278ec:	8b23      	ldrh	r3, [r4, #24]
 80278ee:	4313      	orrs	r3, r2
 80278f0:	d00d      	beq.n	802790e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80278f2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80278f6:	2b00      	cmp	r3, #0
 80278f8:	db09      	blt.n	802790e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80278fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80278fc:	4293      	cmp	r3, r2
 80278fe:	da06      	bge.n	802790e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8027900:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8027904:	429a      	cmp	r2, r3
 8027906:	d80d      	bhi.n	8027924 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8027908:	2301      	movs	r3, #1
 802790a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802790e:	68a0      	ldr	r0, [r4, #8]
 8027910:	b138      	cbz	r0, 8027922 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8027912:	4620      	mov	r0, r4
 8027914:	f7ff ffd3 	bl	80278be <_ZN8touchgfx7Outline9sortCellsEv>
 8027918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802791a:	f023 0302 	bic.w	r3, r3, #2
 802791e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027920:	68e0      	ldr	r0, [r4, #12]
 8027922:	bd10      	pop	{r4, pc}
 8027924:	f104 0314 	add.w	r3, r4, #20
 8027928:	6922      	ldr	r2, [r4, #16]
 802792a:	cb03      	ldmia	r3!, {r0, r1}
 802792c:	6010      	str	r0, [r2, #0]
 802792e:	6051      	str	r1, [r2, #4]
 8027930:	6923      	ldr	r3, [r4, #16]
 8027932:	3308      	adds	r3, #8
 8027934:	6123      	str	r3, [r4, #16]
 8027936:	68a3      	ldr	r3, [r4, #8]
 8027938:	3301      	adds	r3, #1
 802793a:	60a3      	str	r3, [r4, #8]
 802793c:	e7e7      	b.n	802790e <_ZN8touchgfx7Outline8getCellsEv+0x44>
	...

08027940 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8027940:	b538      	push	{r3, r4, r5, lr}
 8027942:	4c2b      	ldr	r4, [pc, #172]	; (80279f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8027944:	4b2b      	ldr	r3, [pc, #172]	; (80279f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8027946:	6821      	ldr	r1, [r4, #0]
 8027948:	681a      	ldr	r2, [r3, #0]
 802794a:	4281      	cmp	r1, r0
 802794c:	4d2a      	ldr	r5, [pc, #168]	; (80279f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 802794e:	492b      	ldr	r1, [pc, #172]	; (80279fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8027950:	d108      	bne.n	8027964 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8027952:	682b      	ldr	r3, [r5, #0]
 8027954:	4293      	cmp	r3, r2
 8027956:	d105      	bne.n	8027964 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8027958:	6808      	ldr	r0, [r1, #0]
 802795a:	280f      	cmp	r0, #15
 802795c:	bf94      	ite	ls
 802795e:	2000      	movls	r0, #0
 8027960:	2001      	movhi	r0, #1
 8027962:	bd38      	pop	{r3, r4, r5, pc}
 8027964:	4b26      	ldr	r3, [pc, #152]	; (8027a00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8027966:	6020      	str	r0, [r4, #0]
 8027968:	681b      	ldr	r3, [r3, #0]
 802796a:	602a      	str	r2, [r5, #0]
 802796c:	4298      	cmp	r0, r3
 802796e:	d905      	bls.n	802797c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8027970:	4b24      	ldr	r3, [pc, #144]	; (8027a04 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8027972:	2137      	movs	r1, #55	; 0x37
 8027974:	4a24      	ldr	r2, [pc, #144]	; (8027a08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8027976:	4825      	ldr	r0, [pc, #148]	; (8027a0c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8027978:	f000 fae2 	bl	8027f40 <__assert_func>
 802797c:	f010 0403 	ands.w	r4, r0, #3
 8027980:	bf1f      	itttt	ne
 8027982:	f1c4 0504 	rsbne	r5, r4, #4
 8027986:	3b04      	subne	r3, #4
 8027988:	1952      	addne	r2, r2, r5
 802798a:	191b      	addne	r3, r3, r4
 802798c:	4d20      	ldr	r5, [pc, #128]	; (8027a10 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 802798e:	4402      	add	r2, r0
 8027990:	1a1b      	subs	r3, r3, r0
 8027992:	3001      	adds	r0, #1
 8027994:	602a      	str	r2, [r5, #0]
 8027996:	f020 0401 	bic.w	r4, r0, #1
 802799a:	42a3      	cmp	r3, r4
 802799c:	d203      	bcs.n	80279a6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 802799e:	4b19      	ldr	r3, [pc, #100]	; (8027a04 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80279a0:	214a      	movs	r1, #74	; 0x4a
 80279a2:	4a19      	ldr	r2, [pc, #100]	; (8027a08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80279a4:	e7e7      	b.n	8027976 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80279a6:	f010 0002 	ands.w	r0, r0, #2
 80279aa:	bf1f      	itttt	ne
 80279ac:	f1c0 0504 	rsbne	r5, r0, #4
 80279b0:	1952      	addne	r2, r2, r5
 80279b2:	1f05      	subne	r5, r0, #4
 80279b4:	195b      	addne	r3, r3, r5
 80279b6:	4422      	add	r2, r4
 80279b8:	4d16      	ldr	r5, [pc, #88]	; (8027a14 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 80279ba:	1b1b      	subs	r3, r3, r4
 80279bc:	602a      	str	r2, [r5, #0]
 80279be:	429c      	cmp	r4, r3
 80279c0:	d903      	bls.n	80279ca <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 80279c2:	4b10      	ldr	r3, [pc, #64]	; (8027a04 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80279c4:	215d      	movs	r1, #93	; 0x5d
 80279c6:	4a10      	ldr	r2, [pc, #64]	; (8027a08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80279c8:	e7d5      	b.n	8027976 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80279ca:	b120      	cbz	r0, 80279d6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 80279cc:	f1c0 0504 	rsb	r5, r0, #4
 80279d0:	3804      	subs	r0, #4
 80279d2:	442a      	add	r2, r5
 80279d4:	4403      	add	r3, r0
 80279d6:	1b1b      	subs	r3, r3, r4
 80279d8:	4422      	add	r2, r4
 80279da:	480f      	ldr	r0, [pc, #60]	; (8027a18 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 80279dc:	2b0f      	cmp	r3, #15
 80279de:	600b      	str	r3, [r1, #0]
 80279e0:	6002      	str	r2, [r0, #0]
 80279e2:	d803      	bhi.n	80279ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80279e4:	4b0d      	ldr	r3, [pc, #52]	; (8027a1c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80279e6:	2170      	movs	r1, #112	; 0x70
 80279e8:	4a07      	ldr	r2, [pc, #28]	; (8027a08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80279ea:	e7c4      	b.n	8027976 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80279ec:	2001      	movs	r0, #1
 80279ee:	e7b8      	b.n	8027962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80279f0:	200061dc 	.word	0x200061dc
 80279f4:	200061d4 	.word	0x200061d4
 80279f8:	200061e4 	.word	0x200061e4
 80279fc:	200061ec 	.word	0x200061ec
 8027a00:	200061e8 	.word	0x200061e8
 8027a04:	0802d3ec 	.word	0x0802d3ec
 8027a08:	0802d4b4 	.word	0x0802d4b4
 8027a0c:	0802d425 	.word	0x0802d425
 8027a10:	200061f0 	.word	0x200061f0
 8027a14:	200061e0 	.word	0x200061e0
 8027a18:	200061d8 	.word	0x200061d8
 8027a1c:	0802d46f 	.word	0x0802d46f

08027a20 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8027a20:	4b04      	ldr	r3, [pc, #16]	; (8027a34 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8027a22:	6818      	ldr	r0, [r3, #0]
 8027a24:	b120      	cbz	r0, 8027a30 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8027a26:	4b04      	ldr	r3, [pc, #16]	; (8027a38 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8027a28:	6818      	ldr	r0, [r3, #0]
 8027a2a:	3000      	adds	r0, #0
 8027a2c:	bf18      	it	ne
 8027a2e:	2001      	movne	r0, #1
 8027a30:	4770      	bx	lr
 8027a32:	bf00      	nop
 8027a34:	200061d4 	.word	0x200061d4
 8027a38:	200061e8 	.word	0x200061e8

08027a3c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8027a3c:	4b01      	ldr	r3, [pc, #4]	; (8027a44 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8027a3e:	6818      	ldr	r0, [r3, #0]
 8027a40:	4770      	bx	lr
 8027a42:	bf00      	nop
 8027a44:	200061dc 	.word	0x200061dc

08027a48 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8027a48:	4b01      	ldr	r3, [pc, #4]	; (8027a50 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8027a4a:	6818      	ldr	r0, [r3, #0]
 8027a4c:	4770      	bx	lr
 8027a4e:	bf00      	nop
 8027a50:	200061e4 	.word	0x200061e4

08027a54 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8027a54:	4b01      	ldr	r3, [pc, #4]	; (8027a5c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8027a56:	6818      	ldr	r0, [r3, #0]
 8027a58:	4770      	bx	lr
 8027a5a:	bf00      	nop
 8027a5c:	200061f0 	.word	0x200061f0

08027a60 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8027a60:	4b01      	ldr	r3, [pc, #4]	; (8027a68 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8027a62:	6818      	ldr	r0, [r3, #0]
 8027a64:	4770      	bx	lr
 8027a66:	bf00      	nop
 8027a68:	200061e0 	.word	0x200061e0

08027a6c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8027a6c:	4b01      	ldr	r3, [pc, #4]	; (8027a74 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8027a6e:	6818      	ldr	r0, [r3, #0]
 8027a70:	4770      	bx	lr
 8027a72:	bf00      	nop
 8027a74:	200061d8 	.word	0x200061d8

08027a78 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8027a78:	4b01      	ldr	r3, [pc, #4]	; (8027a80 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8027a7a:	6818      	ldr	r0, [r3, #0]
 8027a7c:	4770      	bx	lr
 8027a7e:	bf00      	nop
 8027a80:	200061ec 	.word	0x200061ec

08027a84 <_ZN8touchgfx8ScanlineD1Ev>:
 8027a84:	4770      	bx	lr

08027a86 <_ZN8touchgfx8ScanlineD0Ev>:
 8027a86:	b510      	push	{r4, lr}
 8027a88:	4604      	mov	r4, r0
 8027a8a:	2124      	movs	r1, #36	; 0x24
 8027a8c:	f000 f885 	bl	8027b9a <_ZdlPvj>
 8027a90:	4620      	mov	r0, r4
 8027a92:	bd10      	pop	{r4, pc}

08027a94 <_ZN8touchgfx8Scanline5resetEv>:
 8027a94:	b510      	push	{r4, lr}
 8027a96:	4604      	mov	r4, r0
 8027a98:	f7ff ffd6 	bl	8027a48 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8027a9c:	61a0      	str	r0, [r4, #24]
 8027a9e:	f7ff ffd9 	bl	8027a54 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8027aa2:	61e0      	str	r0, [r4, #28]
 8027aa4:	f7ff ffdc 	bl	8027a60 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8027aa8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027aac:	6220      	str	r0, [r4, #32]
 8027aae:	6160      	str	r0, [r4, #20]
 8027ab0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8027ab4:	69e3      	ldr	r3, [r4, #28]
 8027ab6:	6123      	str	r3, [r4, #16]
 8027ab8:	2300      	movs	r3, #0
 8027aba:	60e3      	str	r3, [r4, #12]
 8027abc:	bd10      	pop	{r4, pc}
	...

08027ac0 <_ZN8touchgfx8ScanlineC1Ev>:
 8027ac0:	4b07      	ldr	r3, [pc, #28]	; (8027ae0 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8027ac2:	b510      	push	{r4, lr}
 8027ac4:	6003      	str	r3, [r0, #0]
 8027ac6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027aca:	4604      	mov	r4, r0
 8027acc:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8027ad0:	2300      	movs	r3, #0
 8027ad2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027ad6:	6143      	str	r3, [r0, #20]
 8027ad8:	f7ff ffdc 	bl	8027a94 <_ZN8touchgfx8Scanline5resetEv>
 8027adc:	4620      	mov	r0, r4
 8027ade:	bd10      	pop	{r4, pc}
 8027ae0:	0802d508 	.word	0x0802d508

08027ae4 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8027ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027ae8:	1e0c      	subs	r4, r1, #0
 8027aea:	4605      	mov	r5, r0
 8027aec:	4617      	mov	r7, r2
 8027aee:	461e      	mov	r6, r3
 8027af0:	da03      	bge.n	8027afa <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8027af2:	4426      	add	r6, r4
 8027af4:	2e01      	cmp	r6, #1
 8027af6:	d421      	bmi.n	8027b3c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8027af8:	2400      	movs	r4, #0
 8027afa:	f7ff ff9f 	bl	8027a3c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027afe:	42a0      	cmp	r0, r4
 8027b00:	d91c      	bls.n	8027b3c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8027b02:	eb04 0806 	add.w	r8, r4, r6
 8027b06:	f7ff ff99 	bl	8027a3c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027b0a:	4580      	cmp	r8, r0
 8027b0c:	d902      	bls.n	8027b14 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8027b0e:	f7ff ff95 	bl	8027a3c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027b12:	1b06      	subs	r6, r0, r4
 8027b14:	69a8      	ldr	r0, [r5, #24]
 8027b16:	4632      	mov	r2, r6
 8027b18:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8027b1c:	4420      	add	r0, r4
 8027b1e:	f7f3 fedd 	bl	801b8dc <_ZN8touchgfx6memsetEPvhm>
 8027b22:	686b      	ldr	r3, [r5, #4]
 8027b24:	b2b2      	uxth	r2, r6
 8027b26:	3301      	adds	r3, #1
 8027b28:	42a3      	cmp	r3, r4
 8027b2a:	696b      	ldr	r3, [r5, #20]
 8027b2c:	d108      	bne.n	8027b40 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8027b2e:	8819      	ldrh	r1, [r3, #0]
 8027b30:	440a      	add	r2, r1
 8027b32:	801a      	strh	r2, [r3, #0]
 8027b34:	3c01      	subs	r4, #1
 8027b36:	4434      	add	r4, r6
 8027b38:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8027b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b40:	1c99      	adds	r1, r3, #2
 8027b42:	6169      	str	r1, [r5, #20]
 8027b44:	805a      	strh	r2, [r3, #2]
 8027b46:	692b      	ldr	r3, [r5, #16]
 8027b48:	1c9a      	adds	r2, r3, #2
 8027b4a:	612a      	str	r2, [r5, #16]
 8027b4c:	805c      	strh	r4, [r3, #2]
 8027b4e:	68eb      	ldr	r3, [r5, #12]
 8027b50:	3301      	adds	r3, #1
 8027b52:	60eb      	str	r3, [r5, #12]
 8027b54:	e7ee      	b.n	8027b34 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08027b56 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8027b56:	4770      	bx	lr

08027b58 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8027b58:	b510      	push	{r4, lr}
 8027b5a:	4604      	mov	r4, r0
 8027b5c:	2118      	movs	r1, #24
 8027b5e:	f000 f81c 	bl	8027b9a <_ZdlPvj>
 8027b62:	4620      	mov	r0, r4
 8027b64:	bd10      	pop	{r4, pc}
	...

08027b68 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8027b68:	4a04      	ldr	r2, [pc, #16]	; (8027b7c <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8027b6a:	6002      	str	r2, [r0, #0]
 8027b6c:	2200      	movs	r2, #0
 8027b6e:	6042      	str	r2, [r0, #4]
 8027b70:	7202      	strb	r2, [r0, #8]
 8027b72:	6142      	str	r2, [r0, #20]
 8027b74:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8027b78:	4770      	bx	lr
 8027b7a:	bf00      	nop
 8027b7c:	0802d518 	.word	0x0802d518

08027b80 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8027b80:	60c3      	str	r3, [r0, #12]
 8027b82:	9b00      	ldr	r3, [sp, #0]
 8027b84:	6041      	str	r1, [r0, #4]
 8027b86:	6103      	str	r3, [r0, #16]
 8027b88:	9b01      	ldr	r3, [sp, #4]
 8027b8a:	7202      	strb	r2, [r0, #8]
 8027b8c:	6143      	str	r3, [r0, #20]
 8027b8e:	4770      	bx	lr

08027b90 <__aeabi_atexit>:
 8027b90:	460b      	mov	r3, r1
 8027b92:	4601      	mov	r1, r0
 8027b94:	4618      	mov	r0, r3
 8027b96:	f000 b9f7 	b.w	8027f88 <__cxa_atexit>

08027b9a <_ZdlPvj>:
 8027b9a:	f000 b812 	b.w	8027bc2 <_ZdlPv>

08027b9e <__cxa_guard_acquire>:
 8027b9e:	6803      	ldr	r3, [r0, #0]
 8027ba0:	07db      	lsls	r3, r3, #31
 8027ba2:	d406      	bmi.n	8027bb2 <__cxa_guard_acquire+0x14>
 8027ba4:	7843      	ldrb	r3, [r0, #1]
 8027ba6:	b103      	cbz	r3, 8027baa <__cxa_guard_acquire+0xc>
 8027ba8:	deff      	udf	#255	; 0xff
 8027baa:	2301      	movs	r3, #1
 8027bac:	7043      	strb	r3, [r0, #1]
 8027bae:	4618      	mov	r0, r3
 8027bb0:	4770      	bx	lr
 8027bb2:	2000      	movs	r0, #0
 8027bb4:	4770      	bx	lr

08027bb6 <__cxa_guard_release>:
 8027bb6:	2301      	movs	r3, #1
 8027bb8:	6003      	str	r3, [r0, #0]
 8027bba:	4770      	bx	lr

08027bbc <__cxa_pure_virtual>:
 8027bbc:	b508      	push	{r3, lr}
 8027bbe:	f000 f80f 	bl	8027be0 <_ZSt9terminatev>

08027bc2 <_ZdlPv>:
 8027bc2:	f000 ba33 	b.w	802802c <free>

08027bc6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8027bc6:	b508      	push	{r3, lr}
 8027bc8:	4780      	blx	r0
 8027bca:	f000 f9b1 	bl	8027f30 <abort>
	...

08027bd0 <_ZSt13get_terminatev>:
 8027bd0:	4b02      	ldr	r3, [pc, #8]	; (8027bdc <_ZSt13get_terminatev+0xc>)
 8027bd2:	6818      	ldr	r0, [r3, #0]
 8027bd4:	f3bf 8f5b 	dmb	ish
 8027bd8:	4770      	bx	lr
 8027bda:	bf00      	nop
 8027bdc:	20000074 	.word	0x20000074

08027be0 <_ZSt9terminatev>:
 8027be0:	b508      	push	{r3, lr}
 8027be2:	f7ff fff5 	bl	8027bd0 <_ZSt13get_terminatev>
 8027be6:	f7ff ffee 	bl	8027bc6 <_ZN10__cxxabiv111__terminateEPFvvE>

08027bea <sinf_poly>:
 8027bea:	07cb      	lsls	r3, r1, #31
 8027bec:	d412      	bmi.n	8027c14 <sinf_poly+0x2a>
 8027bee:	ee21 6b00 	vmul.f64	d6, d1, d0
 8027bf2:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8027bf6:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8027bfa:	eea5 7b01 	vfma.f64	d7, d5, d1
 8027bfe:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8027c02:	ee21 1b06 	vmul.f64	d1, d1, d6
 8027c06:	eea5 0b06 	vfma.f64	d0, d5, d6
 8027c0a:	eea7 0b01 	vfma.f64	d0, d7, d1
 8027c0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027c12:	4770      	bx	lr
 8027c14:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8027c18:	ee21 6b01 	vmul.f64	d6, d1, d1
 8027c1c:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8027c20:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8027c24:	eea1 7b05 	vfma.f64	d7, d1, d5
 8027c28:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8027c2c:	eea1 0b05 	vfma.f64	d0, d1, d5
 8027c30:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8027c34:	ee21 1b06 	vmul.f64	d1, d1, d6
 8027c38:	eea6 0b05 	vfma.f64	d0, d6, d5
 8027c3c:	e7e5      	b.n	8027c0a <sinf_poly+0x20>
	...

08027c40 <cosf>:
 8027c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027c42:	ee10 4a10 	vmov	r4, s0
 8027c46:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8027c4a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8027c4e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8027c52:	d20c      	bcs.n	8027c6e <cosf+0x2e>
 8027c54:	ee26 1b06 	vmul.f64	d1, d6, d6
 8027c58:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8027c5c:	d378      	bcc.n	8027d50 <cosf+0x110>
 8027c5e:	eeb0 0b46 	vmov.f64	d0, d6
 8027c62:	483f      	ldr	r0, [pc, #252]	; (8027d60 <cosf+0x120>)
 8027c64:	2101      	movs	r1, #1
 8027c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8027c6a:	f7ff bfbe 	b.w	8027bea <sinf_poly>
 8027c6e:	f240 422e 	movw	r2, #1070	; 0x42e
 8027c72:	4293      	cmp	r3, r2
 8027c74:	d826      	bhi.n	8027cc4 <cosf+0x84>
 8027c76:	4b3a      	ldr	r3, [pc, #232]	; (8027d60 <cosf+0x120>)
 8027c78:	ed93 7b08 	vldr	d7, [r3, #32]
 8027c7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027c80:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8027c84:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8027c88:	ee17 1a90 	vmov	r1, s15
 8027c8c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8027c90:	1609      	asrs	r1, r1, #24
 8027c92:	ee07 1a90 	vmov	s15, r1
 8027c96:	f001 0203 	and.w	r2, r1, #3
 8027c9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8027c9e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8027ca2:	ed92 0b00 	vldr	d0, [r2]
 8027ca6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8027caa:	f011 0f02 	tst.w	r1, #2
 8027cae:	eea5 6b47 	vfms.f64	d6, d5, d7
 8027cb2:	f081 0101 	eor.w	r1, r1, #1
 8027cb6:	bf08      	it	eq
 8027cb8:	4618      	moveq	r0, r3
 8027cba:	ee26 1b06 	vmul.f64	d1, d6, d6
 8027cbe:	ee20 0b06 	vmul.f64	d0, d0, d6
 8027cc2:	e7d0      	b.n	8027c66 <cosf+0x26>
 8027cc4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8027cc8:	d23e      	bcs.n	8027d48 <cosf+0x108>
 8027cca:	4b26      	ldr	r3, [pc, #152]	; (8027d64 <cosf+0x124>)
 8027ccc:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8027cd0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8027cd4:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8027cd8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8027cdc:	6a06      	ldr	r6, [r0, #32]
 8027cde:	6900      	ldr	r0, [r0, #16]
 8027ce0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8027ce4:	40a9      	lsls	r1, r5
 8027ce6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8027cea:	fba1 6706 	umull	r6, r7, r1, r6
 8027cee:	fb05 f301 	mul.w	r3, r5, r1
 8027cf2:	463a      	mov	r2, r7
 8027cf4:	fbe0 2301 	umlal	r2, r3, r0, r1
 8027cf8:	1c11      	adds	r1, r2, #0
 8027cfa:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8027cfe:	2000      	movs	r0, #0
 8027d00:	1a10      	subs	r0, r2, r0
 8027d02:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8027d06:	eb63 0101 	sbc.w	r1, r3, r1
 8027d0a:	f7d8 fcc7 	bl	800069c <__aeabi_l2d>
 8027d0e:	0fb5      	lsrs	r5, r6, #30
 8027d10:	4b13      	ldr	r3, [pc, #76]	; (8027d60 <cosf+0x120>)
 8027d12:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8027d16:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8027d58 <cosf+0x118>
 8027d1a:	ec41 0b17 	vmov	d7, r0, r1
 8027d1e:	f004 0203 	and.w	r2, r4, #3
 8027d22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8027d26:	ee27 0b00 	vmul.f64	d0, d7, d0
 8027d2a:	ed92 7b00 	vldr	d7, [r2]
 8027d2e:	ee20 1b00 	vmul.f64	d1, d0, d0
 8027d32:	f014 0f02 	tst.w	r4, #2
 8027d36:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8027d3a:	f085 0101 	eor.w	r1, r5, #1
 8027d3e:	bf08      	it	eq
 8027d40:	4618      	moveq	r0, r3
 8027d42:	ee27 0b00 	vmul.f64	d0, d7, d0
 8027d46:	e78e      	b.n	8027c66 <cosf+0x26>
 8027d48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8027d4c:	f000 b817 	b.w	8027d7e <__math_invalidf>
 8027d50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027d56:	bf00      	nop
 8027d58:	54442d18 	.word	0x54442d18
 8027d5c:	3c1921fb 	.word	0x3c1921fb
 8027d60:	0802d580 	.word	0x0802d580
 8027d64:	0802d520 	.word	0x0802d520

08027d68 <with_errnof>:
 8027d68:	b513      	push	{r0, r1, r4, lr}
 8027d6a:	4604      	mov	r4, r0
 8027d6c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8027d70:	f000 f918 	bl	8027fa4 <__errno>
 8027d74:	ed9d 0a01 	vldr	s0, [sp, #4]
 8027d78:	6004      	str	r4, [r0, #0]
 8027d7a:	b002      	add	sp, #8
 8027d7c:	bd10      	pop	{r4, pc}

08027d7e <__math_invalidf>:
 8027d7e:	eef0 7a40 	vmov.f32	s15, s0
 8027d82:	ee30 7a40 	vsub.f32	s14, s0, s0
 8027d86:	eef4 7a67 	vcmp.f32	s15, s15
 8027d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d8e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8027d92:	d602      	bvs.n	8027d9a <__math_invalidf+0x1c>
 8027d94:	2021      	movs	r0, #33	; 0x21
 8027d96:	f7ff bfe7 	b.w	8027d68 <with_errnof>
 8027d9a:	4770      	bx	lr

08027d9c <sinf_poly>:
 8027d9c:	07cb      	lsls	r3, r1, #31
 8027d9e:	d412      	bmi.n	8027dc6 <sinf_poly+0x2a>
 8027da0:	ee21 6b00 	vmul.f64	d6, d1, d0
 8027da4:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8027da8:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8027dac:	eea5 7b01 	vfma.f64	d7, d5, d1
 8027db0:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8027db4:	ee21 1b06 	vmul.f64	d1, d1, d6
 8027db8:	eea5 0b06 	vfma.f64	d0, d5, d6
 8027dbc:	eea7 0b01 	vfma.f64	d0, d7, d1
 8027dc0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027dc4:	4770      	bx	lr
 8027dc6:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8027dca:	ee21 6b01 	vmul.f64	d6, d1, d1
 8027dce:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8027dd2:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8027dd6:	eea1 7b05 	vfma.f64	d7, d1, d5
 8027dda:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8027dde:	eea1 0b05 	vfma.f64	d0, d1, d5
 8027de2:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8027de6:	ee21 1b06 	vmul.f64	d1, d1, d6
 8027dea:	eea6 0b05 	vfma.f64	d0, d6, d5
 8027dee:	e7e5      	b.n	8027dbc <sinf_poly+0x20>

08027df0 <sinf>:
 8027df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027df2:	ee10 4a10 	vmov	r4, s0
 8027df6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8027dfa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8027dfe:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8027e02:	eef0 7a40 	vmov.f32	s15, s0
 8027e06:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8027e0a:	d218      	bcs.n	8027e3e <sinf+0x4e>
 8027e0c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8027e10:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8027e14:	d20a      	bcs.n	8027e2c <sinf+0x3c>
 8027e16:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8027e1a:	d103      	bne.n	8027e24 <sinf+0x34>
 8027e1c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8027e20:	ed8d 1a01 	vstr	s2, [sp, #4]
 8027e24:	eeb0 0a67 	vmov.f32	s0, s15
 8027e28:	b003      	add	sp, #12
 8027e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027e2c:	483e      	ldr	r0, [pc, #248]	; (8027f28 <sinf+0x138>)
 8027e2e:	eeb0 0b46 	vmov.f64	d0, d6
 8027e32:	2100      	movs	r1, #0
 8027e34:	b003      	add	sp, #12
 8027e36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027e3a:	f7ff bfaf 	b.w	8027d9c <sinf_poly>
 8027e3e:	f240 422e 	movw	r2, #1070	; 0x42e
 8027e42:	4293      	cmp	r3, r2
 8027e44:	d824      	bhi.n	8027e90 <sinf+0xa0>
 8027e46:	4b38      	ldr	r3, [pc, #224]	; (8027f28 <sinf+0x138>)
 8027e48:	ed93 7b08 	vldr	d7, [r3, #32]
 8027e4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027e50:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8027e54:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8027e58:	ee17 1a90 	vmov	r1, s15
 8027e5c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8027e60:	1609      	asrs	r1, r1, #24
 8027e62:	ee07 1a90 	vmov	s15, r1
 8027e66:	f001 0203 	and.w	r2, r1, #3
 8027e6a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8027e6e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8027e72:	ed92 0b00 	vldr	d0, [r2]
 8027e76:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8027e7a:	f011 0f02 	tst.w	r1, #2
 8027e7e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8027e82:	bf08      	it	eq
 8027e84:	4618      	moveq	r0, r3
 8027e86:	ee26 1b06 	vmul.f64	d1, d6, d6
 8027e8a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8027e8e:	e7d1      	b.n	8027e34 <sinf+0x44>
 8027e90:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8027e94:	d23d      	bcs.n	8027f12 <sinf+0x122>
 8027e96:	4b25      	ldr	r3, [pc, #148]	; (8027f2c <sinf+0x13c>)
 8027e98:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8027e9c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8027ea0:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8027ea4:	6a06      	ldr	r6, [r0, #32]
 8027ea6:	6900      	ldr	r0, [r0, #16]
 8027ea8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8027eac:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8027eb0:	40a9      	lsls	r1, r5
 8027eb2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8027eb6:	fba1 6706 	umull	r6, r7, r1, r6
 8027eba:	fb05 f301 	mul.w	r3, r5, r1
 8027ebe:	463a      	mov	r2, r7
 8027ec0:	fbe0 2301 	umlal	r2, r3, r0, r1
 8027ec4:	1c11      	adds	r1, r2, #0
 8027ec6:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8027eca:	2000      	movs	r0, #0
 8027ecc:	1a10      	subs	r0, r2, r0
 8027ece:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8027ed2:	eb63 0101 	sbc.w	r1, r3, r1
 8027ed6:	f7d8 fbe1 	bl	800069c <__aeabi_l2d>
 8027eda:	0fb5      	lsrs	r5, r6, #30
 8027edc:	4a12      	ldr	r2, [pc, #72]	; (8027f28 <sinf+0x138>)
 8027ede:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 8027ee2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8027f20 <sinf+0x130>
 8027ee6:	ec41 0b17 	vmov	d7, r0, r1
 8027eea:	f003 0103 	and.w	r1, r3, #3
 8027eee:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8027ef2:	ee27 0b00 	vmul.f64	d0, d7, d0
 8027ef6:	ed91 7b00 	vldr	d7, [r1]
 8027efa:	ee20 1b00 	vmul.f64	d1, d0, d0
 8027efe:	f013 0f02 	tst.w	r3, #2
 8027f02:	f102 0070 	add.w	r0, r2, #112	; 0x70
 8027f06:	4629      	mov	r1, r5
 8027f08:	bf08      	it	eq
 8027f0a:	4610      	moveq	r0, r2
 8027f0c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8027f10:	e790      	b.n	8027e34 <sinf+0x44>
 8027f12:	b003      	add	sp, #12
 8027f14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027f18:	f7ff bf31 	b.w	8027d7e <__math_invalidf>
 8027f1c:	f3af 8000 	nop.w
 8027f20:	54442d18 	.word	0x54442d18
 8027f24:	3c1921fb 	.word	0x3c1921fb
 8027f28:	0802d580 	.word	0x0802d580
 8027f2c:	0802d520 	.word	0x0802d520

08027f30 <abort>:
 8027f30:	b508      	push	{r3, lr}
 8027f32:	2006      	movs	r0, #6
 8027f34:	f000 fcd6 	bl	80288e4 <raise>
 8027f38:	2001      	movs	r0, #1
 8027f3a:	f7da fa75 	bl	8002428 <_exit>
	...

08027f40 <__assert_func>:
 8027f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027f42:	4614      	mov	r4, r2
 8027f44:	461a      	mov	r2, r3
 8027f46:	4b09      	ldr	r3, [pc, #36]	; (8027f6c <__assert_func+0x2c>)
 8027f48:	681b      	ldr	r3, [r3, #0]
 8027f4a:	4605      	mov	r5, r0
 8027f4c:	68d8      	ldr	r0, [r3, #12]
 8027f4e:	b14c      	cbz	r4, 8027f64 <__assert_func+0x24>
 8027f50:	4b07      	ldr	r3, [pc, #28]	; (8027f70 <__assert_func+0x30>)
 8027f52:	9100      	str	r1, [sp, #0]
 8027f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027f58:	4906      	ldr	r1, [pc, #24]	; (8027f74 <__assert_func+0x34>)
 8027f5a:	462b      	mov	r3, r5
 8027f5c:	f000 f828 	bl	8027fb0 <fiprintf>
 8027f60:	f7ff ffe6 	bl	8027f30 <abort>
 8027f64:	4b04      	ldr	r3, [pc, #16]	; (8027f78 <__assert_func+0x38>)
 8027f66:	461c      	mov	r4, r3
 8027f68:	e7f3      	b.n	8027f52 <__assert_func+0x12>
 8027f6a:	bf00      	nop
 8027f6c:	20000078 	.word	0x20000078
 8027f70:	0802d660 	.word	0x0802d660
 8027f74:	0802d66d 	.word	0x0802d66d
 8027f78:	0802d69b 	.word	0x0802d69b

08027f7c <atexit>:
 8027f7c:	2300      	movs	r3, #0
 8027f7e:	4601      	mov	r1, r0
 8027f80:	461a      	mov	r2, r3
 8027f82:	4618      	mov	r0, r3
 8027f84:	f000 bd8a 	b.w	8028a9c <__register_exitproc>

08027f88 <__cxa_atexit>:
 8027f88:	b510      	push	{r4, lr}
 8027f8a:	4c05      	ldr	r4, [pc, #20]	; (8027fa0 <__cxa_atexit+0x18>)
 8027f8c:	4613      	mov	r3, r2
 8027f8e:	b12c      	cbz	r4, 8027f9c <__cxa_atexit+0x14>
 8027f90:	460a      	mov	r2, r1
 8027f92:	4601      	mov	r1, r0
 8027f94:	2002      	movs	r0, #2
 8027f96:	f000 fd81 	bl	8028a9c <__register_exitproc>
 8027f9a:	bd10      	pop	{r4, pc}
 8027f9c:	4620      	mov	r0, r4
 8027f9e:	e7fc      	b.n	8027f9a <__cxa_atexit+0x12>
 8027fa0:	08028a9d 	.word	0x08028a9d

08027fa4 <__errno>:
 8027fa4:	4b01      	ldr	r3, [pc, #4]	; (8027fac <__errno+0x8>)
 8027fa6:	6818      	ldr	r0, [r3, #0]
 8027fa8:	4770      	bx	lr
 8027faa:	bf00      	nop
 8027fac:	20000078 	.word	0x20000078

08027fb0 <fiprintf>:
 8027fb0:	b40e      	push	{r1, r2, r3}
 8027fb2:	b503      	push	{r0, r1, lr}
 8027fb4:	4601      	mov	r1, r0
 8027fb6:	ab03      	add	r3, sp, #12
 8027fb8:	4805      	ldr	r0, [pc, #20]	; (8027fd0 <fiprintf+0x20>)
 8027fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8027fbe:	6800      	ldr	r0, [r0, #0]
 8027fc0:	9301      	str	r3, [sp, #4]
 8027fc2:	f000 f925 	bl	8028210 <_vfiprintf_r>
 8027fc6:	b002      	add	sp, #8
 8027fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8027fcc:	b003      	add	sp, #12
 8027fce:	4770      	bx	lr
 8027fd0:	20000078 	.word	0x20000078

08027fd4 <__libc_init_array>:
 8027fd4:	b570      	push	{r4, r5, r6, lr}
 8027fd6:	4d0d      	ldr	r5, [pc, #52]	; (802800c <__libc_init_array+0x38>)
 8027fd8:	4c0d      	ldr	r4, [pc, #52]	; (8028010 <__libc_init_array+0x3c>)
 8027fda:	1b64      	subs	r4, r4, r5
 8027fdc:	10a4      	asrs	r4, r4, #2
 8027fde:	2600      	movs	r6, #0
 8027fe0:	42a6      	cmp	r6, r4
 8027fe2:	d109      	bne.n	8027ff8 <__libc_init_array+0x24>
 8027fe4:	4d0b      	ldr	r5, [pc, #44]	; (8028014 <__libc_init_array+0x40>)
 8027fe6:	4c0c      	ldr	r4, [pc, #48]	; (8028018 <__libc_init_array+0x44>)
 8027fe8:	f001 f892 	bl	8029110 <_init>
 8027fec:	1b64      	subs	r4, r4, r5
 8027fee:	10a4      	asrs	r4, r4, #2
 8027ff0:	2600      	movs	r6, #0
 8027ff2:	42a6      	cmp	r6, r4
 8027ff4:	d105      	bne.n	8028002 <__libc_init_array+0x2e>
 8027ff6:	bd70      	pop	{r4, r5, r6, pc}
 8027ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8027ffc:	4798      	blx	r3
 8027ffe:	3601      	adds	r6, #1
 8028000:	e7ee      	b.n	8027fe0 <__libc_init_array+0xc>
 8028002:	f855 3b04 	ldr.w	r3, [r5], #4
 8028006:	4798      	blx	r3
 8028008:	3601      	adds	r6, #1
 802800a:	e7f2      	b.n	8027ff2 <__libc_init_array+0x1e>
 802800c:	080c2448 	.word	0x080c2448
 8028010:	080c2448 	.word	0x080c2448
 8028014:	080c2448 	.word	0x080c2448
 8028018:	080c245c 	.word	0x080c245c

0802801c <malloc>:
 802801c:	4b02      	ldr	r3, [pc, #8]	; (8028028 <malloc+0xc>)
 802801e:	4601      	mov	r1, r0
 8028020:	6818      	ldr	r0, [r3, #0]
 8028022:	f000 b871 	b.w	8028108 <_malloc_r>
 8028026:	bf00      	nop
 8028028:	20000078 	.word	0x20000078

0802802c <free>:
 802802c:	4b02      	ldr	r3, [pc, #8]	; (8028038 <free+0xc>)
 802802e:	4601      	mov	r1, r0
 8028030:	6818      	ldr	r0, [r3, #0]
 8028032:	f000 b819 	b.w	8028068 <_free_r>
 8028036:	bf00      	nop
 8028038:	20000078 	.word	0x20000078

0802803c <memcpy>:
 802803c:	440a      	add	r2, r1
 802803e:	4291      	cmp	r1, r2
 8028040:	f100 33ff 	add.w	r3, r0, #4294967295
 8028044:	d100      	bne.n	8028048 <memcpy+0xc>
 8028046:	4770      	bx	lr
 8028048:	b510      	push	{r4, lr}
 802804a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802804e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028052:	4291      	cmp	r1, r2
 8028054:	d1f9      	bne.n	802804a <memcpy+0xe>
 8028056:	bd10      	pop	{r4, pc}

08028058 <memset>:
 8028058:	4402      	add	r2, r0
 802805a:	4603      	mov	r3, r0
 802805c:	4293      	cmp	r3, r2
 802805e:	d100      	bne.n	8028062 <memset+0xa>
 8028060:	4770      	bx	lr
 8028062:	f803 1b01 	strb.w	r1, [r3], #1
 8028066:	e7f9      	b.n	802805c <memset+0x4>

08028068 <_free_r>:
 8028068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802806a:	2900      	cmp	r1, #0
 802806c:	d048      	beq.n	8028100 <_free_r+0x98>
 802806e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028072:	9001      	str	r0, [sp, #4]
 8028074:	2b00      	cmp	r3, #0
 8028076:	f1a1 0404 	sub.w	r4, r1, #4
 802807a:	bfb8      	it	lt
 802807c:	18e4      	addlt	r4, r4, r3
 802807e:	f000 ff8f 	bl	8028fa0 <__malloc_lock>
 8028082:	4a20      	ldr	r2, [pc, #128]	; (8028104 <_free_r+0x9c>)
 8028084:	9801      	ldr	r0, [sp, #4]
 8028086:	6813      	ldr	r3, [r2, #0]
 8028088:	4615      	mov	r5, r2
 802808a:	b933      	cbnz	r3, 802809a <_free_r+0x32>
 802808c:	6063      	str	r3, [r4, #4]
 802808e:	6014      	str	r4, [r2, #0]
 8028090:	b003      	add	sp, #12
 8028092:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028096:	f000 bf89 	b.w	8028fac <__malloc_unlock>
 802809a:	42a3      	cmp	r3, r4
 802809c:	d90b      	bls.n	80280b6 <_free_r+0x4e>
 802809e:	6821      	ldr	r1, [r4, #0]
 80280a0:	1862      	adds	r2, r4, r1
 80280a2:	4293      	cmp	r3, r2
 80280a4:	bf04      	itt	eq
 80280a6:	681a      	ldreq	r2, [r3, #0]
 80280a8:	685b      	ldreq	r3, [r3, #4]
 80280aa:	6063      	str	r3, [r4, #4]
 80280ac:	bf04      	itt	eq
 80280ae:	1852      	addeq	r2, r2, r1
 80280b0:	6022      	streq	r2, [r4, #0]
 80280b2:	602c      	str	r4, [r5, #0]
 80280b4:	e7ec      	b.n	8028090 <_free_r+0x28>
 80280b6:	461a      	mov	r2, r3
 80280b8:	685b      	ldr	r3, [r3, #4]
 80280ba:	b10b      	cbz	r3, 80280c0 <_free_r+0x58>
 80280bc:	42a3      	cmp	r3, r4
 80280be:	d9fa      	bls.n	80280b6 <_free_r+0x4e>
 80280c0:	6811      	ldr	r1, [r2, #0]
 80280c2:	1855      	adds	r5, r2, r1
 80280c4:	42a5      	cmp	r5, r4
 80280c6:	d10b      	bne.n	80280e0 <_free_r+0x78>
 80280c8:	6824      	ldr	r4, [r4, #0]
 80280ca:	4421      	add	r1, r4
 80280cc:	1854      	adds	r4, r2, r1
 80280ce:	42a3      	cmp	r3, r4
 80280d0:	6011      	str	r1, [r2, #0]
 80280d2:	d1dd      	bne.n	8028090 <_free_r+0x28>
 80280d4:	681c      	ldr	r4, [r3, #0]
 80280d6:	685b      	ldr	r3, [r3, #4]
 80280d8:	6053      	str	r3, [r2, #4]
 80280da:	4421      	add	r1, r4
 80280dc:	6011      	str	r1, [r2, #0]
 80280de:	e7d7      	b.n	8028090 <_free_r+0x28>
 80280e0:	d902      	bls.n	80280e8 <_free_r+0x80>
 80280e2:	230c      	movs	r3, #12
 80280e4:	6003      	str	r3, [r0, #0]
 80280e6:	e7d3      	b.n	8028090 <_free_r+0x28>
 80280e8:	6825      	ldr	r5, [r4, #0]
 80280ea:	1961      	adds	r1, r4, r5
 80280ec:	428b      	cmp	r3, r1
 80280ee:	bf04      	itt	eq
 80280f0:	6819      	ldreq	r1, [r3, #0]
 80280f2:	685b      	ldreq	r3, [r3, #4]
 80280f4:	6063      	str	r3, [r4, #4]
 80280f6:	bf04      	itt	eq
 80280f8:	1949      	addeq	r1, r1, r5
 80280fa:	6021      	streq	r1, [r4, #0]
 80280fc:	6054      	str	r4, [r2, #4]
 80280fe:	e7c7      	b.n	8028090 <_free_r+0x28>
 8028100:	b003      	add	sp, #12
 8028102:	bd30      	pop	{r4, r5, pc}
 8028104:	200061f4 	.word	0x200061f4

08028108 <_malloc_r>:
 8028108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802810a:	1ccd      	adds	r5, r1, #3
 802810c:	f025 0503 	bic.w	r5, r5, #3
 8028110:	3508      	adds	r5, #8
 8028112:	2d0c      	cmp	r5, #12
 8028114:	bf38      	it	cc
 8028116:	250c      	movcc	r5, #12
 8028118:	2d00      	cmp	r5, #0
 802811a:	4606      	mov	r6, r0
 802811c:	db01      	blt.n	8028122 <_malloc_r+0x1a>
 802811e:	42a9      	cmp	r1, r5
 8028120:	d903      	bls.n	802812a <_malloc_r+0x22>
 8028122:	230c      	movs	r3, #12
 8028124:	6033      	str	r3, [r6, #0]
 8028126:	2000      	movs	r0, #0
 8028128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802812a:	f000 ff39 	bl	8028fa0 <__malloc_lock>
 802812e:	4921      	ldr	r1, [pc, #132]	; (80281b4 <_malloc_r+0xac>)
 8028130:	680a      	ldr	r2, [r1, #0]
 8028132:	4614      	mov	r4, r2
 8028134:	b99c      	cbnz	r4, 802815e <_malloc_r+0x56>
 8028136:	4f20      	ldr	r7, [pc, #128]	; (80281b8 <_malloc_r+0xb0>)
 8028138:	683b      	ldr	r3, [r7, #0]
 802813a:	b923      	cbnz	r3, 8028146 <_malloc_r+0x3e>
 802813c:	4621      	mov	r1, r4
 802813e:	4630      	mov	r0, r6
 8028140:	f000 fb98 	bl	8028874 <_sbrk_r>
 8028144:	6038      	str	r0, [r7, #0]
 8028146:	4629      	mov	r1, r5
 8028148:	4630      	mov	r0, r6
 802814a:	f000 fb93 	bl	8028874 <_sbrk_r>
 802814e:	1c43      	adds	r3, r0, #1
 8028150:	d123      	bne.n	802819a <_malloc_r+0x92>
 8028152:	230c      	movs	r3, #12
 8028154:	6033      	str	r3, [r6, #0]
 8028156:	4630      	mov	r0, r6
 8028158:	f000 ff28 	bl	8028fac <__malloc_unlock>
 802815c:	e7e3      	b.n	8028126 <_malloc_r+0x1e>
 802815e:	6823      	ldr	r3, [r4, #0]
 8028160:	1b5b      	subs	r3, r3, r5
 8028162:	d417      	bmi.n	8028194 <_malloc_r+0x8c>
 8028164:	2b0b      	cmp	r3, #11
 8028166:	d903      	bls.n	8028170 <_malloc_r+0x68>
 8028168:	6023      	str	r3, [r4, #0]
 802816a:	441c      	add	r4, r3
 802816c:	6025      	str	r5, [r4, #0]
 802816e:	e004      	b.n	802817a <_malloc_r+0x72>
 8028170:	6863      	ldr	r3, [r4, #4]
 8028172:	42a2      	cmp	r2, r4
 8028174:	bf0c      	ite	eq
 8028176:	600b      	streq	r3, [r1, #0]
 8028178:	6053      	strne	r3, [r2, #4]
 802817a:	4630      	mov	r0, r6
 802817c:	f000 ff16 	bl	8028fac <__malloc_unlock>
 8028180:	f104 000b 	add.w	r0, r4, #11
 8028184:	1d23      	adds	r3, r4, #4
 8028186:	f020 0007 	bic.w	r0, r0, #7
 802818a:	1ac2      	subs	r2, r0, r3
 802818c:	d0cc      	beq.n	8028128 <_malloc_r+0x20>
 802818e:	1a1b      	subs	r3, r3, r0
 8028190:	50a3      	str	r3, [r4, r2]
 8028192:	e7c9      	b.n	8028128 <_malloc_r+0x20>
 8028194:	4622      	mov	r2, r4
 8028196:	6864      	ldr	r4, [r4, #4]
 8028198:	e7cc      	b.n	8028134 <_malloc_r+0x2c>
 802819a:	1cc4      	adds	r4, r0, #3
 802819c:	f024 0403 	bic.w	r4, r4, #3
 80281a0:	42a0      	cmp	r0, r4
 80281a2:	d0e3      	beq.n	802816c <_malloc_r+0x64>
 80281a4:	1a21      	subs	r1, r4, r0
 80281a6:	4630      	mov	r0, r6
 80281a8:	f000 fb64 	bl	8028874 <_sbrk_r>
 80281ac:	3001      	adds	r0, #1
 80281ae:	d1dd      	bne.n	802816c <_malloc_r+0x64>
 80281b0:	e7cf      	b.n	8028152 <_malloc_r+0x4a>
 80281b2:	bf00      	nop
 80281b4:	200061f4 	.word	0x200061f4
 80281b8:	200061f8 	.word	0x200061f8

080281bc <__sfputc_r>:
 80281bc:	6893      	ldr	r3, [r2, #8]
 80281be:	3b01      	subs	r3, #1
 80281c0:	2b00      	cmp	r3, #0
 80281c2:	b410      	push	{r4}
 80281c4:	6093      	str	r3, [r2, #8]
 80281c6:	da08      	bge.n	80281da <__sfputc_r+0x1e>
 80281c8:	6994      	ldr	r4, [r2, #24]
 80281ca:	42a3      	cmp	r3, r4
 80281cc:	db01      	blt.n	80281d2 <__sfputc_r+0x16>
 80281ce:	290a      	cmp	r1, #10
 80281d0:	d103      	bne.n	80281da <__sfputc_r+0x1e>
 80281d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80281d6:	f000 bba1 	b.w	802891c <__swbuf_r>
 80281da:	6813      	ldr	r3, [r2, #0]
 80281dc:	1c58      	adds	r0, r3, #1
 80281de:	6010      	str	r0, [r2, #0]
 80281e0:	7019      	strb	r1, [r3, #0]
 80281e2:	4608      	mov	r0, r1
 80281e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80281e8:	4770      	bx	lr

080281ea <__sfputs_r>:
 80281ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281ec:	4606      	mov	r6, r0
 80281ee:	460f      	mov	r7, r1
 80281f0:	4614      	mov	r4, r2
 80281f2:	18d5      	adds	r5, r2, r3
 80281f4:	42ac      	cmp	r4, r5
 80281f6:	d101      	bne.n	80281fc <__sfputs_r+0x12>
 80281f8:	2000      	movs	r0, #0
 80281fa:	e007      	b.n	802820c <__sfputs_r+0x22>
 80281fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028200:	463a      	mov	r2, r7
 8028202:	4630      	mov	r0, r6
 8028204:	f7ff ffda 	bl	80281bc <__sfputc_r>
 8028208:	1c43      	adds	r3, r0, #1
 802820a:	d1f3      	bne.n	80281f4 <__sfputs_r+0xa>
 802820c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028210 <_vfiprintf_r>:
 8028210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028214:	460d      	mov	r5, r1
 8028216:	b09d      	sub	sp, #116	; 0x74
 8028218:	4614      	mov	r4, r2
 802821a:	4698      	mov	r8, r3
 802821c:	4606      	mov	r6, r0
 802821e:	b118      	cbz	r0, 8028228 <_vfiprintf_r+0x18>
 8028220:	6983      	ldr	r3, [r0, #24]
 8028222:	b90b      	cbnz	r3, 8028228 <_vfiprintf_r+0x18>
 8028224:	f000 fdb6 	bl	8028d94 <__sinit>
 8028228:	4b89      	ldr	r3, [pc, #548]	; (8028450 <_vfiprintf_r+0x240>)
 802822a:	429d      	cmp	r5, r3
 802822c:	d11b      	bne.n	8028266 <_vfiprintf_r+0x56>
 802822e:	6875      	ldr	r5, [r6, #4]
 8028230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028232:	07d9      	lsls	r1, r3, #31
 8028234:	d405      	bmi.n	8028242 <_vfiprintf_r+0x32>
 8028236:	89ab      	ldrh	r3, [r5, #12]
 8028238:	059a      	lsls	r2, r3, #22
 802823a:	d402      	bmi.n	8028242 <_vfiprintf_r+0x32>
 802823c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802823e:	f000 fe47 	bl	8028ed0 <__retarget_lock_acquire_recursive>
 8028242:	89ab      	ldrh	r3, [r5, #12]
 8028244:	071b      	lsls	r3, r3, #28
 8028246:	d501      	bpl.n	802824c <_vfiprintf_r+0x3c>
 8028248:	692b      	ldr	r3, [r5, #16]
 802824a:	b9eb      	cbnz	r3, 8028288 <_vfiprintf_r+0x78>
 802824c:	4629      	mov	r1, r5
 802824e:	4630      	mov	r0, r6
 8028250:	f000 fbb6 	bl	80289c0 <__swsetup_r>
 8028254:	b1c0      	cbz	r0, 8028288 <_vfiprintf_r+0x78>
 8028256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028258:	07dc      	lsls	r4, r3, #31
 802825a:	d50e      	bpl.n	802827a <_vfiprintf_r+0x6a>
 802825c:	f04f 30ff 	mov.w	r0, #4294967295
 8028260:	b01d      	add	sp, #116	; 0x74
 8028262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028266:	4b7b      	ldr	r3, [pc, #492]	; (8028454 <_vfiprintf_r+0x244>)
 8028268:	429d      	cmp	r5, r3
 802826a:	d101      	bne.n	8028270 <_vfiprintf_r+0x60>
 802826c:	68b5      	ldr	r5, [r6, #8]
 802826e:	e7df      	b.n	8028230 <_vfiprintf_r+0x20>
 8028270:	4b79      	ldr	r3, [pc, #484]	; (8028458 <_vfiprintf_r+0x248>)
 8028272:	429d      	cmp	r5, r3
 8028274:	bf08      	it	eq
 8028276:	68f5      	ldreq	r5, [r6, #12]
 8028278:	e7da      	b.n	8028230 <_vfiprintf_r+0x20>
 802827a:	89ab      	ldrh	r3, [r5, #12]
 802827c:	0598      	lsls	r0, r3, #22
 802827e:	d4ed      	bmi.n	802825c <_vfiprintf_r+0x4c>
 8028280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028282:	f000 fe27 	bl	8028ed4 <__retarget_lock_release_recursive>
 8028286:	e7e9      	b.n	802825c <_vfiprintf_r+0x4c>
 8028288:	2300      	movs	r3, #0
 802828a:	9309      	str	r3, [sp, #36]	; 0x24
 802828c:	2320      	movs	r3, #32
 802828e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028292:	f8cd 800c 	str.w	r8, [sp, #12]
 8028296:	2330      	movs	r3, #48	; 0x30
 8028298:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802845c <_vfiprintf_r+0x24c>
 802829c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80282a0:	f04f 0901 	mov.w	r9, #1
 80282a4:	4623      	mov	r3, r4
 80282a6:	469a      	mov	sl, r3
 80282a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80282ac:	b10a      	cbz	r2, 80282b2 <_vfiprintf_r+0xa2>
 80282ae:	2a25      	cmp	r2, #37	; 0x25
 80282b0:	d1f9      	bne.n	80282a6 <_vfiprintf_r+0x96>
 80282b2:	ebba 0b04 	subs.w	fp, sl, r4
 80282b6:	d00b      	beq.n	80282d0 <_vfiprintf_r+0xc0>
 80282b8:	465b      	mov	r3, fp
 80282ba:	4622      	mov	r2, r4
 80282bc:	4629      	mov	r1, r5
 80282be:	4630      	mov	r0, r6
 80282c0:	f7ff ff93 	bl	80281ea <__sfputs_r>
 80282c4:	3001      	adds	r0, #1
 80282c6:	f000 80aa 	beq.w	802841e <_vfiprintf_r+0x20e>
 80282ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80282cc:	445a      	add	r2, fp
 80282ce:	9209      	str	r2, [sp, #36]	; 0x24
 80282d0:	f89a 3000 	ldrb.w	r3, [sl]
 80282d4:	2b00      	cmp	r3, #0
 80282d6:	f000 80a2 	beq.w	802841e <_vfiprintf_r+0x20e>
 80282da:	2300      	movs	r3, #0
 80282dc:	f04f 32ff 	mov.w	r2, #4294967295
 80282e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80282e4:	f10a 0a01 	add.w	sl, sl, #1
 80282e8:	9304      	str	r3, [sp, #16]
 80282ea:	9307      	str	r3, [sp, #28]
 80282ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80282f0:	931a      	str	r3, [sp, #104]	; 0x68
 80282f2:	4654      	mov	r4, sl
 80282f4:	2205      	movs	r2, #5
 80282f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80282fa:	4858      	ldr	r0, [pc, #352]	; (802845c <_vfiprintf_r+0x24c>)
 80282fc:	f7d7 fff0 	bl	80002e0 <memchr>
 8028300:	9a04      	ldr	r2, [sp, #16]
 8028302:	b9d8      	cbnz	r0, 802833c <_vfiprintf_r+0x12c>
 8028304:	06d1      	lsls	r1, r2, #27
 8028306:	bf44      	itt	mi
 8028308:	2320      	movmi	r3, #32
 802830a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802830e:	0713      	lsls	r3, r2, #28
 8028310:	bf44      	itt	mi
 8028312:	232b      	movmi	r3, #43	; 0x2b
 8028314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028318:	f89a 3000 	ldrb.w	r3, [sl]
 802831c:	2b2a      	cmp	r3, #42	; 0x2a
 802831e:	d015      	beq.n	802834c <_vfiprintf_r+0x13c>
 8028320:	9a07      	ldr	r2, [sp, #28]
 8028322:	4654      	mov	r4, sl
 8028324:	2000      	movs	r0, #0
 8028326:	f04f 0c0a 	mov.w	ip, #10
 802832a:	4621      	mov	r1, r4
 802832c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028330:	3b30      	subs	r3, #48	; 0x30
 8028332:	2b09      	cmp	r3, #9
 8028334:	d94e      	bls.n	80283d4 <_vfiprintf_r+0x1c4>
 8028336:	b1b0      	cbz	r0, 8028366 <_vfiprintf_r+0x156>
 8028338:	9207      	str	r2, [sp, #28]
 802833a:	e014      	b.n	8028366 <_vfiprintf_r+0x156>
 802833c:	eba0 0308 	sub.w	r3, r0, r8
 8028340:	fa09 f303 	lsl.w	r3, r9, r3
 8028344:	4313      	orrs	r3, r2
 8028346:	9304      	str	r3, [sp, #16]
 8028348:	46a2      	mov	sl, r4
 802834a:	e7d2      	b.n	80282f2 <_vfiprintf_r+0xe2>
 802834c:	9b03      	ldr	r3, [sp, #12]
 802834e:	1d19      	adds	r1, r3, #4
 8028350:	681b      	ldr	r3, [r3, #0]
 8028352:	9103      	str	r1, [sp, #12]
 8028354:	2b00      	cmp	r3, #0
 8028356:	bfbb      	ittet	lt
 8028358:	425b      	neglt	r3, r3
 802835a:	f042 0202 	orrlt.w	r2, r2, #2
 802835e:	9307      	strge	r3, [sp, #28]
 8028360:	9307      	strlt	r3, [sp, #28]
 8028362:	bfb8      	it	lt
 8028364:	9204      	strlt	r2, [sp, #16]
 8028366:	7823      	ldrb	r3, [r4, #0]
 8028368:	2b2e      	cmp	r3, #46	; 0x2e
 802836a:	d10c      	bne.n	8028386 <_vfiprintf_r+0x176>
 802836c:	7863      	ldrb	r3, [r4, #1]
 802836e:	2b2a      	cmp	r3, #42	; 0x2a
 8028370:	d135      	bne.n	80283de <_vfiprintf_r+0x1ce>
 8028372:	9b03      	ldr	r3, [sp, #12]
 8028374:	1d1a      	adds	r2, r3, #4
 8028376:	681b      	ldr	r3, [r3, #0]
 8028378:	9203      	str	r2, [sp, #12]
 802837a:	2b00      	cmp	r3, #0
 802837c:	bfb8      	it	lt
 802837e:	f04f 33ff 	movlt.w	r3, #4294967295
 8028382:	3402      	adds	r4, #2
 8028384:	9305      	str	r3, [sp, #20]
 8028386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802846c <_vfiprintf_r+0x25c>
 802838a:	7821      	ldrb	r1, [r4, #0]
 802838c:	2203      	movs	r2, #3
 802838e:	4650      	mov	r0, sl
 8028390:	f7d7 ffa6 	bl	80002e0 <memchr>
 8028394:	b140      	cbz	r0, 80283a8 <_vfiprintf_r+0x198>
 8028396:	2340      	movs	r3, #64	; 0x40
 8028398:	eba0 000a 	sub.w	r0, r0, sl
 802839c:	fa03 f000 	lsl.w	r0, r3, r0
 80283a0:	9b04      	ldr	r3, [sp, #16]
 80283a2:	4303      	orrs	r3, r0
 80283a4:	3401      	adds	r4, #1
 80283a6:	9304      	str	r3, [sp, #16]
 80283a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80283ac:	482c      	ldr	r0, [pc, #176]	; (8028460 <_vfiprintf_r+0x250>)
 80283ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80283b2:	2206      	movs	r2, #6
 80283b4:	f7d7 ff94 	bl	80002e0 <memchr>
 80283b8:	2800      	cmp	r0, #0
 80283ba:	d03f      	beq.n	802843c <_vfiprintf_r+0x22c>
 80283bc:	4b29      	ldr	r3, [pc, #164]	; (8028464 <_vfiprintf_r+0x254>)
 80283be:	bb1b      	cbnz	r3, 8028408 <_vfiprintf_r+0x1f8>
 80283c0:	9b03      	ldr	r3, [sp, #12]
 80283c2:	3307      	adds	r3, #7
 80283c4:	f023 0307 	bic.w	r3, r3, #7
 80283c8:	3308      	adds	r3, #8
 80283ca:	9303      	str	r3, [sp, #12]
 80283cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80283ce:	443b      	add	r3, r7
 80283d0:	9309      	str	r3, [sp, #36]	; 0x24
 80283d2:	e767      	b.n	80282a4 <_vfiprintf_r+0x94>
 80283d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80283d8:	460c      	mov	r4, r1
 80283da:	2001      	movs	r0, #1
 80283dc:	e7a5      	b.n	802832a <_vfiprintf_r+0x11a>
 80283de:	2300      	movs	r3, #0
 80283e0:	3401      	adds	r4, #1
 80283e2:	9305      	str	r3, [sp, #20]
 80283e4:	4619      	mov	r1, r3
 80283e6:	f04f 0c0a 	mov.w	ip, #10
 80283ea:	4620      	mov	r0, r4
 80283ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80283f0:	3a30      	subs	r2, #48	; 0x30
 80283f2:	2a09      	cmp	r2, #9
 80283f4:	d903      	bls.n	80283fe <_vfiprintf_r+0x1ee>
 80283f6:	2b00      	cmp	r3, #0
 80283f8:	d0c5      	beq.n	8028386 <_vfiprintf_r+0x176>
 80283fa:	9105      	str	r1, [sp, #20]
 80283fc:	e7c3      	b.n	8028386 <_vfiprintf_r+0x176>
 80283fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8028402:	4604      	mov	r4, r0
 8028404:	2301      	movs	r3, #1
 8028406:	e7f0      	b.n	80283ea <_vfiprintf_r+0x1da>
 8028408:	ab03      	add	r3, sp, #12
 802840a:	9300      	str	r3, [sp, #0]
 802840c:	462a      	mov	r2, r5
 802840e:	4b16      	ldr	r3, [pc, #88]	; (8028468 <_vfiprintf_r+0x258>)
 8028410:	a904      	add	r1, sp, #16
 8028412:	4630      	mov	r0, r6
 8028414:	f3af 8000 	nop.w
 8028418:	4607      	mov	r7, r0
 802841a:	1c78      	adds	r0, r7, #1
 802841c:	d1d6      	bne.n	80283cc <_vfiprintf_r+0x1bc>
 802841e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028420:	07d9      	lsls	r1, r3, #31
 8028422:	d405      	bmi.n	8028430 <_vfiprintf_r+0x220>
 8028424:	89ab      	ldrh	r3, [r5, #12]
 8028426:	059a      	lsls	r2, r3, #22
 8028428:	d402      	bmi.n	8028430 <_vfiprintf_r+0x220>
 802842a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802842c:	f000 fd52 	bl	8028ed4 <__retarget_lock_release_recursive>
 8028430:	89ab      	ldrh	r3, [r5, #12]
 8028432:	065b      	lsls	r3, r3, #25
 8028434:	f53f af12 	bmi.w	802825c <_vfiprintf_r+0x4c>
 8028438:	9809      	ldr	r0, [sp, #36]	; 0x24
 802843a:	e711      	b.n	8028260 <_vfiprintf_r+0x50>
 802843c:	ab03      	add	r3, sp, #12
 802843e:	9300      	str	r3, [sp, #0]
 8028440:	462a      	mov	r2, r5
 8028442:	4b09      	ldr	r3, [pc, #36]	; (8028468 <_vfiprintf_r+0x258>)
 8028444:	a904      	add	r1, sp, #16
 8028446:	4630      	mov	r0, r6
 8028448:	f000 f880 	bl	802854c <_printf_i>
 802844c:	e7e4      	b.n	8028418 <_vfiprintf_r+0x208>
 802844e:	bf00      	nop
 8028450:	0802d770 	.word	0x0802d770
 8028454:	0802d790 	.word	0x0802d790
 8028458:	0802d750 	.word	0x0802d750
 802845c:	0802d6a0 	.word	0x0802d6a0
 8028460:	0802d6aa 	.word	0x0802d6aa
 8028464:	00000000 	.word	0x00000000
 8028468:	080281eb 	.word	0x080281eb
 802846c:	0802d6a6 	.word	0x0802d6a6

08028470 <_printf_common>:
 8028470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028474:	4616      	mov	r6, r2
 8028476:	4699      	mov	r9, r3
 8028478:	688a      	ldr	r2, [r1, #8]
 802847a:	690b      	ldr	r3, [r1, #16]
 802847c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028480:	4293      	cmp	r3, r2
 8028482:	bfb8      	it	lt
 8028484:	4613      	movlt	r3, r2
 8028486:	6033      	str	r3, [r6, #0]
 8028488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802848c:	4607      	mov	r7, r0
 802848e:	460c      	mov	r4, r1
 8028490:	b10a      	cbz	r2, 8028496 <_printf_common+0x26>
 8028492:	3301      	adds	r3, #1
 8028494:	6033      	str	r3, [r6, #0]
 8028496:	6823      	ldr	r3, [r4, #0]
 8028498:	0699      	lsls	r1, r3, #26
 802849a:	bf42      	ittt	mi
 802849c:	6833      	ldrmi	r3, [r6, #0]
 802849e:	3302      	addmi	r3, #2
 80284a0:	6033      	strmi	r3, [r6, #0]
 80284a2:	6825      	ldr	r5, [r4, #0]
 80284a4:	f015 0506 	ands.w	r5, r5, #6
 80284a8:	d106      	bne.n	80284b8 <_printf_common+0x48>
 80284aa:	f104 0a19 	add.w	sl, r4, #25
 80284ae:	68e3      	ldr	r3, [r4, #12]
 80284b0:	6832      	ldr	r2, [r6, #0]
 80284b2:	1a9b      	subs	r3, r3, r2
 80284b4:	42ab      	cmp	r3, r5
 80284b6:	dc26      	bgt.n	8028506 <_printf_common+0x96>
 80284b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80284bc:	1e13      	subs	r3, r2, #0
 80284be:	6822      	ldr	r2, [r4, #0]
 80284c0:	bf18      	it	ne
 80284c2:	2301      	movne	r3, #1
 80284c4:	0692      	lsls	r2, r2, #26
 80284c6:	d42b      	bmi.n	8028520 <_printf_common+0xb0>
 80284c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80284cc:	4649      	mov	r1, r9
 80284ce:	4638      	mov	r0, r7
 80284d0:	47c0      	blx	r8
 80284d2:	3001      	adds	r0, #1
 80284d4:	d01e      	beq.n	8028514 <_printf_common+0xa4>
 80284d6:	6823      	ldr	r3, [r4, #0]
 80284d8:	68e5      	ldr	r5, [r4, #12]
 80284da:	6832      	ldr	r2, [r6, #0]
 80284dc:	f003 0306 	and.w	r3, r3, #6
 80284e0:	2b04      	cmp	r3, #4
 80284e2:	bf08      	it	eq
 80284e4:	1aad      	subeq	r5, r5, r2
 80284e6:	68a3      	ldr	r3, [r4, #8]
 80284e8:	6922      	ldr	r2, [r4, #16]
 80284ea:	bf0c      	ite	eq
 80284ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80284f0:	2500      	movne	r5, #0
 80284f2:	4293      	cmp	r3, r2
 80284f4:	bfc4      	itt	gt
 80284f6:	1a9b      	subgt	r3, r3, r2
 80284f8:	18ed      	addgt	r5, r5, r3
 80284fa:	2600      	movs	r6, #0
 80284fc:	341a      	adds	r4, #26
 80284fe:	42b5      	cmp	r5, r6
 8028500:	d11a      	bne.n	8028538 <_printf_common+0xc8>
 8028502:	2000      	movs	r0, #0
 8028504:	e008      	b.n	8028518 <_printf_common+0xa8>
 8028506:	2301      	movs	r3, #1
 8028508:	4652      	mov	r2, sl
 802850a:	4649      	mov	r1, r9
 802850c:	4638      	mov	r0, r7
 802850e:	47c0      	blx	r8
 8028510:	3001      	adds	r0, #1
 8028512:	d103      	bne.n	802851c <_printf_common+0xac>
 8028514:	f04f 30ff 	mov.w	r0, #4294967295
 8028518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802851c:	3501      	adds	r5, #1
 802851e:	e7c6      	b.n	80284ae <_printf_common+0x3e>
 8028520:	18e1      	adds	r1, r4, r3
 8028522:	1c5a      	adds	r2, r3, #1
 8028524:	2030      	movs	r0, #48	; 0x30
 8028526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802852a:	4422      	add	r2, r4
 802852c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028534:	3302      	adds	r3, #2
 8028536:	e7c7      	b.n	80284c8 <_printf_common+0x58>
 8028538:	2301      	movs	r3, #1
 802853a:	4622      	mov	r2, r4
 802853c:	4649      	mov	r1, r9
 802853e:	4638      	mov	r0, r7
 8028540:	47c0      	blx	r8
 8028542:	3001      	adds	r0, #1
 8028544:	d0e6      	beq.n	8028514 <_printf_common+0xa4>
 8028546:	3601      	adds	r6, #1
 8028548:	e7d9      	b.n	80284fe <_printf_common+0x8e>
	...

0802854c <_printf_i>:
 802854c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028550:	460c      	mov	r4, r1
 8028552:	4691      	mov	r9, r2
 8028554:	7e27      	ldrb	r7, [r4, #24]
 8028556:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028558:	2f78      	cmp	r7, #120	; 0x78
 802855a:	4680      	mov	r8, r0
 802855c:	469a      	mov	sl, r3
 802855e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028562:	d807      	bhi.n	8028574 <_printf_i+0x28>
 8028564:	2f62      	cmp	r7, #98	; 0x62
 8028566:	d80a      	bhi.n	802857e <_printf_i+0x32>
 8028568:	2f00      	cmp	r7, #0
 802856a:	f000 80d8 	beq.w	802871e <_printf_i+0x1d2>
 802856e:	2f58      	cmp	r7, #88	; 0x58
 8028570:	f000 80a3 	beq.w	80286ba <_printf_i+0x16e>
 8028574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8028578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802857c:	e03a      	b.n	80285f4 <_printf_i+0xa8>
 802857e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028582:	2b15      	cmp	r3, #21
 8028584:	d8f6      	bhi.n	8028574 <_printf_i+0x28>
 8028586:	a001      	add	r0, pc, #4	; (adr r0, 802858c <_printf_i+0x40>)
 8028588:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802858c:	080285e5 	.word	0x080285e5
 8028590:	080285f9 	.word	0x080285f9
 8028594:	08028575 	.word	0x08028575
 8028598:	08028575 	.word	0x08028575
 802859c:	08028575 	.word	0x08028575
 80285a0:	08028575 	.word	0x08028575
 80285a4:	080285f9 	.word	0x080285f9
 80285a8:	08028575 	.word	0x08028575
 80285ac:	08028575 	.word	0x08028575
 80285b0:	08028575 	.word	0x08028575
 80285b4:	08028575 	.word	0x08028575
 80285b8:	08028705 	.word	0x08028705
 80285bc:	08028629 	.word	0x08028629
 80285c0:	080286e7 	.word	0x080286e7
 80285c4:	08028575 	.word	0x08028575
 80285c8:	08028575 	.word	0x08028575
 80285cc:	08028727 	.word	0x08028727
 80285d0:	08028575 	.word	0x08028575
 80285d4:	08028629 	.word	0x08028629
 80285d8:	08028575 	.word	0x08028575
 80285dc:	08028575 	.word	0x08028575
 80285e0:	080286ef 	.word	0x080286ef
 80285e4:	680b      	ldr	r3, [r1, #0]
 80285e6:	1d1a      	adds	r2, r3, #4
 80285e8:	681b      	ldr	r3, [r3, #0]
 80285ea:	600a      	str	r2, [r1, #0]
 80285ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80285f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80285f4:	2301      	movs	r3, #1
 80285f6:	e0a3      	b.n	8028740 <_printf_i+0x1f4>
 80285f8:	6825      	ldr	r5, [r4, #0]
 80285fa:	6808      	ldr	r0, [r1, #0]
 80285fc:	062e      	lsls	r6, r5, #24
 80285fe:	f100 0304 	add.w	r3, r0, #4
 8028602:	d50a      	bpl.n	802861a <_printf_i+0xce>
 8028604:	6805      	ldr	r5, [r0, #0]
 8028606:	600b      	str	r3, [r1, #0]
 8028608:	2d00      	cmp	r5, #0
 802860a:	da03      	bge.n	8028614 <_printf_i+0xc8>
 802860c:	232d      	movs	r3, #45	; 0x2d
 802860e:	426d      	negs	r5, r5
 8028610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028614:	485e      	ldr	r0, [pc, #376]	; (8028790 <_printf_i+0x244>)
 8028616:	230a      	movs	r3, #10
 8028618:	e019      	b.n	802864e <_printf_i+0x102>
 802861a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802861e:	6805      	ldr	r5, [r0, #0]
 8028620:	600b      	str	r3, [r1, #0]
 8028622:	bf18      	it	ne
 8028624:	b22d      	sxthne	r5, r5
 8028626:	e7ef      	b.n	8028608 <_printf_i+0xbc>
 8028628:	680b      	ldr	r3, [r1, #0]
 802862a:	6825      	ldr	r5, [r4, #0]
 802862c:	1d18      	adds	r0, r3, #4
 802862e:	6008      	str	r0, [r1, #0]
 8028630:	0628      	lsls	r0, r5, #24
 8028632:	d501      	bpl.n	8028638 <_printf_i+0xec>
 8028634:	681d      	ldr	r5, [r3, #0]
 8028636:	e002      	b.n	802863e <_printf_i+0xf2>
 8028638:	0669      	lsls	r1, r5, #25
 802863a:	d5fb      	bpl.n	8028634 <_printf_i+0xe8>
 802863c:	881d      	ldrh	r5, [r3, #0]
 802863e:	4854      	ldr	r0, [pc, #336]	; (8028790 <_printf_i+0x244>)
 8028640:	2f6f      	cmp	r7, #111	; 0x6f
 8028642:	bf0c      	ite	eq
 8028644:	2308      	moveq	r3, #8
 8028646:	230a      	movne	r3, #10
 8028648:	2100      	movs	r1, #0
 802864a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802864e:	6866      	ldr	r6, [r4, #4]
 8028650:	60a6      	str	r6, [r4, #8]
 8028652:	2e00      	cmp	r6, #0
 8028654:	bfa2      	ittt	ge
 8028656:	6821      	ldrge	r1, [r4, #0]
 8028658:	f021 0104 	bicge.w	r1, r1, #4
 802865c:	6021      	strge	r1, [r4, #0]
 802865e:	b90d      	cbnz	r5, 8028664 <_printf_i+0x118>
 8028660:	2e00      	cmp	r6, #0
 8028662:	d04d      	beq.n	8028700 <_printf_i+0x1b4>
 8028664:	4616      	mov	r6, r2
 8028666:	fbb5 f1f3 	udiv	r1, r5, r3
 802866a:	fb03 5711 	mls	r7, r3, r1, r5
 802866e:	5dc7      	ldrb	r7, [r0, r7]
 8028670:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8028674:	462f      	mov	r7, r5
 8028676:	42bb      	cmp	r3, r7
 8028678:	460d      	mov	r5, r1
 802867a:	d9f4      	bls.n	8028666 <_printf_i+0x11a>
 802867c:	2b08      	cmp	r3, #8
 802867e:	d10b      	bne.n	8028698 <_printf_i+0x14c>
 8028680:	6823      	ldr	r3, [r4, #0]
 8028682:	07df      	lsls	r7, r3, #31
 8028684:	d508      	bpl.n	8028698 <_printf_i+0x14c>
 8028686:	6923      	ldr	r3, [r4, #16]
 8028688:	6861      	ldr	r1, [r4, #4]
 802868a:	4299      	cmp	r1, r3
 802868c:	bfde      	ittt	le
 802868e:	2330      	movle	r3, #48	; 0x30
 8028690:	f806 3c01 	strble.w	r3, [r6, #-1]
 8028694:	f106 36ff 	addle.w	r6, r6, #4294967295
 8028698:	1b92      	subs	r2, r2, r6
 802869a:	6122      	str	r2, [r4, #16]
 802869c:	f8cd a000 	str.w	sl, [sp]
 80286a0:	464b      	mov	r3, r9
 80286a2:	aa03      	add	r2, sp, #12
 80286a4:	4621      	mov	r1, r4
 80286a6:	4640      	mov	r0, r8
 80286a8:	f7ff fee2 	bl	8028470 <_printf_common>
 80286ac:	3001      	adds	r0, #1
 80286ae:	d14c      	bne.n	802874a <_printf_i+0x1fe>
 80286b0:	f04f 30ff 	mov.w	r0, #4294967295
 80286b4:	b004      	add	sp, #16
 80286b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80286ba:	4835      	ldr	r0, [pc, #212]	; (8028790 <_printf_i+0x244>)
 80286bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80286c0:	6823      	ldr	r3, [r4, #0]
 80286c2:	680e      	ldr	r6, [r1, #0]
 80286c4:	061f      	lsls	r7, r3, #24
 80286c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80286ca:	600e      	str	r6, [r1, #0]
 80286cc:	d514      	bpl.n	80286f8 <_printf_i+0x1ac>
 80286ce:	07d9      	lsls	r1, r3, #31
 80286d0:	bf44      	itt	mi
 80286d2:	f043 0320 	orrmi.w	r3, r3, #32
 80286d6:	6023      	strmi	r3, [r4, #0]
 80286d8:	b91d      	cbnz	r5, 80286e2 <_printf_i+0x196>
 80286da:	6823      	ldr	r3, [r4, #0]
 80286dc:	f023 0320 	bic.w	r3, r3, #32
 80286e0:	6023      	str	r3, [r4, #0]
 80286e2:	2310      	movs	r3, #16
 80286e4:	e7b0      	b.n	8028648 <_printf_i+0xfc>
 80286e6:	6823      	ldr	r3, [r4, #0]
 80286e8:	f043 0320 	orr.w	r3, r3, #32
 80286ec:	6023      	str	r3, [r4, #0]
 80286ee:	2378      	movs	r3, #120	; 0x78
 80286f0:	4828      	ldr	r0, [pc, #160]	; (8028794 <_printf_i+0x248>)
 80286f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80286f6:	e7e3      	b.n	80286c0 <_printf_i+0x174>
 80286f8:	065e      	lsls	r6, r3, #25
 80286fa:	bf48      	it	mi
 80286fc:	b2ad      	uxthmi	r5, r5
 80286fe:	e7e6      	b.n	80286ce <_printf_i+0x182>
 8028700:	4616      	mov	r6, r2
 8028702:	e7bb      	b.n	802867c <_printf_i+0x130>
 8028704:	680b      	ldr	r3, [r1, #0]
 8028706:	6826      	ldr	r6, [r4, #0]
 8028708:	6960      	ldr	r0, [r4, #20]
 802870a:	1d1d      	adds	r5, r3, #4
 802870c:	600d      	str	r5, [r1, #0]
 802870e:	0635      	lsls	r5, r6, #24
 8028710:	681b      	ldr	r3, [r3, #0]
 8028712:	d501      	bpl.n	8028718 <_printf_i+0x1cc>
 8028714:	6018      	str	r0, [r3, #0]
 8028716:	e002      	b.n	802871e <_printf_i+0x1d2>
 8028718:	0671      	lsls	r1, r6, #25
 802871a:	d5fb      	bpl.n	8028714 <_printf_i+0x1c8>
 802871c:	8018      	strh	r0, [r3, #0]
 802871e:	2300      	movs	r3, #0
 8028720:	6123      	str	r3, [r4, #16]
 8028722:	4616      	mov	r6, r2
 8028724:	e7ba      	b.n	802869c <_printf_i+0x150>
 8028726:	680b      	ldr	r3, [r1, #0]
 8028728:	1d1a      	adds	r2, r3, #4
 802872a:	600a      	str	r2, [r1, #0]
 802872c:	681e      	ldr	r6, [r3, #0]
 802872e:	6862      	ldr	r2, [r4, #4]
 8028730:	2100      	movs	r1, #0
 8028732:	4630      	mov	r0, r6
 8028734:	f7d7 fdd4 	bl	80002e0 <memchr>
 8028738:	b108      	cbz	r0, 802873e <_printf_i+0x1f2>
 802873a:	1b80      	subs	r0, r0, r6
 802873c:	6060      	str	r0, [r4, #4]
 802873e:	6863      	ldr	r3, [r4, #4]
 8028740:	6123      	str	r3, [r4, #16]
 8028742:	2300      	movs	r3, #0
 8028744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028748:	e7a8      	b.n	802869c <_printf_i+0x150>
 802874a:	6923      	ldr	r3, [r4, #16]
 802874c:	4632      	mov	r2, r6
 802874e:	4649      	mov	r1, r9
 8028750:	4640      	mov	r0, r8
 8028752:	47d0      	blx	sl
 8028754:	3001      	adds	r0, #1
 8028756:	d0ab      	beq.n	80286b0 <_printf_i+0x164>
 8028758:	6823      	ldr	r3, [r4, #0]
 802875a:	079b      	lsls	r3, r3, #30
 802875c:	d413      	bmi.n	8028786 <_printf_i+0x23a>
 802875e:	68e0      	ldr	r0, [r4, #12]
 8028760:	9b03      	ldr	r3, [sp, #12]
 8028762:	4298      	cmp	r0, r3
 8028764:	bfb8      	it	lt
 8028766:	4618      	movlt	r0, r3
 8028768:	e7a4      	b.n	80286b4 <_printf_i+0x168>
 802876a:	2301      	movs	r3, #1
 802876c:	4632      	mov	r2, r6
 802876e:	4649      	mov	r1, r9
 8028770:	4640      	mov	r0, r8
 8028772:	47d0      	blx	sl
 8028774:	3001      	adds	r0, #1
 8028776:	d09b      	beq.n	80286b0 <_printf_i+0x164>
 8028778:	3501      	adds	r5, #1
 802877a:	68e3      	ldr	r3, [r4, #12]
 802877c:	9903      	ldr	r1, [sp, #12]
 802877e:	1a5b      	subs	r3, r3, r1
 8028780:	42ab      	cmp	r3, r5
 8028782:	dcf2      	bgt.n	802876a <_printf_i+0x21e>
 8028784:	e7eb      	b.n	802875e <_printf_i+0x212>
 8028786:	2500      	movs	r5, #0
 8028788:	f104 0619 	add.w	r6, r4, #25
 802878c:	e7f5      	b.n	802877a <_printf_i+0x22e>
 802878e:	bf00      	nop
 8028790:	0802d6b1 	.word	0x0802d6b1
 8028794:	0802d6c2 	.word	0x0802d6c2

08028798 <srand>:
 8028798:	b538      	push	{r3, r4, r5, lr}
 802879a:	4b10      	ldr	r3, [pc, #64]	; (80287dc <srand+0x44>)
 802879c:	681d      	ldr	r5, [r3, #0]
 802879e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80287a0:	4604      	mov	r4, r0
 80287a2:	b9b3      	cbnz	r3, 80287d2 <srand+0x3a>
 80287a4:	2018      	movs	r0, #24
 80287a6:	f7ff fc39 	bl	802801c <malloc>
 80287aa:	4602      	mov	r2, r0
 80287ac:	63a8      	str	r0, [r5, #56]	; 0x38
 80287ae:	b920      	cbnz	r0, 80287ba <srand+0x22>
 80287b0:	4b0b      	ldr	r3, [pc, #44]	; (80287e0 <srand+0x48>)
 80287b2:	480c      	ldr	r0, [pc, #48]	; (80287e4 <srand+0x4c>)
 80287b4:	2142      	movs	r1, #66	; 0x42
 80287b6:	f7ff fbc3 	bl	8027f40 <__assert_func>
 80287ba:	490b      	ldr	r1, [pc, #44]	; (80287e8 <srand+0x50>)
 80287bc:	4b0b      	ldr	r3, [pc, #44]	; (80287ec <srand+0x54>)
 80287be:	e9c0 1300 	strd	r1, r3, [r0]
 80287c2:	4b0b      	ldr	r3, [pc, #44]	; (80287f0 <srand+0x58>)
 80287c4:	6083      	str	r3, [r0, #8]
 80287c6:	230b      	movs	r3, #11
 80287c8:	8183      	strh	r3, [r0, #12]
 80287ca:	2100      	movs	r1, #0
 80287cc:	2001      	movs	r0, #1
 80287ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80287d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80287d4:	2200      	movs	r2, #0
 80287d6:	611c      	str	r4, [r3, #16]
 80287d8:	615a      	str	r2, [r3, #20]
 80287da:	bd38      	pop	{r3, r4, r5, pc}
 80287dc:	20000078 	.word	0x20000078
 80287e0:	0802d6d8 	.word	0x0802d6d8
 80287e4:	0802d6ef 	.word	0x0802d6ef
 80287e8:	abcd330e 	.word	0xabcd330e
 80287ec:	e66d1234 	.word	0xe66d1234
 80287f0:	0005deec 	.word	0x0005deec

080287f4 <rand>:
 80287f4:	4b17      	ldr	r3, [pc, #92]	; (8028854 <rand+0x60>)
 80287f6:	b510      	push	{r4, lr}
 80287f8:	681c      	ldr	r4, [r3, #0]
 80287fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80287fc:	b9b3      	cbnz	r3, 802882c <rand+0x38>
 80287fe:	2018      	movs	r0, #24
 8028800:	f7ff fc0c 	bl	802801c <malloc>
 8028804:	63a0      	str	r0, [r4, #56]	; 0x38
 8028806:	b928      	cbnz	r0, 8028814 <rand+0x20>
 8028808:	4602      	mov	r2, r0
 802880a:	4b13      	ldr	r3, [pc, #76]	; (8028858 <rand+0x64>)
 802880c:	4813      	ldr	r0, [pc, #76]	; (802885c <rand+0x68>)
 802880e:	214e      	movs	r1, #78	; 0x4e
 8028810:	f7ff fb96 	bl	8027f40 <__assert_func>
 8028814:	4a12      	ldr	r2, [pc, #72]	; (8028860 <rand+0x6c>)
 8028816:	4b13      	ldr	r3, [pc, #76]	; (8028864 <rand+0x70>)
 8028818:	e9c0 2300 	strd	r2, r3, [r0]
 802881c:	4b12      	ldr	r3, [pc, #72]	; (8028868 <rand+0x74>)
 802881e:	6083      	str	r3, [r0, #8]
 8028820:	230b      	movs	r3, #11
 8028822:	8183      	strh	r3, [r0, #12]
 8028824:	2201      	movs	r2, #1
 8028826:	2300      	movs	r3, #0
 8028828:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802882c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802882e:	480f      	ldr	r0, [pc, #60]	; (802886c <rand+0x78>)
 8028830:	690a      	ldr	r2, [r1, #16]
 8028832:	694b      	ldr	r3, [r1, #20]
 8028834:	4c0e      	ldr	r4, [pc, #56]	; (8028870 <rand+0x7c>)
 8028836:	4350      	muls	r0, r2
 8028838:	fb04 0003 	mla	r0, r4, r3, r0
 802883c:	fba2 3404 	umull	r3, r4, r2, r4
 8028840:	1c5a      	adds	r2, r3, #1
 8028842:	4404      	add	r4, r0
 8028844:	f144 0000 	adc.w	r0, r4, #0
 8028848:	e9c1 2004 	strd	r2, r0, [r1, #16]
 802884c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8028850:	bd10      	pop	{r4, pc}
 8028852:	bf00      	nop
 8028854:	20000078 	.word	0x20000078
 8028858:	0802d6d8 	.word	0x0802d6d8
 802885c:	0802d6ef 	.word	0x0802d6ef
 8028860:	abcd330e 	.word	0xabcd330e
 8028864:	e66d1234 	.word	0xe66d1234
 8028868:	0005deec 	.word	0x0005deec
 802886c:	5851f42d 	.word	0x5851f42d
 8028870:	4c957f2d 	.word	0x4c957f2d

08028874 <_sbrk_r>:
 8028874:	b538      	push	{r3, r4, r5, lr}
 8028876:	4d06      	ldr	r5, [pc, #24]	; (8028890 <_sbrk_r+0x1c>)
 8028878:	2300      	movs	r3, #0
 802887a:	4604      	mov	r4, r0
 802887c:	4608      	mov	r0, r1
 802887e:	602b      	str	r3, [r5, #0]
 8028880:	f7d9 fe4a 	bl	8002518 <_sbrk>
 8028884:	1c43      	adds	r3, r0, #1
 8028886:	d102      	bne.n	802888e <_sbrk_r+0x1a>
 8028888:	682b      	ldr	r3, [r5, #0]
 802888a:	b103      	cbz	r3, 802888e <_sbrk_r+0x1a>
 802888c:	6023      	str	r3, [r4, #0]
 802888e:	bd38      	pop	{r3, r4, r5, pc}
 8028890:	20006d60 	.word	0x20006d60

08028894 <_raise_r>:
 8028894:	291f      	cmp	r1, #31
 8028896:	b538      	push	{r3, r4, r5, lr}
 8028898:	4604      	mov	r4, r0
 802889a:	460d      	mov	r5, r1
 802889c:	d904      	bls.n	80288a8 <_raise_r+0x14>
 802889e:	2316      	movs	r3, #22
 80288a0:	6003      	str	r3, [r0, #0]
 80288a2:	f04f 30ff 	mov.w	r0, #4294967295
 80288a6:	bd38      	pop	{r3, r4, r5, pc}
 80288a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80288aa:	b112      	cbz	r2, 80288b2 <_raise_r+0x1e>
 80288ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80288b0:	b94b      	cbnz	r3, 80288c6 <_raise_r+0x32>
 80288b2:	4620      	mov	r0, r4
 80288b4:	f000 f830 	bl	8028918 <_getpid_r>
 80288b8:	462a      	mov	r2, r5
 80288ba:	4601      	mov	r1, r0
 80288bc:	4620      	mov	r0, r4
 80288be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80288c2:	f000 b817 	b.w	80288f4 <_kill_r>
 80288c6:	2b01      	cmp	r3, #1
 80288c8:	d00a      	beq.n	80288e0 <_raise_r+0x4c>
 80288ca:	1c59      	adds	r1, r3, #1
 80288cc:	d103      	bne.n	80288d6 <_raise_r+0x42>
 80288ce:	2316      	movs	r3, #22
 80288d0:	6003      	str	r3, [r0, #0]
 80288d2:	2001      	movs	r0, #1
 80288d4:	e7e7      	b.n	80288a6 <_raise_r+0x12>
 80288d6:	2400      	movs	r4, #0
 80288d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80288dc:	4628      	mov	r0, r5
 80288de:	4798      	blx	r3
 80288e0:	2000      	movs	r0, #0
 80288e2:	e7e0      	b.n	80288a6 <_raise_r+0x12>

080288e4 <raise>:
 80288e4:	4b02      	ldr	r3, [pc, #8]	; (80288f0 <raise+0xc>)
 80288e6:	4601      	mov	r1, r0
 80288e8:	6818      	ldr	r0, [r3, #0]
 80288ea:	f7ff bfd3 	b.w	8028894 <_raise_r>
 80288ee:	bf00      	nop
 80288f0:	20000078 	.word	0x20000078

080288f4 <_kill_r>:
 80288f4:	b538      	push	{r3, r4, r5, lr}
 80288f6:	4d07      	ldr	r5, [pc, #28]	; (8028914 <_kill_r+0x20>)
 80288f8:	2300      	movs	r3, #0
 80288fa:	4604      	mov	r4, r0
 80288fc:	4608      	mov	r0, r1
 80288fe:	4611      	mov	r1, r2
 8028900:	602b      	str	r3, [r5, #0]
 8028902:	f7d9 fd81 	bl	8002408 <_kill>
 8028906:	1c43      	adds	r3, r0, #1
 8028908:	d102      	bne.n	8028910 <_kill_r+0x1c>
 802890a:	682b      	ldr	r3, [r5, #0]
 802890c:	b103      	cbz	r3, 8028910 <_kill_r+0x1c>
 802890e:	6023      	str	r3, [r4, #0]
 8028910:	bd38      	pop	{r3, r4, r5, pc}
 8028912:	bf00      	nop
 8028914:	20006d60 	.word	0x20006d60

08028918 <_getpid_r>:
 8028918:	f7d9 bd6e 	b.w	80023f8 <_getpid>

0802891c <__swbuf_r>:
 802891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802891e:	460e      	mov	r6, r1
 8028920:	4614      	mov	r4, r2
 8028922:	4605      	mov	r5, r0
 8028924:	b118      	cbz	r0, 802892e <__swbuf_r+0x12>
 8028926:	6983      	ldr	r3, [r0, #24]
 8028928:	b90b      	cbnz	r3, 802892e <__swbuf_r+0x12>
 802892a:	f000 fa33 	bl	8028d94 <__sinit>
 802892e:	4b21      	ldr	r3, [pc, #132]	; (80289b4 <__swbuf_r+0x98>)
 8028930:	429c      	cmp	r4, r3
 8028932:	d12b      	bne.n	802898c <__swbuf_r+0x70>
 8028934:	686c      	ldr	r4, [r5, #4]
 8028936:	69a3      	ldr	r3, [r4, #24]
 8028938:	60a3      	str	r3, [r4, #8]
 802893a:	89a3      	ldrh	r3, [r4, #12]
 802893c:	071a      	lsls	r2, r3, #28
 802893e:	d52f      	bpl.n	80289a0 <__swbuf_r+0x84>
 8028940:	6923      	ldr	r3, [r4, #16]
 8028942:	b36b      	cbz	r3, 80289a0 <__swbuf_r+0x84>
 8028944:	6923      	ldr	r3, [r4, #16]
 8028946:	6820      	ldr	r0, [r4, #0]
 8028948:	1ac0      	subs	r0, r0, r3
 802894a:	6963      	ldr	r3, [r4, #20]
 802894c:	b2f6      	uxtb	r6, r6
 802894e:	4283      	cmp	r3, r0
 8028950:	4637      	mov	r7, r6
 8028952:	dc04      	bgt.n	802895e <__swbuf_r+0x42>
 8028954:	4621      	mov	r1, r4
 8028956:	4628      	mov	r0, r5
 8028958:	f000 f988 	bl	8028c6c <_fflush_r>
 802895c:	bb30      	cbnz	r0, 80289ac <__swbuf_r+0x90>
 802895e:	68a3      	ldr	r3, [r4, #8]
 8028960:	3b01      	subs	r3, #1
 8028962:	60a3      	str	r3, [r4, #8]
 8028964:	6823      	ldr	r3, [r4, #0]
 8028966:	1c5a      	adds	r2, r3, #1
 8028968:	6022      	str	r2, [r4, #0]
 802896a:	701e      	strb	r6, [r3, #0]
 802896c:	6963      	ldr	r3, [r4, #20]
 802896e:	3001      	adds	r0, #1
 8028970:	4283      	cmp	r3, r0
 8028972:	d004      	beq.n	802897e <__swbuf_r+0x62>
 8028974:	89a3      	ldrh	r3, [r4, #12]
 8028976:	07db      	lsls	r3, r3, #31
 8028978:	d506      	bpl.n	8028988 <__swbuf_r+0x6c>
 802897a:	2e0a      	cmp	r6, #10
 802897c:	d104      	bne.n	8028988 <__swbuf_r+0x6c>
 802897e:	4621      	mov	r1, r4
 8028980:	4628      	mov	r0, r5
 8028982:	f000 f973 	bl	8028c6c <_fflush_r>
 8028986:	b988      	cbnz	r0, 80289ac <__swbuf_r+0x90>
 8028988:	4638      	mov	r0, r7
 802898a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802898c:	4b0a      	ldr	r3, [pc, #40]	; (80289b8 <__swbuf_r+0x9c>)
 802898e:	429c      	cmp	r4, r3
 8028990:	d101      	bne.n	8028996 <__swbuf_r+0x7a>
 8028992:	68ac      	ldr	r4, [r5, #8]
 8028994:	e7cf      	b.n	8028936 <__swbuf_r+0x1a>
 8028996:	4b09      	ldr	r3, [pc, #36]	; (80289bc <__swbuf_r+0xa0>)
 8028998:	429c      	cmp	r4, r3
 802899a:	bf08      	it	eq
 802899c:	68ec      	ldreq	r4, [r5, #12]
 802899e:	e7ca      	b.n	8028936 <__swbuf_r+0x1a>
 80289a0:	4621      	mov	r1, r4
 80289a2:	4628      	mov	r0, r5
 80289a4:	f000 f80c 	bl	80289c0 <__swsetup_r>
 80289a8:	2800      	cmp	r0, #0
 80289aa:	d0cb      	beq.n	8028944 <__swbuf_r+0x28>
 80289ac:	f04f 37ff 	mov.w	r7, #4294967295
 80289b0:	e7ea      	b.n	8028988 <__swbuf_r+0x6c>
 80289b2:	bf00      	nop
 80289b4:	0802d770 	.word	0x0802d770
 80289b8:	0802d790 	.word	0x0802d790
 80289bc:	0802d750 	.word	0x0802d750

080289c0 <__swsetup_r>:
 80289c0:	4b32      	ldr	r3, [pc, #200]	; (8028a8c <__swsetup_r+0xcc>)
 80289c2:	b570      	push	{r4, r5, r6, lr}
 80289c4:	681d      	ldr	r5, [r3, #0]
 80289c6:	4606      	mov	r6, r0
 80289c8:	460c      	mov	r4, r1
 80289ca:	b125      	cbz	r5, 80289d6 <__swsetup_r+0x16>
 80289cc:	69ab      	ldr	r3, [r5, #24]
 80289ce:	b913      	cbnz	r3, 80289d6 <__swsetup_r+0x16>
 80289d0:	4628      	mov	r0, r5
 80289d2:	f000 f9df 	bl	8028d94 <__sinit>
 80289d6:	4b2e      	ldr	r3, [pc, #184]	; (8028a90 <__swsetup_r+0xd0>)
 80289d8:	429c      	cmp	r4, r3
 80289da:	d10f      	bne.n	80289fc <__swsetup_r+0x3c>
 80289dc:	686c      	ldr	r4, [r5, #4]
 80289de:	89a3      	ldrh	r3, [r4, #12]
 80289e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80289e4:	0719      	lsls	r1, r3, #28
 80289e6:	d42c      	bmi.n	8028a42 <__swsetup_r+0x82>
 80289e8:	06dd      	lsls	r5, r3, #27
 80289ea:	d411      	bmi.n	8028a10 <__swsetup_r+0x50>
 80289ec:	2309      	movs	r3, #9
 80289ee:	6033      	str	r3, [r6, #0]
 80289f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80289f4:	81a3      	strh	r3, [r4, #12]
 80289f6:	f04f 30ff 	mov.w	r0, #4294967295
 80289fa:	e03e      	b.n	8028a7a <__swsetup_r+0xba>
 80289fc:	4b25      	ldr	r3, [pc, #148]	; (8028a94 <__swsetup_r+0xd4>)
 80289fe:	429c      	cmp	r4, r3
 8028a00:	d101      	bne.n	8028a06 <__swsetup_r+0x46>
 8028a02:	68ac      	ldr	r4, [r5, #8]
 8028a04:	e7eb      	b.n	80289de <__swsetup_r+0x1e>
 8028a06:	4b24      	ldr	r3, [pc, #144]	; (8028a98 <__swsetup_r+0xd8>)
 8028a08:	429c      	cmp	r4, r3
 8028a0a:	bf08      	it	eq
 8028a0c:	68ec      	ldreq	r4, [r5, #12]
 8028a0e:	e7e6      	b.n	80289de <__swsetup_r+0x1e>
 8028a10:	0758      	lsls	r0, r3, #29
 8028a12:	d512      	bpl.n	8028a3a <__swsetup_r+0x7a>
 8028a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028a16:	b141      	cbz	r1, 8028a2a <__swsetup_r+0x6a>
 8028a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028a1c:	4299      	cmp	r1, r3
 8028a1e:	d002      	beq.n	8028a26 <__swsetup_r+0x66>
 8028a20:	4630      	mov	r0, r6
 8028a22:	f7ff fb21 	bl	8028068 <_free_r>
 8028a26:	2300      	movs	r3, #0
 8028a28:	6363      	str	r3, [r4, #52]	; 0x34
 8028a2a:	89a3      	ldrh	r3, [r4, #12]
 8028a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028a30:	81a3      	strh	r3, [r4, #12]
 8028a32:	2300      	movs	r3, #0
 8028a34:	6063      	str	r3, [r4, #4]
 8028a36:	6923      	ldr	r3, [r4, #16]
 8028a38:	6023      	str	r3, [r4, #0]
 8028a3a:	89a3      	ldrh	r3, [r4, #12]
 8028a3c:	f043 0308 	orr.w	r3, r3, #8
 8028a40:	81a3      	strh	r3, [r4, #12]
 8028a42:	6923      	ldr	r3, [r4, #16]
 8028a44:	b94b      	cbnz	r3, 8028a5a <__swsetup_r+0x9a>
 8028a46:	89a3      	ldrh	r3, [r4, #12]
 8028a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028a50:	d003      	beq.n	8028a5a <__swsetup_r+0x9a>
 8028a52:	4621      	mov	r1, r4
 8028a54:	4630      	mov	r0, r6
 8028a56:	f000 fa63 	bl	8028f20 <__smakebuf_r>
 8028a5a:	89a0      	ldrh	r0, [r4, #12]
 8028a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028a60:	f010 0301 	ands.w	r3, r0, #1
 8028a64:	d00a      	beq.n	8028a7c <__swsetup_r+0xbc>
 8028a66:	2300      	movs	r3, #0
 8028a68:	60a3      	str	r3, [r4, #8]
 8028a6a:	6963      	ldr	r3, [r4, #20]
 8028a6c:	425b      	negs	r3, r3
 8028a6e:	61a3      	str	r3, [r4, #24]
 8028a70:	6923      	ldr	r3, [r4, #16]
 8028a72:	b943      	cbnz	r3, 8028a86 <__swsetup_r+0xc6>
 8028a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028a78:	d1ba      	bne.n	80289f0 <__swsetup_r+0x30>
 8028a7a:	bd70      	pop	{r4, r5, r6, pc}
 8028a7c:	0781      	lsls	r1, r0, #30
 8028a7e:	bf58      	it	pl
 8028a80:	6963      	ldrpl	r3, [r4, #20]
 8028a82:	60a3      	str	r3, [r4, #8]
 8028a84:	e7f4      	b.n	8028a70 <__swsetup_r+0xb0>
 8028a86:	2000      	movs	r0, #0
 8028a88:	e7f7      	b.n	8028a7a <__swsetup_r+0xba>
 8028a8a:	bf00      	nop
 8028a8c:	20000078 	.word	0x20000078
 8028a90:	0802d770 	.word	0x0802d770
 8028a94:	0802d790 	.word	0x0802d790
 8028a98:	0802d750 	.word	0x0802d750

08028a9c <__register_exitproc>:
 8028a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028aa0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8028b5c <__register_exitproc+0xc0>
 8028aa4:	4606      	mov	r6, r0
 8028aa6:	f8d8 0000 	ldr.w	r0, [r8]
 8028aaa:	461f      	mov	r7, r3
 8028aac:	460d      	mov	r5, r1
 8028aae:	4691      	mov	r9, r2
 8028ab0:	f000 fa0e 	bl	8028ed0 <__retarget_lock_acquire_recursive>
 8028ab4:	4b25      	ldr	r3, [pc, #148]	; (8028b4c <__register_exitproc+0xb0>)
 8028ab6:	681c      	ldr	r4, [r3, #0]
 8028ab8:	b934      	cbnz	r4, 8028ac8 <__register_exitproc+0x2c>
 8028aba:	4c25      	ldr	r4, [pc, #148]	; (8028b50 <__register_exitproc+0xb4>)
 8028abc:	601c      	str	r4, [r3, #0]
 8028abe:	4b25      	ldr	r3, [pc, #148]	; (8028b54 <__register_exitproc+0xb8>)
 8028ac0:	b113      	cbz	r3, 8028ac8 <__register_exitproc+0x2c>
 8028ac2:	681b      	ldr	r3, [r3, #0]
 8028ac4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028ac8:	6863      	ldr	r3, [r4, #4]
 8028aca:	2b1f      	cmp	r3, #31
 8028acc:	dd07      	ble.n	8028ade <__register_exitproc+0x42>
 8028ace:	f8d8 0000 	ldr.w	r0, [r8]
 8028ad2:	f000 f9ff 	bl	8028ed4 <__retarget_lock_release_recursive>
 8028ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8028ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028ade:	b34e      	cbz	r6, 8028b34 <__register_exitproc+0x98>
 8028ae0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028ae4:	b988      	cbnz	r0, 8028b0a <__register_exitproc+0x6e>
 8028ae6:	4b1c      	ldr	r3, [pc, #112]	; (8028b58 <__register_exitproc+0xbc>)
 8028ae8:	b923      	cbnz	r3, 8028af4 <__register_exitproc+0x58>
 8028aea:	f8d8 0000 	ldr.w	r0, [r8]
 8028aee:	f000 f9f0 	bl	8028ed2 <__retarget_lock_release>
 8028af2:	e7f0      	b.n	8028ad6 <__register_exitproc+0x3a>
 8028af4:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028af8:	f7ff fa90 	bl	802801c <malloc>
 8028afc:	2800      	cmp	r0, #0
 8028afe:	d0f4      	beq.n	8028aea <__register_exitproc+0x4e>
 8028b00:	2300      	movs	r3, #0
 8028b02:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028b06:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028b0a:	6863      	ldr	r3, [r4, #4]
 8028b0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028b10:	2201      	movs	r2, #1
 8028b12:	409a      	lsls	r2, r3
 8028b14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028b18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028b1c:	4313      	orrs	r3, r2
 8028b1e:	2e02      	cmp	r6, #2
 8028b20:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028b24:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028b28:	bf02      	ittt	eq
 8028b2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8028b2e:	431a      	orreq	r2, r3
 8028b30:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8028b34:	6863      	ldr	r3, [r4, #4]
 8028b36:	f8d8 0000 	ldr.w	r0, [r8]
 8028b3a:	1c5a      	adds	r2, r3, #1
 8028b3c:	3302      	adds	r3, #2
 8028b3e:	6062      	str	r2, [r4, #4]
 8028b40:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028b44:	f000 f9c6 	bl	8028ed4 <__retarget_lock_release_recursive>
 8028b48:	2000      	movs	r0, #0
 8028b4a:	e7c6      	b.n	8028ada <__register_exitproc+0x3e>
 8028b4c:	20006390 	.word	0x20006390
 8028b50:	20006304 	.word	0x20006304
 8028b54:	0802d6d4 	.word	0x0802d6d4
 8028b58:	0802801d 	.word	0x0802801d
 8028b5c:	200000dc 	.word	0x200000dc

08028b60 <__sflush_r>:
 8028b60:	898a      	ldrh	r2, [r1, #12]
 8028b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b66:	4605      	mov	r5, r0
 8028b68:	0710      	lsls	r0, r2, #28
 8028b6a:	460c      	mov	r4, r1
 8028b6c:	d458      	bmi.n	8028c20 <__sflush_r+0xc0>
 8028b6e:	684b      	ldr	r3, [r1, #4]
 8028b70:	2b00      	cmp	r3, #0
 8028b72:	dc05      	bgt.n	8028b80 <__sflush_r+0x20>
 8028b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028b76:	2b00      	cmp	r3, #0
 8028b78:	dc02      	bgt.n	8028b80 <__sflush_r+0x20>
 8028b7a:	2000      	movs	r0, #0
 8028b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028b82:	2e00      	cmp	r6, #0
 8028b84:	d0f9      	beq.n	8028b7a <__sflush_r+0x1a>
 8028b86:	2300      	movs	r3, #0
 8028b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028b8c:	682f      	ldr	r7, [r5, #0]
 8028b8e:	602b      	str	r3, [r5, #0]
 8028b90:	d032      	beq.n	8028bf8 <__sflush_r+0x98>
 8028b92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028b94:	89a3      	ldrh	r3, [r4, #12]
 8028b96:	075a      	lsls	r2, r3, #29
 8028b98:	d505      	bpl.n	8028ba6 <__sflush_r+0x46>
 8028b9a:	6863      	ldr	r3, [r4, #4]
 8028b9c:	1ac0      	subs	r0, r0, r3
 8028b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028ba0:	b10b      	cbz	r3, 8028ba6 <__sflush_r+0x46>
 8028ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028ba4:	1ac0      	subs	r0, r0, r3
 8028ba6:	2300      	movs	r3, #0
 8028ba8:	4602      	mov	r2, r0
 8028baa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028bac:	6a21      	ldr	r1, [r4, #32]
 8028bae:	4628      	mov	r0, r5
 8028bb0:	47b0      	blx	r6
 8028bb2:	1c43      	adds	r3, r0, #1
 8028bb4:	89a3      	ldrh	r3, [r4, #12]
 8028bb6:	d106      	bne.n	8028bc6 <__sflush_r+0x66>
 8028bb8:	6829      	ldr	r1, [r5, #0]
 8028bba:	291d      	cmp	r1, #29
 8028bbc:	d82c      	bhi.n	8028c18 <__sflush_r+0xb8>
 8028bbe:	4a2a      	ldr	r2, [pc, #168]	; (8028c68 <__sflush_r+0x108>)
 8028bc0:	40ca      	lsrs	r2, r1
 8028bc2:	07d6      	lsls	r6, r2, #31
 8028bc4:	d528      	bpl.n	8028c18 <__sflush_r+0xb8>
 8028bc6:	2200      	movs	r2, #0
 8028bc8:	6062      	str	r2, [r4, #4]
 8028bca:	04d9      	lsls	r1, r3, #19
 8028bcc:	6922      	ldr	r2, [r4, #16]
 8028bce:	6022      	str	r2, [r4, #0]
 8028bd0:	d504      	bpl.n	8028bdc <__sflush_r+0x7c>
 8028bd2:	1c42      	adds	r2, r0, #1
 8028bd4:	d101      	bne.n	8028bda <__sflush_r+0x7a>
 8028bd6:	682b      	ldr	r3, [r5, #0]
 8028bd8:	b903      	cbnz	r3, 8028bdc <__sflush_r+0x7c>
 8028bda:	6560      	str	r0, [r4, #84]	; 0x54
 8028bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028bde:	602f      	str	r7, [r5, #0]
 8028be0:	2900      	cmp	r1, #0
 8028be2:	d0ca      	beq.n	8028b7a <__sflush_r+0x1a>
 8028be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028be8:	4299      	cmp	r1, r3
 8028bea:	d002      	beq.n	8028bf2 <__sflush_r+0x92>
 8028bec:	4628      	mov	r0, r5
 8028bee:	f7ff fa3b 	bl	8028068 <_free_r>
 8028bf2:	2000      	movs	r0, #0
 8028bf4:	6360      	str	r0, [r4, #52]	; 0x34
 8028bf6:	e7c1      	b.n	8028b7c <__sflush_r+0x1c>
 8028bf8:	6a21      	ldr	r1, [r4, #32]
 8028bfa:	2301      	movs	r3, #1
 8028bfc:	4628      	mov	r0, r5
 8028bfe:	47b0      	blx	r6
 8028c00:	1c41      	adds	r1, r0, #1
 8028c02:	d1c7      	bne.n	8028b94 <__sflush_r+0x34>
 8028c04:	682b      	ldr	r3, [r5, #0]
 8028c06:	2b00      	cmp	r3, #0
 8028c08:	d0c4      	beq.n	8028b94 <__sflush_r+0x34>
 8028c0a:	2b1d      	cmp	r3, #29
 8028c0c:	d001      	beq.n	8028c12 <__sflush_r+0xb2>
 8028c0e:	2b16      	cmp	r3, #22
 8028c10:	d101      	bne.n	8028c16 <__sflush_r+0xb6>
 8028c12:	602f      	str	r7, [r5, #0]
 8028c14:	e7b1      	b.n	8028b7a <__sflush_r+0x1a>
 8028c16:	89a3      	ldrh	r3, [r4, #12]
 8028c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028c1c:	81a3      	strh	r3, [r4, #12]
 8028c1e:	e7ad      	b.n	8028b7c <__sflush_r+0x1c>
 8028c20:	690f      	ldr	r7, [r1, #16]
 8028c22:	2f00      	cmp	r7, #0
 8028c24:	d0a9      	beq.n	8028b7a <__sflush_r+0x1a>
 8028c26:	0793      	lsls	r3, r2, #30
 8028c28:	680e      	ldr	r6, [r1, #0]
 8028c2a:	bf08      	it	eq
 8028c2c:	694b      	ldreq	r3, [r1, #20]
 8028c2e:	600f      	str	r7, [r1, #0]
 8028c30:	bf18      	it	ne
 8028c32:	2300      	movne	r3, #0
 8028c34:	eba6 0807 	sub.w	r8, r6, r7
 8028c38:	608b      	str	r3, [r1, #8]
 8028c3a:	f1b8 0f00 	cmp.w	r8, #0
 8028c3e:	dd9c      	ble.n	8028b7a <__sflush_r+0x1a>
 8028c40:	6a21      	ldr	r1, [r4, #32]
 8028c42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028c44:	4643      	mov	r3, r8
 8028c46:	463a      	mov	r2, r7
 8028c48:	4628      	mov	r0, r5
 8028c4a:	47b0      	blx	r6
 8028c4c:	2800      	cmp	r0, #0
 8028c4e:	dc06      	bgt.n	8028c5e <__sflush_r+0xfe>
 8028c50:	89a3      	ldrh	r3, [r4, #12]
 8028c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028c56:	81a3      	strh	r3, [r4, #12]
 8028c58:	f04f 30ff 	mov.w	r0, #4294967295
 8028c5c:	e78e      	b.n	8028b7c <__sflush_r+0x1c>
 8028c5e:	4407      	add	r7, r0
 8028c60:	eba8 0800 	sub.w	r8, r8, r0
 8028c64:	e7e9      	b.n	8028c3a <__sflush_r+0xda>
 8028c66:	bf00      	nop
 8028c68:	20400001 	.word	0x20400001

08028c6c <_fflush_r>:
 8028c6c:	b538      	push	{r3, r4, r5, lr}
 8028c6e:	690b      	ldr	r3, [r1, #16]
 8028c70:	4605      	mov	r5, r0
 8028c72:	460c      	mov	r4, r1
 8028c74:	b913      	cbnz	r3, 8028c7c <_fflush_r+0x10>
 8028c76:	2500      	movs	r5, #0
 8028c78:	4628      	mov	r0, r5
 8028c7a:	bd38      	pop	{r3, r4, r5, pc}
 8028c7c:	b118      	cbz	r0, 8028c86 <_fflush_r+0x1a>
 8028c7e:	6983      	ldr	r3, [r0, #24]
 8028c80:	b90b      	cbnz	r3, 8028c86 <_fflush_r+0x1a>
 8028c82:	f000 f887 	bl	8028d94 <__sinit>
 8028c86:	4b14      	ldr	r3, [pc, #80]	; (8028cd8 <_fflush_r+0x6c>)
 8028c88:	429c      	cmp	r4, r3
 8028c8a:	d11b      	bne.n	8028cc4 <_fflush_r+0x58>
 8028c8c:	686c      	ldr	r4, [r5, #4]
 8028c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028c92:	2b00      	cmp	r3, #0
 8028c94:	d0ef      	beq.n	8028c76 <_fflush_r+0xa>
 8028c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028c98:	07d0      	lsls	r0, r2, #31
 8028c9a:	d404      	bmi.n	8028ca6 <_fflush_r+0x3a>
 8028c9c:	0599      	lsls	r1, r3, #22
 8028c9e:	d402      	bmi.n	8028ca6 <_fflush_r+0x3a>
 8028ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028ca2:	f000 f915 	bl	8028ed0 <__retarget_lock_acquire_recursive>
 8028ca6:	4628      	mov	r0, r5
 8028ca8:	4621      	mov	r1, r4
 8028caa:	f7ff ff59 	bl	8028b60 <__sflush_r>
 8028cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028cb0:	07da      	lsls	r2, r3, #31
 8028cb2:	4605      	mov	r5, r0
 8028cb4:	d4e0      	bmi.n	8028c78 <_fflush_r+0xc>
 8028cb6:	89a3      	ldrh	r3, [r4, #12]
 8028cb8:	059b      	lsls	r3, r3, #22
 8028cba:	d4dd      	bmi.n	8028c78 <_fflush_r+0xc>
 8028cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028cbe:	f000 f909 	bl	8028ed4 <__retarget_lock_release_recursive>
 8028cc2:	e7d9      	b.n	8028c78 <_fflush_r+0xc>
 8028cc4:	4b05      	ldr	r3, [pc, #20]	; (8028cdc <_fflush_r+0x70>)
 8028cc6:	429c      	cmp	r4, r3
 8028cc8:	d101      	bne.n	8028cce <_fflush_r+0x62>
 8028cca:	68ac      	ldr	r4, [r5, #8]
 8028ccc:	e7df      	b.n	8028c8e <_fflush_r+0x22>
 8028cce:	4b04      	ldr	r3, [pc, #16]	; (8028ce0 <_fflush_r+0x74>)
 8028cd0:	429c      	cmp	r4, r3
 8028cd2:	bf08      	it	eq
 8028cd4:	68ec      	ldreq	r4, [r5, #12]
 8028cd6:	e7da      	b.n	8028c8e <_fflush_r+0x22>
 8028cd8:	0802d770 	.word	0x0802d770
 8028cdc:	0802d790 	.word	0x0802d790
 8028ce0:	0802d750 	.word	0x0802d750

08028ce4 <std>:
 8028ce4:	2300      	movs	r3, #0
 8028ce6:	b510      	push	{r4, lr}
 8028ce8:	4604      	mov	r4, r0
 8028cea:	e9c0 3300 	strd	r3, r3, [r0]
 8028cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028cf2:	6083      	str	r3, [r0, #8]
 8028cf4:	8181      	strh	r1, [r0, #12]
 8028cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8028cf8:	81c2      	strh	r2, [r0, #14]
 8028cfa:	6183      	str	r3, [r0, #24]
 8028cfc:	4619      	mov	r1, r3
 8028cfe:	2208      	movs	r2, #8
 8028d00:	305c      	adds	r0, #92	; 0x5c
 8028d02:	f7ff f9a9 	bl	8028058 <memset>
 8028d06:	4b05      	ldr	r3, [pc, #20]	; (8028d1c <std+0x38>)
 8028d08:	6263      	str	r3, [r4, #36]	; 0x24
 8028d0a:	4b05      	ldr	r3, [pc, #20]	; (8028d20 <std+0x3c>)
 8028d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8028d0e:	4b05      	ldr	r3, [pc, #20]	; (8028d24 <std+0x40>)
 8028d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028d12:	4b05      	ldr	r3, [pc, #20]	; (8028d28 <std+0x44>)
 8028d14:	6224      	str	r4, [r4, #32]
 8028d16:	6323      	str	r3, [r4, #48]	; 0x30
 8028d18:	bd10      	pop	{r4, pc}
 8028d1a:	bf00      	nop
 8028d1c:	08028fb9 	.word	0x08028fb9
 8028d20:	08028fdb 	.word	0x08028fdb
 8028d24:	08029013 	.word	0x08029013
 8028d28:	08029037 	.word	0x08029037

08028d2c <_cleanup_r>:
 8028d2c:	4901      	ldr	r1, [pc, #4]	; (8028d34 <_cleanup_r+0x8>)
 8028d2e:	f000 b8af 	b.w	8028e90 <_fwalk_reent>
 8028d32:	bf00      	nop
 8028d34:	08028c6d 	.word	0x08028c6d

08028d38 <__sfmoreglue>:
 8028d38:	b570      	push	{r4, r5, r6, lr}
 8028d3a:	1e4a      	subs	r2, r1, #1
 8028d3c:	2568      	movs	r5, #104	; 0x68
 8028d3e:	4355      	muls	r5, r2
 8028d40:	460e      	mov	r6, r1
 8028d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028d46:	f7ff f9df 	bl	8028108 <_malloc_r>
 8028d4a:	4604      	mov	r4, r0
 8028d4c:	b140      	cbz	r0, 8028d60 <__sfmoreglue+0x28>
 8028d4e:	2100      	movs	r1, #0
 8028d50:	e9c0 1600 	strd	r1, r6, [r0]
 8028d54:	300c      	adds	r0, #12
 8028d56:	60a0      	str	r0, [r4, #8]
 8028d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028d5c:	f7ff f97c 	bl	8028058 <memset>
 8028d60:	4620      	mov	r0, r4
 8028d62:	bd70      	pop	{r4, r5, r6, pc}

08028d64 <__sfp_lock_acquire>:
 8028d64:	4801      	ldr	r0, [pc, #4]	; (8028d6c <__sfp_lock_acquire+0x8>)
 8028d66:	f000 b8b3 	b.w	8028ed0 <__retarget_lock_acquire_recursive>
 8028d6a:	bf00      	nop
 8028d6c:	20006d5c 	.word	0x20006d5c

08028d70 <__sfp_lock_release>:
 8028d70:	4801      	ldr	r0, [pc, #4]	; (8028d78 <__sfp_lock_release+0x8>)
 8028d72:	f000 b8af 	b.w	8028ed4 <__retarget_lock_release_recursive>
 8028d76:	bf00      	nop
 8028d78:	20006d5c 	.word	0x20006d5c

08028d7c <__sinit_lock_acquire>:
 8028d7c:	4801      	ldr	r0, [pc, #4]	; (8028d84 <__sinit_lock_acquire+0x8>)
 8028d7e:	f000 b8a7 	b.w	8028ed0 <__retarget_lock_acquire_recursive>
 8028d82:	bf00      	nop
 8028d84:	20006d57 	.word	0x20006d57

08028d88 <__sinit_lock_release>:
 8028d88:	4801      	ldr	r0, [pc, #4]	; (8028d90 <__sinit_lock_release+0x8>)
 8028d8a:	f000 b8a3 	b.w	8028ed4 <__retarget_lock_release_recursive>
 8028d8e:	bf00      	nop
 8028d90:	20006d57 	.word	0x20006d57

08028d94 <__sinit>:
 8028d94:	b510      	push	{r4, lr}
 8028d96:	4604      	mov	r4, r0
 8028d98:	f7ff fff0 	bl	8028d7c <__sinit_lock_acquire>
 8028d9c:	69a3      	ldr	r3, [r4, #24]
 8028d9e:	b11b      	cbz	r3, 8028da8 <__sinit+0x14>
 8028da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028da4:	f7ff bff0 	b.w	8028d88 <__sinit_lock_release>
 8028da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8028dac:	6523      	str	r3, [r4, #80]	; 0x50
 8028dae:	4b13      	ldr	r3, [pc, #76]	; (8028dfc <__sinit+0x68>)
 8028db0:	4a13      	ldr	r2, [pc, #76]	; (8028e00 <__sinit+0x6c>)
 8028db2:	681b      	ldr	r3, [r3, #0]
 8028db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8028db6:	42a3      	cmp	r3, r4
 8028db8:	bf04      	itt	eq
 8028dba:	2301      	moveq	r3, #1
 8028dbc:	61a3      	streq	r3, [r4, #24]
 8028dbe:	4620      	mov	r0, r4
 8028dc0:	f000 f820 	bl	8028e04 <__sfp>
 8028dc4:	6060      	str	r0, [r4, #4]
 8028dc6:	4620      	mov	r0, r4
 8028dc8:	f000 f81c 	bl	8028e04 <__sfp>
 8028dcc:	60a0      	str	r0, [r4, #8]
 8028dce:	4620      	mov	r0, r4
 8028dd0:	f000 f818 	bl	8028e04 <__sfp>
 8028dd4:	2200      	movs	r2, #0
 8028dd6:	60e0      	str	r0, [r4, #12]
 8028dd8:	2104      	movs	r1, #4
 8028dda:	6860      	ldr	r0, [r4, #4]
 8028ddc:	f7ff ff82 	bl	8028ce4 <std>
 8028de0:	68a0      	ldr	r0, [r4, #8]
 8028de2:	2201      	movs	r2, #1
 8028de4:	2109      	movs	r1, #9
 8028de6:	f7ff ff7d 	bl	8028ce4 <std>
 8028dea:	68e0      	ldr	r0, [r4, #12]
 8028dec:	2202      	movs	r2, #2
 8028dee:	2112      	movs	r1, #18
 8028df0:	f7ff ff78 	bl	8028ce4 <std>
 8028df4:	2301      	movs	r3, #1
 8028df6:	61a3      	str	r3, [r4, #24]
 8028df8:	e7d2      	b.n	8028da0 <__sinit+0xc>
 8028dfa:	bf00      	nop
 8028dfc:	0802d69c 	.word	0x0802d69c
 8028e00:	08028d2d 	.word	0x08028d2d

08028e04 <__sfp>:
 8028e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e06:	4607      	mov	r7, r0
 8028e08:	f7ff ffac 	bl	8028d64 <__sfp_lock_acquire>
 8028e0c:	4b1e      	ldr	r3, [pc, #120]	; (8028e88 <__sfp+0x84>)
 8028e0e:	681e      	ldr	r6, [r3, #0]
 8028e10:	69b3      	ldr	r3, [r6, #24]
 8028e12:	b913      	cbnz	r3, 8028e1a <__sfp+0x16>
 8028e14:	4630      	mov	r0, r6
 8028e16:	f7ff ffbd 	bl	8028d94 <__sinit>
 8028e1a:	3648      	adds	r6, #72	; 0x48
 8028e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028e20:	3b01      	subs	r3, #1
 8028e22:	d503      	bpl.n	8028e2c <__sfp+0x28>
 8028e24:	6833      	ldr	r3, [r6, #0]
 8028e26:	b30b      	cbz	r3, 8028e6c <__sfp+0x68>
 8028e28:	6836      	ldr	r6, [r6, #0]
 8028e2a:	e7f7      	b.n	8028e1c <__sfp+0x18>
 8028e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028e30:	b9d5      	cbnz	r5, 8028e68 <__sfp+0x64>
 8028e32:	4b16      	ldr	r3, [pc, #88]	; (8028e8c <__sfp+0x88>)
 8028e34:	60e3      	str	r3, [r4, #12]
 8028e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8028e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8028e3c:	f000 f847 	bl	8028ece <__retarget_lock_init_recursive>
 8028e40:	f7ff ff96 	bl	8028d70 <__sfp_lock_release>
 8028e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8028e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8028e4c:	6025      	str	r5, [r4, #0]
 8028e4e:	61a5      	str	r5, [r4, #24]
 8028e50:	2208      	movs	r2, #8
 8028e52:	4629      	mov	r1, r5
 8028e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028e58:	f7ff f8fe 	bl	8028058 <memset>
 8028e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8028e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028e64:	4620      	mov	r0, r4
 8028e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028e68:	3468      	adds	r4, #104	; 0x68
 8028e6a:	e7d9      	b.n	8028e20 <__sfp+0x1c>
 8028e6c:	2104      	movs	r1, #4
 8028e6e:	4638      	mov	r0, r7
 8028e70:	f7ff ff62 	bl	8028d38 <__sfmoreglue>
 8028e74:	4604      	mov	r4, r0
 8028e76:	6030      	str	r0, [r6, #0]
 8028e78:	2800      	cmp	r0, #0
 8028e7a:	d1d5      	bne.n	8028e28 <__sfp+0x24>
 8028e7c:	f7ff ff78 	bl	8028d70 <__sfp_lock_release>
 8028e80:	230c      	movs	r3, #12
 8028e82:	603b      	str	r3, [r7, #0]
 8028e84:	e7ee      	b.n	8028e64 <__sfp+0x60>
 8028e86:	bf00      	nop
 8028e88:	0802d69c 	.word	0x0802d69c
 8028e8c:	ffff0001 	.word	0xffff0001

08028e90 <_fwalk_reent>:
 8028e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028e94:	4606      	mov	r6, r0
 8028e96:	4688      	mov	r8, r1
 8028e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8028e9c:	2700      	movs	r7, #0
 8028e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8028ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8028ea6:	d505      	bpl.n	8028eb4 <_fwalk_reent+0x24>
 8028ea8:	6824      	ldr	r4, [r4, #0]
 8028eaa:	2c00      	cmp	r4, #0
 8028eac:	d1f7      	bne.n	8028e9e <_fwalk_reent+0xe>
 8028eae:	4638      	mov	r0, r7
 8028eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028eb4:	89ab      	ldrh	r3, [r5, #12]
 8028eb6:	2b01      	cmp	r3, #1
 8028eb8:	d907      	bls.n	8028eca <_fwalk_reent+0x3a>
 8028eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028ebe:	3301      	adds	r3, #1
 8028ec0:	d003      	beq.n	8028eca <_fwalk_reent+0x3a>
 8028ec2:	4629      	mov	r1, r5
 8028ec4:	4630      	mov	r0, r6
 8028ec6:	47c0      	blx	r8
 8028ec8:	4307      	orrs	r7, r0
 8028eca:	3568      	adds	r5, #104	; 0x68
 8028ecc:	e7e9      	b.n	8028ea2 <_fwalk_reent+0x12>

08028ece <__retarget_lock_init_recursive>:
 8028ece:	4770      	bx	lr

08028ed0 <__retarget_lock_acquire_recursive>:
 8028ed0:	4770      	bx	lr

08028ed2 <__retarget_lock_release>:
 8028ed2:	4770      	bx	lr

08028ed4 <__retarget_lock_release_recursive>:
 8028ed4:	4770      	bx	lr

08028ed6 <__swhatbuf_r>:
 8028ed6:	b570      	push	{r4, r5, r6, lr}
 8028ed8:	460e      	mov	r6, r1
 8028eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028ede:	2900      	cmp	r1, #0
 8028ee0:	b096      	sub	sp, #88	; 0x58
 8028ee2:	4614      	mov	r4, r2
 8028ee4:	461d      	mov	r5, r3
 8028ee6:	da07      	bge.n	8028ef8 <__swhatbuf_r+0x22>
 8028ee8:	2300      	movs	r3, #0
 8028eea:	602b      	str	r3, [r5, #0]
 8028eec:	89b3      	ldrh	r3, [r6, #12]
 8028eee:	061a      	lsls	r2, r3, #24
 8028ef0:	d410      	bmi.n	8028f14 <__swhatbuf_r+0x3e>
 8028ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028ef6:	e00e      	b.n	8028f16 <__swhatbuf_r+0x40>
 8028ef8:	466a      	mov	r2, sp
 8028efa:	f000 f8c3 	bl	8029084 <_fstat_r>
 8028efe:	2800      	cmp	r0, #0
 8028f00:	dbf2      	blt.n	8028ee8 <__swhatbuf_r+0x12>
 8028f02:	9a01      	ldr	r2, [sp, #4]
 8028f04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028f08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028f0c:	425a      	negs	r2, r3
 8028f0e:	415a      	adcs	r2, r3
 8028f10:	602a      	str	r2, [r5, #0]
 8028f12:	e7ee      	b.n	8028ef2 <__swhatbuf_r+0x1c>
 8028f14:	2340      	movs	r3, #64	; 0x40
 8028f16:	2000      	movs	r0, #0
 8028f18:	6023      	str	r3, [r4, #0]
 8028f1a:	b016      	add	sp, #88	; 0x58
 8028f1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08028f20 <__smakebuf_r>:
 8028f20:	898b      	ldrh	r3, [r1, #12]
 8028f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028f24:	079d      	lsls	r5, r3, #30
 8028f26:	4606      	mov	r6, r0
 8028f28:	460c      	mov	r4, r1
 8028f2a:	d507      	bpl.n	8028f3c <__smakebuf_r+0x1c>
 8028f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028f30:	6023      	str	r3, [r4, #0]
 8028f32:	6123      	str	r3, [r4, #16]
 8028f34:	2301      	movs	r3, #1
 8028f36:	6163      	str	r3, [r4, #20]
 8028f38:	b002      	add	sp, #8
 8028f3a:	bd70      	pop	{r4, r5, r6, pc}
 8028f3c:	ab01      	add	r3, sp, #4
 8028f3e:	466a      	mov	r2, sp
 8028f40:	f7ff ffc9 	bl	8028ed6 <__swhatbuf_r>
 8028f44:	9900      	ldr	r1, [sp, #0]
 8028f46:	4605      	mov	r5, r0
 8028f48:	4630      	mov	r0, r6
 8028f4a:	f7ff f8dd 	bl	8028108 <_malloc_r>
 8028f4e:	b948      	cbnz	r0, 8028f64 <__smakebuf_r+0x44>
 8028f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f54:	059a      	lsls	r2, r3, #22
 8028f56:	d4ef      	bmi.n	8028f38 <__smakebuf_r+0x18>
 8028f58:	f023 0303 	bic.w	r3, r3, #3
 8028f5c:	f043 0302 	orr.w	r3, r3, #2
 8028f60:	81a3      	strh	r3, [r4, #12]
 8028f62:	e7e3      	b.n	8028f2c <__smakebuf_r+0xc>
 8028f64:	4b0d      	ldr	r3, [pc, #52]	; (8028f9c <__smakebuf_r+0x7c>)
 8028f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8028f68:	89a3      	ldrh	r3, [r4, #12]
 8028f6a:	6020      	str	r0, [r4, #0]
 8028f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028f70:	81a3      	strh	r3, [r4, #12]
 8028f72:	9b00      	ldr	r3, [sp, #0]
 8028f74:	6163      	str	r3, [r4, #20]
 8028f76:	9b01      	ldr	r3, [sp, #4]
 8028f78:	6120      	str	r0, [r4, #16]
 8028f7a:	b15b      	cbz	r3, 8028f94 <__smakebuf_r+0x74>
 8028f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028f80:	4630      	mov	r0, r6
 8028f82:	f000 f891 	bl	80290a8 <_isatty_r>
 8028f86:	b128      	cbz	r0, 8028f94 <__smakebuf_r+0x74>
 8028f88:	89a3      	ldrh	r3, [r4, #12]
 8028f8a:	f023 0303 	bic.w	r3, r3, #3
 8028f8e:	f043 0301 	orr.w	r3, r3, #1
 8028f92:	81a3      	strh	r3, [r4, #12]
 8028f94:	89a0      	ldrh	r0, [r4, #12]
 8028f96:	4305      	orrs	r5, r0
 8028f98:	81a5      	strh	r5, [r4, #12]
 8028f9a:	e7cd      	b.n	8028f38 <__smakebuf_r+0x18>
 8028f9c:	08028d2d 	.word	0x08028d2d

08028fa0 <__malloc_lock>:
 8028fa0:	4801      	ldr	r0, [pc, #4]	; (8028fa8 <__malloc_lock+0x8>)
 8028fa2:	f7ff bf95 	b.w	8028ed0 <__retarget_lock_acquire_recursive>
 8028fa6:	bf00      	nop
 8028fa8:	20006d58 	.word	0x20006d58

08028fac <__malloc_unlock>:
 8028fac:	4801      	ldr	r0, [pc, #4]	; (8028fb4 <__malloc_unlock+0x8>)
 8028fae:	f7ff bf91 	b.w	8028ed4 <__retarget_lock_release_recursive>
 8028fb2:	bf00      	nop
 8028fb4:	20006d58 	.word	0x20006d58

08028fb8 <__sread>:
 8028fb8:	b510      	push	{r4, lr}
 8028fba:	460c      	mov	r4, r1
 8028fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028fc0:	f000 f894 	bl	80290ec <_read_r>
 8028fc4:	2800      	cmp	r0, #0
 8028fc6:	bfab      	itete	ge
 8028fc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028fca:	89a3      	ldrhlt	r3, [r4, #12]
 8028fcc:	181b      	addge	r3, r3, r0
 8028fce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028fd2:	bfac      	ite	ge
 8028fd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8028fd6:	81a3      	strhlt	r3, [r4, #12]
 8028fd8:	bd10      	pop	{r4, pc}

08028fda <__swrite>:
 8028fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028fde:	461f      	mov	r7, r3
 8028fe0:	898b      	ldrh	r3, [r1, #12]
 8028fe2:	05db      	lsls	r3, r3, #23
 8028fe4:	4605      	mov	r5, r0
 8028fe6:	460c      	mov	r4, r1
 8028fe8:	4616      	mov	r6, r2
 8028fea:	d505      	bpl.n	8028ff8 <__swrite+0x1e>
 8028fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028ff0:	2302      	movs	r3, #2
 8028ff2:	2200      	movs	r2, #0
 8028ff4:	f000 f868 	bl	80290c8 <_lseek_r>
 8028ff8:	89a3      	ldrh	r3, [r4, #12]
 8028ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029002:	81a3      	strh	r3, [r4, #12]
 8029004:	4632      	mov	r2, r6
 8029006:	463b      	mov	r3, r7
 8029008:	4628      	mov	r0, r5
 802900a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802900e:	f000 b817 	b.w	8029040 <_write_r>

08029012 <__sseek>:
 8029012:	b510      	push	{r4, lr}
 8029014:	460c      	mov	r4, r1
 8029016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802901a:	f000 f855 	bl	80290c8 <_lseek_r>
 802901e:	1c43      	adds	r3, r0, #1
 8029020:	89a3      	ldrh	r3, [r4, #12]
 8029022:	bf15      	itete	ne
 8029024:	6560      	strne	r0, [r4, #84]	; 0x54
 8029026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802902a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802902e:	81a3      	strheq	r3, [r4, #12]
 8029030:	bf18      	it	ne
 8029032:	81a3      	strhne	r3, [r4, #12]
 8029034:	bd10      	pop	{r4, pc}

08029036 <__sclose>:
 8029036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802903a:	f000 b813 	b.w	8029064 <_close_r>
	...

08029040 <_write_r>:
 8029040:	b538      	push	{r3, r4, r5, lr}
 8029042:	4d07      	ldr	r5, [pc, #28]	; (8029060 <_write_r+0x20>)
 8029044:	4604      	mov	r4, r0
 8029046:	4608      	mov	r0, r1
 8029048:	4611      	mov	r1, r2
 802904a:	2200      	movs	r2, #0
 802904c:	602a      	str	r2, [r5, #0]
 802904e:	461a      	mov	r2, r3
 8029050:	f7d9 fa11 	bl	8002476 <_write>
 8029054:	1c43      	adds	r3, r0, #1
 8029056:	d102      	bne.n	802905e <_write_r+0x1e>
 8029058:	682b      	ldr	r3, [r5, #0]
 802905a:	b103      	cbz	r3, 802905e <_write_r+0x1e>
 802905c:	6023      	str	r3, [r4, #0]
 802905e:	bd38      	pop	{r3, r4, r5, pc}
 8029060:	20006d60 	.word	0x20006d60

08029064 <_close_r>:
 8029064:	b538      	push	{r3, r4, r5, lr}
 8029066:	4d06      	ldr	r5, [pc, #24]	; (8029080 <_close_r+0x1c>)
 8029068:	2300      	movs	r3, #0
 802906a:	4604      	mov	r4, r0
 802906c:	4608      	mov	r0, r1
 802906e:	602b      	str	r3, [r5, #0]
 8029070:	f7d9 fa1d 	bl	80024ae <_close>
 8029074:	1c43      	adds	r3, r0, #1
 8029076:	d102      	bne.n	802907e <_close_r+0x1a>
 8029078:	682b      	ldr	r3, [r5, #0]
 802907a:	b103      	cbz	r3, 802907e <_close_r+0x1a>
 802907c:	6023      	str	r3, [r4, #0]
 802907e:	bd38      	pop	{r3, r4, r5, pc}
 8029080:	20006d60 	.word	0x20006d60

08029084 <_fstat_r>:
 8029084:	b538      	push	{r3, r4, r5, lr}
 8029086:	4d07      	ldr	r5, [pc, #28]	; (80290a4 <_fstat_r+0x20>)
 8029088:	2300      	movs	r3, #0
 802908a:	4604      	mov	r4, r0
 802908c:	4608      	mov	r0, r1
 802908e:	4611      	mov	r1, r2
 8029090:	602b      	str	r3, [r5, #0]
 8029092:	f7d9 fa18 	bl	80024c6 <_fstat>
 8029096:	1c43      	adds	r3, r0, #1
 8029098:	d102      	bne.n	80290a0 <_fstat_r+0x1c>
 802909a:	682b      	ldr	r3, [r5, #0]
 802909c:	b103      	cbz	r3, 80290a0 <_fstat_r+0x1c>
 802909e:	6023      	str	r3, [r4, #0]
 80290a0:	bd38      	pop	{r3, r4, r5, pc}
 80290a2:	bf00      	nop
 80290a4:	20006d60 	.word	0x20006d60

080290a8 <_isatty_r>:
 80290a8:	b538      	push	{r3, r4, r5, lr}
 80290aa:	4d06      	ldr	r5, [pc, #24]	; (80290c4 <_isatty_r+0x1c>)
 80290ac:	2300      	movs	r3, #0
 80290ae:	4604      	mov	r4, r0
 80290b0:	4608      	mov	r0, r1
 80290b2:	602b      	str	r3, [r5, #0]
 80290b4:	f7d9 fa17 	bl	80024e6 <_isatty>
 80290b8:	1c43      	adds	r3, r0, #1
 80290ba:	d102      	bne.n	80290c2 <_isatty_r+0x1a>
 80290bc:	682b      	ldr	r3, [r5, #0]
 80290be:	b103      	cbz	r3, 80290c2 <_isatty_r+0x1a>
 80290c0:	6023      	str	r3, [r4, #0]
 80290c2:	bd38      	pop	{r3, r4, r5, pc}
 80290c4:	20006d60 	.word	0x20006d60

080290c8 <_lseek_r>:
 80290c8:	b538      	push	{r3, r4, r5, lr}
 80290ca:	4d07      	ldr	r5, [pc, #28]	; (80290e8 <_lseek_r+0x20>)
 80290cc:	4604      	mov	r4, r0
 80290ce:	4608      	mov	r0, r1
 80290d0:	4611      	mov	r1, r2
 80290d2:	2200      	movs	r2, #0
 80290d4:	602a      	str	r2, [r5, #0]
 80290d6:	461a      	mov	r2, r3
 80290d8:	f7d9 fa10 	bl	80024fc <_lseek>
 80290dc:	1c43      	adds	r3, r0, #1
 80290de:	d102      	bne.n	80290e6 <_lseek_r+0x1e>
 80290e0:	682b      	ldr	r3, [r5, #0]
 80290e2:	b103      	cbz	r3, 80290e6 <_lseek_r+0x1e>
 80290e4:	6023      	str	r3, [r4, #0]
 80290e6:	bd38      	pop	{r3, r4, r5, pc}
 80290e8:	20006d60 	.word	0x20006d60

080290ec <_read_r>:
 80290ec:	b538      	push	{r3, r4, r5, lr}
 80290ee:	4d07      	ldr	r5, [pc, #28]	; (802910c <_read_r+0x20>)
 80290f0:	4604      	mov	r4, r0
 80290f2:	4608      	mov	r0, r1
 80290f4:	4611      	mov	r1, r2
 80290f6:	2200      	movs	r2, #0
 80290f8:	602a      	str	r2, [r5, #0]
 80290fa:	461a      	mov	r2, r3
 80290fc:	f7d9 f99e 	bl	800243c <_read>
 8029100:	1c43      	adds	r3, r0, #1
 8029102:	d102      	bne.n	802910a <_read_r+0x1e>
 8029104:	682b      	ldr	r3, [r5, #0]
 8029106:	b103      	cbz	r3, 802910a <_read_r+0x1e>
 8029108:	6023      	str	r3, [r4, #0]
 802910a:	bd38      	pop	{r3, r4, r5, pc}
 802910c:	20006d60 	.word	0x20006d60

08029110 <_init>:
 8029110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029112:	bf00      	nop
 8029114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029116:	bc08      	pop	{r3}
 8029118:	469e      	mov	lr, r3
 802911a:	4770      	bx	lr

0802911c <_fini>:
 802911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802911e:	bf00      	nop
 8029120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029122:	bc08      	pop	{r3}
 8029124:	469e      	mov	lr, r3
 8029126:	4770      	bx	lr
